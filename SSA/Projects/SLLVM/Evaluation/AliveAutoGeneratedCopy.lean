/-
Released under Apache 2.0 license as described in the file LICENSE.
-/

import SSA.Projects.SLLVM.Dialect
import SSA.Projects.SLLVM.Tactic

open LeanMLIR.SLLVM

namespace AliveAutoGenerated
set_option pp.proofs false
set_option pp.proofs.withType false
set_option linter.deprecated false
set_option linter.style.nameCheck false


-- Name:AddSub:1043
-- precondition: true
/-
  %Y = and %Z, C1
  %X = xor %Y, C1
  %LHS = add %X, 1
  %r = add %LHS, %RHS

=>
  %or = or %Z, ~C1
  %Y = and %Z, C1
  %X = xor %Y, C1
  %LHS = add %X, 1
  %r = sub %RHS, %or

-/
def alive_AddSub_1043_src  :=
[sllvm| {
^bb0(%C1 : i64, %Z : i64, %RHS : i64):
  %v1 = llvm.and %Z, %C1 : i64
  %v2 = llvm.xor %v1, %C1 : i64
  %v3 = llvm.mlir.constant 1 : i64
  %v4 = llvm.add %v2, %v3 : i64
  %v5 = llvm.add %v4, %RHS : i64
  llvm.return %v5 : i64
}]

def alive_AddSub_1043_tgt := [sllvm| {
^bb0(%C1 : i64, %Z : i64, %RHS : i64):
  %v1 = llvm.not %C1 : i64
  %v2 = llvm.or %Z, %v1 : i64
  %v3 = llvm.and %Z, %C1 : i64
  %v4 = llvm.xor %v3, %C1 : i64
  %v5 = llvm.mlir.constant 1 : i64
  %v6 = llvm.add %v4, %v5 : i64
  %v7 = llvm.sub %RHS, %v2 : i64
  llvm.return %v7 : i64
}]
theorem alive_AddSub_1043 : alive_AddSub_1043_src  ⊑ alive_AddSub_1043_tgt  := by
  unfold alive_AddSub_1043_src alive_AddSub_1043_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1152
-- precondition: true
/-
  %r = add i1 %x, %y

=>
  %r = xor %x, %y

-/
def alive_AddSub_1152_src   :=
[sllvm| {
^bb0(%y : i1, %x : i1):
  %v1 = llvm.add %x, %y : i1
  llvm.return %v1 : i1
}]

def alive_AddSub_1152_tgt  :=
[sllvm| {
^bb0(%y : i1, %x : i1):
  %v1 = llvm.xor %x, %y : i1
  llvm.return %v1 : i1
}]
theorem alive_AddSub_1152   : alive_AddSub_1152_src ⊑ alive_AddSub_1152_tgt := by
  unfold alive_AddSub_1152_src alive_AddSub_1152_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1156
-- precondition: true
/-
  %a = add %b, %b

=>
  %a = shl %b, 1

-/
def alive_AddSub_1156_src :=
[sllvm| {
^bb0(%b : i64):
  %v1 = llvm.add %b, %b : i64
  llvm.return %v1 : i64
}]

def alive_AddSub_1156_tgt :=
[sllvm| {
^bb0(%b : i64):
  %v1 = llvm.mlir.constant 1 : i64
  %v2 = llvm.shl %b, %v1 : i64
  llvm.return %v2 : i64
}]
theorem alive_AddSub_1156 : alive_AddSub_1156_src ⊑ alive_AddSub_1156_tgt := by
  unfold alive_AddSub_1156_src alive_AddSub_1156_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1164
-- precondition: true
/-
  %na = sub 0, %a
  %c = add %na, %b

=>
  %na = sub 0, %a
  %c = sub %b, %a

-/
def alive_AddSub_1164_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %a : i64
  %v3 = llvm.add %v2, %b : i64
  llvm.return %v3 : i64
}]

def alive_AddSub_1164_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %a : i64
  %v3 = llvm.sub %b, %a : i64
  llvm.return %v3 : i64
}]
theorem alive_AddSub_1164 : alive_AddSub_1164_src ⊑ alive_AddSub_1164_tgt := by
  unfold alive_AddSub_1164_src alive_AddSub_1164_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1165
-- precondition: true
/-
  %na = sub 0, %a
  %nb = sub 0, %b
  %c = add %na, %nb

=>
  %ab = add %a, %b
  %na = sub 0, %a
  %nb = sub 0, %b
  %c = sub 0, %ab

-/
def alive_AddSub_1165_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %a : i64
  %v3 = llvm.mlir.constant 0 : i64
  %v4 = llvm.sub %v3, %b : i64
  %v5 = llvm.add %v2, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AddSub_1165_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.add %a, %b : i64
  %v2 = llvm.mlir.constant 0 : i64
  %v3 = llvm.sub %v2, %a : i64
  %v4 = llvm.mlir.constant 0 : i64
  %v5 = llvm.sub %v4, %b : i64
  %v6 = llvm.mlir.constant 0 : i64
  %v7 = llvm.sub %v6, %v1 : i64
  llvm.return %v7 : i64
}]
theorem alive_AddSub_1165 : alive_AddSub_1165_src ⊑ alive_AddSub_1165_tgt := by
  unfold alive_AddSub_1165_src alive_AddSub_1165_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1176
-- precondition: true
/-
  %nb = sub 0, %b
  %c = add %a, %nb

=>
  %nb = sub 0, %b
  %c = sub %a, %b

-/
def alive_AddSub_1176_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %b : i64
  %v3 = llvm.add %a, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AddSub_1176_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %b : i64
  %v3 = llvm.sub %a, %b : i64
  llvm.return %v3 : i64
}]
theorem alive_AddSub_1176 : alive_AddSub_1176_src ⊑ alive_AddSub_1176_tgt := by
  unfold alive_AddSub_1176_src alive_AddSub_1176_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1202
-- precondition: true
/-
  %nx = xor %x, -1
  %r = add %nx, C

=>
  %nx = xor %x, -1
  %r = sub (C - 1), %x

-/
def alive_AddSub_1202_src :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %x, %v1 : i64
  %v3 = llvm.add %v2, %C : i64
  llvm.return %v3 : i64
}]

def alive_AddSub_1202_tgt :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %x, %v1 : i64
  %v3 = llvm.mlir.constant 1 : i64
  %v4 = llvm.sub %C, %v3 : i64
  %v5 = llvm.sub %v4, %x : i64
  llvm.return %v5 : i64
}]
theorem alive_AddSub_1202 : alive_AddSub_1202_src ⊑ alive_AddSub_1202_tgt := by
  unfold alive_AddSub_1202_src alive_AddSub_1202_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1295
-- precondition: true
/-
  %aab = and %a, %b
  %aob = xor %a, %b
  %c = add %aab, %aob

=>
  %aab = and %a, %b
  %aob = xor %a, %b
  %c = or %a, %b

-/
def alive_AddSub_1295_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.xor %a, %b : i64
  %v3 = llvm.add %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AddSub_1295_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.xor %a, %b : i64
  %v3 = llvm.or %a, %b : i64
  llvm.return %v3 : i64
}]
theorem alive_AddSub_1295 : alive_AddSub_1295_src ⊑ alive_AddSub_1295_tgt := by
  unfold alive_AddSub_1295_src alive_AddSub_1295_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1309
-- precondition: true
/-
  %lhs = and %a, %b
  %rhs = or %a, %b
  %c = add %lhs, %rhs

=>
  %lhs = and %a, %b
  %rhs = or %a, %b
  %c = add %a, %b

-/
def alive_AddSub_1309_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.or %a, %b : i64
  %v3 = llvm.add %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AddSub_1309_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.or %a, %b : i64
  %v3 = llvm.add %a, %b : i64
  llvm.return %v3 : i64
}]
theorem alive_AddSub_1309 : alive_AddSub_1309_src ⊑ alive_AddSub_1309_tgt := by
  unfold alive_AddSub_1309_src alive_AddSub_1309_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1539
-- precondition: true
/-
  %na = sub 0, %a
  %r = sub %x, %na

=>
  %na = sub 0, %a
  %r = add %x, %a

-/
def alive_AddSub_1539_src :=
[sllvm| {
^bb0(%a : i64, %x : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %a : i64
  %v3 = llvm.sub %x, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AddSub_1539_tgt :=
[sllvm| {
^bb0(%a : i64, %x : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %a : i64
  %v3 = llvm.add %x, %a : i64
  llvm.return %v3 : i64
}]
theorem alive_AddSub_1539 : alive_AddSub_1539_src ⊑ alive_AddSub_1539_tgt := by
  unfold alive_AddSub_1539_src alive_AddSub_1539_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1539-2
-- precondition: true
/-
  %r = sub %x, C

=>
  %r = add %x, -C

-/
def alive_AddSub_1539_2_src :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.sub %x, %C : i64
  llvm.return %v1 : i64
}]

def alive_AddSub_1539_2_tgt :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.neg %C : i64
  %v2 = llvm.add %x, %v1 : i64
  llvm.return %v2 : i64
}]
theorem alive_AddSub_1539_2 : alive_AddSub_1539_2_src ⊑ alive_AddSub_1539_2_tgt := by
  unfold alive_AddSub_1539_2_src alive_AddSub_1539_2_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1556
-- precondition: true
/-
  %r = sub i1 %x, %y

=>
  %r = xor %x, %y

-/
def alive_AddSub_1556_src   :=
[sllvm| {
^bb0(%y : i1, %x : i1):
  %v1 = llvm.sub %x, %y : i1
  llvm.return %v1 : i1
}]

def alive_AddSub_1556_tgt  :=
[sllvm| {
^bb0(%y : i1, %x : i1):
  %v1 = llvm.xor %x, %y : i1
  llvm.return %v1 : i1
}]
theorem alive_AddSub_1556   : alive_AddSub_1556_src ⊑ alive_AddSub_1556_tgt := by
  unfold alive_AddSub_1556_src alive_AddSub_1556_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1560
-- precondition: true
/-
  %r = sub -1, %a

=>
  %r = xor %a, -1

-/
def alive_AddSub_1560_src :=
[sllvm| {
^bb0(%a : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.sub %v1, %a : i64
  llvm.return %v2 : i64
}]

def alive_AddSub_1560_tgt :=
[sllvm| {
^bb0(%a : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %a, %v1 : i64
  llvm.return %v2 : i64
}]
theorem alive_AddSub_1560 : alive_AddSub_1560_src ⊑ alive_AddSub_1560_tgt := by
  unfold alive_AddSub_1560_src alive_AddSub_1560_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1564
-- precondition: true
/-
  %nx = xor %x, -1
  %r = sub C, %nx

=>
  %nx = xor %x, -1
  %r = add %x, (C + 1)

-/
def alive_AddSub_1564_src :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %x, %v1 : i64
  %v3 = llvm.sub %C, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AddSub_1564_tgt :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %x, %v1 : i64
  %v3 = llvm.mlir.constant 1 : i64
  %v4 = llvm.add %C, %v3 : i64
  %v5 = llvm.add %x, %v4 : i64
  llvm.return %v5 : i64
}]
theorem alive_AddSub_1564 : alive_AddSub_1564_src ⊑ alive_AddSub_1564_tgt := by
  unfold alive_AddSub_1564_src alive_AddSub_1564_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1574
-- precondition: true
/-
  %rhs = add %X, C2
  %r = sub C, %rhs

=>
  %rhs = add %X, C2
  %r = sub (C - C2), %X

-/
def alive_AddSub_1574_src :=
[sllvm| {
^bb0(%X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.add %X, %C2 : i64
  %v2 = llvm.sub %C, %v1 : i64
  llvm.return %v2 : i64
}]

def alive_AddSub_1574_tgt :=
[sllvm| {
^bb0(%X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.add %X, %C2 : i64
  %v2 = llvm.sub %C, %C2 : i64
  %v3 = llvm.sub %v2, %X : i64
  llvm.return %v3 : i64
}]
theorem alive_AddSub_1574 : alive_AddSub_1574_src ⊑ alive_AddSub_1574_tgt := by
  unfold alive_AddSub_1574_src alive_AddSub_1574_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1614
-- precondition: true
/-
  %Op1 = add %X, %Y
  %r = sub %X, %Op1

=>
  %Op1 = add %X, %Y
  %r = sub 0, %Y

-/
def alive_AddSub_1614_src :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.add %X, %Y : i64
  %v2 = llvm.sub %X, %v1 : i64
  llvm.return %v2 : i64
}]

def alive_AddSub_1614_tgt :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.add %X, %Y : i64
  %v2 = llvm.mlir.constant 0 : i64
  %v3 = llvm.sub %v2, %Y : i64
  llvm.return %v3 : i64
}]
theorem alive_AddSub_1614 : alive_AddSub_1614_src ⊑ alive_AddSub_1614_tgt := by
  unfold alive_AddSub_1614_src alive_AddSub_1614_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1619
-- precondition: true
/-
  %Op0 = sub %X, %Y
  %r = sub %Op0, %X

=>
  %Op0 = sub %X, %Y
  %r = sub 0, %Y

-/
def alive_AddSub_1619_src :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.sub %X, %Y : i64
  %v2 = llvm.sub %v1, %X : i64
  llvm.return %v2 : i64
}]

def alive_AddSub_1619_tgt :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.sub %X, %Y : i64
  %v2 = llvm.mlir.constant 0 : i64
  %v3 = llvm.sub %v2, %Y : i64
  llvm.return %v3 : i64
}]
theorem alive_AddSub_1619 : alive_AddSub_1619_src ⊑ alive_AddSub_1619_tgt := by
  unfold alive_AddSub_1619_src alive_AddSub_1619_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AddSub:1624
-- precondition: true
/-
  %Op0 = or %A, %B
  %Op1 = xor %A, %B
  %r = sub %Op0, %Op1

=>
  %Op0 = or %A, %B
  %Op1 = xor %A, %B
  %r = and %A, %B

-/
def alive_AddSub_1624_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.or %A, %B : i64
  %v2 = llvm.xor %A, %B : i64
  %v3 = llvm.sub %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AddSub_1624_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.or %A, %B : i64
  %v2 = llvm.xor %A, %B : i64
  %v3 = llvm.and %A, %B : i64
  llvm.return %v3 : i64
}]
theorem alive_AddSub_1624 : alive_AddSub_1624_src ⊑ alive_AddSub_1624_tgt := by
  unfold alive_AddSub_1624_src alive_AddSub_1624_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:135
-- precondition: true
/-
  %op = xor %X, C1
  %r = and %op, C2

=>
  %a = and %X, C2
  %op = xor %X, C1
  %r = xor %a, (C1 & C2)

-/
def alive_AndOrXor_135_src :=
[sllvm| {
^bb0(%X : i64, %C1 : i64, %C2 : i64):
  %v1 = llvm.xor %X, %C1 : i64
  %v2 = llvm.and %v1, %C2 : i64
  llvm.return %v2 : i64
}]

def alive_AndOrXor_135_tgt :=
[sllvm| {
^bb0(%X : i64, %C1 : i64, %C2 : i64):
  %v1 = llvm.and %X, %C2 : i64
  %v2 = llvm.xor %X, %C1 : i64
  %v3 = llvm.and %C1, %C2 : i64
  %v4 = llvm.xor %v1, %v3 : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_135 : alive_AndOrXor_135_src ⊑ alive_AndOrXor_135_tgt := by
  unfold alive_AndOrXor_135_src alive_AndOrXor_135_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:144
-- precondition: true
/-
  %op = or %X, C1
  %r = and %op, C2

=>
  %o = or %X, (C1 & C2)
  %op = or %X, C1
  %r = and %o, C2

-/
def alive_AndOrXor_144_src :=
[sllvm| {
^bb0(%X : i64, %C1 : i64, %C2 : i64):
  %v1 = llvm.or %X, %C1 : i64
  %v2 = llvm.and %v1, %C2 : i64
  llvm.return %v2 : i64
}]

def alive_AndOrXor_144_tgt :=
[sllvm| {
^bb0(%X : i64, %C1 : i64, %C2 : i64):
  %v1 = llvm.and %C1, %C2 : i64
  %v2 = llvm.or %X, %v1 : i64
  %v3 = llvm.or %X, %C1 : i64
  %v4 = llvm.and %v2, %C2 : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_144 : alive_AndOrXor_144_src ⊑ alive_AndOrXor_144_tgt := by
  unfold alive_AndOrXor_144_src alive_AndOrXor_144_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:698
-- precondition: true
/-
  %a1 = and %a, %b
  %a2 = and %a, %d
  %op0 = icmp eq %a1, 0
  %op1 = icmp eq %a2, 0
  %r = and %op0, %op1

=>
  %or = or %b, %d
  %a3 = and %a, %or
  %a1 = and %a, %b
  %a2 = and %a, %d
  %op0 = icmp eq %a1, 0
  %op1 = icmp eq %a2, 0
  %r = icmp eq %a3, 0

-/
-- MANUAL FIX: the translation script inferred some of the resulting types to be `i1`
-- where they should be the meta-variable `_` (https://github.com/opencompl/ssa/issues/169)
def alive_AndOrXor_698_src :=
[sllvm| {
^bb0(%a : i64, %b : i64, %d : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.and %a, %d : i64
  %v3 = llvm.mlir.constant 0 : i64
  %v4 = llvm.icmp.eq %v1, %v3 : i64
  %v5 = llvm.mlir.constant 0 : i64
  %v6 = llvm.icmp.eq %v2, %v5 : i64
  %v7 = llvm.and %v4, %v6 : i1
  llvm.return %v7 : i1
}]

def alive_AndOrXor_698_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64, %d : i64):
  %v1 = llvm.or %b, %d : i64
  %v2 = llvm.and %a, %v1 : i64
  %v3 = llvm.and %a, %b : i64
  %v4 = llvm.and %a, %d : i64
  %v5 = llvm.mlir.constant 0 : i64
  %v6 = llvm.icmp.eq %v3, %v5 : i64
  %v7 = llvm.mlir.constant 0 : i64
  %v8 = llvm.icmp.eq %v4, %v7 : i64
  %v9 = llvm.mlir.constant 0 : i64
  %v10 = llvm.icmp.eq %v2, %v9 : i64
  llvm.return %v10 : i1
}]
theorem alive_AndOrXor_698 : alive_AndOrXor_698_src ⊑ alive_AndOrXor_698_tgt := by
  unfold alive_AndOrXor_698_src alive_AndOrXor_698_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:709
-- precondition: true
/-
  %a1 = and %a, %b
  %a2 = and %a, %d
  %op0 = icmp eq %a1, %b
  %op1 = icmp eq %a2, %d
  %r = and %op0, %op1

=>
  %or = or %b, %d
  %a3 = and %a, %or
  %a1 = and %a, %b
  %a2 = and %a, %d
  %op0 = icmp eq %a1, %b
  %op1 = icmp eq %a2, %d
  %r = icmp eq %a3, %or

-/
def alive_AndOrXor_709_src :=
[sllvm| {
^bb0(%a : i64, %b : i64, %d : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.and %a, %d : i64
  %v3 = llvm.icmp.eq %v1, %b : i64
  %v4 = llvm.icmp.eq %v2, %d : i64
  %v5 = llvm.and %v3, %v4 : i1
  llvm.return %v5 : i1
}]

def alive_AndOrXor_709_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64, %d : i64):
  %v1 = llvm.or %b, %d : i64
  %v2 = llvm.and %a, %v1 : i64
  %v3 = llvm.and %a, %b : i64
  %v4 = llvm.and %a, %d : i64
  %v5 = llvm.icmp.eq %v3, %b : i64
  %v6 = llvm.icmp.eq %v4, %d : i64
  %v7 = llvm.icmp.eq %v2, %v1 : i64
  llvm.return %v7 : i1
}]
theorem alive_AndOrXor_709 : alive_AndOrXor_709_src ⊑ alive_AndOrXor_709_tgt := by
  unfold alive_AndOrXor_709_src alive_AndOrXor_709_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:716
-- precondition: true
/-
  %a1 = and %a, %b
  %a2 = and %a, %d
  %op0 = icmp eq %a1, %a
  %op1 = icmp eq %a2, %a
  %r = and %op0, %op1

=>
  %a4 = and %b, %d
  %a3 = and %a, %a4
  %a1 = and %a, %b
  %a2 = and %a, %d
  %op0 = icmp eq %a1, %a
  %op1 = icmp eq %a2, %a
  %r = icmp eq %a3, %a

-/
def alive_AndOrXor_716_src :=
[sllvm| {
^bb0(%a : i64, %b : i64, %d : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.and %a, %d : i64
  %v3 = llvm.icmp.eq %v1, %a : i64
  %v4 = llvm.icmp.eq %v2, %a : i64
  %v5 = llvm.and %v3, %v4 : i1
  llvm.return %v5 : i1
}]

def alive_AndOrXor_716_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64, %d : i64):
  %v1 = llvm.and %b, %d : i64
  %v2 = llvm.and %a, %v1 : i64
  %v3 = llvm.and %a, %b : i64
  %v4 = llvm.and %a, %d : i64
  %v5 = llvm.icmp.eq %v3, %a : i64
  %v6 = llvm.icmp.eq %v4, %a : i64
  %v7 = llvm.icmp.eq %v2, %a : i64
  llvm.return %v7 : i1
}]
theorem alive_AndOrXor_716 : alive_AndOrXor_716_src ⊑ alive_AndOrXor_716_tgt := by
  unfold alive_AndOrXor_716_src alive_AndOrXor_716_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:794
-- precondition: true
/-
  %op0 = icmp sgt %a, %b
  %op1 = icmp ne %a, %b
  %r = and %op0, %op1

=>
  %op0 = icmp sgt %a, %b
  %op1 = icmp ne %a, %b
  %r = icmp sgt %a, %b

-/
def alive_AndOrXor_794_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.icmp.sgt %a, %b : i64
  %v2 = llvm.icmp.ne %a, %b : i64
  %v3 = llvm.and %v1, %v2 : i1
  llvm.return %v3 : i1
}]

def alive_AndOrXor_794_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.icmp.sgt %a, %b : i64
  %v2 = llvm.icmp.ne %a, %b : i64
  %v3 = llvm.icmp.sgt %a, %b : i64
  llvm.return %v3 : i1
}]
theorem alive_AndOrXor_794 : alive_AndOrXor_794_src ⊑ alive_AndOrXor_794_tgt := by
  unfold alive_AndOrXor_794_src alive_AndOrXor_794_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:827
-- precondition: true
/-
  %op0 = icmp eq %a, 0
  %op1 = icmp eq %b, 0
  %r = and %op0, %op1

=>
  %o = or %a, %b
  %op0 = icmp eq %a, 0
  %op1 = icmp eq %b, 0
  %r = icmp eq %o, 0

-/
-- MANUAL FIX (https://github.com/opencompl/ssa/issues/169)
def alive_AndOrXor_827_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.icmp.eq %a, %v1 : i64
  %v3 = llvm.mlir.constant 0 : i64
  %v4 = llvm.icmp.eq %b, %v3 : i64
  %v5 = llvm.and %v2, %v4 : i1
  llvm.return %v5 : i1
}]

def alive_AndOrXor_827_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.or %a, %b : i64
  %v2 = llvm.mlir.constant 0 : i64
  %v3 = llvm.icmp.eq %a, %v2 : i64
  %v4 = llvm.mlir.constant 0 : i64
  %v5 = llvm.icmp.eq %b, %v4 : i64
  %v6 = llvm.mlir.constant 0 : i64
  %v7 = llvm.icmp.eq %v1, %v6 : i64
  llvm.return %v7 : i1
}]
theorem alive_AndOrXor_827 : alive_AndOrXor_827_src ⊑ alive_AndOrXor_827_tgt := by
  unfold alive_AndOrXor_827_src alive_AndOrXor_827_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:887-2
-- precondition: true
/-
  %op0 = icmp eq %a, C1
  %op1 = icmp ne %a, C1
  %r = and %op0, %op1

=>
  %op0 = icmp eq %a, C1
  %op1 = icmp ne %a, C1
  %r = false

-/
def alive_AndOrXor_887_2_src :=
[sllvm| {
^bb0(%a : i64, %C1 : i64):
  %v1 = llvm.icmp.eq %a, %C1 : i64
  %v2 = llvm.icmp.ne %a, %C1 : i64
  %v3 = llvm.and %v1, %v2 : i1
  llvm.return %v3 : i1
}]

def alive_AndOrXor_887_2_tgt :=
[sllvm| {
^bb0(%a : i64, %C1 : i64):
  %v1 = llvm.icmp.eq %a, %C1 : i64
  %v2 = llvm.icmp.ne %a, %C1 : i64
  %v3 = llvm.mlir.constant 0 :  i1
  %v4 = llvm.copy %v3 : i1
  llvm.return %v4 : i1
}]
theorem alive_AndOrXor_887_2 : alive_AndOrXor_887_2_src ⊑ alive_AndOrXor_887_2_tgt := by
  unfold alive_AndOrXor_887_2_src alive_AndOrXor_887_2_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1230  ~A & ~B -> ~(A | B)
-- precondition: true
/-
  %op0 = xor %notOp0, -1
  %op1 = xor %notOp1, -1
  %r = and %op0, %op1

=>
  %or = or %notOp0, %notOp1
  %op0 = xor %notOp0, -1
  %op1 = xor %notOp1, -1
  %r = xor %or, -1

-/
def alive_AndOrXor_1230__A__B___A__B_src :=
[sllvm| {
^bb0(%notOp0 : i64, %notOp1 : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %notOp0, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %notOp1, %v3 : i64
  %v5 = llvm.and %v2, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_1230__A__B___A__B_tgt :=
[sllvm| {
^bb0(%notOp0 : i64, %notOp1 : i64):
  %v1 = llvm.or %notOp0, %notOp1 : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %notOp0, %v2 : i64
  %v4 = llvm.mlir.constant -1 : i64
  %v5 = llvm.xor %notOp1, %v4 : i64
  %v6 = llvm.mlir.constant -1 : i64
  %v7 = llvm.xor %v1, %v6 : i64
  llvm.return %v7 : i64
}]
theorem alive_AndOrXor_1230__A__B___A__B : alive_AndOrXor_1230__A__B___A__B_src ⊑ alive_AndOrXor_1230__A__B___A__B_tgt := by
  unfold alive_AndOrXor_1230__A__B___A__B_src alive_AndOrXor_1230__A__B___A__B_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1241 (A|B) & ~(A&B) => A^B
-- precondition: true
/-
  %op0 = or %A, %B
  %notOp1 = and %A, %B
  %op1 = xor %notOp1, -1
  %r = and %op0, %op1

=>
  %op0 = or %A, %B
  %notOp1 = and %A, %B
  %op1 = xor %notOp1, -1
  %r = xor %A, %B

-/
def alive_AndOrXor_1241_AB__AB__AB_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.or %A, %B : i64
  %v2 = llvm.and %A, %B : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %v2, %v3 : i64
  %v5 = llvm.and %v1, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_1241_AB__AB__AB_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.or %A, %B : i64
  %v2 = llvm.and %A, %B : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %v2, %v3 : i64
  %v5 = llvm.xor %A, %B : i64
  llvm.return %v5 : i64
}]
theorem alive_AndOrXor_1241_AB__AB__AB : alive_AndOrXor_1241_AB__AB__AB_src ⊑ alive_AndOrXor_1241_AB__AB__AB_tgt := by
  unfold alive_AndOrXor_1241_AB__AB__AB_src alive_AndOrXor_1241_AB__AB__AB_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1247 ~(A&B) & (A|B) => A^B
-- precondition: true
/-
  %notOp0 = and %A, %B
  %op0 = xor %notOp0, -1
  %op1 = or %A, %B
  %r = and %op0, %op1

=>
  %notOp0 = and %A, %B
  %op0 = xor %notOp0, -1
  %op1 = or %A, %B
  %r = xor %A, %B

-/
def alive_AndOrXor_1247_AB__AB__AB_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.and %A, %B : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %v1, %v2 : i64
  %v4 = llvm.or %A, %B : i64
  %v5 = llvm.and %v3, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_1247_AB__AB__AB_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.and %A, %B : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %v1, %v2 : i64
  %v4 = llvm.or %A, %B : i64
  %v5 = llvm.xor %A, %B : i64
  llvm.return %v5 : i64
}]
theorem alive_AndOrXor_1247_AB__AB__AB : alive_AndOrXor_1247_AB__AB__AB_src ⊑ alive_AndOrXor_1247_AB__AB__AB_tgt := by
  unfold alive_AndOrXor_1247_AB__AB__AB_src alive_AndOrXor_1247_AB__AB__AB_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1253 A & (A^B) -> A & ~B
-- precondition: true
/-
  %op0 = xor %A, %B
  %r = and %op0, %A

=>
  %notB = xor %B, -1
  %op0 = xor %A, %B
  %r = and %A, %notB

-/
def alive_AndOrXor_1253_A__AB___A__B_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.xor %A, %B : i64
  %v2 = llvm.and %v1, %A : i64
  llvm.return %v2 : i64
}]

def alive_AndOrXor_1253_A__AB___A__B_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %B, %v1 : i64
  %v3 = llvm.xor %A, %B : i64
  %v4 = llvm.and %A, %v2 : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_1253_A__AB___A__B : alive_AndOrXor_1253_A__AB___A__B_src ⊑ alive_AndOrXor_1253_A__AB___A__B_tgt := by
  unfold alive_AndOrXor_1253_A__AB___A__B_src alive_AndOrXor_1253_A__AB___A__B_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1280 (~A|B)&A -> A&B
-- precondition: true
/-
  %nA = xor %A, -1
  %op0 = or %nA, %B
  %r = and %op0, %A

=>
  %nA = xor %A, -1
  %op0 = or %nA, %B
  %r = and %A, %B

-/
def alive_AndOrXor_1280_ABA___AB_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %A, %v1 : i64
  %v3 = llvm.or %v2, %B : i64
  %v4 = llvm.and %v3, %A : i64
  llvm.return %v4 : i64
}]

def alive_AndOrXor_1280_ABA___AB_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %A, %v1 : i64
  %v3 = llvm.or %v2, %B : i64
  %v4 = llvm.and %A, %B : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_1280_ABA___AB : alive_AndOrXor_1280_ABA___AB_src ⊑ alive_AndOrXor_1280_ABA___AB_tgt := by
  unfold alive_AndOrXor_1280_ABA___AB_src alive_AndOrXor_1280_ABA___AB_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1288 (A ^ B) & ((B ^ C) ^ A) -> (A ^ B) & ~C
-- precondition: true
/-
  %op0 = xor %A, %B
  %x = xor %B, %C
  %op1 = xor %x, %A
  %r = and %op0, %op1

=>
  %op0 = xor %A, %B
  %negC = xor %C, -1
  %x = xor %B, %C
  %op1 = xor %x, %A
  %r = and %op0, %negC

-/
def alive_AndOrXor_1288_A__B__B__C__A___A__B__C_src :=
[sllvm| {
^bb0(%A : i64, %C : i64, %B : i64):
  %v1 = llvm.xor %A, %B : i64
  %v2 = llvm.xor %B, %C : i64
  %v3 = llvm.xor %v2, %A : i64
  %v4 = llvm.and %v1, %v3 : i64
  llvm.return %v4 : i64
}]

def alive_AndOrXor_1288_A__B__B__C__A___A__B__C_tgt :=
[sllvm| {
^bb0(%A : i64, %C : i64, %B : i64):
  %v1 = llvm.xor %A, %B : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %C, %v2 : i64
  %v4 = llvm.xor %B, %C : i64
  %v5 = llvm.xor %v4, %A : i64
  %v6 = llvm.and %v1, %v3 : i64
  llvm.return %v6 : i64
}]
theorem alive_AndOrXor_1288_A__B__B__C__A___A__B__C : alive_AndOrXor_1288_A__B__B__C__A___A__B__C_src ⊑ alive_AndOrXor_1288_A__B__B__C__A___A__B__C_tgt := by
  unfold alive_AndOrXor_1288_A__B__B__C__A___A__B__C_src alive_AndOrXor_1288_A__B__B__C__A___A__B__C_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1294 (A | B) & ((~A) ^ B) -> (A & B)
-- precondition: true
/-
  %op0 = or %A, %B
  %x = xor %A, -1
  %op1 = xor %x, %B
  %r = and %op0, %op1

=>
  %op0 = or %A, %B
  %x = xor %A, -1
  %op1 = xor %x, %B
  %r = and %A, %B

-/
def alive_AndOrXor_1294_A__B__A__B___A__B_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.or %A, %B : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %A, %v2 : i64
  %v4 = llvm.xor %v3, %B : i64
  %v5 = llvm.and %v1, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_1294_A__B__A__B___A__B_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.or %A, %B : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %A, %v2 : i64
  %v4 = llvm.xor %v3, %B : i64
  %v5 = llvm.and %A, %B : i64
  llvm.return %v5 : i64
}]
theorem alive_AndOrXor_1294_A__B__A__B___A__B : alive_AndOrXor_1294_A__B__A__B___A__B_src ⊑ alive_AndOrXor_1294_A__B__A__B___A__B_tgt := by
  unfold alive_AndOrXor_1294_A__B__A__B___A__B_src alive_AndOrXor_1294_A__B__A__B___A__B_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1683-1
-- precondition: true
/-
  %op0 = icmp ugt %a, %b
  %op1 = icmp eq %a, %b
  %r = or %op0, %op1

=>
  %op0 = icmp ugt %a, %b
  %op1 = icmp eq %a, %b
  %r = icmp uge %a, %b

-/
def alive_AndOrXor_1683_1_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.icmp.ugt %a, %b : i64
  %v2 = llvm.icmp.eq %a, %b : i64
  %v3 = llvm.or %v1, %v2 : i1
  llvm.return %v3 : i1
}]

def alive_AndOrXor_1683_1_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.icmp.ugt %a, %b : i64
  %v2 = llvm.icmp.eq %a, %b : i64
  %v3 = llvm.icmp.uge %a, %b : i64
  llvm.return %v3 : i1
}]
theorem alive_AndOrXor_1683_1 : alive_AndOrXor_1683_1_src ⊑ alive_AndOrXor_1683_1_tgt := by
  unfold alive_AndOrXor_1683_1_src alive_AndOrXor_1683_1_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1683-2
-- precondition: true
/-
  %op0 = icmp uge %a, %b
  %op1 = icmp ne %a, %b
  %r = or %op0, %op1

=>
  %op0 = icmp uge %a, %b
  %op1 = icmp ne %a, %b
  %r = true

-/
def alive_AndOrXor_1683_2_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.icmp.uge %a, %b : i64
  %v2 = llvm.icmp.ne %a, %b : i64
  %v3 = llvm.or %v1, %v2 : i1
  llvm.return %v3 : i1
}]

def alive_AndOrXor_1683_2_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.icmp.uge %a, %b : i64
  %v2 = llvm.icmp.ne %a, %b : i64
  %v3 = llvm.mlir.constant 1 :  i1
  %v4 = llvm.copy %v3 : i1
  llvm.return %v4 : i1
}]
theorem alive_AndOrXor_1683_2 : alive_AndOrXor_1683_2_src ⊑ alive_AndOrXor_1683_2_tgt := by
  unfold alive_AndOrXor_1683_2_src alive_AndOrXor_1683_2_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1704
-- precondition: true
/-
  %cmp1 = icmp eq %B, 0
  %cmp2 = icmp ult %A, %B
  %r = or %cmp1, %cmp2

=>
  %b1 = add %B, -1
  %cmp1 = icmp eq %B, 0
  %cmp2 = icmp ult %A, %B
  %r = icmp uge %b1, %A

-/
-- MANUAL FIX (https://github.com/opencompl/ssa/issues/169)
def alive_AndOrXor_1704_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.icmp.eq %B, %v1 : i64
  %v3 = llvm.icmp.ult %A, %B : i64
  %v4 = llvm.or %v2, %v3 : i1
  llvm.return %v4 : i1
}]

def alive_AndOrXor_1704_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.add %B, %v1 : i64
  %v3 = llvm.mlir.constant 0 : i64
  %v4 = llvm.icmp.eq %B, %v3 : i64
  %v5 = llvm.icmp.ult %A, %B : i64
  %v6 = llvm.icmp.uge %v2, %A : i64
  llvm.return %v6 : i1
}]
theorem alive_AndOrXor_1704 : alive_AndOrXor_1704_src ⊑ alive_AndOrXor_1704_tgt := by
  unfold alive_AndOrXor_1704_src alive_AndOrXor_1704_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1705
-- precondition: true
/-
  %cmp1 = icmp eq %B, 0
  %cmp2 = icmp ugt %B, %A
  %r = or %cmp1, %cmp2

=>
  %b1 = add %B, -1
  %cmp1 = icmp eq %B, 0
  %cmp2 = icmp ugt %B, %A
  %r = icmp uge %b1, %A

-/
-- MANUAL FIX (https://github.com/opencompl/ssa/issues/169)
def alive_AndOrXor_1705_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.icmp.eq %B, %v1 : i64
  %v3 = llvm.icmp.ugt %B, %A : i64
  %v4 = llvm.or %v2, %v3 : i1
  llvm.return %v4 : i1
}]

def alive_AndOrXor_1705_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.add %B, %v1 : i64
  %v3 = llvm.mlir.constant 0 : i64
  %v4 = llvm.icmp.eq %B, %v3 : i64
  %v5 = llvm.icmp.ugt %B, %A : i64
  %v6 = llvm.icmp.uge %v2, %A : i64
  llvm.return %v6 : i1
}]
theorem alive_AndOrXor_1705 : alive_AndOrXor_1705_src ⊑ alive_AndOrXor_1705_tgt := by
  unfold alive_AndOrXor_1705_src alive_AndOrXor_1705_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:1733
-- precondition: true
/-
  %cmp1 = icmp ne %A, 0
  %cmp2 = icmp ne %B, 0
  %r = or %cmp1, %cmp2

=>
  %or = or %A, %B
  %cmp1 = icmp ne %A, 0
  %cmp2 = icmp ne %B, 0
  %r = icmp ne %or, 0

-/
-- MANUAL FIX (https://github.com/opencompl/ssa/issues/169)
def alive_AndOrXor_1733_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.icmp.ne %A, %v1 : i64
  %v3 = llvm.mlir.constant 0 : i64
  %v4 = llvm.icmp.ne %B, %v3 : i64
  %v5 = llvm.or %v2, %v4 : i1
  llvm.return %v5 : i1
}]

def alive_AndOrXor_1733_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.or %A, %B : i64
  %v2 = llvm.mlir.constant 0 : i64
  %v3 = llvm.icmp.ne %A, %v2 : i64
  %v4 = llvm.mlir.constant 0 : i64
  %v5 = llvm.icmp.ne %B, %v4 : i64
  %v6 = llvm.mlir.constant 0 : i64
  %v7 = llvm.icmp.ne %v1, %v6 : i64
  llvm.return %v7 : i1
}]
theorem alive_AndOrXor_1733 : alive_AndOrXor_1733_src ⊑ alive_AndOrXor_1733_tgt := by
  unfold alive_AndOrXor_1733_src alive_AndOrXor_1733_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2063  (X ^ C1) | C2 --> (X | C2) ^ (C1 & ~C2)
-- precondition: true
/-
  %op0 = xor %x, C1
  %r = or %op0, C

=>
  %or = or %x, C
  %op0 = xor %x, C1
  %r = xor %or, (C1 & ~C)

-/
def alive_AndOrXor_2063__X__C1__C2____X__C2__C1__C2_src :=
[sllvm| {
^bb0(%x : i64, %C1 : i64, %C : i64):
  %v1 = llvm.xor %x, %C1 : i64
  %v2 = llvm.or %v1, %C : i64
  llvm.return %v2 : i64
}]

def alive_AndOrXor_2063__X__C1__C2____X__C2__C1__C2_tgt :=
[sllvm| {
^bb0(%x : i64, %C1 : i64, %C : i64):
  %v1 = llvm.or %x, %C : i64
  %v2 = llvm.xor %x, %C1 : i64
  %v3 = llvm.not %C : i64
  %v4 = llvm.and %C1, %v3 : i64
  %v5 = llvm.xor %v1, %v4 : i64
  llvm.return %v5 : i64
}]
theorem alive_AndOrXor_2063__X__C1__C2____X__C2__C1__C2 : alive_AndOrXor_2063__X__C1__C2____X__C2__C1__C2_src ⊑ alive_AndOrXor_2063__X__C1__C2____X__C2__C1__C2_tgt := by
  unfold alive_AndOrXor_2063__X__C1__C2____X__C2__C1__C2_src alive_AndOrXor_2063__X__C1__C2____X__C2__C1__C2_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2113   ((~A & B) | A) -> (A | B)
-- precondition: true
/-
  %negA = xor %A, -1
  %op0 = and %negA, %B
  %r = or %op0, %A

=>
  %negA = xor %A, -1
  %op0 = and %negA, %B
  %r = or %A, %B

-/
def alive_AndOrXor_2113___A__B__A___A__B_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %A, %v1 : i64
  %v3 = llvm.and %v2, %B : i64
  %v4 = llvm.or %v3, %A : i64
  llvm.return %v4 : i64
}]

def alive_AndOrXor_2113___A__B__A___A__B_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %A, %v1 : i64
  %v3 = llvm.and %v2, %B : i64
  %v4 = llvm.or %A, %B : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_2113___A__B__A___A__B : alive_AndOrXor_2113___A__B__A___A__B_src ⊑ alive_AndOrXor_2113___A__B__A___A__B_tgt := by
  unfold alive_AndOrXor_2113___A__B__A___A__B_src alive_AndOrXor_2113___A__B__A___A__B_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2118   ((A & B) | ~A) -> (~A | B)
-- precondition: true
/-
  %negA = xor %A, -1
  %op0 = and %A, %B
  %r = or %op0, %negA

=>
  %negA = xor %A, -1
  %op0 = and %A, %B
  %r = or %negA, %B

-/
def alive_AndOrXor_2118___A__B__A___A__B_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %A, %v1 : i64
  %v3 = llvm.and %A, %B : i64
  %v4 = llvm.or %v3, %v2 : i64
  llvm.return %v4 : i64
}]

def alive_AndOrXor_2118___A__B__A___A__B_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %A, %v1 : i64
  %v3 = llvm.and %A, %B : i64
  %v4 = llvm.or %v2, %B : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_2118___A__B__A___A__B : alive_AndOrXor_2118___A__B__A___A__B_src ⊑ alive_AndOrXor_2118___A__B__A___A__B_tgt := by
  unfold alive_AndOrXor_2118___A__B__A___A__B_src alive_AndOrXor_2118___A__B__A___A__B_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2123   (A & (~B)) | (A ^ B) -> (A ^ B)
-- precondition: true
/-
  %negB = xor %B, -1
  %op0 = and %A, %negB
  %op1 = xor %A, %B
  %r = or %op0, %op1

=>
  %negB = xor %B, -1
  %op0 = and %A, %negB
  %op1 = xor %A, %B
  %r = xor %A, %B

-/
def alive_AndOrXor_2123___A__B__A__B___A__B_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %B, %v1 : i64
  %v3 = llvm.and %A, %v2 : i64
  %v4 = llvm.xor %A, %B : i64
  %v5 = llvm.or %v3, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_2123___A__B__A__B___A__B_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %B, %v1 : i64
  %v3 = llvm.and %A, %v2 : i64
  %v4 = llvm.xor %A, %B : i64
  %v5 = llvm.xor %A, %B : i64
  llvm.return %v5 : i64
}]
theorem alive_AndOrXor_2123___A__B__A__B___A__B : alive_AndOrXor_2123___A__B__A__B___A__B_src ⊑ alive_AndOrXor_2123___A__B__A__B___A__B_tgt := by
  unfold alive_AndOrXor_2123___A__B__A__B___A__B_src alive_AndOrXor_2123___A__B__A__B___A__B_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2188
-- precondition: true
/-
  %C = xor %D, -1
  %B = xor %A, -1
  %op0 = and %A, %C
  %op1 = and %B, %D
  %r = or %op0, %op1

=>
  %C = xor %D, -1
  %B = xor %A, -1
  %op0 = and %A, %C
  %op1 = and %B, %D
  %r = xor %A, %D

-/
def alive_AndOrXor_2188_src :=
[sllvm| {
^bb0(%A : i64, %D : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %D, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %A, %v3 : i64
  %v5 = llvm.and %A, %v2 : i64
  %v6 = llvm.and %v4, %D : i64
  %v7 = llvm.or %v5, %v6 : i64
  llvm.return %v7 : i64
}]

def alive_AndOrXor_2188_tgt :=
[sllvm| {
^bb0(%A : i64, %D : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %D, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %A, %v3 : i64
  %v5 = llvm.and %A, %v2 : i64
  %v6 = llvm.and %v4, %D : i64
  %v7 = llvm.xor %A, %D : i64
  llvm.return %v7 : i64
}]
theorem alive_AndOrXor_2188 : alive_AndOrXor_2188_src ⊑ alive_AndOrXor_2188_tgt := by
  unfold alive_AndOrXor_2188_src alive_AndOrXor_2188_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2231  (A ^ B) | ((B ^ C) ^ A) -> (A ^ B) | C
-- precondition: true
/-
  %op0 = xor %A, %B
  %x = xor %B, %C
  %op1 = xor %x, %A
  %r = or %op0, %op1

=>
  %op0 = xor %A, %B
  %x = xor %B, %C
  %op1 = xor %x, %A
  %r = or %op0, %C

-/
def alive_AndOrXor_2231__A__B__B__C__A___A__B__C_src :=
[sllvm| {
^bb0(%A : i64, %C : i64, %B : i64):
  %v1 = llvm.xor %A, %B : i64
  %v2 = llvm.xor %B, %C : i64
  %v3 = llvm.xor %v2, %A : i64
  %v4 = llvm.or %v1, %v3 : i64
  llvm.return %v4 : i64
}]

def alive_AndOrXor_2231__A__B__B__C__A___A__B__C_tgt :=
[sllvm| {
^bb0(%A : i64, %C : i64, %B : i64):
  %v1 = llvm.xor %A, %B : i64
  %v2 = llvm.xor %B, %C : i64
  %v3 = llvm.xor %v2, %A : i64
  %v4 = llvm.or %v1, %C : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_2231__A__B__B__C__A___A__B__C : alive_AndOrXor_2231__A__B__B__C__A___A__B__C_src ⊑ alive_AndOrXor_2231__A__B__B__C__A___A__B__C_tgt := by
  unfold alive_AndOrXor_2231__A__B__B__C__A___A__B__C_src alive_AndOrXor_2231__A__B__B__C__A___A__B__C_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2243  ((B | C) & A) | B -> B | (A & C)
-- precondition: true
/-
  %o = or %B, %C
  %op0 = and %o, %A
  %r = or %op0, %B

=>
  %a = and %A, %C
  %o = or %B, %C
  %op0 = and %o, %A
  %r = or %B, %a

-/
def alive_AndOrXor_2243__B__C__A__B___B__A__C_src :=
[sllvm| {
^bb0(%A : i64, %C : i64, %B : i64):
  %v1 = llvm.or %B, %C : i64
  %v2 = llvm.and %v1, %A : i64
  %v3 = llvm.or %v2, %B : i64
  llvm.return %v3 : i64
}]

def alive_AndOrXor_2243__B__C__A__B___B__A__C_tgt :=
[sllvm| {
^bb0(%A : i64, %C : i64, %B : i64):
  %v1 = llvm.and %A, %C : i64
  %v2 = llvm.or %B, %C : i64
  %v3 = llvm.and %v2, %A : i64
  %v4 = llvm.or %B, %v1 : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_2243__B__C__A__B___B__A__C : alive_AndOrXor_2243__B__C__A__B___B__A__C_src ⊑ alive_AndOrXor_2243__B__C__A__B___B__A__C_tgt := by
  unfold alive_AndOrXor_2243__B__C__A__B___B__A__C_src alive_AndOrXor_2243__B__C__A__B___B__A__C_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2247  (~A | ~B) == (~(A & B))
-- precondition: true
/-
  %na = xor %A, -1
  %nb = xor %B, -1
  %r = or %na, %nb

=>
  %a = and %A, %B
  %na = xor %A, -1
  %nb = xor %B, -1
  %r = xor %a, -1

-/
def alive_AndOrXor_2247__A__B__A__B_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %A, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %B, %v3 : i64
  %v5 = llvm.or %v2, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_2247__A__B__A__B_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.and %A, %B : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %A, %v2 : i64
  %v4 = llvm.mlir.constant -1 : i64
  %v5 = llvm.xor %B, %v4 : i64
  %v6 = llvm.mlir.constant -1 : i64
  %v7 = llvm.xor %v1, %v6 : i64
  llvm.return %v7 : i64
}]
theorem alive_AndOrXor_2247__A__B__A__B : alive_AndOrXor_2247__A__B__A__B_src ⊑ alive_AndOrXor_2247__A__B__A__B_tgt := by
  unfold alive_AndOrXor_2247__A__B__A__B_src alive_AndOrXor_2247__A__B__A__B_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2263
-- precondition: true
/-
  %op1 = xor %op0, %B
  %r = or %op0, %op1

=>
  %op1 = xor %op0, %B
  %r = or %op0, %B

-/
def alive_AndOrXor_2263_src :=
[sllvm| {
^bb0(%B : i64, %op0 : i64):
  %v1 = llvm.xor %op0, %B : i64
  %v2 = llvm.or %op0, %v1 : i64
  llvm.return %v2 : i64
}]

def alive_AndOrXor_2263_tgt :=
[sllvm| {
^bb0(%B : i64, %op0 : i64):
  %v1 = llvm.xor %op0, %B : i64
  %v2 = llvm.or %op0, %B : i64
  llvm.return %v2 : i64
}]
theorem alive_AndOrXor_2263 : alive_AndOrXor_2263_src ⊑ alive_AndOrXor_2263_tgt := by
  unfold alive_AndOrXor_2263_src alive_AndOrXor_2263_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2264
-- precondition: true
/-
  %na = xor %A, -1
  %op1 = xor %na, %B
  %r = or %A, %op1

=>
  %nb = xor %B, -1
  %na = xor %A, -1
  %op1 = xor %na, %B
  %r = or %A, %nb

-/
def alive_AndOrXor_2264_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %A, %v1 : i64
  %v3 = llvm.xor %v2, %B : i64
  %v4 = llvm.or %A, %v3 : i64
  llvm.return %v4 : i64
}]

def alive_AndOrXor_2264_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %B, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %A, %v3 : i64
  %v5 = llvm.xor %v4, %B : i64
  %v6 = llvm.or %A, %v2 : i64
  llvm.return %v6 : i64
}]
theorem alive_AndOrXor_2264 : alive_AndOrXor_2264_src ⊑ alive_AndOrXor_2264_tgt := by
  unfold alive_AndOrXor_2264_src alive_AndOrXor_2264_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2265
-- precondition: true
/-
  %op0 = and %A, %B
  %op1 = xor %A, %B
  %r = or %op0, %op1

=>
  %op0 = and %A, %B
  %op1 = xor %A, %B
  %r = or %A, %B

-/
def alive_AndOrXor_2265_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.and %A, %B : i64
  %v2 = llvm.xor %A, %B : i64
  %v3 = llvm.or %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AndOrXor_2265_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.and %A, %B : i64
  %v2 = llvm.xor %A, %B : i64
  %v3 = llvm.or %A, %B : i64
  llvm.return %v3 : i64
}]
theorem alive_AndOrXor_2265 : alive_AndOrXor_2265_src ⊑ alive_AndOrXor_2265_tgt := by
  unfold alive_AndOrXor_2265_src alive_AndOrXor_2265_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2284
-- precondition: true
/-
  %o = or %A, %B
  %op1 = xor %o, -1
  %r = or %A, %op1

=>
  %not = xor %B, -1
  %o = or %A, %B
  %op1 = xor %o, -1
  %r = or %A, %not

-/
def alive_AndOrXor_2284_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.or %A, %B : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %v1, %v2 : i64
  %v4 = llvm.or %A, %v3 : i64
  llvm.return %v4 : i64
}]

def alive_AndOrXor_2284_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %B, %v1 : i64
  %v3 = llvm.or %A, %B : i64
  %v4 = llvm.mlir.constant -1 : i64
  %v5 = llvm.xor %v3, %v4 : i64
  %v6 = llvm.or %A, %v2 : i64
  llvm.return %v6 : i64
}]
theorem alive_AndOrXor_2284 : alive_AndOrXor_2284_src ⊑ alive_AndOrXor_2284_tgt := by
  unfold alive_AndOrXor_2284_src alive_AndOrXor_2284_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2285
-- precondition: true
/-
  %o = xor %A, %B
  %op1 = xor %o, -1
  %r = or %A, %op1

=>
  %not = xor %B, -1
  %o = xor %A, %B
  %op1 = xor %o, -1
  %r = or %A, %not

-/
def alive_AndOrXor_2285_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.xor %A, %B : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %v1, %v2 : i64
  %v4 = llvm.or %A, %v3 : i64
  llvm.return %v4 : i64
}]

def alive_AndOrXor_2285_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %B, %v1 : i64
  %v3 = llvm.xor %A, %B : i64
  %v4 = llvm.mlir.constant -1 : i64
  %v5 = llvm.xor %v3, %v4 : i64
  %v6 = llvm.or %A, %v2 : i64
  llvm.return %v6 : i64
}]
theorem alive_AndOrXor_2285 : alive_AndOrXor_2285_src ⊑ alive_AndOrXor_2285_tgt := by
  unfold alive_AndOrXor_2285_src alive_AndOrXor_2285_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2297
-- precondition: true
/-
  %op0 = and %A, %B
  %na = xor %A, -1
  %op1 = xor %na, %B
  %r = or %op0, %op1

=>
  %na = xor %A, -1
  %op0 = and %A, %B
  %op1 = xor %na, %B
  %r = xor %na, %B

-/
def alive_AndOrXor_2297_src :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.and %A, %B : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %A, %v2 : i64
  %v4 = llvm.xor %v3, %B : i64
  %v5 = llvm.or %v1, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_2297_tgt :=
[sllvm| {
^bb0(%A : i64, %B : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %A, %v1 : i64
  %v3 = llvm.and %A, %B : i64
  %v4 = llvm.xor %v2, %B : i64
  %v5 = llvm.xor %v2, %B : i64
  llvm.return %v5 : i64
}]
theorem alive_AndOrXor_2297 : alive_AndOrXor_2297_src ⊑ alive_AndOrXor_2297_tgt := by
  unfold alive_AndOrXor_2297_src alive_AndOrXor_2297_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2367
-- precondition: true
/-
  %op0 = or %A, C1
  %r = or %op0, %op1

=>
  %i = or %A, %op1
  %op0 = or %A, C1
  %r = or %i, C1

-/
def alive_AndOrXor_2367_src :=
[sllvm| {
^bb0(%A : i64, %C1 : i64, %op1 : i64):
  %v1 = llvm.or %A, %C1 : i64
  %v2 = llvm.or %v1, %op1 : i64
  llvm.return %v2 : i64
}]

def alive_AndOrXor_2367_tgt :=
[sllvm| {
^bb0(%A : i64, %C1 : i64, %op1 : i64):
  %v1 = llvm.or %A, %op1 : i64
  %v2 = llvm.or %A, %C1 : i64
  %v3 = llvm.or %v1, %C1 : i64
  llvm.return %v3 : i64
}]
theorem alive_AndOrXor_2367 : alive_AndOrXor_2367_src ⊑ alive_AndOrXor_2367_tgt := by
  unfold alive_AndOrXor_2367_src alive_AndOrXor_2367_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2416
-- precondition: true
/-
  %x = xor %nx, -1
  %op0 = and %x, %y
  %r = xor %op0, -1

=>
  %ny = xor %y, -1
  %x = xor %nx, -1
  %op0 = and %x, %y
  %r = or %nx, %ny

-/
def alive_AndOrXor_2416_src :=
[sllvm| {
^bb0(%nx : i64, %y : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %nx, %v1 : i64
  %v3 = llvm.and %v2, %y : i64
  %v4 = llvm.mlir.constant -1 : i64
  %v5 = llvm.xor %v3, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_2416_tgt :=
[sllvm| {
^bb0(%nx : i64, %y : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %y, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %nx, %v3 : i64
  %v5 = llvm.and %v4, %y : i64
  %v6 = llvm.or %nx, %v2 : i64
  llvm.return %v6 : i64
}]
theorem alive_AndOrXor_2416 : alive_AndOrXor_2416_src ⊑ alive_AndOrXor_2416_tgt := by
  unfold alive_AndOrXor_2416_src alive_AndOrXor_2416_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2417
-- precondition: true
/-
  %x = xor %nx, -1
  %op0 = or %x, %y
  %r = xor %op0, -1

=>
  %ny = xor %y, -1
  %x = xor %nx, -1
  %op0 = or %x, %y
  %r = and %nx, %ny

-/
def alive_AndOrXor_2417_src :=
[sllvm| {
^bb0(%nx : i64, %y : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %nx, %v1 : i64
  %v3 = llvm.or %v2, %y : i64
  %v4 = llvm.mlir.constant -1 : i64
  %v5 = llvm.xor %v3, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_2417_tgt :=
[sllvm| {
^bb0(%nx : i64, %y : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %y, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %nx, %v3 : i64
  %v5 = llvm.or %v4, %y : i64
  %v6 = llvm.and %nx, %v2 : i64
  llvm.return %v6 : i64
}]
theorem alive_AndOrXor_2417 : alive_AndOrXor_2417_src ⊑ alive_AndOrXor_2417_tgt := by
  unfold alive_AndOrXor_2417_src alive_AndOrXor_2417_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2429
-- precondition: true
/-
  %op0 = and %x, %y
  %r = xor %op0, -1

=>
  %nx = xor %x, -1
  %ny = xor %y, -1
  %op0 = and %x, %y
  %r = or %nx, %ny

-/
def alive_AndOrXor_2429_src :=
[sllvm| {
^bb0(%y : i64, %x : i64):
  %v1 = llvm.and %x, %y : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AndOrXor_2429_tgt :=
[sllvm| {
^bb0(%y : i64, %x : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %x, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %y, %v3 : i64
  %v5 = llvm.and %x, %y : i64
  %v6 = llvm.or %v2, %v4 : i64
  llvm.return %v6 : i64
}]
theorem alive_AndOrXor_2429 : alive_AndOrXor_2429_src ⊑ alive_AndOrXor_2429_tgt := by
  unfold alive_AndOrXor_2429_src alive_AndOrXor_2429_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2430
-- precondition: true
/-
  %op0 = or %x, %y
  %r = xor %op0, -1

=>
  %nx = xor %x, -1
  %ny = xor %y, -1
  %op0 = or %x, %y
  %r = and %nx, %ny

-/
def alive_AndOrXor_2430_src :=
[sllvm| {
^bb0(%y : i64, %x : i64):
  %v1 = llvm.or %x, %y : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AndOrXor_2430_tgt :=
[sllvm| {
^bb0(%y : i64, %x : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %x, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %y, %v3 : i64
  %v5 = llvm.or %x, %y : i64
  %v6 = llvm.and %v2, %v4 : i64
  llvm.return %v6 : i64
}]
theorem alive_AndOrXor_2430 : alive_AndOrXor_2430_src ⊑ alive_AndOrXor_2430_tgt := by
  unfold alive_AndOrXor_2430_src alive_AndOrXor_2430_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2443
-- precondition: true
/-
  %nx = xor %x, -1
  %op0 = ashr %nx, %y
  %r = xor %op0, -1

=>
  %nx = xor %x, -1
  %op0 = ashr %nx, %y
  %r = ashr %x, %y

-/
def alive_AndOrXor_2443_src :=
[sllvm| {
^bb0(%y : i64, %x : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %x, %v1 : i64
  %v3 = llvm.ashr %v2, %y : i64
  %v4 = llvm.mlir.constant -1 : i64
  %v5 = llvm.xor %v3, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_AndOrXor_2443_tgt :=
[sllvm| {
^bb0(%y : i64, %x : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %x, %v1 : i64
  %v3 = llvm.ashr %v2, %y : i64
  %v4 = llvm.ashr %x, %y : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_2443 : alive_AndOrXor_2443_src ⊑ alive_AndOrXor_2443_tgt := by
  unfold alive_AndOrXor_2443_src alive_AndOrXor_2443_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2453
-- precondition: true
/-
  %op0 = icmp slt %x, %y
  %r = xor %op0, -1

=>
  %op0 = icmp slt %x, %y
  %r = icmp sge %x, %y

-/
-- MANUAL FIX (https://github.com/opencompl/ssa/issues/169)
def alive_AndOrXor_2453_src :=
[sllvm| {
^bb0(%y : i64, %x : i64):
  %v1 = llvm.icmp.slt %x, %y : i64
  %v2 = llvm.mlir.constant -1 :  i1
  %v3 = llvm.xor %v1, %v2 : i1
  llvm.return %v3 : i1
}]

def alive_AndOrXor_2453_tgt :=
[sllvm| {
^bb0(%y : i64, %x : i64):
  %v1 = llvm.icmp.slt %x, %y : i64
  %v2 = llvm.icmp.sge %x, %y : i64
  llvm.return %v2 : i1
}]
theorem alive_AndOrXor_2453 : alive_AndOrXor_2453_src ⊑ alive_AndOrXor_2453_tgt := by
  unfold alive_AndOrXor_2453_src alive_AndOrXor_2453_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2475
-- precondition: true
/-
  %op0 = sub C, %x
  %r = xor %op0, -1

=>
  %op0 = sub C, %x
  %r = add %x, (-1 - C)

-/
def alive_AndOrXor_2475_src :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.sub %C, %x : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AndOrXor_2475_tgt :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.sub %C, %x : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.sub %v2, %C : i64
  %v4 = llvm.add %x, %v3 : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_2475 : alive_AndOrXor_2475_src ⊑ alive_AndOrXor_2475_tgt := by
  unfold alive_AndOrXor_2475_src alive_AndOrXor_2475_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2486
-- precondition: true
/-
  %op0 = add %x, C
  %r = xor %op0, -1

=>
  %op0 = add %x, C
  %r = sub (-1 - C), %x

-/
def alive_AndOrXor_2486_src :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.add %x, %C : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AndOrXor_2486_tgt :=
[sllvm| {
^bb0(%x : i64, %C : i64):
  %v1 = llvm.add %x, %C : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.sub %v2, %C : i64
  %v4 = llvm.sub %v3, %x : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_2486 : alive_AndOrXor_2486_src ⊑ alive_AndOrXor_2486_tgt := by
  unfold alive_AndOrXor_2486_src alive_AndOrXor_2486_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2581  (B|A)^B -> A & ~B
-- precondition: true
/-
  %op0 = or %a, %op1
  %r = xor %op0, %op1

=>
  %nop1 = xor %op1, -1
  %op0 = or %a, %op1
  %r = and %a, %nop1

-/
def alive_AndOrXor_2581__BAB___A__B_src :=
[sllvm| {
^bb0(%a : i64, %op1 : i64):
  %v1 = llvm.or %a, %op1 : i64
  %v2 = llvm.xor %v1, %op1 : i64
  llvm.return %v2 : i64
}]

def alive_AndOrXor_2581__BAB___A__B_tgt :=
[sllvm| {
^bb0(%a : i64, %op1 : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %op1, %v1 : i64
  %v3 = llvm.or %a, %op1 : i64
  %v4 = llvm.and %a, %v2 : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_2581__BAB___A__B : alive_AndOrXor_2581__BAB___A__B_src ⊑ alive_AndOrXor_2581__BAB___A__B_tgt := by
  unfold alive_AndOrXor_2581__BAB___A__B_src alive_AndOrXor_2581__BAB___A__B_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2587  (B&A)^A -> ~B & A
-- precondition: true
/-
  %op0 = and %a, %op1
  %r = xor %op0, %op1

=>
  %na = xor %a, -1
  %op0 = and %a, %op1
  %r = and %na, %op1

-/
def alive_AndOrXor_2587__BAA___B__A_src :=
[sllvm| {
^bb0(%a : i64, %op1 : i64):
  %v1 = llvm.and %a, %op1 : i64
  %v2 = llvm.xor %v1, %op1 : i64
  llvm.return %v2 : i64
}]

def alive_AndOrXor_2587__BAA___B__A_tgt :=
[sllvm| {
^bb0(%a : i64, %op1 : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %a, %v1 : i64
  %v3 = llvm.and %a, %op1 : i64
  %v4 = llvm.and %v2, %op1 : i64
  llvm.return %v4 : i64
}]
theorem alive_AndOrXor_2587__BAA___B__A : alive_AndOrXor_2587__BAA___B__A_src ⊑ alive_AndOrXor_2587__BAA___B__A_tgt := by
  unfold alive_AndOrXor_2587__BAA___B__A_src alive_AndOrXor_2587__BAA___B__A_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2595
-- precondition: true
/-
  %op0 = and %a, %b
  %op1 = or %a, %b
  %r = xor %op0, %op1

=>
  %op0 = and %a, %b
  %op1 = or %a, %b
  %r = xor %a, %b

-/
def alive_AndOrXor_2595_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.or %a, %b : i64
  %v3 = llvm.xor %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AndOrXor_2595_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.or %a, %b : i64
  %v3 = llvm.xor %a, %b : i64
  llvm.return %v3 : i64
}]
theorem alive_AndOrXor_2595 : alive_AndOrXor_2595_src ⊑ alive_AndOrXor_2595_tgt := by
  unfold alive_AndOrXor_2595_src alive_AndOrXor_2595_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2607
-- precondition: true
/-
  %na = xor %a, -1
  %nb = xor %b, -1
  %op0 = or %a, %nb
  %op1 = or %na, %b
  %r = xor %op0, %op1

=>
  %na = xor %a, -1
  %nb = xor %b, -1
  %op0 = or %a, %nb
  %op1 = or %na, %b
  %r = xor %a, %b

-/
def alive_AndOrXor_2607_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %a, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %b, %v3 : i64
  %v5 = llvm.or %a, %v4 : i64
  %v6 = llvm.or %v2, %b : i64
  %v7 = llvm.xor %v5, %v6 : i64
  llvm.return %v7 : i64
}]

def alive_AndOrXor_2607_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %a, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %b, %v3 : i64
  %v5 = llvm.or %a, %v4 : i64
  %v6 = llvm.or %v2, %b : i64
  %v7 = llvm.xor %a, %b : i64
  llvm.return %v7 : i64
}]
theorem alive_AndOrXor_2607 : alive_AndOrXor_2607_src ⊑ alive_AndOrXor_2607_tgt := by
  unfold alive_AndOrXor_2607_src alive_AndOrXor_2607_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2617
-- precondition: true
/-
  %na = xor %a, -1
  %nb = xor %b, -1
  %op0 = and %a, %nb
  %op1 = and %na, %b
  %r = xor %op0, %op1

=>
  %na = xor %a, -1
  %nb = xor %b, -1
  %op0 = and %a, %nb
  %op1 = and %na, %b
  %r = xor %a, %b

-/
def alive_AndOrXor_2617_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %a, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %b, %v3 : i64
  %v5 = llvm.and %a, %v4 : i64
  %v6 = llvm.and %v2, %b : i64
  %v7 = llvm.xor %v5, %v6 : i64
  llvm.return %v7 : i64
}]

def alive_AndOrXor_2617_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %a, %v1 : i64
  %v3 = llvm.mlir.constant -1 : i64
  %v4 = llvm.xor %b, %v3 : i64
  %v5 = llvm.and %a, %v4 : i64
  %v6 = llvm.and %v2, %b : i64
  %v7 = llvm.xor %a, %b : i64
  llvm.return %v7 : i64
}]
theorem alive_AndOrXor_2617 : alive_AndOrXor_2617_src ⊑ alive_AndOrXor_2617_tgt := by
  unfold alive_AndOrXor_2617_src alive_AndOrXor_2617_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2627
-- precondition: true
/-
  %op0 = xor %a, %c
  %op1 = or %a, %b
  %r = xor %op0, %op1

=>
  %na = xor %a, -1
  %and = and %na, %b
  %op0 = xor %a, %c
  %op1 = or %a, %b
  %r = xor %and, %c

-/
def alive_AndOrXor_2627_src :=
[sllvm| {
^bb0(%a : i64, %c : i64, %b : i64):
  %v1 = llvm.xor %a, %c : i64
  %v2 = llvm.or %a, %b : i64
  %v3 = llvm.xor %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AndOrXor_2627_tgt :=
[sllvm| {
^bb0(%a : i64, %c : i64, %b : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %a, %v1 : i64
  %v3 = llvm.and %v2, %b : i64
  %v4 = llvm.xor %a, %c : i64
  %v5 = llvm.or %a, %b : i64
  %v6 = llvm.xor %v3, %c : i64
  llvm.return %v6 : i64
}]
theorem alive_AndOrXor_2627 : alive_AndOrXor_2627_src ⊑ alive_AndOrXor_2627_tgt := by
  unfold alive_AndOrXor_2627_src alive_AndOrXor_2627_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2647
-- precondition: true
/-
  %op0 = and %a, %b
  %op1 = xor %a, %b
  %r = xor %op0, %op1

=>
  %op0 = and %a, %b
  %op1 = xor %a, %b
  %r = or %a, %b

-/
def alive_AndOrXor_2647_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.xor %a, %b : i64
  %v3 = llvm.xor %v1, %v2 : i64
  llvm.return %v3 : i64
}]

def alive_AndOrXor_2647_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.xor %a, %b : i64
  %v3 = llvm.or %a, %b : i64
  llvm.return %v3 : i64
}]
theorem alive_AndOrXor_2647 : alive_AndOrXor_2647_src ⊑ alive_AndOrXor_2647_tgt := by
  unfold alive_AndOrXor_2647_src alive_AndOrXor_2647_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2658
-- precondition: true
/-
  %nb = xor %b, -1
  %op0 = and %a, %nb
  %na = xor %a, -1
  %r = xor %op0, %na

=>
  %and = and %a, %b
  %nb = xor %b, -1
  %op0 = and %a, %nb
  %na = xor %a, -1
  %r = xor %and, -1

-/
def alive_AndOrXor_2658_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.xor %b, %v1 : i64
  %v3 = llvm.and %a, %v2 : i64
  %v4 = llvm.mlir.constant -1 : i64
  %v5 = llvm.xor %a, %v4 : i64
  %v6 = llvm.xor %v3, %v5 : i64
  llvm.return %v6 : i64
}]

def alive_AndOrXor_2658_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.and %a, %b : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.xor %b, %v2 : i64
  %v4 = llvm.and %a, %v3 : i64
  %v5 = llvm.mlir.constant -1 : i64
  %v6 = llvm.xor %a, %v5 : i64
  %v7 = llvm.mlir.constant -1 : i64
  %v8 = llvm.xor %v1, %v7 : i64
  llvm.return %v8 : i64
}]
theorem alive_AndOrXor_2658 : alive_AndOrXor_2658_src ⊑ alive_AndOrXor_2658_tgt := by
  unfold alive_AndOrXor_2658_src alive_AndOrXor_2658_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:AndOrXor:2663
-- precondition: true
/-
  %op0 = icmp ule %a, %b
  %op1 = icmp ne %a, %b
  %r = xor %op0, %op1

=>
  %op0 = icmp ule %a, %b
  %op1 = icmp ne %a, %b
  %r = icmp uge %a, %b

-/
def alive_AndOrXor_2663_src :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.icmp.ule %a, %b : i64
  %v2 = llvm.icmp.ne %a, %b : i64
  %v3 = llvm.xor %v1, %v2 : i1
  llvm.return %v3 : i1
}]

def alive_AndOrXor_2663_tgt :=
[sllvm| {
^bb0(%a : i64, %b : i64):
  %v1 = llvm.icmp.ule %a, %b : i64
  %v2 = llvm.icmp.ne %a, %b : i64
  %v3 = llvm.icmp.uge %a, %b : i64
  llvm.return %v3 : i1
}]
theorem alive_AndOrXor_2663 : alive_AndOrXor_2663_src ⊑ alive_AndOrXor_2663_tgt := by
  unfold alive_AndOrXor_2663_src alive_AndOrXor_2663_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:152
-- precondition: true
/-
  %r = mul %x, -1

=>
  %r = sub 0, %x

-/
def alive_152_src :=
[sllvm| {
^bb0(%x : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.mul %x, %v1 : i64
  llvm.return %v2 : i64
}]

def alive_152_tgt :=
[sllvm| {
^bb0(%x : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %x : i64
  llvm.return %v2 : i64
}]
theorem alive_152 : alive_152_src ⊑ alive_152_tgt := by
  unfold alive_152_src alive_152_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:229
-- precondition: true
/-
  %Op0 = add %X, C1
  %r = mul %Op0, %Op1

=>
  %mul = mul C1, %Op1
  %tmp = mul %X, %Op1
  %Op0 = add %X, C1
  %r = add %tmp, %mul

-/
def alive_229_src :=
[sllvm| {
^bb0(%X : i6, %C1 : i6, %Op1 : i6):
  %v1 = llvm.add %X, %C1 : i6
  %v2 = llvm.mul %v1, %Op1 : i6
  llvm.return %v2 : i6
}]

def alive_229_tgt :=
[sllvm| {
^bb0(%X : i6, %C1 : i6, %Op1 : i6):
  %v1 = llvm.mul %C1, %Op1 : i6
  %v2 = llvm.mul %X, %Op1 : i6
  %v3 = llvm.add %X, %C1 : i6
  %v4 = llvm.add %v2, %v1 : i6
  llvm.return %v4 : i6
}]
theorem alive_229 : alive_229_src ⊑ alive_229_tgt := by
  unfold alive_229_src alive_229_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide +acNf +shortCircuit


-- Name:239
-- precondition: true
/-
  %a = sub 0, %X
  %b = sub 0, %Y
  %r = mul %a, %b

=>
  %a = sub 0, %X
  %b = sub 0, %Y
  %r = mul %X, %Y

-/
def alive_239_src :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %X : i64
  %v3 = llvm.mlir.constant 0 : i64
  %v4 = llvm.sub %v3, %Y : i64
  %v5 = llvm.mul %v2, %v4 : i64
  llvm.return %v5 : i64
}]

def alive_239_tgt :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %X : i64
  %v3 = llvm.mlir.constant 0 : i64
  %v4 = llvm.sub %v3, %Y : i64
  %v5 = llvm.mul %X, %Y : i64
  llvm.return %v5 : i64
}]
theorem alive_239 : alive_239_src ⊑ alive_239_tgt := by
  unfold alive_239_src alive_239_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:275
-- precondition: true
/-
  %div = udiv i5 %X, %Y
  %r = mul %div, %Y

=>
  %rem = urem %X, %Y
  %div = udiv i5 %X, %Y
  %r = sub %X, %rem

-/
def alive_275_src   :=
[sllvm| {
^bb0(%Y : i5, %X : i5):
  %v1 = llvm.udiv %X, %Y : i5
  %v2 = llvm.mul %v1, %Y : i5
  llvm.return %v2 : i5
}]

def alive_275_tgt  :=
[sllvm| {
^bb0(%Y : i5, %X : i5):
  %v1 = llvm.urem %X, %Y : i5
  %v2 = llvm.udiv %X, %Y : i5
  %v3 = llvm.sub %X, %v1 : i5
  llvm.return %v3 : i5
}]
theorem alive_275   : alive_275_src ⊑ alive_275_tgt := by
  unfold alive_275_src alive_275_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:275-2
-- precondition: true
/-
  %div = sdiv i5 %X, %Y
  %r = mul %div, %Y

=>
  %rem = srem %X, %Y
  %div = sdiv i5 %X, %Y
  %r = sub %X, %rem

-/
def alive_275_2_src   :=
[sllvm| {
^bb0(%Y : i5, %X : i5):
  %v1 = llvm.sdiv %X, %Y : i5
  %v2 = llvm.mul %v1, %Y : i5
  llvm.return %v2 : i5
}]

def alive_275_2_tgt  :=
[sllvm| {
^bb0(%Y : i5, %X : i5):
  %v1 = llvm.srem %X, %Y : i5
  %v2 = llvm.sdiv %X, %Y : i5
  %v3 = llvm.sub %X, %v1 : i5
  llvm.return %v3 : i5
}]

theorem alive_275_2   : alive_275_2_src ⊑ alive_275_2_tgt := by
  unfold alive_275_2_src alive_275_2_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide

-- Name:276
-- precondition: true
/-
  %div = sdiv i5 %X, %Y
  %negY = sub 0, %Y
  %r = mul %div, %negY

=>
  %rem = srem %X, %Y
  %div = sdiv i5 %X, %Y
  %negY = sub 0, %Y
  %r = sub %rem, %X

-/
-- MANUAL FIX: https://github.com/opencompl/ssa/issues/169
def alive_276_src :=
[sllvm| {
^bb0(%Y : i5, %X : i5):
  %v1 = llvm.sdiv %X, %Y : i5
  %v2 = llvm.mlir.constant 0 :  i5
  %v3 = llvm.sub %v2, %Y : i5
  %v4 = llvm.mul %v1, %v3 : i5
  llvm.return %v4 : i5
}]

def alive_276_tgt :=
[sllvm| {
^bb0(%Y : i5, %X : i5):
  %v1 = llvm.srem %X, %Y : i5
  %v2 = llvm.sdiv %X, %Y : i5
  %v3 = llvm.mlir.constant 0 :  i5
  %v4 = llvm.sub %v3, %Y : i5
  %v5 = llvm.sub %v1, %X : i5
  llvm.return %v5 : i5
}]
theorem alive_276 : alive_276_src ⊑ alive_276_tgt := by
  unfold alive_276_src alive_276_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide

-- Name:276-2
-- precondition: true
/-
  %div = udiv i5 %X, %Y
  %negY = sub 0, %Y
  %r = mul %div, %negY

=>
  %rem = urem %X, %Y
  %div = udiv i5 %X, %Y
  %negY = sub 0, %Y
  %r = sub %rem, %X

-/
-- MANUAL FIX: https://github.com/opencompl/ssa/issues/169
def alive_276_2_src :=
[sllvm| {
^bb0(%Y : i5, %X : i5):
  %v1 = llvm.udiv %X, %Y : i5
  %v2 = llvm.mlir.constant 0 :  i5
  %v3 = llvm.sub %v2, %Y : i5
  %v4 = llvm.mul %v1, %v3 : i5
  llvm.return %v4 : i5
}]

def alive_276_2_tgt :=
[sllvm| {
^bb0(%Y : i5, %X : i5):
  %v1 = llvm.urem %X, %Y : i5
  %v2 = llvm.udiv %X, %Y : i5
  %v3 = llvm.mlir.constant 0 :  i5
  %v4 = llvm.sub %v3, %Y : i5
  %v5 = llvm.sub %v1, %X : i5
  llvm.return %v5 : i5
}]
theorem alive_276_2 : alive_276_2_src ⊑ alive_276_2_tgt := by
  unfold alive_276_2_src alive_276_2_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:283
-- precondition: true
/-
  %r = mul i1 %X, %Y

=>
  %r = and %X, %Y

-/
def alive_283_src   :=
[sllvm| {
^bb0(%Y : i1, %X : i1):
  %v1 = llvm.mul %X, %Y : i1
  llvm.return %v1 : i1
}]

def alive_283_tgt  :=
[sllvm| {
^bb0(%Y : i1, %X : i1):
  %v1 = llvm.and %X, %Y : i1
  llvm.return %v1 : i1
}]
theorem alive_283   : alive_283_src ⊑ alive_283_tgt := by
  unfold alive_283_src alive_283_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:290 & 292
-- precondition: true
/-
  %Op0 = shl 1, %Y
  %r = mul %Op0, %Op1

=>
  %Op0 = shl 1, %Y
  %r = shl %Op1, %Y

-/
def alive_290__292_src :=
[sllvm| {
^bb0(%Y : i64, %Op1 : i64):
  %v1 = llvm.mlir.constant 1 : i64
  %v2 = llvm.shl %v1, %Y : i64
  %v3 = llvm.mul %v2, %Op1 : i64
  llvm.return %v3 : i64
}]

def alive_290__292_tgt :=
[sllvm| {
^bb0(%Y : i64, %Op1 : i64):
  %v1 = llvm.mlir.constant 1 : i64
  %v2 = llvm.shl %v1, %Y : i64
  %v3 = llvm.shl %Op1, %Y : i64
  llvm.return %v3 : i64
}]
theorem alive_290__292 : alive_290__292_src ⊑ alive_290__292_tgt := by
  unfold alive_290__292_src alive_290__292_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:820
-- precondition: true
/-
  %Z = srem i9 %X, %Op1
  %Op0 = sub %X, %Z
  %r = sdiv %Op0, %Op1

=>
  %Z = srem i9 %X, %Op1
  %Op0 = sub %X, %Z
  %r = sdiv %X, %Op1

-/
def alive_820_src   :=
[sllvm| {
^bb0(%X : i9, %Op1 : i9):
  %v1 = llvm.srem %X, %Op1 : i9
  %v2 = llvm.sub %X, %v1 : i9
  %v3 = llvm.sdiv %v2, %Op1 : i9
  llvm.return %v3 : i9
}]

def alive_820_tgt  :=
[sllvm| {
^bb0(%X : i9, %Op1 : i9):
  %v1 = llvm.srem %X, %Op1 : i9
  %v2 = llvm.sub %X, %v1 : i9
  %v3 = llvm.sdiv %X, %Op1 : i9
  llvm.return %v3 : i9
}]
theorem alive_820   : alive_820_src ⊑ alive_820_tgt := by
  unfold alive_820_src alive_820_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:820'
-- precondition: true
/-
  %Z = urem i9 %X, %Op1
  %Op0 = sub %X, %Z
  %r = udiv %Op0, %Op1

=>
  %Z = urem i9 %X, %Op1
  %Op0 = sub %X, %Z
  %r = udiv %X, %Op1

-/
def alive_820'_src   :=
[sllvm| {
^bb0(%X : i9, %Op1 : i9):
  %v1 = llvm.urem %X, %Op1 : i9
  %v2 = llvm.sub %X, %v1 : i9
  %v3 = llvm.udiv %v2, %Op1 : i9
  llvm.return %v3 : i9
}]

def alive_820'_tgt  :=
[sllvm| {
^bb0(%X : i9, %Op1 : i9):
  %v1 = llvm.urem %X, %Op1 : i9
  %v2 = llvm.sub %X, %v1 : i9
  %v3 = llvm.udiv %X, %Op1 : i9
  llvm.return %v3 : i9
}]
theorem alive_820'   : alive_820'_src ⊑ alive_820'_tgt := by
  unfold alive_820'_src alive_820'_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:1030
-- precondition: true
/-
  %r = sdiv %X, -1

=>
  %r = sub 0, %X

-/
def alive_1030_src :=
[sllvm| {
^bb0(%X : i64):
  %v1 = llvm.mlir.constant -1 : i64
  %v2 = llvm.sdiv %X, %v1 : i64
  llvm.return %v2 : i64
}]

def alive_1030_tgt :=
[sllvm| {
^bb0(%X : i64):
  %v1 = llvm.mlir.constant 0 : i64
  %v2 = llvm.sub %v1, %X : i64
  llvm.return %v2 : i64
}]
theorem alive_1030 : alive_1030_src ⊑ alive_1030_tgt := by
  unfold alive_1030_src alive_1030_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide

-- Name:Select:858
-- precondition: true
/-
  %nota = xor %a, -1
  %r = select i1 %a, %nota, %b

=>
  %nota = xor %a, -1
  %r = and %nota, %b

-/
-- MANUAL FIX (https://github.com/opencompl/ssa/issues/169)
def alive_Select_858_src :=
[sllvm| {
^bb0(%a : i1, %b : i1):
  %v1 = llvm.mlir.constant -1 :  i1
  %v2 = llvm.xor %a, %v1 : i1
  %v3 = llvm.select %a,%v2, %b : i1
  llvm.return %v3 : i1
}]

def alive_Select_858_tgt :=
[sllvm| {
^bb0(%a : i1, %b : i1):
  %v1 = llvm.mlir.constant -1 : i1
  %v2 = llvm.xor %a, %v1 : i1
  %v3 = llvm.and %v2, %b : i1
  llvm.return %v3 : i1
}]
-- theorem alive_Select_858 : alive_Select_858_src ⊑ alive_Select_858_tgt := by
--   unfold alive_Select_858_src alive_Select_858_tgt
--   simp_peephole
--   simp_sllvm
--   simp_sllvm_case_bash
--   simp_sllvm_split
--   all_goals bv_decide

-- -- Oops, this rewrite seems to be incorrect, consider:
-- #eval alive_Select_858_src.denote ((.nil ::ᵥ .value 1#1) ::ᵥ .poison)
-- #eval alive_Select_858_tgt.denote ((.nil ::ᵥ .value 1#1) ::ᵥ .poison)

-- Name:Select:859'
-- precondition: true
/-
  %nota = xor %a, -1
  %r = select i1 %a, %b, %nota

=>
  %nota = xor %a, -1
  %r = or %nota, %b

-/
-- MANUAL FIX (https://github.com/opencompl/ssa/issues/169)
def alive_Select_859'_src :=
[sllvm| {
^bb0(%a : i1, %b : i1):
  %v1 = llvm.mlir.constant -1 :  i1
  %v2 = llvm.xor %a, %v1 : i1
  %v3 = llvm.select %a,%b, %v2 : i1
  llvm.return %v3 : i1
}]

def alive_Select_859'_tgt :=
[sllvm| {
^bb0(%a : i1, %b : i1):
  %v1 = llvm.mlir.constant -1 : i1
  %v2 = llvm.xor %a, %v1 : i1
  %v3 = llvm.or %v2, %b : i1
  llvm.return %v3 : i1
}]
-- theorem alive_Select_859' : alive_Select_859'_src ⊑ alive_Select_859'_tgt := by
--   unfold alive_Select_859'_src alive_Select_859'_tgt
--   simp_peephole
--   simp_sllvm
--   simp_sllvm_case_bash
--   simp_sllvm_split
--   all_goals bv_decide

-- -- Oops, this rewrite seems to be incorrect, consider:
-- #eval alive_Select_859'_src.denote ((.nil ::ᵥ .value 0#1) ::ᵥ .poison)
-- #eval alive_Select_859'_tgt.denote ((.nil ::ᵥ .value 0#1) ::ᵥ .poison)

-- Name:Select:1100
-- precondition: true
/-
  %r = select i1 true, %X, %Y

=>
  %r = %X

-/
def alive_Select_1100_src :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.mlir.constant 1 :  i1
  %v2 = llvm.select %v1, %X, %Y : i64
  llvm.return %v2 : i64
}]

def alive_Select_1100_tgt :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.copy %X : i64
  llvm.return %v1 : i64
}]
theorem alive_Select_1100 : alive_Select_1100_src ⊑ alive_Select_1100_tgt := by
  unfold alive_Select_1100_src alive_Select_1100_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:Select:1105
-- precondition: true
/-
  %r = select i1 false, %X, %Y

=>
  %r = %Y

-/
def alive_Select_1105_src :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.mlir.constant 0 :  i1
  %v2 = llvm.select %v1,%X, %Y : i64
  llvm.return %v2 : i64
}]

def alive_Select_1105_tgt :=
[sllvm| {
^bb0(%Y : i64, %X : i64):
  %v1 = llvm.copy %Y : i64
  llvm.return %v1 : i64
}]
theorem alive_Select_1105 : alive_Select_1105_src ⊑ alive_Select_1105_tgt := by
  unfold alive_Select_1105_src alive_Select_1105_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:InstCombineShift: 239
-- precondition: true
/-
  %Op0 = shl %X, C
  %r = lshr %Op0, C

=>
  %Op0 = shl %X, C
  %r = and %X, (-1 u>> C)

-/
def alive_InstCombineShift__239_src :=
[sllvm| {
^bb0(%X : i64, %C : i64):
  %v1 = llvm.shl %X, %C : i64
  %v2 = llvm.lshr %v1, %C : i64
  llvm.return %v2 : i64
}]

def alive_InstCombineShift__239_tgt :=
[sllvm| {
^bb0(%X : i64, %C : i64):
  %v1 = llvm.shl %X, %C : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.lshr %v2, %C : i64
  %v4 = llvm.and %X, %v3 : i64
  llvm.return %v4 : i64
}]
theorem alive_InstCombineShift__239 : alive_InstCombineShift__239_src ⊑ alive_InstCombineShift__239_tgt := by
  unfold alive_InstCombineShift__239_src alive_InstCombineShift__239_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:InstCombineShift: 279
-- precondition: true
/-
  %Op0 = lshr %X, C
  %r = shl %Op0, C

=>
  %Op0 = lshr %X, C
  %r = and %X, (-1 << C)

-/
def alive_InstCombineShift__279_src :=
[sllvm| {
^bb0(%X : i64, %C : i64):
  %v1 = llvm.lshr %X, %C : i64
  %v2 = llvm.shl %v1, %C : i64
  llvm.return %v2 : i64
}]

def alive_InstCombineShift__279_tgt :=
[sllvm| {
^bb0(%X : i64, %C : i64):
  %v1 = llvm.lshr %X, %C : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.shl %v2, %C : i64
  %v4 = llvm.and %X, %v3 : i64
  llvm.return %v4 : i64
}]
theorem alive_InstCombineShift__279 : alive_InstCombineShift__279_src ⊑ alive_InstCombineShift__279_tgt := by
  unfold alive_InstCombineShift__279_src alive_InstCombineShift__279_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:InstCombineShift: 440
-- precondition: true
/-
  %s = lshr %X, C
  %Op1 = and %s, C2
  %Op0 = xor %Y, %Op1
  %r = shl %Op0, C

=>
  %a = and %X, (C2 << C)
  %y2 = shl %Y, C
  %s = lshr %X, C
  %Op1 = and %s, C2
  %Op0 = xor %Y, %Op1
  %r = xor %a, %y2

-/
def alive_InstCombineShift__440_src :=
[sllvm| {
^bb0(%Y : i64, %X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.lshr %X, %C : i64
  %v2 = llvm.and %v1, %C2 : i64
  %v3 = llvm.xor %Y, %v2 : i64
  %v4 = llvm.shl %v3, %C : i64
  llvm.return %v4 : i64
}]

set_option maxHeartbeats 400000 in
def alive_InstCombineShift__440_tgt :=
[sllvm| {
^bb0(%Y : i64, %X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.shl %C2, %C : i64
  %v2 = llvm.and %X, %v1 : i64
  %v3 = llvm.shl %Y, %C : i64
  %v4 = llvm.lshr %X, %C : i64
  %v5 = llvm.and %v4, %C2 : i64
  %v6 = llvm.xor %Y, %v5 : i64
  %v7 = llvm.xor %v2, %v3 : i64
  llvm.return %v7 : i64
}]
theorem alive_InstCombineShift__440 : alive_InstCombineShift__440_src ⊑ alive_InstCombineShift__440_tgt := by
  unfold alive_InstCombineShift__440_src alive_InstCombineShift__440_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:InstCombineShift: 476
-- precondition: true
/-
  %shr = lshr %X, C
  %s = and %shr, C2
  %Op0 = or %s, %Y
  %r = shl %Op0, C

=>
  %s2 = shl %Y, C
  %a = and %X, (C2 << C)
  %shr = lshr %X, C
  %s = and %shr, C2
  %Op0 = or %s, %Y
  %r = or %a, %s2

-/
def alive_InstCombineShift__476_src :=
[sllvm| {
^bb0(%Y : i64, %X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.lshr %X, %C : i64
  %v2 = llvm.and %v1, %C2 : i64
  %v3 = llvm.or %v2, %Y : i64
  %v4 = llvm.shl %v3, %C : i64
  llvm.return %v4 : i64
}]

set_option maxHeartbeats 400000 in
def alive_InstCombineShift__476_tgt :=
[sllvm| {
^bb0(%Y : i64, %X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.shl %Y, %C : i64
  %v2 = llvm.shl %C2, %C : i64
  %v3 = llvm.and %X, %v2 : i64
  %v4 = llvm.lshr %X, %C : i64
  %v5 = llvm.and %v4, %C2 : i64
  %v6 = llvm.or %v5, %Y : i64
  %v7 = llvm.or %v3, %v1 : i64
  llvm.return %v7 : i64
}]
theorem alive_InstCombineShift__476 : alive_InstCombineShift__476_src ⊑ alive_InstCombineShift__476_tgt := by
  unfold alive_InstCombineShift__476_src alive_InstCombineShift__476_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:InstCombineShift: 497
-- precondition: true
/-
  %Op0 = xor %X, C2
  %r = lshr %Op0, C

=>
  %s2 = lshr %X, C
  %Op0 = xor %X, C2
  %r = xor %s2, (C2 u>> C)

-/
def alive_InstCombineShift__497_src :=
[sllvm| {
^bb0(%X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.xor %X, %C2 : i64
  %v2 = llvm.lshr %v1, %C : i64
  llvm.return %v2 : i64
}]

def alive_InstCombineShift__497_tgt :=
[sllvm| {
^bb0(%X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.lshr %X, %C : i64
  %v2 = llvm.xor %X, %C2 : i64
  %v3 = llvm.lshr %C2, %C : i64
  %v4 = llvm.xor %v1, %v3 : i64
  llvm.return %v4 : i64
}]
theorem alive_InstCombineShift__497 : alive_InstCombineShift__497_src ⊑ alive_InstCombineShift__497_tgt := by
  unfold alive_InstCombineShift__497_src alive_InstCombineShift__497_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:InstCombineShift: 497'''
-- precondition: true
/-
  %Op0 = add %X, C2
  %r = shl %Op0, C

=>
  %s2 = shl %X, C
  %Op0 = add %X, C2
  %r = add %s2, (C2 << C)

-/
def alive_InstCombineShift__497'''_src :=
[sllvm| {
^bb0(%X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.add %X, %C2 : i64
  %v2 = llvm.shl %v1, %C : i64
  llvm.return %v2 : i64
}]

def alive_InstCombineShift__497'''_tgt :=
[sllvm| {
^bb0(%X : i64, %C : i64, %C2 : i64):
  %v1 = llvm.shl %X, %C : i64
  %v2 = llvm.add %X, %C2 : i64
  %v3 = llvm.shl %C2, %C : i64
  %v4 = llvm.add %v1, %v3 : i64
  llvm.return %v4 : i64
}]
theorem alive_InstCombineShift__497''' : alive_InstCombineShift__497'''_src ⊑ alive_InstCombineShift__497'''_tgt := by
  unfold alive_InstCombineShift__497'''_src alive_InstCombineShift__497'''_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide


-- Name:InstCombineShift: 582
-- precondition: true
/-
  %Op0 = shl %X, C
  %r = lshr %Op0, C

=>
  %Op0 = shl %X, C
  %r = and %X, (-1 u>> C)

-/
def alive_InstCombineShift__582_src :=
[sllvm| {
^bb0(%X : i64, %C : i64):
  %v1 = llvm.shl %X, %C : i64
  %v2 = llvm.lshr %v1, %C : i64
  llvm.return %v2 : i64
}]

def alive_InstCombineShift__582_tgt :=
[sllvm| {
^bb0(%X : i64, %C : i64):
  %v1 = llvm.shl %X, %C : i64
  %v2 = llvm.mlir.constant -1 : i64
  %v3 = llvm.lshr %v2, %C : i64
  %v4 = llvm.and %X, %v3 : i64
  llvm.return %v4 : i64
}]
theorem alive_InstCombineShift__582 : alive_InstCombineShift__582_src ⊑ alive_InstCombineShift__582_tgt := by
  unfold alive_InstCombineShift__582_src alive_InstCombineShift__582_tgt
  simp_peephole
  simp_sllvm
  simp_sllvm_case_bash
  simp_sllvm_split
  all_goals bv_decide
