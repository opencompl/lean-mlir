⚠ [2488/2503] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [2492/2503] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [2493/2503] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [2498/2503] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [2499/2503] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [2503/2503] Building SSA.Projects.InstCombine.tests.LLVM.gmul_fold
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/tcg40/.elan/toolchains/leanprover--lean4---nightly-2024-10-28/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gmul_fold.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gmul_fold.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/gmul_fold.c --json
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:45:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 8),
    add (shl (add (mul (lshr e_1 (const? 4)) e) (mul (lshr e (const? 4)) e_1)) (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:41:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:79:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 8),
    add
        (shl
          (add (mul (lshr e_1 (const? 4)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 4))))
          (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:75:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:113:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 16),
    add
        (shl
          (add (mul (lshr e_1 (const? 8)) (LLVM.and e (const? 255)))
            (mul (LLVM.and e_1 (const? 255)) (lshr e (const? 8))))
          (const? 8))
        (mul (LLVM.and e_1 (const? 255)) (LLVM.and e (const? 255))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:109:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:147:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add
        (shl
          (add (mul (lshr e_1 (const? 16)) (LLVM.and e (const? 65535)))
            (mul (LLVM.and e_1 (const? 65535)) (lshr e (const? 16))))
          (const? 16))
        (mul (LLVM.and e_1 (const? 65535)) (LLVM.and e (const? 65535))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:143:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:181:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 64),
    add
        (shl
          (add (mul (lshr e_1 (const? 32)) (LLVM.and e (const? 4294967295)))
            (mul (LLVM.and e_1 (const? 4294967295)) (lshr e (const? 32))))
          (const? 32))
        (mul (LLVM.and e_1 (const? 4294967295)) (LLVM.and e (const? 4294967295))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:177:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:215:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 128),
    add
        (shl
          (add (mul (lshr e_1 (const? 64)) (LLVM.and e (const? 18446744073709551615)))
            (mul (LLVM.and e_1 (const? 18446744073709551615)) (lshr e (const? 64))))
          (const? 64))
        (mul (LLVM.and e_1 (const? 18446744073709551615)) (LLVM.and e (const? 18446744073709551615))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:211:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:249:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 130),
    add
        (shl
          (add (mul (lshr e_1 (const? 65)) (LLVM.and e (const? 36893488147419103231)))
            (mul (LLVM.and e_1 (const? 36893488147419103231)) (lshr e (const? 65))))
          (const? 65))
        (mul (LLVM.and e_1 (const? 36893488147419103231)) (LLVM.and e (const? 36893488147419103231))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:245:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:294:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 9),
    add
        (shl
          (add (mul (lshr e_1 (const? 4)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 4))))
          (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      add
        (shl
          (add (mul (lshr e_1 (const? 4)) (LLVM.and e (const? 15)) { «nsw» := false, «nuw» := true })
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 4)) { «nsw» := false, «nuw» := true }))
          (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15)) { «nsw» := true, «nuw» := true }) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:290:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:339:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 16),
    add
        (shl
          (add (mul (lshr e_1 (const? 8)) (LLVM.and e (const? 127)))
            (mul (LLVM.and e_1 (const? 127)) (lshr e (const? 8))))
          (const? 8))
        (mul (LLVM.and e_1 (const? 127)) (LLVM.and e (const? 127))) ⊑
      add
        (shl
          (add (mul (lshr e_1 (const? 8)) (LLVM.and e (const? 127)) { «nsw» := true, «nuw» := true })
            (mul (LLVM.and e_1 (const? 127)) (lshr e (const? 8)) { «nsw» := true, «nuw» := true })
            { «nsw» := false, «nuw» := true })
          (const? 8))
        (mul (LLVM.and e_1 (const? 127)) (LLVM.and e (const? 127)) { «nsw» := true, «nuw» := true }) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:335:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:335:8: (kernel) deep recursion detected
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:384:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 8),
    add
        (shl
          (add (mul (lshr e_1 (const? 3)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 3))))
          (const? 3))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      add
        (shl
          (add (mul (lshr e_1 (const? 3)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 3))))
          (const? 3))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15)) { «nsw» := false, «nuw» := true }) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:380:8: declaration uses 'sorry'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.gmul_fold
error: build failed
⚠ [2488/2503] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [2492/2503] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [2493/2503] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [2498/2503] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [2499/2503] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [2503/2503] Building SSA.Projects.InstCombine.tests.LLVM.gmul_fold
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/tcg40/.elan/toolchains/leanprover--lean4---nightly-2024-10-28/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gmul_fold.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gmul_fold.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/gmul_fold.c --json
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:45:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 8),
    add (shl (add (mul (lshr e_1 (const? 4)) e) (mul (lshr e (const? 4)) e_1)) (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:41:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:79:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 8),
    add
        (shl
          (add (mul (lshr e_1 (const? 4)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 4))))
          (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:75:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:113:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 16),
    add
        (shl
          (add (mul (lshr e_1 (const? 8)) (LLVM.and e (const? 255)))
            (mul (LLVM.and e_1 (const? 255)) (lshr e (const? 8))))
          (const? 8))
        (mul (LLVM.and e_1 (const? 255)) (LLVM.and e (const? 255))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:109:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:147:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add
        (shl
          (add (mul (lshr e_1 (const? 16)) (LLVM.and e (const? 65535)))
            (mul (LLVM.and e_1 (const? 65535)) (lshr e (const? 16))))
          (const? 16))
        (mul (LLVM.and e_1 (const? 65535)) (LLVM.and e (const? 65535))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:143:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:181:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 64),
    add
        (shl
          (add (mul (lshr e_1 (const? 32)) (LLVM.and e (const? 4294967295)))
            (mul (LLVM.and e_1 (const? 4294967295)) (lshr e (const? 32))))
          (const? 32))
        (mul (LLVM.and e_1 (const? 4294967295)) (LLVM.and e (const? 4294967295))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:177:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:215:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 128),
    add
        (shl
          (add (mul (lshr e_1 (const? 64)) (LLVM.and e (const? 18446744073709551615)))
            (mul (LLVM.and e_1 (const? 18446744073709551615)) (lshr e (const? 64))))
          (const? 64))
        (mul (LLVM.and e_1 (const? 18446744073709551615)) (LLVM.and e (const? 18446744073709551615))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:211:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:249:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 130),
    add
        (shl
          (add (mul (lshr e_1 (const? 65)) (LLVM.and e (const? 36893488147419103231)))
            (mul (LLVM.and e_1 (const? 36893488147419103231)) (lshr e (const? 65))))
          (const? 65))
        (mul (LLVM.and e_1 (const? 36893488147419103231)) (LLVM.and e (const? 36893488147419103231))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:245:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:294:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 9),
    add
        (shl
          (add (mul (lshr e_1 (const? 4)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 4))))
          (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      add
        (shl
          (add (mul (lshr e_1 (const? 4)) (LLVM.and e (const? 15)) { «nsw» := false, «nuw» := true })
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 4)) { «nsw» := false, «nuw» := true }))
          (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15)) { «nsw» := true, «nuw» := true }) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:290:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:339:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 16),
    add
        (shl
          (add (mul (lshr e_1 (const? 8)) (LLVM.and e (const? 127)))
            (mul (LLVM.and e_1 (const? 127)) (lshr e (const? 8))))
          (const? 8))
        (mul (LLVM.and e_1 (const? 127)) (LLVM.and e (const? 127))) ⊑
      add
        (shl
          (add (mul (lshr e_1 (const? 8)) (LLVM.and e (const? 127)) { «nsw» := true, «nuw» := true })
            (mul (LLVM.and e_1 (const? 127)) (lshr e (const? 8)) { «nsw» := true, «nuw» := true })
            { «nsw» := false, «nuw» := true })
          (const? 8))
        (mul (LLVM.and e_1 (const? 127)) (LLVM.and e (const? 127)) { «nsw» := true, «nuw» := true }) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:335:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:335:8: (kernel) deep recursion detected
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:384:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 8),
    add
        (shl
          (add (mul (lshr e_1 (const? 3)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 3))))
          (const? 3))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      add
        (shl
          (add (mul (lshr e_1 (const? 3)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 3))))
          (const? 3))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15)) { «nsw» := false, «nuw» := true }) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:380:8: declaration uses 'sorry'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.gmul_fold
error: build failed
⚠ [2488/2503] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [2492/2503] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [2493/2503] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [2498/2503] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [2499/2503] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [2503/2503] Building SSA.Projects.InstCombine.tests.LLVM.gmul_fold
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/tcg40/.elan/toolchains/leanprover--lean4---nightly-2024-10-28/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gmul_fold.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gmul_fold.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/gmul_fold.c --json
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:45:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 8),
    add (shl (add (mul (lshr e_1 (const? 4)) e) (mul (lshr e (const? 4)) e_1)) (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:41:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:79:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 8),
    add
        (shl
          (add (mul (lshr e_1 (const? 4)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 4))))
          (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:75:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:113:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 16),
    add
        (shl
          (add (mul (lshr e_1 (const? 8)) (LLVM.and e (const? 255)))
            (mul (LLVM.and e_1 (const? 255)) (lshr e (const? 8))))
          (const? 8))
        (mul (LLVM.and e_1 (const? 255)) (LLVM.and e (const? 255))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:109:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:147:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add
        (shl
          (add (mul (lshr e_1 (const? 16)) (LLVM.and e (const? 65535)))
            (mul (LLVM.and e_1 (const? 65535)) (lshr e (const? 16))))
          (const? 16))
        (mul (LLVM.and e_1 (const? 65535)) (LLVM.and e (const? 65535))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:143:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:181:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 64),
    add
        (shl
          (add (mul (lshr e_1 (const? 32)) (LLVM.and e (const? 4294967295)))
            (mul (LLVM.and e_1 (const? 4294967295)) (lshr e (const? 32))))
          (const? 32))
        (mul (LLVM.and e_1 (const? 4294967295)) (LLVM.and e (const? 4294967295))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:177:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:215:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 128),
    add
        (shl
          (add (mul (lshr e_1 (const? 64)) (LLVM.and e (const? 18446744073709551615)))
            (mul (LLVM.and e_1 (const? 18446744073709551615)) (lshr e (const? 64))))
          (const? 64))
        (mul (LLVM.and e_1 (const? 18446744073709551615)) (LLVM.and e (const? 18446744073709551615))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:211:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:249:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 130),
    add
        (shl
          (add (mul (lshr e_1 (const? 65)) (LLVM.and e (const? 36893488147419103231)))
            (mul (LLVM.and e_1 (const? 36893488147419103231)) (lshr e (const? 65))))
          (const? 65))
        (mul (LLVM.and e_1 (const? 36893488147419103231)) (LLVM.and e (const? 36893488147419103231))) ⊑
      mul e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:245:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:294:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 9),
    add
        (shl
          (add (mul (lshr e_1 (const? 4)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 4))))
          (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      add
        (shl
          (add (mul (lshr e_1 (const? 4)) (LLVM.and e (const? 15)) { «nsw» := false, «nuw» := true })
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 4)) { «nsw» := false, «nuw» := true }))
          (const? 4))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15)) { «nsw» := true, «nuw» := true }) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:290:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:339:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 16),
    add
        (shl
          (add (mul (lshr e_1 (const? 8)) (LLVM.and e (const? 127)))
            (mul (LLVM.and e_1 (const? 127)) (lshr e (const? 8))))
          (const? 8))
        (mul (LLVM.and e_1 (const? 127)) (LLVM.and e (const? 127))) ⊑
      add
        (shl
          (add (mul (lshr e_1 (const? 8)) (LLVM.and e (const? 127)) { «nsw» := true, «nuw» := true })
            (mul (LLVM.and e_1 (const? 127)) (lshr e (const? 8)) { «nsw» := true, «nuw» := true })
            { «nsw» := false, «nuw» := true })
          (const? 8))
        (mul (LLVM.and e_1 (const? 127)) (LLVM.and e (const? 127)) { «nsw» := true, «nuw» := true }) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:335:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:335:8: (kernel) deep recursion detected
info: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:384:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 8),
    add
        (shl
          (add (mul (lshr e_1 (const? 3)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 3))))
          (const? 3))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15))) ⊑
      add
        (shl
          (add (mul (lshr e_1 (const? 3)) (LLVM.and e (const? 15)))
            (mul (LLVM.and e_1 (const? 15)) (lshr e (const? 3))))
          (const? 3))
        (mul (LLVM.and e_1 (const? 15)) (LLVM.and e (const? 15)) { «nsw» := false, «nuw» := true }) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gmul_fold.lean:380:8: declaration uses 'sorry'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.gmul_fold
error: build failed
