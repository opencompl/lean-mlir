⚠ [90/2524] Replayed Mathlib.Control.Combinators
warning: ././.lake/packages/mathlib/././Mathlib/Control/Combinators.lean:35:4: `Monad.mapM'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Control/Combinators.lean:57:4: `Monad.sequence'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [2507/2524] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [2511/2524] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:350:4: declaration uses 'sorry'
⚠ [2512/2524] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [2517/2524] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [2518/2524] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [2524/2524] Building SSA.Projects.InstCombine.tests.LLVM.gnot
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/plausible/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/tobiascgrosser/.elan/toolchains/leanprover--lean4---nightly-2024-11-08/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gnot.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gnot.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/gnot.c --json
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:37:17: theorem extracted_1 (e : IntW 32) : LLVM.xor (LLVM.xor e (const? 32 (-1))) (const? 32 (-1)) ⊑ e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:32:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:64:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.xor (icmp IntPredicate.sle e_1 e) (const? 1 1) ⊑ icmp IntPredicate.sgt e_1 e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:59:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:92:17: theorem extracted_1 (e e_1 : IntW 32) :
  icmp IntPredicate.slt (LLVM.xor e_1 (const? 32 (-1))) (LLVM.xor e (const? 32 (-1))) ⊑
    icmp IntPredicate.sgt e_1 e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:87:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:121:17: theorem extracted_1 (e : IntW 32) :
  icmp IntPredicate.ugt (LLVM.xor e (const? 32 (-1))) (const? 32 42) ⊑
    icmp IntPredicate.ult e (const? 32 (-43)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:116:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:149:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.xor (ashr (LLVM.xor e_1 (const? 32 (-1))) e) (const? 32 (-1)) ⊑ ashr e_1 e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:144:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:178:17: theorem extracted_1 (e : IntW 8) : LLVM.xor (ashr (const? 8 (-42)) e) (const? 8 (-1)) ⊑ lshr (const? 8 41) e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:173:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:207:17: theorem extracted_1 (e : IntW 8) : LLVM.xor (lshr (const? 8 42) e) (const? 8 (-1)) ⊑ ashr (const? 8 (-43)) e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:202:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:236:17: theorem extracted_1 (e : IntW 32) :
  LLVM.xor (sub (const? 32 123) e) (const? 32 (-1)) ⊑ add e (const? 32 (-124)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:231:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:265:17: theorem extracted_1 (e : IntW 32) :
  LLVM.xor (add e (const? 32 123)) (const? 32 (-1)) ⊑ sub (const? 32 (-124)) e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:260:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:297:17: theorem extracted_1 (e e_1 : IntW 8) :
  LLVM.xor (LLVM.or (sub (const? 8 0) e_1) e) (const? 8 (-1)) ⊑
    LLVM.and (add e_1 (const? 8 (-1))) (LLVM.xor e (const? 8 (-1))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:292:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:327:17: theorem extracted_1 (e e_1 : IntW 1) :
  LLVM.xor (select e_1 e (const? 1 1)) (const? 1 1) ⊑ select e_1 (LLVM.xor e (const? 1 1)) (const? 1 0) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:322:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:357:17: theorem extracted_1 (e e_1 : IntW 1) :
  LLVM.xor (select e_1 (const? 1 0) e) (const? 1 1) ⊑ select e_1 (const? 1 1) (LLVM.xor e (const? 1 1)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:352:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:388:17: theorem extracted_1 (e e_1 : IntW 1) :
  LLVM.xor (select e_1 (LLVM.xor e (const? 1 1)) (const? 1 0)) (const? 1 1) ⊑
    select (LLVM.xor e_1 (const? 1 1)) (const? 1 1) e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:383:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:419:17: theorem extracted_1 (e e_1 : IntW 1) :
  LLVM.xor (select e_1 (const? 1 1) (LLVM.xor e (const? 1 1))) (const? 1 1) ⊑
    select (LLVM.xor e_1 (const? 1 1)) e (const? 1 0) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:414:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:450:17: theorem extracted_1 (e e_1 : IntW 32) :
  icmp IntPredicate.sgt (add e_1 (LLVM.xor e (const? 32 (-1)))) (const? 32 0) ⊑
    icmp IntPredicate.slt (sub e e_1) (const? 32 (-1)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:445:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:481:17: theorem extracted_1 (e e_1 : IntW 32) :
  icmp IntPredicate.ult (sub (LLVM.xor e_1 (const? 32 (-1))) e) (const? 32 42) ⊑
    icmp IntPredicate.ugt (add e_1 e) (const? 32 (-43)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:476:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:514:17: theorem extracted_1 (e e_1 e_2 : IntW 32) (e_3 : IntW 1) :
  icmp IntPredicate.sle (select e_3 (add e_2 (LLVM.xor e_1 (const? 32 (-1)))) (LLVM.xor e (const? 32 (-1))))
      (LLVM.xor e_2 (const? 32 (-1))) ⊑
    icmp IntPredicate.sge (select e_3 (sub e_1 e_2) e) e_2 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:509:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:547:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.xor (add e_1 (sext 32 (icmp IntPredicate.eq e (const? 32 0)))) (const? 32 (-1)) ⊑
    sub (sext 32 (icmp IntPredicate.ne e (const? 32 0))) e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:542:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:582:17: theorem extracted_1 (e : IntW 64) (e_1 : IntW 32) (e_2 : IntW 64) :
  sub (add e_2 (const? 64 (-5))) (add (zext 64 (LLVM.xor e_1 (const? 32 (-1)))) e) ⊑
    add (add e_2 (const? 64 (-4))) (sub (sext 64 e_1) e) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:577:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:616:17: theorem extracted_1 (e : IntW 8) :
  LLVM.xor (trunc 8 (ashr (add (zext 32 e) (const? 32 (-1)) { «nsw» := true, «nuw» := false }) (const? 32 31)))
      (const? 8 (-1)) ⊑
    sext 8 (icmp IntPredicate.ne e (const? 8 0)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:611:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:655:17: theorem extracted_1 (e e_1 e_2 : IntW 64) :
  LLVM.xor
      (LLVM.or (LLVM.or (icmp IntPredicate.ugt e_2 (const? 64 23)) (icmp IntPredicate.ugt e_1 (const? 64 59)))
        (icmp IntPredicate.ugt e (const? 64 59)))
      (const? 1 1) ⊑
    LLVM.and (LLVM.and (icmp IntPredicate.ult e_2 (const? 64 24)) (icmp IntPredicate.ult e_1 (const? 64 60)))
      (icmp IntPredicate.ult e (const? 64 60)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:650:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:709:109: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:754:17: theorem extracted_1 (e e_1 : IntW 64) :
  LLVM.xor
      (LLVM.or (icmp IntPredicate.eq e_1 (const? 64 0))
        (select (icmp IntPredicate.eq e_1 (const? 64 27)) (const? 1 1) (icmp IntPredicate.eq e (const? 64 0))))
      (const? 1 1) ⊑
    LLVM.and (icmp IntPredicate.ne e_1 (const? 64 0))
      (select (icmp IntPredicate.ne e_1 (const? 64 27)) (icmp IntPredicate.ne e (const? 64 0)) (const? 1 0)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:749:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:786:17: theorem extracted_1 (e : IntW 64) :
  LLVM.xor (LLVM.and (add e (const? 64 9223372036854775807)) (const? 64 9223372036854775807)) (const? 64 (-1)) ⊑
    LLVM.or (sub (const? 64 0) e) (const? 64 (-9223372036854775808)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:781:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:820:17: theorem extracted_1 (e e_1 : IntW 32) :
  icmp IntPredicate.eq (LLVM.and (add e_1 (LLVM.xor e (const? 32 (-1)))) (const? 32 4095)) (const? 32 0) ⊑
    icmp IntPredicate.eq (LLVM.and (sub e e_1) (const? 32 4095)) (const? 32 4095) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:815:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:861:17: theorem extracted_1 (e e_1 : IntW 64) :
  LLVM.xor
      (LLVM.or (icmp IntPredicate.eq e_1 (const? 64 0))
        (select (icmp IntPredicate.eq e_1 (const? 64 27)) (icmp IntPredicate.eq e (const? 64 0)) (const? 1 0)))
      (const? 1 1) ⊑
    LLVM.and (icmp IntPredicate.ne e_1 (const? 64 0))
      (select (icmp IntPredicate.ne e_1 (const? 64 27)) (const? 1 1) (icmp IntPredicate.ne e (const? 64 0))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gnot.lean:856:8: declaration uses 'sorry'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.gnot
error: build failed
