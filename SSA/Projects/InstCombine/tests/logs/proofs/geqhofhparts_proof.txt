⚠ [90/2524] Replayed Mathlib.Control.Combinators
warning: ././.lake/packages/mathlib/././Mathlib/Control/Combinators.lean:35:4: `Monad.mapM'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Control/Combinators.lean:57:4: `Monad.sequence'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [834/2524] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [1454/2524] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [1586/2524] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [1589/2524] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:350:4: declaration uses 'sorry'
⚠ [1590/2524] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [2524/2524] Building SSA.Projects.InstCombine.tests.LLVM.geqhofhparts
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/plausible/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/tobiascgrosser/.elan/toolchains/leanprover--lean4---nightly-2024-11-08/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.c --json
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:47:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.and (icmp IntPredicate.eq (trunc 8 e_1) (trunc 8 e))
      (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8)))) ⊑
    icmp IntPredicate.eq (trunc 16 e_1) (trunc 16 e) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:42:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:85:55: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
error: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:133:58: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:180:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.and (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16))))
      (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8)))) ⊑
    icmp IntPredicate.eq (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:175:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:222:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.and (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8))))
      (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16)))) ⊑
    icmp IntPredicate.eq (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:217:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:264:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.and (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16))))
      (icmp IntPredicate.eq (trunc 8 (lshr e (const? 32 8))) (trunc 8 (lshr e_1 (const? 32 8)))) ⊑
    icmp IntPredicate.eq (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:259:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:306:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.and (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16))))
      (icmp IntPredicate.eq (trunc 8 (lshr e (const? 32 8))) (trunc 8 (lshr e_1 (const? 32 8)))) ⊑
    icmp IntPredicate.eq (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:301:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:348:17: theorem extracted_1 (e e_1 : IntW 31) :
  LLVM.and (icmp IntPredicate.eq (trunc 5 (lshr e_1 (const? 31 13))) (trunc 5 (lshr e (const? 31 13))))
      (icmp IntPredicate.eq (trunc 6 (lshr e_1 (const? 31 7))) (trunc 6 (lshr e (const? 31 7)))) ⊑
    icmp IntPredicate.eq (trunc 11 (lshr e_1 (const? 31 7))) (trunc 11 (lshr e (const? 31 7))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:343:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:391:17: theorem extracted_1 (e e_1 : IntW 32) :
  select (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16))))
      (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8)))) (const? 1 0) ⊑
    icmp IntPredicate.eq (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:386:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:430:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.and (icmp IntPredicate.eq (trunc 24 (lshr e_1 (const? 32 16))) (trunc 24 (lshr e (const? 32 16))))
      (icmp IntPredicate.eq (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8)))) ⊑
    icmp IntPredicate.ult (LLVM.xor e_1 e) (const? 32 256) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:425:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:466:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.or (icmp IntPredicate.ne (trunc 8 e_1) (trunc 8 e))
      (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8)))) ⊑
    icmp IntPredicate.ne (trunc 16 e_1) (trunc 16 e) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:461:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:504:55: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
error: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:552:58: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:599:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.or (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16))))
      (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8)))) ⊑
    icmp IntPredicate.ne (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:594:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:641:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.or (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8))))
      (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16)))) ⊑
    icmp IntPredicate.ne (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:636:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:683:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.or (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16))))
      (icmp IntPredicate.ne (trunc 8 (lshr e (const? 32 8))) (trunc 8 (lshr e_1 (const? 32 8)))) ⊑
    icmp IntPredicate.ne (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:678:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:725:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.or (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16))))
      (icmp IntPredicate.ne (trunc 8 (lshr e (const? 32 8))) (trunc 8 (lshr e_1 (const? 32 8)))) ⊑
    icmp IntPredicate.ne (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:720:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:767:17: theorem extracted_1 (e e_1 : IntW 31) :
  LLVM.or (icmp IntPredicate.ne (trunc 5 (lshr e_1 (const? 31 13))) (trunc 5 (lshr e (const? 31 13))))
      (icmp IntPredicate.ne (trunc 6 (lshr e_1 (const? 31 7))) (trunc 6 (lshr e (const? 31 7)))) ⊑
    icmp IntPredicate.ne (trunc 11 (lshr e_1 (const? 31 7))) (trunc 11 (lshr e (const? 31 7))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:762:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:810:17: theorem extracted_1 (e e_1 : IntW 32) :
  select (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 16))) (trunc 8 (lshr e (const? 32 16)))) (const? 1 1)
      (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8)))) ⊑
    icmp IntPredicate.ne (trunc 16 (lshr e_1 (const? 32 8))) (trunc 16 (lshr e (const? 32 8))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:805:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:849:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.or (icmp IntPredicate.ne (trunc 24 (lshr e_1 (const? 32 16))) (trunc 24 (lshr e (const? 32 16))))
      (icmp IntPredicate.ne (trunc 8 (lshr e_1 (const? 32 8))) (trunc 8 (lshr e (const? 32 8)))) ⊑
    icmp IntPredicate.ugt (LLVM.xor e_1 e) (const? 32 255) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:844:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:880:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.and (icmp IntPredicate.ult (LLVM.xor e_1 e) (const? 32 33554432))
      (icmp IntPredicate.eq (trunc 25 e) (trunc 25 e_1)) ⊑
    icmp IntPredicate.eq e_1 e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:875:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:911:17: theorem extracted_1 (e e_1 : IntW 32) :
  LLVM.or (icmp IntPredicate.ugt (LLVM.xor e_1 e) (const? 32 16777215))
      (icmp IntPredicate.ne (trunc 24 e) (trunc 24 e_1)) ⊑
    icmp IntPredicate.ne e_1 e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/geqhofhparts.lean:906:8: declaration uses 'sorry'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.geqhofhparts
error: build failed
