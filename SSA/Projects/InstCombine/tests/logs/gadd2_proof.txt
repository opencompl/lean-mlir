⚠ [2488/2503] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [2492/2503] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [2493/2503] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [2498/2503] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [2499/2503] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [2503/2503] Building SSA.Projects.InstCombine.tests.LLVM.gadd2
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/tcg40/.elan/toolchains/leanprover--lean4---nightly-2024-10-28/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gadd2.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gadd2.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/gadd2.c --json
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:40:17: theorem extracted_1 :
  ∀ (e : IntW 64) (e_1 : IntW 32),
    LLVM.and (add (shl (zext 64 e_1) (const? 32)) e) (const? 123) ⊑ LLVM.and e (const? 123) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:36:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:68:17: theorem extracted_1 :
  ∀ (e : IntW 32), add (LLVM.and e (const? 7)) (LLVM.and e (const? 32)) ⊑ LLVM.and e (const? 39) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:64:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:99:17: theorem extracted_1 :
  ∀ (e : IntW 32),
    add (LLVM.and e (const? 128)) (lshr e (const? 30)) ⊑ LLVM.or (LLVM.and e (const? 128)) (lshr e (const? 30)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:95:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:123:17: theorem extracted_1 :
  ∀ (e : IntW 32),
    add e e { «nsw» := false, «nuw» := true } ⊑ shl e (const? 1) { «nsw» := false, «nuw» := true } := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:119:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:151:17: theorem extracted_1 : ∀ (e : IntW 16), add (mul e (const? 2)) (mul e (const? 32767)) ⊑ mul e (const? (-32767)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:147:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:186:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (add e_1 (const? 1)) (LLVM.xor (LLVM.or (ashr e (const? 3)) (const? (-1431655766))) (const? 1431655765)) ⊑
      sub e_1 (LLVM.and (ashr e (const? 3)) (const? 1431655765)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:182:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:217:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (add e_1 (const? 1)) (LLVM.xor (LLVM.or e (const? (-1431655766))) (const? 1431655765)) ⊑
      sub e_1 (LLVM.and e (const? 1431655765)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:213:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:248:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (add e_1 (const? 1) { «nsw» := true, «nuw» := false })
        (LLVM.xor (LLVM.or e (const? (-1431655766))) (const? 1431655765)) { «nsw» := true, «nuw» := false } ⊑
      sub e_1 (LLVM.and e (const? 1431655765)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:244:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:279:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (add e_1 (const? 1)) (LLVM.xor (LLVM.or e (const? (-1431655767))) (const? 1431655766)) ⊑
      sub e_1 (LLVM.and e (const? 1431655766)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:275:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:310:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (add e_1 (const? 1) { «nsw» := true, «nuw» := false })
        (LLVM.xor (LLVM.or e (const? (-1431655767))) (const? 1431655766)) { «nsw» := true, «nuw» := false } ⊑
      sub e_1 (LLVM.and e (const? 1431655766)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:306:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:340:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (add e_1 (const? 1)) (LLVM.xor (LLVM.and e (const? (-1431655767))) (const? (-1431655767))) ⊑
      sub e_1 (LLVM.or e (const? 1431655766)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:336:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:370:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (add e_1 (const? 1) { «nsw» := true, «nuw» := false })
        (LLVM.xor (LLVM.and e (const? (-1431655767))) (const? (-1431655767))) { «nsw» := true, «nuw» := false } ⊑
      sub e_1 (LLVM.or e (const? 1431655766)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:366:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:399:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (LLVM.xor (LLVM.and e_1 (const? (-1431655766))) (const? (-1431655765))) e { «nsw» := true, «nuw» := false } ⊑
      sub e (LLVM.or e_1 (const? 1431655765)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:395:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:429:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (add e_1 (const? 1) { «nsw» := true, «nuw» := false })
        (LLVM.xor (LLVM.and e (const? (-1431655766))) (const? (-1431655766))) { «nsw» := true, «nuw» := false } ⊑
      sub e_1 (LLVM.or e (const? 1431655765)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:425:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:454:17: theorem extracted_1 :
  ∀ (e : IntW 16),
    add (add e e { «nsw» := true, «nuw» := false }) e { «nsw» := true, «nuw» := false } ⊑
      mul e (const? 3) { «nsw» := true, «nuw» := false } := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:450:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:480:17: theorem extracted_1 :
  ∀ (e : IntW 16),
    add e (mul e (const? 8) { «nsw» := true, «nuw» := false }) { «nsw» := true, «nuw» := false } ⊑
      mul e (const? 9) { «nsw» := true, «nuw» := false } := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:476:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:506:17: theorem extracted_1 :
  ∀ (e : IntW 16),
    add (mul e (const? 8) { «nsw» := true, «nuw» := false }) e { «nsw» := true, «nuw» := false } ⊑
      mul e (const? 9) { «nsw» := true, «nuw» := false } := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:502:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:534:17: theorem extracted_1 :
  ∀ (e : IntW 16),
    add (mul e (const? 2)) (mul e (const? 3)) { «nsw» := true, «nuw» := false } ⊑ mul e (const? 5) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:530:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:562:17: theorem extracted_1 :
  ∀ (e : IntW 16),
    add (mul e (const? 2) { «nsw» := true, «nuw» := false }) (mul e (const? 7) { «nsw» := true, «nuw» := false })
        { «nsw» := true, «nuw» := false } ⊑
      mul e (const? 9) { «nsw» := true, «nuw» := false } := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:558:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:590:17: theorem extracted_1 :
  ∀ (e : IntW 16),
    add (mul e (const? 3) { «nsw» := true, «nuw» := false }) (mul e (const? 7) { «nsw» := true, «nuw» := false })
        { «nsw» := true, «nuw» := false } ⊑
      mul e (const? 10) { «nsw» := true, «nuw» := false } := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:586:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:618:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    add (mul e_1 e { «nsw» := true, «nuw» := false })
        (mul (mul e_1 e { «nsw» := true, «nuw» := false }) (const? 5) { «nsw» := true, «nuw» := false })
        { «nsw» := true, «nuw» := false } ⊑
      mul (mul e_1 e { «nsw» := true, «nuw» := false }) (const? 6) { «nsw» := true, «nuw» := false } := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:614:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:644:17: theorem extracted_1 :
  ∀ (e : IntW 16),
    add e (mul e (const? 32767) { «nsw» := true, «nuw» := false }) { «nsw» := true, «nuw» := false } ⊑
      shl e (const? 15) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:640:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:672:17: theorem extracted_1 :
  ∀ (e : IntW 16),
    add (mul e (const? 16383) { «nsw» := true, «nuw» := false })
        (mul e (const? 16384) { «nsw» := true, «nuw» := false }) { «nsw» := true, «nuw» := false } ⊑
      mul e (const? 32767) { «nsw» := true, «nuw» := false } := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:668:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:668:8: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:677:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:687:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:695:33: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:695:33: tactic 'rfl' failed, the left-hand side
  ⟦?m.483163⟧
is not definitionally equal to the right-hand side
  Option ?m.483161
mul_add_to_mul_9_before mul_add_to_mul_9_after : Com InstCombine.LLVM ?m.483162 EffectKind.pure ?m.483163
⊢ ⟦?m.483163⟧ = Option ?m.483161
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:696:9: tactic 'unfold' failed, local variable 'mul_add_to_mul_9_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:704:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:713:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:720:27: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:720:27: tactic 'rfl' failed, the left-hand side
  ⟦?m.489101⟧
is not definitionally equal to the right-hand side
  Option ?m.489099
add_or_and_before add_or_and_after : Com InstCombine.LLVM ?m.489100 EffectKind.pure ?m.489101
⊢ ⟦?m.489101⟧ = Option ?m.489099
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:721:9: tactic 'unfold' failed, local variable 'add_or_and_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:729:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:738:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:745:39: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:745:39: tactic 'rfl' failed, the left-hand side
  ⟦?m.495081⟧
is not definitionally equal to the right-hand side
  Option ?m.495079
add_or_and_commutative_before add_or_and_commutative_after : Com InstCombine.LLVM ?m.495080 EffectKind.pure ?m.495081
⊢ ⟦?m.495081⟧ = Option ?m.495079
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:746:9: tactic 'unfold' failed, local variable 'add_or_and_commutative_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:754:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:763:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:770:27: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:770:27: tactic 'rfl' failed, the left-hand side
  ⟦?m.501061⟧
is not definitionally equal to the right-hand side
  Option ?m.501059
add_and_or_before add_and_or_after : Com InstCombine.LLVM ?m.501060 EffectKind.pure ?m.501061
⊢ ⟦?m.501061⟧ = Option ?m.501059
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:771:9: tactic 'unfold' failed, local variable 'add_and_or_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:779:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:788:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:795:39: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:795:39: tactic 'rfl' failed, the left-hand side
  ⟦?m.507041⟧
is not definitionally equal to the right-hand side
  Option ?m.507039
add_and_or_commutative_before add_and_or_commutative_after : Com InstCombine.LLVM ?m.507040 EffectKind.pure ?m.507041
⊢ ⟦?m.507041⟧ = Option ?m.507039
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:796:9: tactic 'unfold' failed, local variable 'add_and_or_commutative_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:804:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:813:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:820:31: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:820:31: tactic 'rfl' failed, the left-hand side
  ⟦?m.513615⟧
is not definitionally equal to the right-hand side
  Option ?m.513613
add_nsw_or_and_before add_nsw_or_and_after : Com InstCombine.LLVM ?m.513614 EffectKind.pure ?m.513615
⊢ ⟦?m.513615⟧ = Option ?m.513613
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:821:9: tactic 'unfold' failed, local variable 'add_nsw_or_and_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:829:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:838:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:845:31: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:845:31: tactic 'rfl' failed, the left-hand side
  ⟦?m.520209⟧
is not definitionally equal to the right-hand side
  Option ?m.520207
add_nuw_or_and_before add_nuw_or_and_after : Com InstCombine.LLVM ?m.520208 EffectKind.pure ?m.520209
⊢ ⟦?m.520209⟧ = Option ?m.520207
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:846:9: tactic 'unfold' failed, local variable 'add_nuw_or_and_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:854:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:863:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:870:35: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:870:35: tactic 'rfl' failed, the left-hand side
  ⟦?m.526796⟧
is not definitionally equal to the right-hand side
  Option ?m.526794
add_nuw_nsw_or_and_before add_nuw_nsw_or_and_after : Com InstCombine.LLVM ?m.526795 EffectKind.pure ?m.526796
⊢ ⟦?m.526796⟧ = Option ?m.526794
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:871:9: tactic 'unfold' failed, local variable 'add_nuw_nsw_or_and_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:879:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:888:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:896:27: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:896:27: tactic 'rfl' failed, the left-hand side
  ⟦?m.535592⟧
is not definitionally equal to the right-hand side
  Option ?m.535590
add_of_mul_before add_of_mul_after : Com InstCombine.LLVM ?m.535591 EffectKind.pure ?m.535592
⊢ ⟦?m.535592⟧ = Option ?m.535590
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:897:9: tactic 'unfold' failed, local variable 'add_of_mul_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:905:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:917:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:925:31: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:925:31: tactic 'rfl' failed, the left-hand side
  ⟦?m.543913⟧
is not definitionally equal to the right-hand side
  Option ?m.543911
add_of_selects_before add_of_selects_after : Com InstCombine.LLVM ?m.543912 EffectKind.pure ?m.543913
⊢ ⟦?m.543913⟧ = Option ?m.543911
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:926:9: tactic 'unfold' failed, local variable 'add_of_selects_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:934:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:946:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:956:40: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:956:40: tactic 'rfl' failed, the left-hand side
  ⟦?m.553285⟧
is not definitionally equal to the right-hand side
  Option ?m.553283
add_undemanded_low_bits_before add_undemanded_low_bits_after : Com InstCombine.LLVM ?m.553284 EffectKind.pure ?m.553285
⊢ ⟦?m.553285⟧ = Option ?m.553283
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:957:9: tactic 'unfold' failed, local variable 'add_undemanded_low_bits_before' has no definition
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:965:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:977:4: (kernel) deterministic timeout
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:987:40: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:987:40: tactic 'rfl' failed, the left-hand side
  ⟦?m.562807⟧
is not definitionally equal to the right-hand side
  Option ?m.562805
sub_undemanded_low_bits_before sub_undemanded_low_bits_after : Com InstCombine.LLVM ?m.562806 EffectKind.pure ?m.562807
⊢ ⟦?m.562807⟧ = Option ?m.562805
error: ././././SSA/Projects/InstCombine/tests/LLVM/gadd2.lean:988:9: tactic 'unfold' failed, local variable 'sub_undemanded_low_bits_before' has no definition
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.gadd2
error: build failed
