⚠ [2488/2503] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [2492/2503] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [2493/2503] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [2498/2503] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [2499/2503] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [2503/2503] Building SSA.Projects.InstCombine.tests.LLVM.gand2
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/lc985/.elan/toolchains/leanprover--lean4---nightly-2024-10-28/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gand2.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gand2.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/gand2.c --json
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:35:17: theorem extracted_1 : ∀ (e e_1 : IntW 1), LLVM.and (LLVM.and e_1 e) e_1 ⊑ LLVM.and e_1 e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:31:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:43:40: cannot convert suffix of i/f to int: false
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:52:40: cannot convert suffix of i/f to int: false
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:57:30: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:57:30: tactic 'rfl' failed, the left-hand side
  ⟦?m.17078⟧
is not definitionally equal to the right-hand side
  Option ?m.17076
test2_logical_before test2_logical_after : Com InstCombine.LLVM ?m.17077 EffectKind.pure ?m.17078
⊢ ⟦?m.17078⟧ = Option ?m.17076
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:58:9: tactic 'unfold' failed, local variable 'test2_logical_before' has no definition
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:85:17: theorem extracted_1 : ∀ (e e_1 : IntW 32), LLVM.and e_1 (LLVM.and e e_1) ⊑ LLVM.and e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:81:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:112:17: theorem extracted_1 : ∀ (e : IntW 64), LLVM.and (sub (const? 0) e) (const? 1) ⊑ LLVM.and e (const? 1) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:108:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:142:17: theorem extracted_1 :
  ∀ (e : IntW 64),
    add (sub (const? 0) e) (LLVM.and (sub (const? 0) e) (const? 1)) ⊑ sub (const? 0) (LLVM.and e (const? (-2))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:138:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:168:17: theorem extracted_1 : ∀ (e : IntW 8), LLVM.and (lshr (const? 1) e) (const? 1) ⊑ lshr (const? 1) e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:164:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:196:17: theorem extracted_1 :
  ∀ (e : IntW 8),
    add (lshr (const? 1) e) (LLVM.and (lshr (const? 1) e) (const? 1)) ⊑ shl (lshr (const? 1) e) (const? 1) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:192:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:228:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (add (shl e_1 (const? 8)) e) (const? 128)) (shl e_1 (const? 8)) ⊑
      mul (LLVM.and e (const? 128)) (shl e_1 (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:224:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:260:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (add e_1 (shl e (const? 8))) (const? 128)) (shl e (const? 8)) ⊑
      mul (LLVM.and e_1 (const? 128)) (shl e (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:256:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:292:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (sub e_1 (shl e (const? 8))) (const? 128)) (shl e (const? 8)) ⊑
      mul (LLVM.and e_1 (const? 128)) (shl e (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:288:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:326:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (sub (shl e_1 (const? 8)) e) (const? 128)) (shl e_1 (const? 8)) ⊑
      mul (LLVM.and (sub (const? 0) e) (const? 128)) (shl e_1 (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:322:8: declaration uses 'sorry'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.gand2
error: build failed
⚠ [2488/2503] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [2492/2503] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [2493/2503] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [2498/2503] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [2499/2503] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [2503/2503] Building SSA.Projects.InstCombine.tests.LLVM.gand2
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/lc985/.elan/toolchains/leanprover--lean4---nightly-2024-10-28/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gand2.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gand2.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/gand2.c --json
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:35:17: theorem extracted_1 : ∀ (e e_1 : IntW 1), LLVM.and (LLVM.and e_1 e) e_1 ⊑ LLVM.and e_1 e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:31:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:43:40: cannot convert suffix of i/f to int: false
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:52:40: cannot convert suffix of i/f to int: false
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:57:30: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:57:30: tactic 'rfl' failed, the left-hand side
  ⟦?m.17078⟧
is not definitionally equal to the right-hand side
  Option ?m.17076
test2_logical_before test2_logical_after : Com InstCombine.LLVM ?m.17077 EffectKind.pure ?m.17078
⊢ ⟦?m.17078⟧ = Option ?m.17076
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:58:9: tactic 'unfold' failed, local variable 'test2_logical_before' has no definition
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:85:17: theorem extracted_1 : ∀ (e e_1 : IntW 32), LLVM.and e_1 (LLVM.and e e_1) ⊑ LLVM.and e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:81:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:112:17: theorem extracted_1 : ∀ (e : IntW 64), LLVM.and (sub (const? 0) e) (const? 1) ⊑ LLVM.and e (const? 1) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:108:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:142:17: theorem extracted_1 :
  ∀ (e : IntW 64),
    add (sub (const? 0) e) (LLVM.and (sub (const? 0) e) (const? 1)) ⊑ sub (const? 0) (LLVM.and e (const? (-2))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:138:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:168:17: theorem extracted_1 : ∀ (e : IntW 8), LLVM.and (lshr (const? 1) e) (const? 1) ⊑ lshr (const? 1) e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:164:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:196:17: theorem extracted_1 :
  ∀ (e : IntW 8),
    add (lshr (const? 1) e) (LLVM.and (lshr (const? 1) e) (const? 1)) ⊑ shl (lshr (const? 1) e) (const? 1) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:192:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:228:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (add (shl e_1 (const? 8)) e) (const? 128)) (shl e_1 (const? 8)) ⊑
      mul (LLVM.and e (const? 128)) (shl e_1 (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:224:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:260:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (add e_1 (shl e (const? 8))) (const? 128)) (shl e (const? 8)) ⊑
      mul (LLVM.and e_1 (const? 128)) (shl e (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:256:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:292:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (sub e_1 (shl e (const? 8))) (const? 128)) (shl e (const? 8)) ⊑
      mul (LLVM.and e_1 (const? 128)) (shl e (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:288:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:326:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (sub (shl e_1 (const? 8)) e) (const? 128)) (shl e_1 (const? 8)) ⊑
      mul (LLVM.and (sub (const? 0) e) (const? 128)) (shl e_1 (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:322:8: declaration uses 'sorry'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.gand2
error: build failed
⚠ [2488/2503] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [2492/2503] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [2493/2503] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [2498/2503] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [2499/2503] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [2503/2503] Building SSA.Projects.InstCombine.tests.LLVM.gand2
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/lc985/.elan/toolchains/leanprover--lean4---nightly-2024-10-28/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gand2.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gand2.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/gand2.c --json
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:35:17: theorem extracted_1 : ∀ (e e_1 : IntW 1), LLVM.and (LLVM.and e_1 e) e_1 ⊑ LLVM.and e_1 e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:31:8: declaration uses 'sorry'
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:43:40: cannot convert suffix of i/f to int: false
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:52:40: cannot convert suffix of i/f to int: false
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:57:30: could not synthesize default value for parameter 'h' using tactics
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:57:30: tactic 'rfl' failed, the left-hand side
  ⟦?m.17078⟧
is not definitionally equal to the right-hand side
  Option ?m.17076
test2_logical_before test2_logical_after : Com InstCombine.LLVM ?m.17077 EffectKind.pure ?m.17078
⊢ ⟦?m.17078⟧ = Option ?m.17076
error: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:58:9: tactic 'unfold' failed, local variable 'test2_logical_before' has no definition
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:85:17: theorem extracted_1 : ∀ (e e_1 : IntW 32), LLVM.and e_1 (LLVM.and e e_1) ⊑ LLVM.and e e_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:81:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:112:17: theorem extracted_1 : ∀ (e : IntW 64), LLVM.and (sub (const? 0) e) (const? 1) ⊑ LLVM.and e (const? 1) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:108:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:142:17: theorem extracted_1 :
  ∀ (e : IntW 64),
    add (sub (const? 0) e) (LLVM.and (sub (const? 0) e) (const? 1)) ⊑ sub (const? 0) (LLVM.and e (const? (-2))) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:138:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:168:17: theorem extracted_1 : ∀ (e : IntW 8), LLVM.and (lshr (const? 1) e) (const? 1) ⊑ lshr (const? 1) e := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:164:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:196:17: theorem extracted_1 :
  ∀ (e : IntW 8),
    add (lshr (const? 1) e) (LLVM.and (lshr (const? 1) e) (const? 1)) ⊑ shl (lshr (const? 1) e) (const? 1) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:192:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:228:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (add (shl e_1 (const? 8)) e) (const? 128)) (shl e_1 (const? 8)) ⊑
      mul (LLVM.and e (const? 128)) (shl e_1 (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:224:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:260:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (add e_1 (shl e (const? 8))) (const? 128)) (shl e (const? 8)) ⊑
      mul (LLVM.and e_1 (const? 128)) (shl e (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:256:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:292:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (sub e_1 (shl e (const? 8))) (const? 128)) (shl e (const? 8)) ⊑
      mul (LLVM.and e_1 (const? 128)) (shl e (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:288:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:326:17: theorem extracted_1 :
  ∀ (e e_1 : IntW 32),
    mul (LLVM.and (sub (shl e_1 (const? 8)) e) (const? 128)) (shl e_1 (const? 8)) ⊑
      mul (LLVM.and (sub (const? 0) e) (const? 128)) (shl e_1 (const? 8)) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gand2.lean:322:8: declaration uses 'sorry'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.gand2
error: build failed
