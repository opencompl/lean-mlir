error: build failed
⚠ [2443/2457] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [2447/2457] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [2451/2457] Replayed SSA.Experimental.Bits.AutoStructs.Basic
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:99:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:102:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:104:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:106:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:109:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:111:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:113:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:116:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:127:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:164:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:335:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:408:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:443:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:477:6: declaration uses 'sorry'
⚠ [2453/2457] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:24:38: structure ... :=' has been deprecated in favor of 'structure ... where'.
note: this linter can be disabled with `set_option linter.deprecated false`
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:511:59: structure ... :=' has been deprecated in favor of 'structure ... where'.
note: this linter can be disabled with `set_option linter.deprecated false`
✖ [2457/2457] Building SSA.Projects.InstCombine.tests.LLVM.gxor
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/MD4Lean/.lake/build/lib:././.lake/packages/UnicodeBasic/.lake/build/lib:././.lake/packages/BibtexQuery/.lake/build/lib:././.lake/packages/doc-gen4/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib LD_LIBRARY_PATH= /home/lfrenot/.elan/toolchains/leanprover--lean4---nightly-2024-10-15/bin/lean ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gxor.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/LLVM/gxor.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/LLVM/gxor.c --json
error: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:19:40: cannot convert suffix of i/f to int: false
error: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:31:2: tactic 'unfold' failed to unfold 'test0_before' at
  (test0_before ⊑ test0_after) ⋯
error: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:84:40: cannot convert suffix of i/f to int: false
error: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:89:2: tactic 'unfold' failed to unfold 'test2_after' at
  (Com.changeDialect (InstcombineTransformDialect.MOp.instantiateCom ⟨[], test2_before.proof_1⟩)
        (Com.var
          (Expr.mk (InstCombine.MOp.binary 1 InstCombine.MOp.BinaryOp.xor) test2_before.proof_2 test2_before.proof_3
            (⟨0, test2_before.proof_4⟩::ₕ(test2_before.proof_5 ▸ ⟨0, test2_before.proof_4⟩::ₕHVector.nil)) HVector.nil)
          (Com.ret ⟨0, test2_before.proof_6⟩)) ⊑
      test2_after)
    ⋯
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:158:17: theorem extracted_1 (x : BitVec 32) : x ^^^ (4294967295#32 ^^^ x) = 4294967295#32 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:148:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:190:17: theorem extracted_1 (x : BitVec 32) : (x ||| 123#32) ^^^ 123#32 = x &&& 4294967172#32 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:180:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:220:17: theorem extracted_1 (x : BitVec 8) : x ^^^ 17#8 ^^^ 17#8 = x := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:210:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:257:17: theorem extracted_1 (x x_1 : BitVec 32) : x_1 &&& 7#32 ^^^ x &&& 128#32 = x_1 &&& 7#32 ||| x &&& 128#32 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:247:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:292:17: theorem extracted_1 (x : BitVec 8) : x &&& 3#8 ^^^ 4#8 = x &&& 3#8 ||| 4#8 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:282:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:327:17: theorem extracted_1 (x : BitVec 8) : (x ||| 12#8) ^^^ 4#8 = x &&& 243#8 ||| 8#8 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:317:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:360:17: theorem extracted_1 (x : BitVec 32) : 123#32 - (x ^^^ 4294967295#32) = x + 124#32 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:350:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:389:17: theorem extracted_1 (x x_1 : BitVec 32) : x_1 ^^^ x ^^^ x_1 = x := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:379:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:421:17: theorem extracted_1 (x x_1 : BitVec 32) : (x_1 ^^^ 4294967295#32) &&& x ^^^ x = x &&& x_1 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:411:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:454:17: theorem extracted_1 (x : BitVec 32) : x + 2147483649#32 ^^^ 2147483648#32 = x + 1#32 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:444:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:487:17: theorem extracted_1 (x : BitVec 32) : 2147483649#32 - x ^^^ 2147483648#32 = 1#32 - x := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:477:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:521:17: theorem extracted_1 (x x_1 x_2 : BitVec 4) : (x_2 ||| x_1) ^^^ (x_2 ||| x) = (x_1 ^^^ x) &&& (x_2 ^^^ 15#4) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:511:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:555:17: theorem extracted_1 (x x_1 x_2 : BitVec 4) : (x_2 ||| x_1) ^^^ (x_1 ||| x) = (x_2 ^^^ x) &&& (x_1 ^^^ 15#4) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:545:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:589:17: theorem extracted_1 (x x_1 x_2 : BitVec 4) : (x_2 ||| x_1) ^^^ (x ||| x_2) = (x_1 ^^^ x) &&& (x_2 ^^^ 15#4) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:579:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:626:17: theorem extracted_1 (x x_1 : BitVec 32) :
  (x_1 ^^^ 1073741823#32) <<< 2 + x <<< 2 = x <<< 2 + (x_1 ^^^ 4294967295#32) <<< 2 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:616:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:661:17: theorem extracted_1 (x : BitVec 8) : x <<< 7 ^^^ 128#8 = (x ^^^ 255#8) <<< 7 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:651:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:696:17: theorem extracted_1 (x : BitVec 8) : x >>> 5 ^^^ 7#8 = (x ^^^ 255#8) >>> 5 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:686:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:731:17: theorem extracted_1 (x : BitVec 8) : (x ^^^ 255#8).sshiftRight 5 = x.sshiftRight 5 ^^^ 255#8 := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:721:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:765:17: theorem extracted_1 (x : BitVec 32) :
  (Option.bind (if 32#32 ≤ x then none else some ((4294967293#32).sshiftRight x.toNat)) fun a =>
      Option.bind (if 32#32 ≤ x then none else some (5#32 >>> x.toNat)) fun y' => some (a ^^^ y')) ⊑
    if 32#32 ≤ x then none else some ((4294967288#32).sshiftRight x.toNat) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:755:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:799:17: theorem extracted_1 (x : BitVec 32) :
  (Option.bind (if 32#32 ≤ x then none else some (5#32 >>> x.toNat)) fun a =>
      Option.bind (if 32#32 ≤ x then none else some ((4294967293#32).sshiftRight x.toNat)) fun y' => some (a ^^^ y')) ⊑
    if 32#32 ≤ x then none else some ((4294967288#32).sshiftRight x.toNat) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:789:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:833:17: theorem extracted_1 (x : BitVec 32) :
  (Option.bind (if 32#32 ≤ x then none else some (4294967293#32 >>> x.toNat)) fun a =>
      Option.bind (if 32#32 ≤ x then none else some (5#32 >>> x.toNat)) fun y' => some (a ^^^ y')) ⊑
    if 32#32 ≤ x then none else some (4294967288#32 >>> x.toNat) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:823:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:867:17: theorem extracted_1 (x : BitVec 32) :
  (Option.bind (if 32#32 ≤ x then none else some ((4294967293#32).sshiftRight x.toNat)) fun a =>
      Option.bind (if 32#32 ≤ x then none else some ((4294967291#32).sshiftRight x.toNat)) fun y' => some (a ^^^ y')) ⊑
    if 32#32 ≤ x then none else some (6#32 >>> x.toNat) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:857:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:904:17: theorem extracted_1 (x x_1 x_2 : BitVec 4) :
  x_2 &&& x_1 ^^^ (x_2 ^^^ 15#4) &&& x = x_2 &&& x_1 ||| x &&& (x_2 ^^^ 15#4) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:894:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:941:17: theorem extracted_1 (x x_1 x_2 : BitVec 4) :
  x_2 &&& x_1 ^^^ (x_2 ^^^ 15#4) &&& x = x_2 &&& x_1 ||| x &&& (x_2 ^^^ 15#4) := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:931:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:970:17: theorem extracted_1 (x x_1 : BitVec 32) : (x_1 ||| x) ^^^ x_1 = x := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:960:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:999:17: theorem extracted_1 (x x_1 : BitVec 32) : x_1 ^^^ (x_1 ||| x) = x := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:989:8: declaration uses 'sorry'
info: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:1028:17: theorem extracted_1 (x x_1 : BitVec 32) : x_1 ^^^ (x_1 ||| x) = x := sorry
warning: ././././SSA/Projects/InstCombine/tests/LLVM/gxor.lean:1018:8: declaration uses 'sorry'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.LLVM.gxor
error: build failed
