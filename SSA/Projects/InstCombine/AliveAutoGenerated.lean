
import SSA.Projects.InstCombine.LLVM.EDSL
import SSA.Projects.InstCombine.AliveStatements
import SSA.Projects.InstCombine.Refinement
import SSA.Projects.InstCombine.Tactic

open MLIR AST
open Std (BitVec)
open Ctxt (Var)

namespace AliveAutoGenerated
set_option pp.proofs false
set_option pp.proofs.withType false
set_option linter.deprecated false

def src_i1 (w : Nat) :=
[alive_icom| {
^bb0(%a : i1):
  "llvm.return" (%a) : (i1) -> ()
}]

def src  (w : Nat)   :=
[alive_icom ( w )| {
^bb0(%a : _):
  "llvm.return" (%a) : (_) -> ()
}]

def tgt  (w : Nat)  :=
[alive_icom ( w )| {
^bb0(%a : _):
  %v1 = "llvm.mul" (%a,%a) : (_, _) -> (_)
  "llvm.return" (%v1) : (_) -> ()
}]

#check src


/-- This one does not have the 'snoc' leftover. -/
theorem ok  : src 1  ⊑ tgt 1  := by
  unfold tgt
  simp_alive_ssa
  -- Γv✝ : Ctxt.Valuation [InstCombine.MTy.bitvec (ConcreteOrMVar.concrete 1)]
  -- ∀ (e : Option (_root_.BitVec 1)), Com.denote (src 1) Γv✝ ⊑ LLVM.mul e e

/-- This one has the 'snoc' leftover. -/
theorem broken  : src_i1  ⊑ tgt 1  := by
  unfold tgt
  simp_alive_ssa
  -- Γv✝ : Ctxt.Valuation [InstCombine.MTy.bitvec (ConcreteOrMVar.concrete 1)]
  -- ∀ (e : Option (_root_.BitVec 1)),
  -- Com.denote (src_i1 1) Γv✝ ⊑ Ctxt.Valuation.snoc Γv✝ (LLVM.mul e e) { val := 0, property := ⋯ }
