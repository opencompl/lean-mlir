/-
Released under Apache 2.0 license as described in the file LICENSE.
-/
import SSA.Projects.InstCombine.ForLean
import SSA.Projects.InstCombine.LLVM.EDSL

open Lean
open Lean.Elab.Tactic

attribute [simp_llvm_case_bash]
  bind_assoc forall_const Nat.cast_one
  PoisonOr.isRefinedBy_self PoisonOr.value_isRefinedBy_value PoisonOr.poison_isRefinedBy
  PoisonOr.poison_bind PoisonOr.bind_poison PoisonOr.value_bind PoisonOr.pure_def

attribute [simp_llvm_split]
  PoisonOr.isRefinedBy_self PoisonOr.value_isRefinedBy_value PoisonOr.poison_isRefinedBy
  PoisonOr.value_bind PoisonOr.poison_bind PoisonOr.bind_poison PoisonOr.pure_def
  PoisonOr.value_inj
  if_if_eq_if_and if_if_eq_if_or
/- `reduceOfInt` and `Nat.cast_one` are somewhat questionable additions to this simp-set.
   They are not needed for the case-bashing to succeed, but they are simp-lemmas that were
   previously being applied in `AliveAutoGenerated`, where they closed a few trivial goals,
   so they've been preserved to not change this existing behaviour of `simp_alive_case_bash` -/

attribute [simp_llvm_option]
  PoisonOr.value_bind PoisonOr.value_isRefinedBy_iff PoisonOr.isRefinedBy_poison_iff
  PoisonOr.value_ne_poison PoisonOr.poison_ne_value

/-- `ensure_only_goal` succeeds, doing nothing, when there is exactly *one* goal.
If there are multiple goals, `ensure_only_goal` fails -/
elab "ensure_only_goal" : tactic =>
  Lean.Elab.Tactic.withMainContext do
    match (← Lean.Elab.Tactic.getGoals) with
    | [_g] => pure ()
    | [] => throwError "expected exactly one goal, found no goals."
    | gs@(_ :: _ :: _) =>
      throwError m!"expected exactly one goal, found multiple goals: '{gs}'."

/--
`simp_alive_case_bash` transforms a goal of the form
  `∀ (x₁ : PoisonOr (BitVec _)) ... (xₙ : PoisonOr (BitVec _)), ...`
into a goal about just `BitVec`s, by doing a case distinction on each `PoisonOr`.

Then, we `simp`lify each goal, following the assumption that the `poison` cases
should generally be trivial, hopefully leaving us with just a single goal:
the one where each option is a `value`. -/
syntax "simp_alive_case_bash'" : tactic
macro_rules
  | `(tactic| simp_alive_case_bash') => `(tactic|
    first
    | fail_if_success (intro (v : PoisonOr (_)))
      -- If there is no variable to introduce, `intro` fails, so the first branch succeeds,
      -- but does nothing. This is similar to `try`, except `first ...` does not swallow any errors
      -- that occur in the later tactics
    | intro (v : PoisonOr (_))  -- Introduce the variable,
      cases' v with x           -- Do the case distinction
      <;> simp (config:={failIfUnchanged := false}) -implicitDefEqProofs only [simp_llvm_case_bash]
      --  ^^^^^^^^^^^^^^^^^^^^^^^^ Simplify, in the hopes that the `poison` case is trivially closed
      <;> simp_alive_case_bash' -- Recurse, to case bash the next variable (if it exists)
      <;> (try revert x)        -- Finally, revert the variable we got in the `value` case, so that
                                --   we are left with a universally quantified goal of the form:
                                --   `∀ (x₁ : BitVec _) ... (xₙ : BitVec _), ...`
    )

def revertIntW (g : MVarId) : MetaM (Array FVarId × MVarId) := do
  let type ← g.getType
  let (_, fvars) ← type.forEachWhere Expr.isFVar collector |>.run {}
  g.revert fvars.toArray
where
  collector (e : Expr) : StateT (Std.HashSet FVarId) MetaM Unit := do
    let fvarId := e.fvarId!
    let typ ← fvarId.getType
    match_expr typ with
    | LLVM.IntW _ =>
      modify fun s => s.insert fvarId
    | _ => return ()

elab "revert_intw" : tactic => do
  let g ← getMainGoal
  let (_, g') ← revertIntW g
  replaceMainGoal [g']

syntax "simp_alive_case_bash" : tactic
macro_rules
  | `(tactic| simp_alive_case_bash) => `(tactic|
    (
      revert_intw
      simp_alive_case_bash'
    )
  )


/-- Unfold into the `undef' statements and eliminates as much as possible. -/
macro "simp_alive_undef" : tactic =>
  `(tactic|
      (
        simp (config := {failIfUnchanged := false}) only [
            simp_llvm_option,
            bind_assoc,
            Bool.false_eq_true, false_and, reduceIte,
            (BitVec.ofInt_ofNat)
          ]
      )
  )

attribute [simp_llvm]
  pure_bind
  BitVec.ofInt_neg_one

/- Simplify away the `InstCombine` specific semantics. -/
macro "simp_alive_ops" : tactic =>
  `(tactic|(
      simp (config := {failIfUnchanged := false}) only [
          simp_llvm,
          (BitVec.ofInt_ofNat)
        ]
    ))

/-! ## `simp_alive_split` -/

attribute [simp_llvm]
  -- Poison lemmas
  PoisonOr.not_value_isRefinedBy_poison
  PoisonOr.value_bind
  -- Poison ite lemmas
  PoisonOr.ite_value_value
  PoisonOr.bind_if_then_poison_eq_ite_bind
  PoisonOr.bind_if_else_poison_eq_ite_bind
  PoisonOr.if_then_poison_isRefinedBy_iff
  PoisonOr.if_else_poison_isRefinedBy_iff
  PoisonOr.value_isRefinedBy_if_then_poison_iff
  PoisonOr.value_isRefinedBy_if_else_poison_iff
  -- Prop
  not_false_eq_true not_true_eq_false ne_eq
  true_and and_true false_and and_false
  true_or or_true false_or or_false
  imp_false implies_true
  or_self and_self
  not_or not_and
  -- Bool
  Bool.or_eq_true Bool.and_eq_true
  beq_iff_eq bne_iff_ne
  -- Other general simp lemmas
  reduceIte

attribute [simp_llvm_split(low)]
  PoisonOr.ite_isRefinedBy_iff
  PoisonOr.isRefinedBy_ite_iff

section ItePoison
open Lean Meta PoisonOr

/-!
### if-then-else and poison
We will now define simprocs and lemmas that normalize `if-then-else` expressions
involving poison. Together, they ensure that any occurence of `poison` in a
nested sequence of `if-then-else`s is pulled towards the top-level then branch,
for any further simp lemmas to easily match on.
-/

/--
Canonicalize `if c then _ else poison` to `if ¬c then poison else _`, whenever
the then-branch isn't already `poison`.

NOTE: this simproc causes an infinite loop if paired with either `ite_not` or
`Classical.ite_not`, both of which are in the global simpset. Neither of those
should thus be added to `simp_llvm`.
-/
simproc [simp_llvm] commIfElsePoison (ite (α := no_index _) _ _ poison) := fun e => do
  let_expr ite α c inst x y := e | return .continue
  if x.isAppOf ``PoisonOr.poison then
    return .continue
  let u ← getLevel α
  let expr :=
    let c' := mkNot c
    let inst' := mkApp2 (mkConst ``instDecidableNot) c inst
    mkAppN (.const ``ite [u]) #[α, c', inst', y, x]
  let proof := mkAppN (.const ``ite_not [u]) #[α, c, inst, y, x]
  let proof ← mkEqSymm proof
  return .visit { expr, proof? := some proof }

/-- auxiliary lemma used in `assocIfElseIfThenPoison` simproc -/
private theorem if_else_if_then_poison_eq {α : Type} (c₁ c₂ : Prop) [Decidable c₁] [Decidable c₂]
      (x y : PoisonOr α):
    (if c₁ then x else (if c₂ then poison else y)) =
    (if ¬c₁ ∧ c₂ then poison else (if c₁ then x else y)) := by
  split <;> simp [*]

/--
Canonicalize using `if_else_if_then_poison_eq`, if the then branch (`x` in the
lemma) is not already poison.
-/
simproc [simp_llvm] assocIfElseIfThenPoison
    (ite (α := no_index _) _ _ (ite (α := no_index _) _ poison _)) := fun e => do
  let_expr ite _α c₁ _inst₁ x py := e | return .continue
  if x.isAppOf ``PoisonOr.poison then
    return .continue
  let_expr ite _ c₂ _inst₂ p y := py | return .continue

  let c' := mkAnd (mkNot c₁) c₂
  let expr ← mkAppM ``ite #[c', p, ← mkAppM ``ite #[c₁, x, y]]
  let proof ← mkAppM ``if_else_if_then_poison_eq #[c₁, c₂, x, y]
  return .visit { expr, proof? := proof }

/--
Normalize a nested `if` in the `then` branch. Note: in this case it's impossible
for the first then branch to already be poison (since it's an if-then-else),
thus there is no need for a simproc; a regular simp lemma suffices
-/
@[simp_llvm]
theorem PoisonOr.if_then_if_then_poison_eq {α : Type} (c₁ c₂ : Prop) [Decidable c₁] [Decidable c₂]
      (x y : PoisonOr α):
    (if c₁ then (if c₂ then poison else x : no_index _) else y : no_index _) =
    (if c₁ ∧ c₂ then poison else (if c₁ then x else y : no_index _) : no_index _) := by
  split <;> simp [*]

end ItePoison

macro "simp_alive_split" : tactic => `(tactic|(
  all_goals
    try intros
    simp -failIfUnchanged -implicitDefEqProofs +contextual only [
      simp_llvm_split, simp_llvm
    ]
    try intros -- introduce any new hypotheses that may have been added
  ))
