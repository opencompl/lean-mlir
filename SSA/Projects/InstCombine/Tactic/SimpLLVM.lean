/-
Released under Apache 2.0 license as described in the file LICENSE.
-/
import LeanMLIR.Framework.Trace
import SSA.Projects.InstCombine.ForLean
import LeanMLIR.Dialects.LLVM.Syntax
import SSA.Projects.InstCombine.Tactic.ReduceModTwoPow

open Lean
open Lean.Elab.Tactic
open InstCombine

attribute [simp_llvm_case_bash]
  bind_assoc forall_const Nat.cast_one
  PoisonOr.isRefinedBy_self PoisonOr.value_isRefinedBy_value PoisonOr.poison_isRefinedBy
  PoisonOr.poison_bind PoisonOr.bind_poison PoisonOr.value_bind PoisonOr.pure_def PoisonOr.toOption_getSome
  PoisonOr.toOption_getSome

attribute [simp_llvm_split]
  PoisonOr.isRefinedBy_self PoisonOr.value_isRefinedBy_value PoisonOr.poison_isRefinedBy
  PoisonOr.not_value_isRefinedBy_poison
  PoisonOr.value_bind PoisonOr.poison_bind PoisonOr.bind_poison PoisonOr.pure_def
  PoisonOr.value_inj
  if_if_eq_if_and if_if_eq_if_or
  PoisonOr.toOption_getSome
  PoisonOr.toOption_getSome PoisonOr.toOption_getNone
/- `reduceOfInt` and `Nat.cast_one` are somewhat questionable additions to this simp-set.
   They are not needed for the case-bashing to succeed, but they are simp-lemmas that were
   previously being applied in `AliveAutoGenerated`, where they closed a few trivial goals,
   so they've been preserved to not change this existing behaviour of `simp_alive_case_bash` -/

attribute [simp_llvm_option]
  PoisonOr.value_bind PoisonOr.isRefinedBy_poison_iff
  PoisonOr.value_ne_poison PoisonOr.poison_ne_value

open PoisonOr in
@[simp_llvm_option]
theorem LLVM.IntW.value_isRefinedBy_iff (a : BitVec w) (b? : PoisonOr (BitVec w)) :
    value a ⊑ b? ↔ b? = value a := by
  cases b? <;> (
    simp only [value_isRefinedBy_value, value_inj, isRefinedBy_poison_iff]
    constructor <;> exact Eq.symm
  )

/-- `ensure_only_goal` succeeds, doing nothing, when there is exactly *one* goal.
If there are multiple goals, `ensure_only_goal` fails -/
elab "ensure_only_goal" : tactic =>
  Lean.Elab.Tactic.withMainContext do
    match (← Lean.Elab.Tactic.getGoals) with
    | [_g] => pure ()
    | [] => throwError "expected exactly one goal, found no goals."
    | gs@(_ :: _ :: _) =>
      throwError m!"expected exactly one goal, found multiple goals: '{gs}'."

/--
`simp_alive_case_bash` transforms a goal of the form
  `∀ (x₁ : PoisonOr (BitVec _)) ... (xₙ : PoisonOr (BitVec _)), ...`
into a goal about just `BitVec`s, by doing a case distinction on each `PoisonOr`.

Then, we `simp`lify each goal, following the assumption that the `poison` cases
should generally be trivial, hopefully leaving us with just a single goal:
the one where each option is a `value`. -/
syntax "simp_alive_case_bash'" : tactic
macro_rules
  | `(tactic| simp_alive_case_bash') => `(tactic|
    first
    | fail_if_success (intro (v : PoisonOr (_)))
      -- If there is no variable to introduce, `intro` fails, so the first branch succeeds,
      -- but does nothing. This is similar to `try`, except `first ...` does not swallow any errors
      -- that occur in the later tactics
    | intro (v : PoisonOr (_))  -- Introduce the variable,
      cases v
      <;> simp (config:={failIfUnchanged := false}) -implicitDefEqProofs only [simp_llvm_case_bash]
      --  ^^^^^^^^^^^^^^^^^^^^^^^^ Simplify, in the hopes that the `poison` case is trivially closed
      <;> simp_alive_case_bash' -- Recurse, to case bash the next variable (if it exists)
      <;> (try revert x)        -- Finally, revert the variable we got in the `value` case, so that
                                --   we are left with a universally quantified goal of the form:
                                --   `∀ (x₁ : BitVec _) ... (xₙ : BitVec _), ...`
    )

def revertIntW (g : MVarId) : MetaM (Array FVarId × MVarId) := do
  let type ← g.getType
  let (_, fvars) ← type.forEachWhere Expr.isFVar collector |>.run {}
  g.revert fvars.toArray
where
  collector (e : Expr) : StateT (Std.HashSet FVarId) MetaM Unit := do
    let fvarId := e.fvarId!
    let typ ← fvarId.getType
    match_expr typ with
    | LLVM.IntW _ =>
      modify fun s => s.insert fvarId
    | _ => return ()

elab "revert_intw" : tactic => do
  let g ← getMainGoal
  let (_, g') ← revertIntW g
  replaceMainGoal [g']

syntax "simp_alive_case_bash" : tactic
macro_rules
  | `(tactic| simp_alive_case_bash) => `(tactic|
    (
      revert_intw
      simp_alive_case_bash'
    )
  )

/-! ### simp_alive_split -/
macro "simp_alive_split": tactic =>
  `(tactic|
      (
        all_goals try intros
        repeat(
          all_goals try simp -implicitDefEqProofs only [simp_llvm_split]
          all_goals try simp -implicitDefEqProofs only [simp_llvm_split] at *
          any_goals split_ifs
        )
        repeat(
          all_goals try simp -implicitDefEqProofs only [simp_llvm_split]
          all_goals try simp -implicitDefEqProofs only [simp_llvm_split] at *
          any_goals split
        )
        all_goals try simp -implicitDefEqProofs only [simp_llvm_split]
        all_goals try simp -implicitDefEqProofs only [simp_llvm_split] at *
      )
   )

/-! ### Constant Hiding Workaround
The following section defines two tactics, `hide_constants` and `unhide_constants`.
* `hide_constants` will rewrite occurences of `LLVM.const?` or `BitVec.ofInt`
  into an application of a new `hide` function. This function is an *opaque*
  identity function, and serves to block kernel reduction.
* `unhide_constants` does the reverse, and removes all `hide` applications.

This serves as a workaround for https://github.com/leanprover/lean4/issues/8898
-/
namespace HideConstants
open Meta

/-- Definition of `hide` and `hide_eq` -/
opaque hide_def : { hide : α → α // hide = id } := ⟨id, rfl⟩

/--
`hide` is an opaque version of the identity function.
By making it opaque, we prevent the kernel from trying to reduce the argument.
-/
def hide : α → α := hide_def.1

/-- A proof that `hide` is the identity. Note that this is deliberately *not*
a def-eq, since we made `hide` opaque. -/
theorem hide_eq {a : α} : hide a = a := by
  rw [hide, hide_def.2]; rfl

/-- Symmetric version of `hide_eq`. -/
theorem eq_hide {a : α} : a = hide a := by
  symm; exact hide_eq

def simpHide (e : Expr) : Meta.SimpM Meta.Simp.Step := do
  let ctx ← Simp.getContext
  if let some parent := ctx.parent? then
    if parent.isAppOf ``hide then
      trace[LeanMLIR.Elab] "{Lean.crossEmoji}: parent ({parent}) is an application of `hide`"
      return .continue

  let expr ← Meta.mkAppM ``hide #[e]
  let proof ← Meta.mkAppOptM ``eq_hide #[none, e]
  return .done {
    expr := expr
    proof? := some proof
  }

protected partial def isConstant (e : Expr) : Bool :=
  match_expr e with
  | Neg.neg _α _self x => HideConstants.isConstant x
  | OfNat.ofNat _α x _self => HideConstants.isConstant x
  | _ => e.isRawNatLit
open HideConstants (isConstant)


simproc BitVec.hideOfIntConstants (BitVec.ofInt _ _) := fun e => do
  let_expr BitVec.ofInt _w x := e | return .continue
  withTraceNode `LeanMLIR.Elab (fun _ => pure m!"Hiding: {e}") <| do
    if !isConstant x then
      trace[Meta.Tactic.simp] "{Lean.crossEmoji}: {x} is not a constant"
      return .continue
    simpHide e

simproc LLVM.hideConst? (LLVM.const? _ _) := fun e => do
  let_expr LLVM.const? _w x := e | return .continue
  withTraceNode `LeanMLIR.Elab (fun _ => pure m!"Hiding: {e}") <| do
    if !isConstant x then
      trace[Meta.Tactic.simp] "{Lean.crossEmoji}: {x} is not a constant"
      return .continue
    simpHide e

macro "hide_constants" : tactic => `(tactic|
  simp -failIfUnchanged -memoize only [BitVec.hideOfIntConstants, LLVM.hideConst?]
  -- --------------------^^^^^^^
  -- NOTE: we have to disable the memoize option, since the simprocs
  -- inspect the parent expressions, which are disregarded by the cache
)

macro "unhide_constants" : tactic => `(tactic|
  all_goals simp -failIfUnchanged only [hide_eq]
)

end HideConstants
export HideConstants (BitVec.hideOfIntConstants LLVM.hideConst?)


/-- Unfold into the `undef' statements and eliminates as much as possible. -/
macro "simp_alive_undef" : tactic =>
  `(tactic|
      (
        hide_constants
        simp (config := {failIfUnchanged := false}) only [
            simp_llvm_option,
            bind_assoc,
            Bool.false_eq_true, false_and, reduceIte,
            (BitVec.ofInt_ofNat)
          ]
      )
  )

attribute [simp_llvm]
  pure_bind
  BitVec.ofInt_neg_one
  PoisonOr.bind_if_then_poison_eq_ite_bind
  PoisonOr.bind_if_else_poison_eq_ite_bind

/- Simplify away the `InstCombine` specific semantics. -/
macro "simp_alive_ops" : tactic =>
  `(tactic|(
      simp (config := {failIfUnchanged := false}) only [
          simp_llvm,
          (BitVec.ofInt_ofNat)
        ]
      unhide_constants
    ))
