builtin.module { 
^bb0(%0 : i64, %1 : i64, %2 : i1):
  %3 = "builtin.unrealized_conversion_cast"(%1) : (i64) -> (!riscv.reg)
  %4 = "riscv.sub"(%3, %3) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %5 = "builtin.unrealized_conversion_cast"(%0) : (i64) -> (!riscv.reg)
  %6 = "riscv.and"(%5, %4) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %7 = "riscv.srl"(%5, %6) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %8 = "builtin.unrealized_conversion_cast"(%1) : (i64) -> (!riscv.reg)
  %9 = "builtin.unrealized_conversion_cast"(%0) : (i64) -> (!riscv.reg)
  %10 = "builtin.unrealized_conversion_cast"(%2) : (i1) -> (!riscv.reg)
  %11 = "riscv.slli"(%10){immediate = -1 : i6 } : (!riscv.reg) -> (!riscv.reg)
  %12 = "riscv.srai"(%11){immediate = -1 : i6 } : (!riscv.reg) -> (!riscv.reg)
  %13 = "riscv.and"(%8, %12) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %14 = "riscv.li"() {immediate = -1 : i64 } : () -> (!riscv.reg)
  %15 = "riscv.xor"(%14, %12) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %16 = "riscv.and"(%15, %9) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %17 = "riscv.or"(%13, %16) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %18 = "riscv.div"(%7, %17) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %19 = "riscv.sra"(%17, %6) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %20 = "riscv.add"(%17, %19) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %21 = "riscv.slt"(%20, %18) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %22 = "riscv.xori"(%21){immediate = 1 : si12 } : (!riscv.reg) -> (!riscv.reg)
  %23 = "builtin.unrealized_conversion_cast"(%22) : (!riscv.reg) -> (i1)
  %24 = "llvm."InstCombine.MOp.UnaryOp.trunc (ConcreteOrMVar.concrete 64) { nsw := false, nuw := false }""(%23) : (i1) -> (i64)
  %25 = "builtin.unrealized_conversion_cast"(%24) : (i64) -> (!riscv.reg)
  %26 = "riscv.sll"(%7, %25) : (!riscv.reg, !riscv.reg) -> (!riscv.reg)
  %27 = "builtin.unrealized_conversion_cast"(%26) : (!riscv.reg) -> (i64)
  "llvm.return"(%27) : (i64) -> ()
 }
