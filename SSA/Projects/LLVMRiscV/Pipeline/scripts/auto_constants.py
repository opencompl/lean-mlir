#!/usr/bin/env python3
from pathlib import Path
"""
# This script generates Lean proofs for constant lowering of LLVM constants.
It generates a LLVM righthandside and a RISC-V lefthandside for each integer in the 
range [-max_val, max_val].
Additionally, it generates a proof that the two are equivalent as follows :

def llvm_const_lower_riscv_li0 : LLVMPeepholeRewriteRefine 64 [] :=
  {lhs:= constLlvm_0, rhs:= liRiscv_0,
   correct := by
    unfold constLlvm_0 liRiscv_0
    simp_peephole
    simp_riscv
    simp_alive_ops
    simp
  }
"""
def generate_lean_proofs(max_val=25):
    header = """-- AUTOGENERATED Lean file: Constant lowering for RISC-V li instructions\n
import SSA.Projects.LLVMRiscV.PeepholeRefine
import SSA.Projects.LLVMRiscV.simpproc
import SSA.Projects.RISCV64.Tactic.SimpRiscV
import SSA.Projects.LLVMRiscV.Pipeline.mkRewrite

open LLVMRiscV\n 
    """
    body = ""
    rewrite_names = []
    for i in range(-max_val, max_val + 1):
        name_suffix = f"N{-i}" if i < 0 else str(i)
        li_def = f"""def liRiscv{name_suffix} := [LV| {{
    ^entry ():
      %0 = "li"() {{imm = {i} : !i64}} : (!i64) -> (!i64)
      %1 = "builtin.unrealized_conversion_cast"(%0) : (!i64) -> (i64)
      llvm.return %1 : i64
  }}]\n\n"""

        llvm_def = f"""def constLlvm{name_suffix} : Com LLVMPlusRiscV [] .pure (.llvm (.bitvec 64)) := [LV| {{
    ^entry ():
      %1 = llvm.mlir.constant ({i}) : i64
      llvm.return %1 : i64
  }}]\n\n"""
        proof = f"""def llvm_const_lower_riscv_li{name_suffix} : LLVMPeepholeRewriteRefine 64 [] :=
  {{lhs := constLlvm{name_suffix}, rhs:= liRiscv{name_suffix},
   correct := by
    unfold constLlvm{name_suffix} liRiscv{name_suffix}
    simp_peephole
    simp_riscv
    simp_alive_ops
    simp
  }}\n"""
        rewrite_names.append(f"llvm_const_lower_riscv_li{name_suffix}")
        body += li_def + llvm_def + proof + "\n"
    #create an array to hold all the rewrites to later pass to the rewriter 
    array_definition = "def const_match : List (Σ Γ, Σ ty, PeepholeRewrite LLVMPlusRiscV Γ ty) :=\n List.map (fun x =>  ⟨[], Ty.llvm (.bitvec 64), (LLVMToRiscvPeepholeRewriteRefine.toPeepholeUNSOUND x)⟩)\n [\n"
    array_definition += ",\n  ".join(rewrite_names)
    array_definition += "\n  ]\n\n"
    return header + body + array_definition

# Add global array of rewrites

# get the parent directory because I placed the script in a dedicated folder.
script_dir = Path(__file__).parent
parent_dir = script_dir.parent
output_file = parent_dir / "const.lean"

# writting to lean file
with open(output_file, "w") as f:
    f.write(generate_lean_proofs(50)) #printing non-neg. constants up to 50
