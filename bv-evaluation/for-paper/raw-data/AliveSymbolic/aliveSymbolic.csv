,filename,guid,name,status,time_elapsed,error_message
0,AliveStatements,1,rfl,FAIL,1025.568192,"tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹ ^^^ x✝¹) + 1#w + x✝²
    is not definitionally equal to the right-hand side
      x✝² - (x✝ ||| ~~~x✝¹)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ ^^^ x✝¹) + 1#w + x✝² = x✝² - (x✝ ||| ~~~x✝¹)"
1,AliveStatements,1,bv_bitwise,FAIL,16214.982101,internal exception #5
2,AliveStatements,1,bv_ac,FAIL,1890.832963,internal exception #5
3,AliveStatements,1,bv_distrib,FAIL,8600.037035,internal exception #5
4,AliveStatements,1,bv_ring,FAIL,2969.859289,internal exception #5
5,AliveStatements,1,bv_of_bool,FAIL,264.586703,simp made no progress
6,AliveStatements,1,bv_omega,FAIL,61.674189,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝².toNat + (2 ^ w - (x✝ ||| ~~~x✝¹).toNat)) % ↑(2 ^ w)
     b := ↑(((x✝ &&& x✝¹ ^^^ x✝¹).toNat + 1 % 2 ^ w) % 2 ^ w + x✝².toNat) % ↑(2 ^ w)
     c := ↑2 ^ w"
7,AliveStatements,1,bv_automata_classic_prop,PASS,87.556331,
8,AliveStatements,1,bv_automata_classic,PASS,41.841342,
9,AliveStatements,1,bv_normalize_automata_classic,PASS,317.757157,
10,AliveStatements,1,simp,FAIL,1052.224874,simp made no progress
11,AliveStatements,1,bv_normalize,FAIL,162.563571,internal exception #5
12,AliveStatements,1,bv_decide,FAIL,271.591778,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ &&& x✝¹ ^^^ x✝¹) + 1#w ==
       -~~~(~~~x✝ &&& x✝¹)]
    Consider the following assignment:
    (x✝ &&& x✝¹ ^^^ x✝¹) + 1#w == -~~~(~~~x✝ &&& x✝¹) = false"
13,AliveStatements,1,bv_auto,PASS,3062.302157,
14,AliveStatements,1,bv_automata_circuit_lean_prop,PASS,136.971788,
15,AliveStatements,1,bv_automata_circuit_lean,PASS,141.416656,
16,AliveStatements,1,bv_normalize_automata_circuit_lean,PASS,150.23483,
17,AliveStatements,1,bv_automata_circuit_cadical_prop,PASS,599.802398,
18,AliveStatements,1,bv_automata_circuit_cadical,PASS,587.905986,
19,AliveStatements,1,bv_normalize_automata_circuit_cadical,PASS,628.619839,
20,AliveStatements,1,bv_mba,FAIL,9.402073,"unable to reflect term '
      x✝ &&& x✝¹ ^^^ x✝¹'.
    Expected 'int * variable'."
21,AliveStatements,1,bv_normalize_mba,FAIL,48.413368,internal exception #5
22,AliveStatements,2,rfl,FAIL,28.866451,"tactic 'rfl' failed, the left-hand side
      x✝ + x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    x✝¹ x✝ : BitVec 1
    ⊢ x✝ + x✝¹ = x✝ ^^^ x✝¹"
23,AliveStatements,2,bv_bitwise,PASS,65384.801892,
24,AliveStatements,2,bv_ac,FAIL,25.460613,internal exception #5
25,AliveStatements,2,bv_distrib,FAIL,98.611964,internal exception #5
26,AliveStatements,2,bv_ring,FAIL,106.912978,internal exception #5
27,AliveStatements,2,bv_of_bool,FAIL,22.697105,simp made no progress
28,AliveStatements,2,bv_omega,FAIL,12.166342,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      0 ≤ b + c - 2*d ≤ 1
      0 ≤ a ≤ 1
      a - b - c + 2*d ≥ 1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑x✝.toNat
     c := ↑x✝¹.toNat
     d := ↑(x✝.toNat + x✝¹.toNat) / 2"
29,AliveStatements,2,bv_automata_classic_prop,FAIL,23.628714,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 0).add (Copy.Term.var 1))
                    ((Copy.Term.var 0).xor (Copy.Term.var 1)))) =
              true)) =
        true
    is false"
30,AliveStatements,2,bv_automata_classic,FAIL,7.600065,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 0).add (Copy.Term.var 1))
                    ((Copy.Term.var 0).xor (Copy.Term.var 1)))) =
              true)) =
        true
    is false"
31,AliveStatements,2,bv_normalize_automata_classic,PASS,4.773287,
32,AliveStatements,2,simp,FAIL,79.009017,simp made no progress
33,AliveStatements,2,bv_normalize,PASS,4.359567,
34,AliveStatements,2,bv_decide,PASS,4.292627,
35,AliveStatements,2,bv_auto,PASS,325.682212,
36,AliveStatements,2,bv_automata_circuit_lean_prop,FAIL,24.123524,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq ((Term.var 0).add (Term.var 1)) ((Term.var 0).xor (Term.var 1))).eval vars w = false)) =
        true
    is false"
37,AliveStatements,2,bv_automata_circuit_lean,FAIL,7.834725,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq ((Term.var 0).add (Term.var 1)) ((Term.var 0).xor (Term.var 1))).eval vars w = false)) =
        true
    is false"
38,AliveStatements,2,bv_normalize_automata_circuit_lean,PASS,4.353007,
39,AliveStatements,2,bv_automata_circuit_cadical_prop,PASS,597.719939,
40,AliveStatements,2,bv_automata_circuit_cadical,PASS,583.385969,
41,AliveStatements,2,bv_normalize_automata_circuit_cadical,PASS,6.469566,
42,AliveStatements,2,bv_mba,FAIL,4.230077,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
43,AliveStatements,2,bv_normalize_mba,PASS,4.310177,
44,AliveStatements,3,rfl,FAIL,13.065741,"tactic 'rfl' failed, the left-hand side
      some (x✝ + x✝)
    is not definitionally equal to the right-hand side
      none
    case pos
    w : ℕ
    x✝ : BitVec w
    h✝ : 1#w ≥ ↑w
    ⊢ some (x✝ + x✝) ⊑ none"
45,AliveStatements,3,bv_bitwise,FAIL,1.516599,"applyExtTheorem only applies to equations, not
      some (x✝ + x✝) ⊑ none"
46,AliveStatements,3,bv_ac,FAIL,483.570266,internal exception #5
47,AliveStatements,3,bv_distrib,FAIL,1709.319255,internal exception #5
48,AliveStatements,3,bv_ring,FAIL,5940.279848,internal exception #5
49,AliveStatements,3,bv_of_bool,FAIL,1032.097348,simp made no progress
50,AliveStatements,3,bv_omega,FAIL,533.088883,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 0
      a - c ≤ -1
    where
     a := ↑1 % ↑(2 ^ w)
     b := ↑(↑w).toNat
     c := ↑2 ^ w"
51,AliveStatements,3,bv_automata_classic_prop,FAIL,997.595601,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ + x✝) ⊑ none"
52,AliveStatements,3,bv_automata_classic,FAIL,404.738219,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ + x✝) ⊑ none"
53,AliveStatements,3,bv_normalize_automata_classic,FAIL,1106.860748,internal exception #5
54,AliveStatements,3,simp,FAIL,2954.401729,simp made no progress
55,AliveStatements,3,bv_normalize,FAIL,1202.296214,internal exception #5
56,AliveStatements,3,bv_decide,FAIL,1541.072117,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [1#w <ᵤ BitVec.ofNat w w]
    Consider the following assignment:
    1#w <ᵤ BitVec.ofNat w w = false"
57,AliveStatements,3,bv_auto,FAIL,14188.36416,internal exception #5
58,AliveStatements,3,bv_automata_circuit_lean_prop,FAIL,862.207792,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ + x✝) ⊑ none"
59,AliveStatements,3,bv_automata_circuit_lean,FAIL,180.643689,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ + x✝) ⊑ none"
60,AliveStatements,3,bv_normalize_automata_circuit_lean,FAIL,799.881734,internal exception #5
61,AliveStatements,3,bv_automata_circuit_cadical_prop,FAIL,686.968529,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ + x✝) ⊑ none"
62,AliveStatements,3,bv_automata_circuit_cadical,FAIL,250.461232,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ + x✝) ⊑ none"
63,AliveStatements,3,bv_normalize_automata_circuit_cadical,FAIL,892.551522,internal exception #5
64,AliveStatements,3,bv_mba,FAIL,15.953309,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some (x✝ + x✝) ⊑ none
    case pos
    w : ℕ
    x✝ : BitVec w
    h✝ : 1#w ≥ ↑w
    ⊢ some (x✝ + x✝) ⊑ none"
65,AliveStatements,3,bv_normalize_mba,FAIL,925.45075,internal exception #5
66,AliveStatements,4,rfl,FAIL,512.053487,"tactic 'rfl' failed, the left-hand side
      x✝ + x✝
    is not definitionally equal to the right-hand side
      x✝ <<< 1#w
    case neg
    w : ℕ
    x✝ : BitVec w
    h✝ : ¬1#w ≥ ↑w
    ⊢ x✝ + x✝ = x✝ <<< 1#w"
67,AliveStatements,4,bv_bitwise,FAIL,8967.416629,internal exception #5
68,AliveStatements,4,bv_ac,FAIL,226.984558,internal exception #5
69,AliveStatements,4,bv_distrib,FAIL,1364.307355,internal exception #5
70,AliveStatements,4,bv_ring,FAIL,788.442942,internal exception #5
71,AliveStatements,4,bv_of_bool,FAIL,90.07189,simp made no progress
72,AliveStatements,4,bv_omega,FAIL,115.307732,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑1 % ↑(2 ^ w)
     c := ↑2 ^ w
     d := ↑(x✝ <<< 1#w).toNat
     e := ↑(x✝.toNat + x✝.toNat) % ↑(2 ^ w)"
73,AliveStatements,4,bv_automata_classic_prop,FAIL,40.705663,"expected shiftLeft by natural number, found symbolic shift amount '1#w' at '
      x✝ <<< 1#w'"
74,AliveStatements,4,bv_automata_classic,FAIL,18.560688,"expected shiftLeft by natural number, found symbolic shift amount '1#w' at '
      x✝ <<< 1#w'"
75,AliveStatements,4,bv_normalize_automata_classic,FAIL,79.941566,internal exception #5
76,AliveStatements,4,simp,FAIL,999.81662,internal exception #5
77,AliveStatements,4,bv_normalize,FAIL,67.533865,internal exception #5
78,AliveStatements,4,bv_decide,FAIL,266.380211,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ * 2#w == x✝ <<< (1 % 2 ^ w),
     1#w <ᵤ BitVec.ofNat w w]
    Consider the following assignment:
    1#w <ᵤ BitVec.ofNat w w = true
    x✝ * 2#w == x✝ <<< (1 % 2 ^ w) = false"
79,AliveStatements,4,bv_auto,FAIL,6721.112185,internal exception #5
80,AliveStatements,4,bv_automata_circuit_lean_prop,FAIL,19.580437,"expected shiftLeft by natural number, found symbolic shift amount '1#w' at '
      x✝ <<< 1#w'"
81,AliveStatements,4,bv_automata_circuit_lean,FAIL,3.905227,"expected shiftLeft by natural number, found symbolic shift amount '1#w' at '
      x✝ <<< 1#w'"
82,AliveStatements,4,bv_normalize_automata_circuit_lean,FAIL,25.659093,internal exception #5
83,AliveStatements,4,bv_automata_circuit_cadical_prop,FAIL,29.42958,"expected shiftLeft by natural number, found symbolic shift amount '1#w' at '
      x✝ <<< 1#w'"
84,AliveStatements,4,bv_automata_circuit_cadical,FAIL,9.532354,"expected shiftLeft by natural number, found symbolic shift amount '1#w' at '
      x✝ <<< 1#w'"
85,AliveStatements,4,bv_normalize_automata_circuit_cadical,FAIL,24.837663,internal exception #5
86,AliveStatements,4,bv_mba,FAIL,4.364807,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
87,AliveStatements,4,bv_normalize_mba,FAIL,22.326205,internal exception #5
88,AliveStatements,5,rfl,FAIL,503.575303,"tactic 'rfl' failed, the left-hand side
      0#w - x✝ + x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ - x✝
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ 0#w - x✝ + x✝¹ = x✝¹ - x✝"
89,AliveStatements,5,bv_bitwise,FAIL,16268.178735,internal exception #5
90,AliveStatements,5,bv_ac,FAIL,1703.861738,internal exception #5
91,AliveStatements,5,bv_distrib,FAIL,16027.212547,internal exception #5
92,AliveStatements,5,bv_ring,PASS,10112.823061,
93,AliveStatements,5,bv_of_bool,FAIL,660.679207,simp made no progress
94,AliveStatements,5,bv_omega,FAIL,527.888886,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝¹.toNat + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑((0 % 2 ^ w + (2 ^ w - x✝.toNat)) % 2 ^ w + x✝¹.toNat) % ↑(2 ^ w)
     c := ↑2 ^ w"
95,AliveStatements,5,bv_automata_classic_prop,PASS,18836.443024,
96,AliveStatements,5,bv_automata_classic,PASS,8.517634,
97,AliveStatements,5,bv_normalize_automata_classic,PASS,17.965738,
98,AliveStatements,5,simp,FAIL,167.794068,internal exception #5
99,AliveStatements,5,bv_normalize,PASS,16.984508,
100,AliveStatements,5,bv_decide,PASS,16.578239,
101,AliveStatements,5,bv_auto,PASS,704.917808,
102,AliveStatements,5,bv_automata_circuit_lean_prop,PASS,29.55051,
103,AliveStatements,5,bv_automata_circuit_lean,PASS,14.126041,
104,AliveStatements,5,bv_normalize_automata_circuit_lean,PASS,15.37259,
105,AliveStatements,5,bv_automata_circuit_cadical_prop,PASS,604.585014,
106,AliveStatements,5,bv_automata_circuit_cadical,PASS,587.194987,
107,AliveStatements,5,bv_normalize_automata_circuit_cadical,PASS,17.916558,
108,AliveStatements,5,bv_mba,FAIL,6.185595,"unable to reflect term '
      BitVec.ofInt w 0'.
    Expected 'int * variable'."
109,AliveStatements,5,bv_normalize_mba,PASS,14.85457,
110,AliveStatements,6,rfl,FAIL,907.233222,"tactic 'rfl' failed, the left-hand side
      0#w - x✝ + (0#w - x✝¹)
    is not definitionally equal to the right-hand side
      0#w - (x✝ + x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ 0#w - x✝ + (0#w - x✝¹) = 0#w - (x✝ + x✝¹)"
111,AliveStatements,6,bv_bitwise,PASS,27538.613451,
112,AliveStatements,6,bv_ac,FAIL,2712.382212,internal exception #5
113,AliveStatements,6,bv_distrib,FAIL,16111.028831,internal exception #5
114,AliveStatements,6,bv_ring,FAIL,6770.955821,internal exception #5
115,AliveStatements,6,bv_of_bool,FAIL,260.527986,simp made no progress
116,AliveStatements,6,bv_omega,FAIL,155.714495,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - (x✝.toNat + x✝¹.toNat) % 2 ^ w)) % ↑(2 ^ w)
     b := ↑((0 % 2 ^ w + (2 ^ w - x✝.toNat)) % 2 ^ w + (0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w) % ↑(2 ^ w)
     c := ↑2 ^ w"
117,AliveStatements,6,bv_automata_classic_prop,PASS,15318.251422,
118,AliveStatements,6,bv_automata_classic,PASS,13.631491,
119,AliveStatements,6,bv_normalize_automata_classic,PASS,27.331352,
120,AliveStatements,6,simp,FAIL,246.858444,internal exception #5
121,AliveStatements,6,bv_normalize,FAIL,16.183029,internal exception #5
122,AliveStatements,6,bv_decide,FAIL,160.279473,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [-x✝ + -x✝¹ == -(x✝ + x✝¹)]
    Consider the following assignment:
    -x✝ + -x✝¹ == -(x✝ + x✝¹) = false"
123,AliveStatements,6,bv_auto,PASS,263.450963,
124,AliveStatements,6,bv_automata_circuit_lean_prop,PASS,59.84933,
125,AliveStatements,6,bv_automata_circuit_lean,PASS,46.210119,
126,AliveStatements,6,bv_normalize_automata_circuit_lean,PASS,75.553079,
127,AliveStatements,6,bv_automata_circuit_cadical_prop,PASS,606.287714,
128,AliveStatements,6,bv_automata_circuit_cadical,PASS,599.272829,
129,AliveStatements,6,bv_normalize_automata_circuit_cadical,PASS,614.319758,
130,AliveStatements,6,bv_mba,FAIL,10.315313,"unable to reflect term '
      BitVec.ofInt w 0'.
    Expected 'int * variable'."
131,AliveStatements,6,bv_normalize_mba,FAIL,26.150192,internal exception #5
132,AliveStatements,7,rfl,FAIL,199.835266,"tactic 'rfl' failed, the left-hand side
      x✝ + (0#w - x✝¹)
    is not definitionally equal to the right-hand side
      x✝ - x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ + (0#w - x✝¹) = x✝ - x✝¹"
133,AliveStatements,7,bv_bitwise,PASS,11431.715987,
134,AliveStatements,7,bv_ac,FAIL,1679.224935,internal exception #5
135,AliveStatements,7,bv_distrib,FAIL,12345.851004,internal exception #5
136,AliveStatements,7,bv_ring,FAIL,16335.441311,internal exception #5
137,AliveStatements,7,bv_of_bool,FAIL,815.250683,simp made no progress
138,AliveStatements,7,bv_omega,FAIL,583.800999,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w) % ↑(2 ^ w)
     c := ↑2 ^ w"
139,AliveStatements,7,bv_automata_classic_prop,PASS,31049.204607,
140,AliveStatements,7,bv_automata_classic,PASS,10.604283,
141,AliveStatements,7,bv_normalize_automata_classic,PASS,9.170274,
142,AliveStatements,7,simp,FAIL,154.859736,internal exception #5
143,AliveStatements,7,bv_normalize,PASS,6.578426,
144,AliveStatements,7,bv_decide,PASS,6.557405,
145,AliveStatements,7,bv_auto,PASS,161.148452,
146,AliveStatements,7,bv_automata_circuit_lean_prop,PASS,29.03609,
147,AliveStatements,7,bv_automata_circuit_lean,PASS,13.239491,
148,AliveStatements,7,bv_normalize_automata_circuit_lean,PASS,6.444146,
149,AliveStatements,7,bv_automata_circuit_cadical_prop,PASS,601.280857,
150,AliveStatements,7,bv_automata_circuit_cadical,PASS,587.783196,
151,AliveStatements,7,bv_normalize_automata_circuit_cadical,PASS,9.224514,
152,AliveStatements,7,bv_mba,FAIL,5.711876,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
153,AliveStatements,7,bv_normalize_mba,PASS,6.511596,
154,AliveStatements,8,rfl,FAIL,756.016664,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) + x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ - 1#w - x✝
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) + x✝¹ = x✝¹ - 1#w - x✝"
155,AliveStatements,8,bv_bitwise,FAIL,19742.606156,internal exception #5
156,AliveStatements,8,bv_ac,FAIL,2551.66076,internal exception #5
157,AliveStatements,8,bv_distrib,FAIL,12279.874258,internal exception #5
158,AliveStatements,8,bv_ring,FAIL,8786.91546,internal exception #5
159,AliveStatements,8,bv_of_bool,FAIL,623.181783,simp made no progress
160,AliveStatements,8,bv_omega,FAIL,281.486211,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝¹.toNat + (2 ^ w - 1 % 2 ^ w)) % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑((x✝ ^^^ -1#w).toNat + x✝¹.toNat) % ↑(2 ^ w)
     c := ↑2 ^ w"
161,AliveStatements,8,bv_automata_classic_prop,PASS,21804.353204,
162,AliveStatements,8,bv_automata_classic,PASS,9.787974,
163,AliveStatements,8,bv_normalize_automata_classic,PASS,31.416729,
164,AliveStatements,8,simp,FAIL,125.152526,simp made no progress
165,AliveStatements,8,bv_normalize,FAIL,19.996326,internal exception #5
166,AliveStatements,8,bv_decide,FAIL,164.48675,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ ^^^ -1#w) + x✝¹ == x✝¹ + -1#w + -x✝]
    Consider the following assignment:
    (x✝ ^^^ -1#w) + x✝¹ == x✝¹ + -1#w + -x✝ = false"
167,AliveStatements,8,bv_auto,PASS,779.473027,
168,AliveStatements,8,bv_automata_circuit_lean_prop,PASS,95.235406,
169,AliveStatements,8,bv_automata_circuit_lean,PASS,81.160476,
170,AliveStatements,8,bv_normalize_automata_circuit_lean,PASS,99.165154,
171,AliveStatements,8,bv_automata_circuit_cadical_prop,PASS,605.629004,
172,AliveStatements,8,bv_automata_circuit_cadical,PASS,594.127272,
173,AliveStatements,8,bv_normalize_automata_circuit_cadical,PASS,614.703288,
174,AliveStatements,8,bv_mba,FAIL,9.670073,"unable to reflect term '
      x✝ ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
175,AliveStatements,8,bv_normalize_mba,FAIL,29.86173,internal exception #5
176,AliveStatements,9,rfl,FAIL,337.996783,"tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹) + (x✝ ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹) + (x✝ ^^^ x✝¹) = x✝ ||| x✝¹"
177,AliveStatements,9,bv_bitwise,PASS,9644.332386,
178,AliveStatements,9,bv_ac,FAIL,2079.281746,internal exception #5
179,AliveStatements,9,bv_distrib,PASS,10125.263713,
180,AliveStatements,9,bv_ring,FAIL,11551.322697,internal exception #5
181,AliveStatements,9,bv_of_bool,FAIL,1036.813885,simp made no progress
182,AliveStatements,9,bv_omega,FAIL,380.128736,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑((x✝ &&& x✝¹).toNat + (x✝ ^^^ x✝¹).toNat) % ↑(2 ^ w)
     c := ↑2 ^ w"
183,AliveStatements,9,bv_automata_classic_prop,PASS,40142.317872,
184,AliveStatements,9,bv_automata_classic,PASS,9.291644,
185,AliveStatements,9,bv_normalize_automata_classic,PASS,23.023714,
186,AliveStatements,9,simp,PASS,85.806873,
187,AliveStatements,9,bv_normalize,FAIL,14.63909,internal exception #5
188,AliveStatements,9,bv_decide,FAIL,160.600862,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ &&& x✝¹) + (x✝ ^^^ x✝¹) ==
       ~~~(~~~x✝ &&& ~~~x✝¹)]
    Consider the following assignment:
    (x✝ &&& x✝¹) + (x✝ ^^^ x✝¹) == ~~~(~~~x✝ &&& ~~~x✝¹) = false"
189,AliveStatements,9,bv_auto,PASS,103.560071,
190,AliveStatements,9,bv_automata_circuit_lean_prop,PASS,26.963932,
191,AliveStatements,9,bv_automata_circuit_lean,PASS,8.435675,
192,AliveStatements,9,bv_normalize_automata_circuit_lean,PASS,23.323544,
193,AliveStatements,9,bv_automata_circuit_cadical_prop,PASS,634.471755,
194,AliveStatements,9,bv_automata_circuit_cadical,PASS,624.797241,
195,AliveStatements,9,bv_normalize_automata_circuit_cadical,PASS,606.522583,
196,AliveStatements,9,bv_mba,FAIL,4.483997,"unable to reflect term '
      x✝ &&& x✝¹'.
    Expected 'int * variable'."
197,AliveStatements,9,bv_normalize_mba,FAIL,18.726108,internal exception #5
198,AliveStatements,10,rfl,FAIL,507.94457,"tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹) + (x✝ ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ + x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹) + (x✝ ||| x✝¹) = x✝ + x✝¹"
199,AliveStatements,10,bv_bitwise,PASS,10128.138831,
200,AliveStatements,10,bv_ac,FAIL,2814.076934,internal exception #5
201,AliveStatements,10,bv_distrib,PASS,7264.162241,
202,AliveStatements,10,bv_ring,FAIL,14238.041906,internal exception #5
203,AliveStatements,10,bv_of_bool,FAIL,1020.882566,simp made no progress
204,AliveStatements,10,bv_omega,FAIL,803.724691,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat + x✝¹.toNat) % ↑(2 ^ w)
     b := ↑((x✝ &&& x✝¹).toNat + (x✝ ||| x✝¹).toNat) % ↑(2 ^ w)
     c := ↑2 ^ w"
205,AliveStatements,10,bv_automata_classic_prop,PASS,43709.407241,
206,AliveStatements,10,bv_automata_classic,PASS,8.624815,
207,AliveStatements,10,bv_normalize_automata_classic,PASS,29.961289,
208,AliveStatements,10,simp,PASS,81.267106,
209,AliveStatements,10,bv_normalize,FAIL,20.270346,internal exception #5
210,AliveStatements,10,bv_decide,FAIL,165.03922,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ &&& x✝¹) + ~~~(~~~x✝ &&& ~~~x✝¹) ==
       x✝ + x✝¹]
    Consider the following assignment:
    (x✝ &&& x✝¹) + ~~~(~~~x✝ &&& ~~~x✝¹) == x✝ + x✝¹ = false"
211,AliveStatements,10,bv_auto,PASS,98.105204,
212,AliveStatements,10,bv_automata_circuit_lean_prop,PASS,23.957594,
213,AliveStatements,10,bv_automata_circuit_lean,PASS,8.310804,
214,AliveStatements,10,bv_normalize_automata_circuit_lean,PASS,28.620871,
215,AliveStatements,10,bv_automata_circuit_cadical_prop,PASS,621.522373,
216,AliveStatements,10,bv_automata_circuit_cadical,PASS,595.519091,
217,AliveStatements,10,bv_normalize_automata_circuit_cadical,PASS,613.453179,
218,AliveStatements,10,bv_mba,FAIL,4.794116,"unable to reflect term '
      x✝ &&& x✝¹'.
    Expected 'int * variable'."
219,AliveStatements,10,bv_normalize_mba,FAIL,24.642094,internal exception #5
220,AliveStatements,11,rfl,FAIL,172.302495,"tactic 'rfl' failed, the left-hand side
      x✝ - (0#w - x✝¹)
    is not definitionally equal to the right-hand side
      x✝ + x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - (0#w - x✝¹) = x✝ + x✝¹"
221,AliveStatements,11,bv_bitwise,PASS,16432.783975,
222,AliveStatements,11,bv_ac,FAIL,1129.739973,internal exception #5
223,AliveStatements,11,bv_distrib,PASS,13762.576505,
224,AliveStatements,11,bv_ring,FAIL,12618.478892,internal exception #5
225,AliveStatements,11,bv_of_bool,FAIL,661.013757,simp made no progress
226,AliveStatements,11,bv_omega,FAIL,436.653297,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat + x✝¹.toNat) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - (0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w"
227,AliveStatements,11,bv_automata_classic_prop,PASS,39660.909865,
228,AliveStatements,11,bv_automata_classic,PASS,10.420413,
229,AliveStatements,11,bv_normalize_automata_classic,PASS,30.517289,
230,AliveStatements,11,simp,PASS,147.977291,
231,AliveStatements,11,bv_normalize,FAIL,15.13613,internal exception #5
232,AliveStatements,11,bv_decide,FAIL,159.540853,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [- -x✝¹ == x✝¹]
    Consider the following assignment:
    - -x✝¹ == x✝¹ = false"
233,AliveStatements,11,bv_auto,PASS,157.465404,
234,AliveStatements,11,bv_automata_circuit_lean_prop,PASS,28.98186,
235,AliveStatements,11,bv_automata_circuit_lean,PASS,13.111222,
236,AliveStatements,11,bv_normalize_automata_circuit_lean,PASS,28.001591,
237,AliveStatements,11,bv_automata_circuit_cadical_prop,PASS,604.154375,
238,AliveStatements,11,bv_automata_circuit_cadical,PASS,592.167143,
239,AliveStatements,11,bv_normalize_automata_circuit_cadical,PASS,602.972266,
240,AliveStatements,11,bv_mba,FAIL,7.726925,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
241,AliveStatements,11,bv_normalize_mba,FAIL,22.511275,internal exception #5
242,AliveStatements,12,rfl,FAIL,420.654748,"tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹
    is not definitionally equal to the right-hand side
      x✝ + -x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - x✝¹ = x✝ + -x✝¹"
243,AliveStatements,12,bv_bitwise,PASS,9106.467946,
244,AliveStatements,12,bv_ac,FAIL,1445.791841,internal exception #5
245,AliveStatements,12,bv_distrib,FAIL,10567.919746,internal exception #5
246,AliveStatements,12,bv_ring,PASS,11288.463784,
247,AliveStatements,12,bv_of_bool,FAIL,998.254331,simp made no progress
248,AliveStatements,12,bv_omega,FAIL,591.764433,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat + (2 ^ w - x✝¹.toNat) % 2 ^ w) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w"
249,AliveStatements,12,bv_automata_classic_prop,PASS,49819.328196,
250,AliveStatements,12,bv_automata_classic,PASS,8.920644,
251,AliveStatements,12,bv_normalize_automata_classic,PASS,5.594576,
252,AliveStatements,12,simp,FAIL,83.635394,simp made no progress
253,AliveStatements,12,bv_normalize,PASS,3.926547,
254,AliveStatements,12,bv_decide,PASS,3.868538,
255,AliveStatements,12,bv_auto,PASS,92.756927,
256,AliveStatements,12,bv_automata_circuit_lean_prop,PASS,31.077879,
257,AliveStatements,12,bv_automata_circuit_lean,PASS,13.854911,
258,AliveStatements,12,bv_normalize_automata_circuit_lean,PASS,4.114607,
259,AliveStatements,12,bv_automata_circuit_cadical_prop,PASS,605.475095,
260,AliveStatements,12,bv_automata_circuit_cadical,PASS,595.145091,
261,AliveStatements,12,bv_normalize_automata_circuit_cadical,PASS,6.610456,
262,AliveStatements,12,bv_mba,FAIL,4.190867,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
263,AliveStatements,12,bv_normalize_mba,PASS,4.004807,
264,AliveStatements,13,rfl,FAIL,48.323028,"tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    x✝¹ x✝ : BitVec 1
    ⊢ x✝ - x✝¹ = x✝ ^^^ x✝¹"
265,AliveStatements,13,bv_bitwise,FAIL,5867.066507,internal exception #5
266,AliveStatements,13,bv_ac,FAIL,1045.699479,internal exception #5
267,AliveStatements,13,bv_distrib,FAIL,6131.48253,internal exception #5
268,AliveStatements,13,bv_ring,FAIL,9789.606848,internal exception #5
269,AliveStatements,13,bv_of_bool,FAIL,1179.635079,simp made no progress
270,AliveStatements,13,bv_omega,FAIL,693.740015,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ b ≤ 1
      -2 ≤ b - 2*c - d ≤ -1
      0 ≤ a ≤ 1
      a - b + 2*c + d ≥ 3
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑x✝.toNat
     c := ↑(x✝.toNat + (2 ^ 1 - x✝¹.toNat)) / 2
     d := ↑x✝¹.toNat"
271,AliveStatements,13,bv_automata_classic_prop,FAIL,64549.670082,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 0).sub (Copy.Term.var 1))
                    ((Copy.Term.var 0).xor (Copy.Term.var 1)))) =
              true)) =
        true
    is false"
272,AliveStatements,13,bv_automata_classic,FAIL,7.387325,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 0).sub (Copy.Term.var 1))
                    ((Copy.Term.var 0).xor (Copy.Term.var 1)))) =
              true)) =
        true
    is false"
273,AliveStatements,13,bv_normalize_automata_classic,FAIL,22.276436,internal exception #5
274,AliveStatements,13,simp,FAIL,57.039651,simp made no progress
275,AliveStatements,13,bv_normalize,FAIL,15.25326,internal exception #5
276,AliveStatements,13,bv_decide,PASS,169.844466,
277,AliveStatements,13,bv_auto,PASS,636.603973,
278,AliveStatements,13,bv_automata_circuit_lean_prop,FAIL,23.290185,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq ((Term.var 0).sub (Term.var 1)) ((Term.var 0).xor (Term.var 1))).eval vars w = false)) =
        true
    is false"
279,AliveStatements,13,bv_automata_circuit_lean,FAIL,7.032615,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq ((Term.var 0).sub (Term.var 1)) ((Term.var 0).xor (Term.var 1))).eval vars w = false)) =
        true
    is false"
280,AliveStatements,13,bv_normalize_automata_circuit_lean,FAIL,23.201524,internal exception #5
281,AliveStatements,13,bv_automata_circuit_cadical_prop,PASS,602.780966,
282,AliveStatements,13,bv_automata_circuit_cadical,PASS,587.101727,
283,AliveStatements,13,bv_normalize_automata_circuit_cadical,PASS,604.772244,
284,AliveStatements,13,bv_mba,FAIL,4.290067,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
285,AliveStatements,13,bv_normalize_mba,FAIL,19.349847,internal exception #5
286,AliveStatements,14,rfl,FAIL,415.831171,"tactic 'rfl' failed, the left-hand side
      -1#w - x✝
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w
    case some
    w : ℕ
    x✝ : BitVec w
    ⊢ -1#w - x✝ = x✝ ^^^ -1#w"
287,AliveStatements,14,bv_bitwise,PASS,14049.336713,
288,AliveStatements,14,bv_ac,FAIL,1060.332349,internal exception #5
289,AliveStatements,14,bv_distrib,FAIL,7995.321171,internal exception #5
290,AliveStatements,14,bv_ring,FAIL,16061.472664,internal exception #5
291,AliveStatements,14,bv_of_bool,FAIL,896.030359,simp made no progress
292,AliveStatements,14,bv_omega,FAIL,397.580804,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ -1#w).toNat
     b := ↑((2 ^ w - 1 % 2 ^ w) % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w"
293,AliveStatements,14,bv_automata_classic_prop,PASS,49670.147766,
294,AliveStatements,14,bv_automata_classic,PASS,7.049416,
295,AliveStatements,14,bv_normalize_automata_classic,PASS,19.743036,
296,AliveStatements,14,simp,FAIL,72.673222,simp made no progress
297,AliveStatements,14,bv_normalize,FAIL,12.468401,internal exception #5
298,AliveStatements,14,bv_decide,FAIL,158.686804,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [-1#w + -x✝ == x✝ ^^^ -1#w]
    Consider the following assignment:
    -1#w + -x✝ == x✝ ^^^ -1#w = false"
299,AliveStatements,14,bv_auto,PASS,156.898635,
300,AliveStatements,14,bv_automata_circuit_lean_prop,PASS,27.339892,
301,AliveStatements,14,bv_automata_circuit_lean,PASS,13.065811,
302,AliveStatements,14,bv_normalize_automata_circuit_lean,PASS,25.198654,
303,AliveStatements,14,bv_automata_circuit_cadical_prop,PASS,608.655352,
304,AliveStatements,14,bv_automata_circuit_cadical,PASS,612.19599,
305,AliveStatements,14,bv_normalize_automata_circuit_cadical,PASS,606.193564,
306,AliveStatements,14,bv_mba,FAIL,5.457616,"unable to reflect term '
      BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
307,AliveStatements,14,bv_normalize_mba,FAIL,17.639688,internal exception #5
308,AliveStatements,15,rfl,FAIL,2025.029202,"tactic 'rfl' failed, the left-hand side
      x✝ - (x✝¹ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      x✝¹ + (x✝ + 1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - (x✝¹ ^^^ -1#w) = x✝¹ + (x✝ + 1#w)"
309,AliveStatements,15,bv_bitwise,FAIL,20840.132411,internal exception #5
310,AliveStatements,15,bv_ac,FAIL,2271.488528,internal exception #5
311,AliveStatements,15,bv_distrib,FAIL,8423.609564,internal exception #5
312,AliveStatements,15,bv_ring,FAIL,7433.427877,internal exception #5
313,AliveStatements,15,bv_of_bool,FAIL,443.337743,simp made no progress
314,AliveStatements,15,bv_omega,FAIL,256.672848,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝¹.toNat + (x✝.toNat + 1 % 2 ^ w) % 2 ^ w) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - (x✝¹ ^^^ -1#w).toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w"
315,AliveStatements,15,bv_automata_classic_prop,PASS,41178.229058,
316,AliveStatements,15,bv_automata_classic,PASS,13.102371,
317,AliveStatements,15,bv_normalize_automata_classic,PASS,48.063438,
318,AliveStatements,15,simp,FAIL,109.398237,simp made no progress
319,AliveStatements,15,bv_normalize,FAIL,19.083957,internal exception #5
320,AliveStatements,15,bv_decide,FAIL,164.691819,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ + -(x✝¹ ^^^ -1#w) ==
       x✝¹ + (x✝ + 1#w)]
    Consider the following assignment:
    x✝ + -(x✝¹ ^^^ -1#w) == x✝¹ + (x✝ + 1#w) = false"
321,AliveStatements,15,bv_auto,PASS,744.851381,
322,AliveStatements,15,bv_automata_circuit_lean_prop,PASS,104.97409,
323,AliveStatements,15,bv_automata_circuit_lean,PASS,90.178019,
324,AliveStatements,15,bv_normalize_automata_circuit_lean,PASS,110.128836,
325,AliveStatements,15,bv_automata_circuit_cadical_prop,PASS,604.340975,
326,AliveStatements,15,bv_automata_circuit_cadical,PASS,591.887913,
327,AliveStatements,15,bv_normalize_automata_circuit_cadical,PASS,612.796969,
328,AliveStatements,15,bv_mba,FAIL,7.461325,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
329,AliveStatements,15,bv_normalize_mba,FAIL,26.086083,internal exception #5
330,AliveStatements,16,rfl,FAIL,1521.18547,"tactic 'rfl' failed, the left-hand side
      x✝ - (x✝¹ + x✝²)
    is not definitionally equal to the right-hand side
      x✝ - x✝² - x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ - (x✝¹ + x✝²) = x✝ - x✝² - x✝¹"
331,AliveStatements,16,bv_bitwise,FAIL,16088.312876,internal exception #5
332,AliveStatements,16,bv_ac,FAIL,1809.457837,internal exception #5
333,AliveStatements,16,bv_distrib,FAIL,11367.559821,internal exception #5
334,AliveStatements,16,bv_ring,PASS,4144.159242,
335,AliveStatements,16,bv_of_bool,FAIL,561.724883,simp made no progress
336,AliveStatements,16,bv_omega,FAIL,338.223204,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝.toNat + (2 ^ w - x✝².toNat)) % 2 ^ w + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - (x✝¹.toNat + x✝².toNat) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w"
337,AliveStatements,16,bv_automata_classic_prop,PASS,47497.354602,
338,AliveStatements,16,bv_automata_classic,PASS,11.144492,
339,AliveStatements,16,bv_normalize_automata_classic,PASS,38.417424,
340,AliveStatements,16,simp,FAIL,164.05727,internal exception #5
341,AliveStatements,16,bv_normalize,FAIL,19.865797,internal exception #5
342,AliveStatements,16,bv_decide,FAIL,165.774749,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ + -(x✝¹ + x✝²) == x✝ + -x✝² + -x✝¹]
    Consider the following assignment:
    x✝ + -(x✝¹ + x✝²) == x✝ + -x✝² + -x✝¹ = false"
343,AliveStatements,16,bv_auto,PASS,642.987809,
344,AliveStatements,16,bv_automata_circuit_lean_prop,PASS,130.014963,
345,AliveStatements,16,bv_automata_circuit_lean,PASS,116.765412,
346,AliveStatements,16,bv_normalize_automata_circuit_lean,PASS,134.31356,
347,AliveStatements,16,bv_automata_circuit_cadical_prop,PASS,627.25005,
348,AliveStatements,16,bv_automata_circuit_cadical,PASS,590.415354,
349,AliveStatements,16,bv_normalize_automata_circuit_cadical,PASS,615.347778,
350,AliveStatements,16,bv_mba,FAIL,8.221074,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
351,AliveStatements,16,bv_normalize_mba,FAIL,27.981911,internal exception #5
352,AliveStatements,17,rfl,FAIL,745.91223,"tactic 'rfl' failed, the left-hand side
      x✝ - (x✝ + x✝¹)
    is not definitionally equal to the right-hand side
      0#w - x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - (x✝ + x✝¹) = 0#w - x✝¹"
353,AliveStatements,17,bv_bitwise,PASS,17003.019392,
354,AliveStatements,17,bv_ac,FAIL,2250.605411,internal exception #5
355,AliveStatements,17,bv_distrib,PASS,13579.083818,
356,AliveStatements,17,bv_ring,FAIL,8904.667701,internal exception #5
357,AliveStatements,17,bv_of_bool,FAIL,504.316322,simp made no progress
358,AliveStatements,17,bv_omega,FAIL,331.724058,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - (x✝.toNat + x✝¹.toNat) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w"
359,AliveStatements,17,bv_automata_classic_prop,PASS,56130.935455,
360,AliveStatements,17,bv_automata_classic,PASS,7.740505,
361,AliveStatements,17,bv_normalize_automata_classic,PASS,21.680995,
362,AliveStatements,17,simp,PASS,141.613705,
363,AliveStatements,17,bv_normalize,FAIL,13.537701,internal exception #5
364,AliveStatements,17,bv_decide,FAIL,161.266252,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ + -(x✝ + x✝¹) == -x✝¹]
    Consider the following assignment:
    x✝ + -(x✝ + x✝¹) == -x✝¹ = false"
365,AliveStatements,17,bv_auto,PASS,155.960785,
366,AliveStatements,17,bv_automata_circuit_lean_prop,PASS,27.359881,
367,AliveStatements,17,bv_automata_circuit_lean,PASS,12.840572,
368,AliveStatements,17,bv_normalize_automata_circuit_lean,PASS,28.70818,
369,AliveStatements,17,bv_automata_circuit_cadical_prop,PASS,603.947926,
370,AliveStatements,17,bv_automata_circuit_cadical,PASS,591.175463,
371,AliveStatements,17,bv_normalize_automata_circuit_cadical,PASS,607.665283,
372,AliveStatements,17,bv_mba,FAIL,7.765225,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
373,AliveStatements,17,bv_normalize_mba,FAIL,20.834726,internal exception #5
374,AliveStatements,18,rfl,FAIL,529.817164,"tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹ - x✝
    is not definitionally equal to the right-hand side
      0#w - x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - x✝¹ - x✝ = 0#w - x✝¹"
375,AliveStatements,18,bv_bitwise,PASS,10533.27672,
376,AliveStatements,18,bv_ac,FAIL,1785.340063,internal exception #5
377,AliveStatements,18,bv_distrib,PASS,12068.65017,
378,AliveStatements,18,bv_ring,FAIL,13344.106615,internal exception #5
379,AliveStatements,18,bv_of_bool,FAIL,958.473827,simp made no progress
380,AliveStatements,18,bv_omega,FAIL,511.105808,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     b := ↑((x✝.toNat + (2 ^ w - x✝¹.toNat)) % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w"
381,AliveStatements,18,bv_automata_classic_prop,PASS,64584.372249,
382,AliveStatements,18,bv_automata_classic,PASS,8.135595,
383,AliveStatements,18,bv_normalize_automata_classic,PASS,21.453446,
384,AliveStatements,18,simp,PASS,129.569453,
385,AliveStatements,18,bv_normalize,FAIL,14.15984,internal exception #5
386,AliveStatements,18,bv_decide,FAIL,160.418132,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ + -x✝¹ + -x✝ == -x✝¹]
    Consider the following assignment:
    x✝ + -x✝¹ + -x✝ == -x✝¹ = false"
387,AliveStatements,18,bv_auto,PASS,147.839151,
388,AliveStatements,18,bv_automata_circuit_lean_prop,PASS,28.872891,
389,AliveStatements,18,bv_automata_circuit_lean,PASS,12.788711,
390,AliveStatements,18,bv_normalize_automata_circuit_lean,PASS,26.980292,
391,AliveStatements,18,bv_automata_circuit_cadical_prop,PASS,613.572309,
392,AliveStatements,18,bv_automata_circuit_cadical,PASS,593.355422,
393,AliveStatements,18,bv_normalize_automata_circuit_cadical,PASS,614.464158,
394,AliveStatements,18,bv_mba,FAIL,8.244764,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
395,AliveStatements,18,bv_normalize_mba,FAIL,22.129166,internal exception #5
396,AliveStatements,19,rfl,FAIL,453.999246,"tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) - (x✝ ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) - (x✝ ^^^ x✝¹) = x✝ &&& x✝¹"
397,AliveStatements,19,bv_bitwise,PASS,12447.258466,
398,AliveStatements,19,bv_ac,FAIL,1997.257302,internal exception #5
399,AliveStatements,19,bv_distrib,PASS,8535.611208,
400,AliveStatements,19,bv_ring,FAIL,10750.957463,internal exception #5
401,AliveStatements,19,bv_of_bool,FAIL,745.89452,simp made no progress
402,AliveStatements,19,bv_omega,FAIL,361.546338,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹).toNat
     b := ↑((x✝ ||| x✝¹).toNat + (2 ^ w - (x✝ ^^^ x✝¹).toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w"
403,AliveStatements,19,bv_automata_classic_prop,PASS,65960.206747,
404,AliveStatements,19,bv_automata_classic,PASS,11.720412,
405,AliveStatements,19,bv_normalize_automata_classic,PASS,38.487374,
406,AliveStatements,19,simp,PASS,91.193329,
407,AliveStatements,19,bv_normalize,FAIL,15.662119,internal exception #5
408,AliveStatements,19,bv_decide,FAIL,160.619812,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~x✝ &&& ~~~x✝¹) + -(x✝ ^^^ x✝¹) ==
       x✝ &&& x✝¹]
    Consider the following assignment:
    ~~~(~~~x✝ &&& ~~~x✝¹) + -(x✝ ^^^ x✝¹) == x✝ &&& x✝¹ = false"
409,AliveStatements,19,bv_auto,PASS,103.681541,
410,AliveStatements,19,bv_automata_circuit_lean_prop,PASS,24.102444,
411,AliveStatements,19,bv_automata_circuit_lean,PASS,7.680424,
412,AliveStatements,19,bv_normalize_automata_circuit_lean,PASS,23.420475,
413,AliveStatements,19,bv_automata_circuit_cadical_prop,PASS,608.729542,
414,AliveStatements,19,bv_automata_circuit_cadical,PASS,596.62418,
415,AliveStatements,19,bv_normalize_automata_circuit_cadical,PASS,612.063809,
416,AliveStatements,19,bv_mba,FAIL,4.720467,"unable to reflect term '
      x✝ ||| x✝¹'.
    Expected 'int * variable'."
417,AliveStatements,19,bv_normalize_mba,FAIL,19.690747,internal exception #5
418,AliveStatements,20,rfl,FAIL,389.300819,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) &&& x✝²
    is not definitionally equal to the right-hand side
      x✝ &&& x✝² ^^^ x✝¹ &&& x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ x✝¹) &&& x✝² = x✝ &&& x✝² ^^^ x✝¹ &&& x✝²"
419,AliveStatements,20,bv_bitwise,PASS,94815.346945,
420,AliveStatements,20,bv_ac,FAIL,25.352992,internal exception #5
421,AliveStatements,20,bv_distrib,FAIL,118.651351,internal exception #5
422,AliveStatements,20,bv_ring,FAIL,78.826657,internal exception #5
423,AliveStatements,20,bv_of_bool,FAIL,20.761156,simp made no progress
424,AliveStatements,20,bv_omega,FAIL,5.201987,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝² ^^^ x✝¹ &&& x✝²).toNat
     b := ↑((x✝ ^^^ x✝¹) &&& x✝²).toNat
     c := ↑2 ^ w"
425,AliveStatements,20,bv_automata_classic_prop,PASS,22.804974,
426,AliveStatements,20,bv_automata_classic,PASS,7.882485,
427,AliveStatements,20,bv_normalize_automata_classic,PASS,17.967228,
428,AliveStatements,20,simp,FAIL,99.556653,simp made no progress
429,AliveStatements,20,bv_normalize,FAIL,10.344233,internal exception #5
430,AliveStatements,20,bv_decide,FAIL,156.119186,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ ^^^ x✝¹) &&& x✝² ==
       x✝ &&& x✝² ^^^ x✝¹ &&& x✝²]
    Consider the following assignment:
    (x✝ ^^^ x✝¹) &&& x✝² == x✝ &&& x✝² ^^^ x✝¹ &&& x✝² = false"
431,AliveStatements,20,bv_auto,PASS,297.92691,
432,AliveStatements,20,bv_automata_circuit_lean_prop,PASS,23.056744,
433,AliveStatements,20,bv_automata_circuit_lean,PASS,7.807165,
434,AliveStatements,20,bv_normalize_automata_circuit_lean,PASS,18.109598,
435,AliveStatements,20,bv_automata_circuit_cadical_prop,PASS,315.910708,
436,AliveStatements,20,bv_automata_circuit_cadical,PASS,299.954639,
437,AliveStatements,20,bv_normalize_automata_circuit_cadical,PASS,313.07866,
438,AliveStatements,20,bv_mba,FAIL,3.545438,"unable to reflect term '
      (x✝ ^^^ x✝¹) &&& x✝²'.
    Expected 'int * variable'."
439,AliveStatements,20,bv_normalize_mba,FAIL,13.644751,internal exception #5
440,AliveStatements,21,rfl,FAIL,799.267945,"tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& x✝²
    is not definitionally equal to the right-hand side
      (x✝ ||| x✝¹ &&& x✝²) &&& x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& x✝² = (x✝ ||| x✝¹ &&& x✝²) &&& x✝²"
441,AliveStatements,21,bv_bitwise,PASS,95588.582836,
442,AliveStatements,21,bv_ac,FAIL,25.432103,internal exception #5
443,AliveStatements,21,bv_distrib,FAIL,116.177262,internal exception #5
444,AliveStatements,21,bv_ring,FAIL,80.247356,internal exception #5
445,AliveStatements,21,bv_of_bool,FAIL,22.191755,simp made no progress
446,AliveStatements,21,bv_omega,FAIL,5.912266,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ||| x✝¹ &&& x✝²) &&& x✝²).toNat
     b := ↑((x✝ ||| x✝¹) &&& x✝²).toNat
     c := ↑2 ^ w"
447,AliveStatements,21,bv_automata_classic_prop,PASS,21.810475,
448,AliveStatements,21,bv_automata_classic,PASS,7.882125,
449,AliveStatements,21,bv_normalize_automata_classic,PASS,22.128025,
450,AliveStatements,21,simp,FAIL,100.407173,simp made no progress
451,AliveStatements,21,bv_normalize,FAIL,14.87756,internal exception #5
452,AliveStatements,21,bv_decide,FAIL,160.700592,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~x✝ &&& ~~~x✝¹) &&& x✝² ==
       ~~~(~~~x✝ &&& ~~~(x✝¹ &&& x✝²)) &&& x✝²]
    Consider the following assignment:
    ~~~(~~~x✝ &&& ~~~x✝¹) &&& x✝² == ~~~(~~~x✝ &&& ~~~(x✝¹ &&& x✝²)) &&& x✝² = false"
453,AliveStatements,21,bv_auto,PASS,294.403143,
454,AliveStatements,21,bv_automata_circuit_lean_prop,PASS,22.162505,
455,AliveStatements,21,bv_automata_circuit_lean,PASS,8.206254,
456,AliveStatements,21,bv_normalize_automata_circuit_lean,PASS,22.571945,
457,AliveStatements,21,bv_automata_circuit_cadical_prop,PASS,312.269391,
458,AliveStatements,21,bv_automata_circuit_cadical,PASS,300.736118,
459,AliveStatements,21,bv_normalize_automata_circuit_cadical,PASS,318.572417,
460,AliveStatements,21,bv_mba,FAIL,3.369567,"unable to reflect term '
      (x✝ ||| x✝¹) &&& x✝²'.
    Expected 'int * variable'."
461,AliveStatements,21,bv_normalize_mba,FAIL,18.147688,internal exception #5
462,AliveStatements,22,rfl,FAIL,876.306203,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ == 0#w && x✝ &&& x✝² == 0#w
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ||| x✝²) == 0#w
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ == 0#w && x✝ &&& x✝² == 0#w) = (x✝ &&& (x✝¹ ||| x✝²) == 0#w)"
463,AliveStatements,22,bv_bitwise,FAIL,2.008618,"no applicable extensionality theorem found for
      Bool"
464,AliveStatements,22,bv_ac,FAIL,2159.349783,internal exception #5
465,AliveStatements,22,bv_distrib,FAIL,7108.357235,internal exception #5
466,AliveStatements,22,bv_ring,FAIL,3726.065553,internal exception #5
467,AliveStatements,22,bv_of_bool,FAIL,2339.044052,internal exception #5
468,AliveStatements,22,bv_omega,FAIL,153.119697,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
469,AliveStatements,22,bv_automata_classic_prop,FAIL,523.913289,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ = 0#w ∧ x✝ &&& x✝² = 0#w) = (x✝ &&& (x✝¹ ||| x✝²) = 0#w)"
470,AliveStatements,22,bv_automata_classic,FAIL,51.661765,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ == 0#w && x✝ &&& x✝² == 0#w) = (x✝ &&& (x✝¹ ||| x✝²) == 0#w)."
471,AliveStatements,22,bv_normalize_automata_classic,FAIL,289.171446,internal exception #5
472,AliveStatements,22,simp,FAIL,1036.916245,simp made no progress
473,AliveStatements,22,bv_normalize,FAIL,202.891294,internal exception #5
474,AliveStatements,22,bv_decide,FAIL,400.563222,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ &&& ~~~(~~~x✝¹ &&& ~~~x✝²) == 0#w,
     x✝ &&& x✝² == 0#w,
     x✝ &&& x✝¹ == 0#w]
    Consider the following assignment:
    x✝ &&& x✝¹ == 0#w = true
    x✝ &&& x✝² == 0#w = true
    x✝ &&& ~~~(~~~x✝¹ &&& ~~~x✝²) == 0#w = false"
475,AliveStatements,22,bv_auto,PASS,57791.447762,
476,AliveStatements,22,bv_automata_circuit_lean_prop,FAIL,26.188152,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ = 0#w ∧ x✝ &&& x✝² = 0#w) = (x✝ &&& (x✝¹ ||| x✝²) = 0#w)"
477,AliveStatements,22,bv_automata_circuit_lean,FAIL,2.759488,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ == 0#w && x✝ &&& x✝² == 0#w) = (x✝ &&& (x✝¹ ||| x✝²) == 0#w)."
478,AliveStatements,22,bv_normalize_automata_circuit_lean,FAIL,18.912058,internal exception #5
479,AliveStatements,22,bv_automata_circuit_cadical_prop,FAIL,27.525081,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ = 0#w ∧ x✝ &&& x✝² = 0#w) = (x✝ &&& (x✝¹ ||| x✝²) = 0#w)"
480,AliveStatements,22,bv_automata_circuit_cadical,FAIL,4.388187,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ == 0#w && x✝ &&& x✝² == 0#w) = (x✝ &&& (x✝¹ ||| x✝²) == 0#w)."
481,AliveStatements,22,bv_normalize_automata_circuit_cadical,FAIL,20.580477,internal exception #5
482,AliveStatements,22,bv_mba,FAIL,0.911749,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      (x✝ &&& x✝¹ == 0#w && x✝ &&& x✝² == 0#w) = (x✝ &&& (x✝¹ ||| x✝²) == 0#w)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ == 0#w && x✝ &&& x✝² == 0#w) = (x✝ &&& (x✝¹ ||| x✝²) == 0#w)"
483,AliveStatements,22,bv_normalize_mba,FAIL,16.903749,internal exception #5
484,AliveStatements,23,rfl,FAIL,634.435735,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ == x✝¹ && x✝ &&& x✝² == x✝²
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ == x✝¹ && x✝ &&& x✝² == x✝²) = (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)"
485,AliveStatements,23,bv_bitwise,FAIL,2.072498,"no applicable extensionality theorem found for
      Bool"
486,AliveStatements,23,bv_ac,FAIL,1661.783746,internal exception #5
487,AliveStatements,23,bv_distrib,FAIL,3787.589452,internal exception #5
488,AliveStatements,23,bv_ring,FAIL,1837.046758,internal exception #5
489,AliveStatements,23,bv_of_bool,FAIL,880.96681,internal exception #5
490,AliveStatements,23,bv_omega,FAIL,25.102413,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
491,AliveStatements,23,bv_automata_classic_prop,FAIL,190.562632,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ = x✝¹ ∧ x✝ &&& x✝² = x✝²) = (x✝ &&& (x✝¹ ||| x✝²) = x✝¹ ||| x✝²)"
492,AliveStatements,23,bv_automata_classic,FAIL,108.611267,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ == x✝¹ && x✝ &&& x✝² == x✝²) = (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)."
493,AliveStatements,23,bv_normalize_automata_classic,FAIL,231.980125,internal exception #5
494,AliveStatements,23,simp,FAIL,983.61057,simp made no progress
495,AliveStatements,23,bv_normalize,FAIL,68.027955,internal exception #5
496,AliveStatements,23,bv_decide,FAIL,213.731917,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ &&& ~~~(~~~x✝¹ &&& ~~~x✝²) ==
       ~~~(~~~x✝¹ &&& ~~~x✝²),
     x✝ &&& x✝² == x✝²,
     x✝ &&& x✝¹ == x✝¹]
    Consider the following assignment:
    x✝ &&& x✝¹ == x✝¹ = true
    x✝ &&& x✝² == x✝² = true
    x✝ &&& ~~~(~~~x✝¹ &&& ~~~x✝²) == ~~~(~~~x✝¹ &&& ~~~x✝²) = false"
497,AliveStatements,23,bv_auto,PASS,56847.418965,
498,AliveStatements,23,bv_automata_circuit_lean_prop,FAIL,32.686098,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ = x✝¹ ∧ x✝ &&& x✝² = x✝²) = (x✝ &&& (x✝¹ ||| x✝²) = x✝¹ ||| x✝²)"
499,AliveStatements,23,bv_automata_circuit_lean,FAIL,3.718428,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ == x✝¹ && x✝ &&& x✝² == x✝²) = (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)."
500,AliveStatements,23,bv_normalize_automata_circuit_lean,FAIL,24.221514,internal exception #5
501,AliveStatements,23,bv_automata_circuit_cadical_prop,FAIL,28.69796,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ = x✝¹ ∧ x✝ &&& x✝² = x✝²) = (x✝ &&& (x✝¹ ||| x✝²) = x✝¹ ||| x✝²)"
502,AliveStatements,23,bv_automata_circuit_cadical,FAIL,4.306057,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ == x✝¹ && x✝ &&& x✝² == x✝²) = (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)."
503,AliveStatements,23,bv_normalize_automata_circuit_cadical,FAIL,20.336487,internal exception #5
504,AliveStatements,23,bv_mba,FAIL,0.960829,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      (x✝ &&& x✝¹ == x✝¹ && x✝ &&& x✝² == x✝²) = (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ == x✝¹ && x✝ &&& x✝² == x✝²) = (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)"
505,AliveStatements,23,bv_normalize_mba,FAIL,16.629309,internal exception #5
506,AliveStatements,24,rfl,FAIL,171.763544,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ == x✝ && x✝ &&& x✝² == x✝
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ &&& x✝²) == x✝
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ == x✝ && x✝ &&& x✝² == x✝) = (x✝ &&& (x✝¹ &&& x✝²) == x✝)"
507,AliveStatements,24,bv_bitwise,FAIL,0.66547,"no applicable extensionality theorem found for
      Bool"
508,AliveStatements,24,bv_ac,FAIL,219.358463,internal exception #5
509,AliveStatements,24,bv_distrib,FAIL,897.474318,internal exception #5
510,AliveStatements,24,bv_ring,FAIL,1032.486888,internal exception #5
511,AliveStatements,24,bv_of_bool,FAIL,403.32562,internal exception #5
512,AliveStatements,24,bv_omega,FAIL,29.14962,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
513,AliveStatements,24,bv_automata_classic_prop,FAIL,88.974161,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ = x✝ ∧ x✝ &&& x✝² = x✝) = (x✝ &&& (x✝¹ &&& x✝²) = x✝)"
514,AliveStatements,24,bv_automata_classic,FAIL,38.606314,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ == x✝ && x✝ &&& x✝² == x✝) = (x✝ &&& (x✝¹ &&& x✝²) == x✝)."
515,AliveStatements,24,bv_normalize_automata_classic,FAIL,178.7759,internal exception #5
516,AliveStatements,24,simp,FAIL,986.399919,simp made no progress
517,AliveStatements,24,bv_normalize,FAIL,82.084675,internal exception #5
518,AliveStatements,24,bv_decide,FAIL,242.811917,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ &&& x✝² == x✝,
     x✝ &&& (x✝¹ &&& x✝²) == x✝,
     x✝ &&& x✝¹ == x✝]
    Consider the following assignment:
    x✝ &&& x✝¹ == x✝ = true
    x✝ &&& x✝² == x✝ = true
    x✝ &&& (x✝¹ &&& x✝²) == x✝ = false"
519,AliveStatements,24,bv_auto,PASS,56470.917197,
520,AliveStatements,24,bv_automata_circuit_lean_prop,FAIL,24.187874,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ = x✝ ∧ x✝ &&& x✝² = x✝) = (x✝ &&& (x✝¹ &&& x✝²) = x✝)"
521,AliveStatements,24,bv_automata_circuit_lean,FAIL,2.287748,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ == x✝ && x✝ &&& x✝² == x✝) = (x✝ &&& (x✝¹ &&& x✝²) == x✝)."
522,AliveStatements,24,bv_normalize_automata_circuit_lean,FAIL,14.337041,internal exception #5
523,AliveStatements,24,bv_automata_circuit_cadical_prop,FAIL,26.773112,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ = x✝ ∧ x✝ &&& x✝² = x✝) = (x✝ &&& (x✝¹ &&& x✝²) = x✝)"
524,AliveStatements,24,bv_automata_circuit_cadical,FAIL,3.955197,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ &&& x✝¹ == x✝ && x✝ &&& x✝² == x✝) = (x✝ &&& (x✝¹ &&& x✝²) == x✝)."
525,AliveStatements,24,bv_normalize_automata_circuit_cadical,FAIL,16.423849,internal exception #5
526,AliveStatements,24,bv_mba,FAIL,0.96056,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      (x✝ &&& x✝¹ == x✝ && x✝ &&& x✝² == x✝) = (x✝ &&& (x✝¹ &&& x✝²) == x✝)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ == x✝ && x✝ &&& x✝² == x✝) = (x✝ &&& (x✝¹ &&& x✝²) == x✝)"
527,AliveStatements,24,bv_normalize_mba,FAIL,13.074241,internal exception #5
528,AliveStatements,25,rfl,FAIL,987.533328,"tactic 'rfl' failed, the left-hand side
      (x✝¹ <ₛ x✝) && x✝ != x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ <ₛ x✝
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ ((x✝¹ <ₛ x✝) && x✝ != x✝¹) = (x✝¹ <ₛ x✝)"
529,AliveStatements,25,bv_bitwise,FAIL,16.982659,"no applicable extensionality theorem found for
      Bool"
530,AliveStatements,25,bv_ac,FAIL,1795.501116,internal exception #5
531,AliveStatements,25,bv_distrib,FAIL,4875.097152,internal exception #5
532,AliveStatements,25,bv_ring,FAIL,1318.619087,internal exception #5
533,AliveStatements,25,bv_of_bool,PASS,13748.167434,
534,AliveStatements,25,bv_omega,FAIL,197.052428,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
535,AliveStatements,25,bv_automata_classic_prop,FAIL,1135.698839,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      ((x✝¹ <ₛ x✝) = true ∧ x✝ ≠ x✝¹) = ((x✝¹ <ₛ x✝) = true)"
536,AliveStatements,25,bv_automata_classic,FAIL,55.762652,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      ((x✝¹ <ₛ x✝) && x✝ != x✝¹) = (x✝¹ <ₛ x✝)."
537,AliveStatements,25,bv_normalize_automata_classic,FAIL,1620.381754,internal exception #5
538,AliveStatements,25,simp,FAIL,3997.93847,internal exception #5
539,AliveStatements,25,bv_normalize,FAIL,1153.481177,internal exception #5
540,AliveStatements,25,bv_decide,FAIL,1251.827371,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.extractLsb' (w - 1) 1 x✝,
     x✝ == x✝¹,
     x✝¹ <ᵤ x✝,
     BitVec.extractLsb' (w - 1) 1 x✝¹]
    Consider the following assignment:
    BitVec.extractLsb' (w - 1) 1 x✝ = 1#1
    BitVec.extractLsb' (w - 1) 1 x✝¹ = 1#1
    x✝¹ <ᵤ x✝ = true
    x✝ == x✝¹ = true"
541,AliveStatements,25,bv_auto,PASS,9657.102787,
542,AliveStatements,25,bv_automata_circuit_lean_prop,FAIL,198.393547,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      ((x✝¹ <ₛ x✝) = true ∧ x✝ ≠ x✝¹) = ((x✝¹ <ₛ x✝) = true)"
543,AliveStatements,25,bv_automata_circuit_lean,FAIL,17.741498,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      ((x✝¹ <ₛ x✝) && x✝ != x✝¹) = (x✝¹ <ₛ x✝)."
544,AliveStatements,25,bv_normalize_automata_circuit_lean,FAIL,337.070434,internal exception #5
545,AliveStatements,25,bv_automata_circuit_cadical_prop,FAIL,167.662488,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      ((x✝¹ <ₛ x✝) = true ∧ x✝ ≠ x✝¹) = ((x✝¹ <ₛ x✝) = true)"
546,AliveStatements,25,bv_automata_circuit_cadical,FAIL,23.193684,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      ((x✝¹ <ₛ x✝) && x✝ != x✝¹) = (x✝¹ <ₛ x✝)."
547,AliveStatements,25,bv_normalize_automata_circuit_cadical,FAIL,244.944276,internal exception #5
548,AliveStatements,25,bv_mba,FAIL,13.498001,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      ((x✝¹ <ₛ x✝) && x✝ != x✝¹) = (x✝¹ <ₛ x✝)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ ((x✝¹ <ₛ x✝) && x✝ != x✝¹) = (x✝¹ <ₛ x✝)"
549,AliveStatements,25,bv_normalize_mba,FAIL,317.457427,internal exception #5
550,AliveStatements,26,rfl,FAIL,804.627021,"tactic 'rfl' failed, the left-hand side
      x✝ == 0#w && x✝¹ == 0#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ == 0#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ == 0#w && x✝¹ == 0#w) = (x✝ ||| x✝¹ == 0#w)"
551,AliveStatements,26,bv_bitwise,FAIL,2.396338,"no applicable extensionality theorem found for
      Bool"
552,AliveStatements,26,bv_ac,FAIL,2011.400712,internal exception #5
553,AliveStatements,26,bv_distrib,FAIL,5105.915518,internal exception #5
554,AliveStatements,26,bv_ring,FAIL,8284.954056,internal exception #5
555,AliveStatements,26,bv_of_bool,FAIL,5517.189132,internal exception #5
556,AliveStatements,26,bv_omega,FAIL,171.390535,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
557,AliveStatements,26,bv_automata_classic_prop,FAIL,1468.651345,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ = 0#w ∧ x✝¹ = 0#w) = (x✝ ||| x✝¹ = 0#w)"
558,AliveStatements,26,bv_automata_classic,FAIL,148.98588,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ == 0#w && x✝¹ == 0#w) = (x✝ ||| x✝¹ == 0#w)."
559,AliveStatements,26,bv_normalize_automata_classic,FAIL,1424.224916,internal exception #5
560,AliveStatements,26,simp,FAIL,5843.326153,simp made no progress
561,AliveStatements,26,bv_normalize,FAIL,1134.15266,internal exception #5
562,AliveStatements,26,bv_decide,FAIL,1011.595252,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~x✝ &&& ~~~x✝¹) == 0#w,
     x✝¹ == 0#w,
     x✝ == 0#w]
    Consider the following assignment:
    x✝ == 0#w = true
    x✝¹ == 0#w = true
    ~~~(~~~x✝ &&& ~~~x✝¹) == 0#w = false"
563,AliveStatements,26,bv_auto,PASS,75775.332177,
564,AliveStatements,26,bv_automata_circuit_lean_prop,FAIL,29.35179,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ = 0#w ∧ x✝¹ = 0#w) = (x✝ ||| x✝¹ = 0#w)"
565,AliveStatements,26,bv_automata_circuit_lean,FAIL,1.903419,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ == 0#w && x✝¹ == 0#w) = (x✝ ||| x✝¹ == 0#w)."
566,AliveStatements,26,bv_normalize_automata_circuit_lean,FAIL,15.209229,internal exception #5
567,AliveStatements,26,bv_automata_circuit_cadical_prop,FAIL,25.305514,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ = 0#w ∧ x✝¹ = 0#w) = (x✝ ||| x✝¹ = 0#w)"
568,AliveStatements,26,bv_automata_circuit_cadical,FAIL,3.651437,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ == 0#w && x✝¹ == 0#w) = (x✝ ||| x✝¹ == 0#w)."
569,AliveStatements,26,bv_normalize_automata_circuit_cadical,FAIL,17.232149,internal exception #5
570,AliveStatements,26,bv_mba,FAIL,0.839839,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      (x✝ == 0#w && x✝¹ == 0#w) = (x✝ ||| x✝¹ == 0#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ == 0#w && x✝¹ == 0#w) = (x✝ ||| x✝¹ == 0#w)"
571,AliveStatements,26,bv_normalize_mba,FAIL,14.19635,internal exception #5
572,AliveStatements,27,rfl,FAIL,562.417203,"tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ == x✝¹ && x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      0#1
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ == x✝¹ && x✝ != x✝¹) = 0#1"
573,AliveStatements,27,bv_bitwise,PASS,5867.614137,
574,AliveStatements,27,bv_ac,FAIL,1337.459984,internal exception #5
575,AliveStatements,27,bv_distrib,PASS,8248.70706,
576,AliveStatements,27,bv_ring,FAIL,8259.159324,internal exception #5
577,AliveStatements,27,bv_of_bool,FAIL,3775.660459,internal exception #5
578,AliveStatements,27,bv_omega,FAIL,811.622576,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
579,AliveStatements,27,bv_automata_classic_prop,PASS,80881.589855,
580,AliveStatements,27,bv_automata_classic,FAIL,0.28022,"found multiple bitvector widths in the target: 
      OfNat.ofNat.{0} Nat 1 (instOfNatNat 1) → BitVec.ofNat (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))_uniq.889 → _uniq.4045"
581,AliveStatements,27,bv_normalize_automata_classic,PASS,5.151227,
582,AliveStatements,27,simp,PASS,61.515178,
583,AliveStatements,27,bv_normalize,PASS,4.327237,
584,AliveStatements,27,bv_decide,PASS,4.207087,
585,AliveStatements,27,bv_auto,PASS,70.897113,
586,AliveStatements,27,bv_automata_circuit_lean_prop,PASS,29.07171,
587,AliveStatements,27,bv_automata_circuit_lean,FAIL,0.20749,"found multiple bitvector widths in the target: 
      1 → 0#1; w → x✝¹"
588,AliveStatements,27,bv_normalize_automata_circuit_lean,PASS,5.198277,
589,AliveStatements,27,bv_automata_circuit_cadical_prop,PASS,320.131185,
590,AliveStatements,27,bv_automata_circuit_cadical,FAIL,2.486238,"found multiple bitvector widths in the target: 
      1 → 0#1; w → x✝¹"
591,AliveStatements,27,bv_normalize_automata_circuit_cadical,PASS,7.180345,
592,AliveStatements,27,bv_mba,FAIL,4.513047,"unable to reflect term '
      BitVec.ofBool (x✝ == x✝¹ && x✝ != x✝¹)'.
    Expected 'int * variable'."
593,AliveStatements,27,bv_normalize_mba,PASS,4.583847,
594,AliveStatements,28,rfl,FAIL,416.580471,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      (x✝ ||| x✝¹) ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) = (x✝ ||| x✝¹) ^^^ -1#w"
595,AliveStatements,28,bv_bitwise,PASS,24599.089291,
596,AliveStatements,28,bv_ac,FAIL,2282.06031,internal exception #5
597,AliveStatements,28,bv_distrib,FAIL,7896.560007,internal exception #5
598,AliveStatements,28,bv_ring,FAIL,5942.957917,internal exception #5
599,AliveStatements,28,bv_of_bool,FAIL,578.954851,simp made no progress
600,AliveStatements,28,bv_omega,FAIL,115.775133,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ||| x✝¹) ^^^ -1#w).toNat
     b := ↑((x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)).toNat
     c := ↑2 ^ w"
601,AliveStatements,28,bv_automata_classic_prop,PASS,62941.37338,
602,AliveStatements,28,bv_automata_classic,PASS,9.565983,
603,AliveStatements,28,bv_normalize_automata_classic,PASS,21.160316,
604,AliveStatements,28,simp,FAIL,114.315273,simp made no progress
605,AliveStatements,28,bv_normalize,FAIL,12.967752,internal exception #5
606,AliveStatements,28,bv_decide,FAIL,157.650174,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) ==
       ~~~(~~~x✝ &&& ~~~x✝¹) ^^^ -1#w]
    Consider the following assignment:
    (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) == ~~~(~~~x✝ &&& ~~~x✝¹) ^^^ -1#w = false"
607,AliveStatements,28,bv_auto,PASS,224.994909,
608,AliveStatements,28,bv_automata_circuit_lean_prop,PASS,31.202709,
609,AliveStatements,28,bv_automata_circuit_lean,PASS,17.754468,
610,AliveStatements,28,bv_normalize_automata_circuit_lean,PASS,29.52211,
611,AliveStatements,28,bv_automata_circuit_cadical_prop,PASS,604.808685,
612,AliveStatements,28,bv_automata_circuit_cadical,PASS,591.397813,
613,AliveStatements,28,bv_normalize_automata_circuit_cadical,PASS,605.343094,
614,AliveStatements,28,bv_mba,FAIL,5.108637,"unable to reflect term '
      (x✝ ^^^ BitVec.ofInt w (-1)) &&& (x✝¹ ^^^ BitVec.ofInt w (-1))'.
    Expected 'int * variable'."
615,AliveStatements,28,bv_normalize_mba,FAIL,17.664908,internal exception #5
616,AliveStatements,29,rfl,FAIL,292.553144,"tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w) = x✝ ^^^ x✝¹"
617,AliveStatements,29,bv_bitwise,PASS,101960.693415,
618,AliveStatements,29,bv_ac,FAIL,33.079448,internal exception #5
619,AliveStatements,29,bv_distrib,FAIL,138.662127,internal exception #5
620,AliveStatements,29,bv_ring,FAIL,129.466953,internal exception #5
621,AliveStatements,29,bv_of_bool,FAIL,21.968876,simp made no progress
622,AliveStatements,29,bv_omega,FAIL,5.788176,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑((x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w)).toNat
     c := ↑2 ^ w"
623,AliveStatements,29,bv_automata_classic_prop,PASS,24.195234,
624,AliveStatements,29,bv_automata_classic,PASS,8.510114,
625,AliveStatements,29,bv_normalize_automata_classic,PASS,22.200275,
626,AliveStatements,29,simp,FAIL,113.758414,simp made no progress
627,AliveStatements,29,bv_normalize,FAIL,13.78602,internal exception #5
628,AliveStatements,29,bv_decide,FAIL,165.29113,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~x✝ &&& ~~~x✝¹) &&&
         (x✝ &&& x✝¹ ^^^ -1#w) ==
       x✝ ^^^ x✝¹]
    Consider the following assignment:
    ~~~(~~~x✝ &&& ~~~x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w) == x✝ ^^^ x✝¹ = false"
629,AliveStatements,29,bv_auto,PASS,382.505083,
630,AliveStatements,29,bv_automata_circuit_lean_prop,PASS,24.188274,
631,AliveStatements,29,bv_automata_circuit_lean,PASS,9.535763,
632,AliveStatements,29,bv_normalize_automata_circuit_lean,PASS,22.891655,
633,AliveStatements,29,bv_automata_circuit_cadical_prop,PASS,627.349199,
634,AliveStatements,29,bv_automata_circuit_cadical,PASS,600.347408,
635,AliveStatements,29,bv_normalize_automata_circuit_cadical,PASS,606.935283,
636,AliveStatements,29,bv_mba,FAIL,5.379376,"unable to reflect term '
      (x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ BitVec.ofInt w (-1))'.
    Expected 'int * variable'."
637,AliveStatements,29,bv_normalize_mba,FAIL,19.222867,internal exception #5
638,AliveStatements,30,rfl,FAIL,369.786672,"tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹) = x✝ ^^^ x✝¹"
639,AliveStatements,30,bv_bitwise,PASS,103652.313571,
640,AliveStatements,30,bv_ac,FAIL,41.171853,internal exception #5
641,AliveStatements,30,bv_distrib,FAIL,137.827957,internal exception #5
642,AliveStatements,30,bv_ring,FAIL,127.205785,internal exception #5
643,AliveStatements,30,bv_of_bool,FAIL,22.388295,simp made no progress
644,AliveStatements,30,bv_omega,FAIL,5.923956,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹)).toNat
     c := ↑2 ^ w"
645,AliveStatements,30,bv_automata_classic_prop,PASS,22.942405,
646,AliveStatements,30,bv_automata_classic,PASS,8.091814,
647,AliveStatements,30,bv_normalize_automata_classic,PASS,22.171815,
648,AliveStatements,30,simp,FAIL,114.168974,simp made no progress
649,AliveStatements,30,bv_normalize,FAIL,13.614781,internal exception #5
650,AliveStatements,30,bv_decide,FAIL,158.611443,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ &&& x✝¹ ^^^ -1#w) &&&
         ~~~(~~~x✝ &&& ~~~x✝¹) ==
       x✝ ^^^ x✝¹]
    Consider the following assignment:
    (x✝ &&& x✝¹ ^^^ -1#w) &&& ~~~(~~~x✝ &&& ~~~x✝¹) == x✝ ^^^ x✝¹ = false"
651,AliveStatements,30,bv_auto,PASS,382.961094,
652,AliveStatements,30,bv_automata_circuit_lean_prop,PASS,24.071494,
653,AliveStatements,30,bv_automata_circuit_lean,PASS,9.231314,
654,AliveStatements,30,bv_normalize_automata_circuit_lean,PASS,22.869915,
655,AliveStatements,30,bv_automata_circuit_cadical_prop,PASS,606.393763,
656,AliveStatements,30,bv_automata_circuit_cadical,PASS,593.021153,
657,AliveStatements,30,bv_normalize_automata_circuit_cadical,PASS,611.06519,
658,AliveStatements,30,bv_mba,FAIL,5.145326,"unable to reflect term '
      (x✝ &&& x✝¹ ^^^ BitVec.ofInt w (-1)) &&& (x✝ ||| x✝¹)'.
    Expected 'int * variable'."
659,AliveStatements,30,bv_normalize_mba,FAIL,18.402898,internal exception #5
660,AliveStatements,31,rfl,FAIL,593.480562,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) &&& x✝
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ x✝¹) &&& x✝ = x✝ &&& (x✝¹ ^^^ -1#w)"
661,AliveStatements,31,bv_bitwise,PASS,114198.021223,
662,AliveStatements,31,bv_ac,FAIL,31.527539,internal exception #5
663,AliveStatements,31,bv_distrib,FAIL,124.708286,internal exception #5
664,AliveStatements,31,bv_ring,FAIL,123.908017,internal exception #5
665,AliveStatements,31,bv_of_bool,FAIL,20.776926,simp made no progress
666,AliveStatements,31,bv_omega,FAIL,5.415956,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& (x✝¹ ^^^ -1#w)).toNat
     b := ↑((x✝ ^^^ x✝¹) &&& x✝).toNat
     c := ↑2 ^ w"
667,AliveStatements,31,bv_automata_classic_prop,PASS,22.810475,
668,AliveStatements,31,bv_automata_classic,PASS,7.856715,
669,AliveStatements,31,bv_normalize_automata_classic,PASS,17.771788,
670,AliveStatements,31,simp,FAIL,104.960199,simp made no progress
671,AliveStatements,31,bv_normalize,FAIL,10.582643,internal exception #5
672,AliveStatements,31,bv_decide,FAIL,156.106916,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ ^^^ x✝¹) &&& x✝ ==
       x✝ &&& (x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    (x✝ ^^^ x✝¹) &&& x✝ == x✝ &&& (x✝¹ ^^^ -1#w) = false"
673,AliveStatements,31,bv_auto,PASS,360.115418,
674,AliveStatements,31,bv_automata_circuit_lean_prop,PASS,28.422091,
675,AliveStatements,31,bv_automata_circuit_lean,PASS,9.897973,
676,AliveStatements,31,bv_normalize_automata_circuit_lean,PASS,23.286225,
677,AliveStatements,31,bv_automata_circuit_cadical_prop,PASS,604.868824,
678,AliveStatements,31,bv_automata_circuit_cadical,PASS,594.310332,
679,AliveStatements,31,bv_normalize_automata_circuit_cadical,PASS,601.508947,
680,AliveStatements,31,bv_mba,FAIL,4.768877,"unable to reflect term '
      (x✝ ^^^ x✝¹) &&& x✝'.
    Expected 'int * variable'."
681,AliveStatements,31,bv_normalize_mba,FAIL,14.91724,internal exception #5
682,AliveStatements,32,rfl,FAIL,327.059631,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w ||| x✝¹) &&& x✝
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w ||| x✝¹) &&& x✝ = x✝ &&& x✝¹"
683,AliveStatements,32,bv_bitwise,PASS,115158.229039,
684,AliveStatements,32,bv_ac,FAIL,28.251961,internal exception #5
685,AliveStatements,32,bv_distrib,FAIL,123.122148,internal exception #5
686,AliveStatements,32,bv_ring,FAIL,128.246654,internal exception #5
687,AliveStatements,32,bv_of_bool,FAIL,21.035546,simp made no progress
688,AliveStatements,32,bv_omega,FAIL,5.765096,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹).toNat
     b := ↑((x✝ ^^^ -1#w ||| x✝¹) &&& x✝).toNat
     c := ↑2 ^ w"
689,AliveStatements,32,bv_automata_classic_prop,PASS,22.338225,
690,AliveStatements,32,bv_automata_classic,PASS,8.005534,
691,AliveStatements,32,bv_normalize_automata_classic,PASS,20.496817,
692,AliveStatements,32,simp,FAIL,101.401222,simp made no progress
693,AliveStatements,32,bv_normalize,FAIL,13.187591,internal exception #5
694,AliveStatements,32,bv_decide,FAIL,161.563341,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~(x✝ ^^^ -1#w) &&& ~~~x✝¹) &&&
         x✝ ==
       x✝ &&& x✝¹]
    Consider the following assignment:
    ~~~(~~~(x✝ ^^^ -1#w) &&& ~~~x✝¹) &&& x✝ == x✝ &&& x✝¹ = false"
695,AliveStatements,32,bv_auto,PASS,370.330692,
696,AliveStatements,32,bv_automata_circuit_lean_prop,PASS,24.882563,
697,AliveStatements,32,bv_automata_circuit_lean,PASS,10.632063,
698,AliveStatements,32,bv_normalize_automata_circuit_lean,PASS,20.938166,
699,AliveStatements,32,bv_automata_circuit_cadical_prop,PASS,619.421645,
700,AliveStatements,32,bv_automata_circuit_cadical,PASS,601.389397,
701,AliveStatements,32,bv_normalize_automata_circuit_cadical,PASS,611.07455,
702,AliveStatements,32,bv_mba,FAIL,5.152777,"unable to reflect term '
      (x✝ ^^^ BitVec.ofInt w (-1) ||| x✝¹) &&& x✝'.
    Expected 'int * variable'."
703,AliveStatements,32,bv_normalize_mba,FAIL,17.962887,internal exception #5
704,AliveStatements,33,rfl,FAIL,388.24341,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝)
    is not definitionally equal to the right-hand side
      (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝) = (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w)"
705,AliveStatements,33,bv_bitwise,PASS,96021.183017,
706,AliveStatements,33,bv_ac,FAIL,44.057751,internal exception #5
707,AliveStatements,33,bv_distrib,FAIL,159.535393,internal exception #5
708,AliveStatements,33,bv_ring,FAIL,126.209655,internal exception #5
709,AliveStatements,33,bv_of_bool,FAIL,21.573376,simp made no progress
710,AliveStatements,33,bv_omega,FAIL,5.888456,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w)).toNat
     b := ↑((x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝)).toNat
     c := ↑2 ^ w"
711,AliveStatements,33,bv_automata_classic_prop,PASS,23.955684,
712,AliveStatements,33,bv_automata_classic,PASS,8.819904,
713,AliveStatements,33,bv_normalize_automata_classic,PASS,21.139486,
714,AliveStatements,33,simp,FAIL,138.388027,simp made no progress
715,AliveStatements,33,bv_normalize,FAIL,11.630472,internal exception #5
716,AliveStatements,33,bv_decide,FAIL,157.344805,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝) ==
       (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w)]
    Consider the following assignment:
    (x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝) == (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w) = false"
717,AliveStatements,33,bv_auto,PASS,428.436252,
718,AliveStatements,33,bv_automata_circuit_lean_prop,PASS,24.727564,
719,AliveStatements,33,bv_automata_circuit_lean,PASS,9.949013,
720,AliveStatements,33,bv_normalize_automata_circuit_lean,PASS,21.254626,
721,AliveStatements,33,bv_automata_circuit_cadical_prop,PASS,606.097483,
722,AliveStatements,33,bv_automata_circuit_cadical,PASS,592.956713,
723,AliveStatements,33,bv_normalize_automata_circuit_cadical,PASS,606.399213,
724,AliveStatements,33,bv_mba,FAIL,4.999457,"unable to reflect term '
      (x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝)'.
    Expected 'int * variable'."
725,AliveStatements,33,bv_normalize_mba,FAIL,16.239489,internal exception #5
726,AliveStatements,34,rfl,FAIL,348.978826,"tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹) = x✝ &&& x✝¹"
727,AliveStatements,34,bv_bitwise,PASS,119651.834017,
728,AliveStatements,34,bv_ac,FAIL,45.807489,internal exception #5
729,AliveStatements,34,bv_distrib,FAIL,139.771916,internal exception #5
730,AliveStatements,34,bv_ring,FAIL,130.467053,internal exception #5
731,AliveStatements,34,bv_of_bool,FAIL,22.803065,simp made no progress
732,AliveStatements,34,bv_omega,FAIL,5.953866,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹).toNat
     b := ↑((x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹)).toNat
     c := ↑2 ^ w"
733,AliveStatements,34,bv_automata_classic_prop,PASS,23.426494,
734,AliveStatements,34,bv_automata_classic,PASS,8.084174,
735,AliveStatements,34,bv_normalize_automata_classic,PASS,22.979795,
736,AliveStatements,34,simp,FAIL,116.305872,simp made no progress
737,AliveStatements,34,bv_normalize,FAIL,13.848181,internal exception #5
738,AliveStatements,34,bv_decide,FAIL,159.783853,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~x✝ &&& ~~~x✝¹) &&&
         (x✝ ^^^ -1#w ^^^ x✝¹) ==
       x✝ &&& x✝¹]
    Consider the following assignment:
    ~~~(~~~x✝ &&& ~~~x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹) == x✝ &&& x✝¹ = false"
739,AliveStatements,34,bv_auto,PASS,395.539725,
740,AliveStatements,34,bv_automata_circuit_lean_prop,PASS,24.925244,
741,AliveStatements,34,bv_automata_circuit_lean,PASS,9.138624,
742,AliveStatements,34,bv_normalize_automata_circuit_lean,PASS,22.397884,
743,AliveStatements,34,bv_automata_circuit_cadical_prop,PASS,612.78911,
744,AliveStatements,34,bv_automata_circuit_cadical,PASS,597.344369,
745,AliveStatements,34,bv_normalize_automata_circuit_cadical,PASS,610.371811,
746,AliveStatements,34,bv_mba,FAIL,5.159676,"unable to reflect term '
      (x✝ ||| x✝¹) &&& (x✝ ^^^ BitVec.ofInt w (-1) ^^^ x✝¹)'.
    Expected 'int * variable'."
747,AliveStatements,34,bv_normalize_mba,FAIL,18.540938,internal exception #5
748,AliveStatements,35,rfl,FAIL,226.951418,"tactic 'rfl' failed, the left-hand side
      (x✝¹ <ᵤ x✝) || x✝ == x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ ≤ᵤ x✝
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ ((x✝¹ <ᵤ x✝) || x✝ == x✝¹) = (x✝¹ ≤ᵤ x✝)"
749,AliveStatements,35,bv_bitwise,FAIL,2.675838,"no applicable extensionality theorem found for
      Bool"
750,AliveStatements,35,bv_ac,FAIL,737.884895,internal exception #5
751,AliveStatements,35,bv_distrib,FAIL,3598.353888,internal exception #5
752,AliveStatements,35,bv_ring,FAIL,2270.179989,internal exception #5
753,AliveStatements,35,bv_of_bool,PASS,5548.55984,
754,AliveStatements,35,bv_omega,FAIL,187.400624,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
755,AliveStatements,35,bv_automata_classic_prop,FAIL,1482.072937,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      ((x✝¹ <ᵤ x✝) = true ∨ x✝ = x✝¹) = ((x✝¹ ≤ᵤ x✝) = true)"
756,AliveStatements,35,bv_automata_classic,FAIL,124.735916,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      ((x✝¹ <ᵤ x✝) || x✝ == x✝¹) = (x✝¹ ≤ᵤ x✝)."
757,AliveStatements,35,bv_normalize_automata_classic,FAIL,1031.981468,internal exception #5
758,AliveStatements,35,simp,FAIL,2297.58584,simp made no progress
759,AliveStatements,35,bv_normalize,FAIL,882.605499,internal exception #5
760,AliveStatements,35,bv_decide,FAIL,886.649725,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ == x✝¹, x✝ <ᵤ x✝¹, x✝¹ <ᵤ x✝]
    Consider the following assignment:
    x✝¹ <ᵤ x✝ = true
    x✝ == x✝¹ = true
    x✝ <ᵤ x✝¹ = true"
761,AliveStatements,35,bv_auto,PASS,7790.993868,
762,AliveStatements,35,bv_automata_circuit_lean_prop,FAIL,399.734182,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      ((x✝¹ <ᵤ x✝) = true ∨ x✝ = x✝¹) = ((x✝¹ ≤ᵤ x✝) = true)"
763,AliveStatements,35,bv_automata_circuit_lean,FAIL,63.991957,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      ((x✝¹ <ᵤ x✝) || x✝ == x✝¹) = (x✝¹ ≤ᵤ x✝)."
764,AliveStatements,35,bv_normalize_automata_circuit_lean,FAIL,441.915704,internal exception #5
765,AliveStatements,35,bv_automata_circuit_cadical_prop,FAIL,774.057271,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      ((x✝¹ <ᵤ x✝) = true ∨ x✝ = x✝¹) = ((x✝¹ ≤ᵤ x✝) = true)"
766,AliveStatements,35,bv_automata_circuit_cadical,FAIL,158.187084,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      ((x✝¹ <ᵤ x✝) || x✝ == x✝¹) = (x✝¹ ≤ᵤ x✝)."
767,AliveStatements,35,bv_normalize_automata_circuit_cadical,FAIL,622.749703,internal exception #5
768,AliveStatements,35,bv_mba,FAIL,18.660757,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      ((x✝¹ <ᵤ x✝) || x✝ == x✝¹) = (x✝¹ ≤ᵤ x✝)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ ((x✝¹ <ᵤ x✝) || x✝ == x✝¹) = (x✝¹ ≤ᵤ x✝)"
769,AliveStatements,35,bv_normalize_mba,FAIL,490.963321,internal exception #5
770,AliveStatements,36,rfl,FAIL,768.018356,"tactic 'rfl' failed, the left-hand side
      BitVec.ofBool ((x✝¹ ≤ᵤ x✝) || x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      1#1
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool ((x✝¹ ≤ᵤ x✝) || x✝ != x✝¹) = 1#1"
771,AliveStatements,36,bv_bitwise,FAIL,6336.981802,internal exception #5
772,AliveStatements,36,bv_ac,FAIL,1220.211002,internal exception #5
773,AliveStatements,36,bv_distrib,FAIL,6984.015378,internal exception #5
774,AliveStatements,36,bv_ring,FAIL,6281.12914,internal exception #5
775,AliveStatements,36,bv_of_bool,FAIL,4337.925252,internal exception #5
776,AliveStatements,36,bv_omega,FAIL,362.487427,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
777,AliveStatements,36,bv_automata_classic_prop,FAIL,758.731102,"unknown boolean conditional, expected 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝¹ ≤ᵤ x✝) = true"
778,AliveStatements,36,bv_automata_classic,FAIL,2.266498,"found multiple bitvector widths in the target: 
      OfNat.ofNat.{0} Nat 1 (instOfNatNat 1) → BitVec.ofNat (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)) (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))_uniq.1438 → _uniq.4713"
779,AliveStatements,36,bv_normalize_automata_classic,FAIL,1121.878848,internal exception #5
780,AliveStatements,36,simp,FAIL,3868.753727,internal exception #5
781,AliveStatements,36,bv_normalize,FAIL,868.747548,internal exception #5
782,AliveStatements,36,bv_decide,FAIL,663.873635,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ == x✝¹, x✝ <ᵤ x✝¹]
    Consider the following assignment:
    x✝ <ᵤ x✝¹ = true
    x✝ == x✝¹ = true"
783,AliveStatements,36,bv_auto,PASS,92140.652597,
784,AliveStatements,36,bv_automata_circuit_lean_prop,FAIL,21.568696,"unknown boolean conditional, expected 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝¹ ≤ᵤ x✝) = true"
785,AliveStatements,36,bv_automata_circuit_lean,FAIL,0.15574,"found multiple bitvector widths in the target: 
      1 → 1#1; w → x✝"
786,AliveStatements,36,bv_normalize_automata_circuit_lean,FAIL,16.643099,internal exception #5
787,AliveStatements,36,bv_automata_circuit_cadical_prop,FAIL,23.031824,"unknown boolean conditional, expected 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝¹ ≤ᵤ x✝) = true"
788,AliveStatements,36,bv_automata_circuit_cadical,FAIL,1.674019,"found multiple bitvector widths in the target: 
      1 → 1#1; w → x✝"
789,AliveStatements,36,bv_normalize_automata_circuit_cadical,FAIL,17.127608,internal exception #5
790,AliveStatements,36,bv_mba,FAIL,3.939678,"unable to reflect term '
      BitVec.ofBool ((x✝¹ ≤ᵤ x✝) || x✝ != x✝¹)'.
    Expected 'int * variable'."
791,AliveStatements,36,bv_normalize_mba,FAIL,18.913337,internal exception #5
792,AliveStatements,37,rfl,FAIL,453.148476,"tactic 'rfl' failed, the left-hand side
      x✝ == 0#w || x✝¹ <ᵤ x✝
    is not definitionally equal to the right-hand side
      x✝¹ ≤ᵤ x✝ + -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)"
793,AliveStatements,37,bv_bitwise,FAIL,4.676377,"no applicable extensionality theorem found for
      Bool"
794,AliveStatements,37,bv_ac,FAIL,1559.197965,internal exception #5
795,AliveStatements,37,bv_distrib,FAIL,11225.147016,internal exception #5
796,AliveStatements,37,bv_ring,FAIL,11310.591578,internal exception #5
797,AliveStatements,37,bv_of_bool,FAIL,2699.67426,internal exception #5
798,AliveStatements,37,bv_omega,FAIL,115.102023,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
799,AliveStatements,37,bv_automata_classic_prop,FAIL,544.609795,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ = 0#w ∨ (x✝¹ <ᵤ x✝) = true) = ((x✝¹ ≤ᵤ x✝ + -1#w) = true)"
800,AliveStatements,37,bv_automata_classic,FAIL,174.052493,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)."
801,AliveStatements,37,bv_normalize_automata_classic,FAIL,981.087413,internal exception #5
802,AliveStatements,37,simp,FAIL,3751.994265,simp made no progress
803,AliveStatements,37,bv_normalize,FAIL,400.488531,internal exception #5
804,AliveStatements,37,bv_decide,FAIL,585.985138,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ + -1#w <ᵤ x✝¹, x✝¹ <ᵤ x✝, x✝ == 0#w]
    Consider the following assignment:
    x✝ == 0#w = true
    x✝¹ <ᵤ x✝ = true
    x✝ + -1#w <ᵤ x✝¹ = true"
805,AliveStatements,37,bv_auto,PASS,87896.248223,
806,AliveStatements,37,bv_automata_circuit_lean_prop,FAIL,28.687461,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ = 0#w ∨ (x✝¹ <ᵤ x✝) = true) = ((x✝¹ ≤ᵤ x✝ + -1#w) = true)"
807,AliveStatements,37,bv_automata_circuit_lean,FAIL,2.247049,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)."
808,AliveStatements,37,bv_normalize_automata_circuit_lean,FAIL,14.82223,internal exception #5
809,AliveStatements,37,bv_automata_circuit_cadical_prop,FAIL,24.348693,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ = 0#w ∨ (x✝¹ <ᵤ x✝) = true) = ((x✝¹ ≤ᵤ x✝ + -1#w) = true)"
810,AliveStatements,37,bv_automata_circuit_cadical,FAIL,3.966698,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)."
811,AliveStatements,37,bv_normalize_automata_circuit_cadical,FAIL,16.796589,internal exception #5
812,AliveStatements,37,bv_mba,FAIL,0.844129,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)"
813,AliveStatements,37,bv_normalize_mba,FAIL,13.495871,internal exception #5
814,AliveStatements,38,rfl,FAIL,360.973588,"tactic 'rfl' failed, the left-hand side
      x✝ == 0#w || x✝¹ <ᵤ x✝
    is not definitionally equal to the right-hand side
      x✝¹ ≤ᵤ x✝ + -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)"
815,AliveStatements,38,bv_bitwise,FAIL,6.271886,"no applicable extensionality theorem found for
      Bool"
816,AliveStatements,38,bv_ac,FAIL,1845.744393,internal exception #5
817,AliveStatements,38,bv_distrib,FAIL,9123.231435,internal exception #5
818,AliveStatements,38,bv_ring,FAIL,11174.27467,internal exception #5
819,AliveStatements,38,bv_of_bool,FAIL,3017.419908,internal exception #5
820,AliveStatements,38,bv_omega,FAIL,160.796792,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
821,AliveStatements,38,bv_automata_classic_prop,FAIL,794.059278,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ = 0#w ∨ (x✝¹ <ᵤ x✝) = true) = ((x✝¹ ≤ᵤ x✝ + -1#w) = true)"
822,AliveStatements,38,bv_automata_classic,FAIL,83.258304,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)."
823,AliveStatements,38,bv_normalize_automata_classic,FAIL,599.994858,internal exception #5
824,AliveStatements,38,simp,FAIL,3521.910809,simp made no progress
825,AliveStatements,38,bv_normalize,FAIL,525.191918,internal exception #5
826,AliveStatements,38,bv_decide,FAIL,607.060253,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ + -1#w <ᵤ x✝¹, x✝ == 0#w, x✝¹ <ᵤ x✝]
    Consider the following assignment:
    x✝ == 0#w = true
    x✝¹ <ᵤ x✝ = true
    x✝ + -1#w <ᵤ x✝¹ = true"
827,AliveStatements,38,bv_auto,PASS,89886.331549,
828,AliveStatements,38,bv_automata_circuit_lean_prop,FAIL,23.278005,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ = 0#w ∨ (x✝¹ <ᵤ x✝) = true) = ((x✝¹ ≤ᵤ x✝ + -1#w) = true)"
829,AliveStatements,38,bv_automata_circuit_lean,FAIL,2.253648,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)."
830,AliveStatements,38,bv_normalize_automata_circuit_lean,FAIL,14.72181,internal exception #5
831,AliveStatements,38,bv_automata_circuit_cadical_prop,FAIL,25.004474,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ = 0#w ∨ (x✝¹ <ᵤ x✝) = true) = ((x✝¹ ≤ᵤ x✝ + -1#w) = true)"
832,AliveStatements,38,bv_automata_circuit_cadical,FAIL,3.893377,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)."
833,AliveStatements,38,bv_normalize_automata_circuit_cadical,FAIL,16.885709,internal exception #5
834,AliveStatements,38,bv_mba,FAIL,0.850189,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ == 0#w || x✝¹ <ᵤ x✝) = (x✝¹ ≤ᵤ x✝ + -1#w)"
835,AliveStatements,38,bv_normalize_mba,FAIL,13.469921,internal exception #5
836,AliveStatements,39,rfl,FAIL,1365.072965,"tactic 'rfl' failed, the left-hand side
      x✝ != 0#w || x✝¹ != 0#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ != 0#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ != 0#w || x✝¹ != 0#w) = (x✝ ||| x✝¹ != 0#w)"
837,AliveStatements,39,bv_bitwise,FAIL,8.175924,"no applicable extensionality theorem found for
      Bool"
838,AliveStatements,39,bv_ac,FAIL,2992.334385,internal exception #5
839,AliveStatements,39,bv_distrib,FAIL,8743.465729,internal exception #5
840,AliveStatements,39,bv_ring,FAIL,9667.18031,internal exception #5
841,AliveStatements,39,bv_of_bool,FAIL,6308.120161,internal exception #5
842,AliveStatements,39,bv_omega,FAIL,178.163141,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
843,AliveStatements,39,bv_automata_classic_prop,FAIL,1266.205481,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ ≠ 0#w ∨ x✝¹ ≠ 0#w) = (x✝ ||| x✝¹ ≠ 0#w)"
844,AliveStatements,39,bv_automata_classic,FAIL,163.473941,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ != 0#w || x✝¹ != 0#w) = (x✝ ||| x✝¹ != 0#w)."
845,AliveStatements,39,bv_normalize_automata_classic,FAIL,1025.888502,internal exception #5
846,AliveStatements,39,simp,FAIL,2285.611428,simp made no progress
847,AliveStatements,39,bv_normalize,FAIL,554.284779,internal exception #5
848,AliveStatements,39,bv_decide,FAIL,888.913254,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~x✝ &&& ~~~x✝¹) == 0#w,
     x✝¹ == 0#w,
     x✝ == 0#w]
    Consider the following assignment:
    x✝ == 0#w = true
    x✝¹ == 0#w = true
    ~~~(~~~x✝ &&& ~~~x✝¹) == 0#w = false"
849,AliveStatements,39,bv_auto,PASS,91616.626428,
850,AliveStatements,39,bv_automata_circuit_lean_prop,FAIL,32.429518,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ ≠ 0#w ∨ x✝¹ ≠ 0#w) = (x✝ ||| x✝¹ ≠ 0#w)"
851,AliveStatements,39,bv_automata_circuit_lean,FAIL,1.935899,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ != 0#w || x✝¹ != 0#w) = (x✝ ||| x✝¹ != 0#w)."
852,AliveStatements,39,bv_normalize_automata_circuit_lean,FAIL,18.903127,internal exception #5
853,AliveStatements,39,bv_automata_circuit_cadical_prop,FAIL,28.491271,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      (x✝ ≠ 0#w ∨ x✝¹ ≠ 0#w) = (x✝ ||| x✝¹ ≠ 0#w)"
854,AliveStatements,39,bv_automata_circuit_cadical,FAIL,3.645908,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      (x✝ != 0#w || x✝¹ != 0#w) = (x✝ ||| x✝¹ != 0#w)."
855,AliveStatements,39,bv_normalize_automata_circuit_cadical,FAIL,21.435715,internal exception #5
856,AliveStatements,39,bv_mba,FAIL,0.90749,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      (x✝ != 0#w || x✝¹ != 0#w) = (x✝ ||| x✝¹ != 0#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ != 0#w || x✝¹ != 0#w) = (x✝ ||| x✝¹ != 0#w)"
857,AliveStatements,39,bv_normalize_mba,FAIL,18.670387,internal exception #5
858,AliveStatements,40,rfl,FAIL,471.791854,"tactic 'rfl' failed, the left-hand side
      x✝ ^^^ x✝¹ ||| x✝²
    is not definitionally equal to the right-hand side
      (x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ x✝¹ ||| x✝² = (x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝²"
859,AliveStatements,40,bv_bitwise,PASS,111348.227242,
860,AliveStatements,40,bv_ac,FAIL,35.570037,internal exception #5
861,AliveStatements,40,bv_distrib,FAIL,133.56433,internal exception #5
862,AliveStatements,40,bv_ring,FAIL,84.060044,internal exception #5
863,AliveStatements,40,bv_of_bool,FAIL,21.252035,simp made no progress
864,AliveStatements,40,bv_omega,FAIL,5.742227,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝²).toNat
     b := ↑(x✝ ^^^ x✝¹ ||| x✝²).toNat
     c := ↑2 ^ w"
865,AliveStatements,40,bv_automata_classic_prop,PASS,22.316395,
866,AliveStatements,40,bv_automata_classic,PASS,8.299794,
867,AliveStatements,40,bv_normalize_automata_classic,PASS,22.471725,
868,AliveStatements,40,simp,FAIL,114.611733,simp made no progress
869,AliveStatements,40,bv_normalize,FAIL,13.797651,internal exception #5
870,AliveStatements,40,bv_decide,FAIL,161.905361,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~(x✝ ^^^ x✝¹) &&& ~~~x✝²) ==
       ~~~(~~~x✝ &&& ~~~x✝²) ^^^ x✝¹ &&& ~~~x✝²]
    Consider the following assignment:
    ~~~(~~~(x✝ ^^^ x✝¹) &&& ~~~x✝²) == ~~~(~~~x✝ &&& ~~~x✝²) ^^^ x✝¹ &&& ~~~x✝² = false"
871,AliveStatements,40,bv_auto,PASS,318.859927,
872,AliveStatements,40,bv_automata_circuit_lean_prop,PASS,23.620405,
873,AliveStatements,40,bv_automata_circuit_lean,PASS,8.869274,
874,AliveStatements,40,bv_normalize_automata_circuit_lean,PASS,22.690484,
875,AliveStatements,40,bv_automata_circuit_cadical_prop,PASS,311.556592,
876,AliveStatements,40,bv_automata_circuit_cadical,PASS,296.465611,
877,AliveStatements,40,bv_normalize_automata_circuit_cadical,PASS,311.706301,
878,AliveStatements,40,bv_mba,FAIL,3.793927,"unable to reflect term '
      x✝ ^^^ x✝¹ ||| x✝²'.
    Expected 'int * variable'."
879,AliveStatements,40,bv_normalize_mba,FAIL,17.467228,internal exception #5
880,AliveStatements,41,rfl,FAIL,220.776812,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) &&& x✝¹ ||| x✝
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) &&& x✝¹ ||| x✝ = x✝ ||| x✝¹"
881,AliveStatements,41,bv_bitwise,PASS,128616.595267,
882,AliveStatements,41,bv_ac,FAIL,26.498522,internal exception #5
883,AliveStatements,41,bv_distrib,FAIL,120.546909,internal exception #5
884,AliveStatements,41,bv_ring,FAIL,129.055884,internal exception #5
885,AliveStatements,41,bv_of_bool,FAIL,20.762936,simp made no progress
886,AliveStatements,41,bv_omega,FAIL,5.750436,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑((x✝ ^^^ -1#w) &&& x✝¹ ||| x✝).toNat
     c := ↑2 ^ w"
887,AliveStatements,41,bv_automata_classic_prop,PASS,21.807755,
888,AliveStatements,41,bv_automata_classic,PASS,7.495175,
889,AliveStatements,41,bv_normalize_automata_classic,PASS,22.681195,
890,AliveStatements,41,simp,FAIL,101.615392,simp made no progress
891,AliveStatements,41,bv_normalize,FAIL,15.16247,internal exception #5
892,AliveStatements,41,bv_decide,FAIL,161.823501,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~((x✝ ^^^ -1#w) &&& x✝¹) &&& ~~~x✝ ==
       ~~~x✝ &&& ~~~x✝¹]
    Consider the following assignment:
    ~~~((x✝ ^^^ -1#w) &&& x✝¹) &&& ~~~x✝ == ~~~x✝ &&& ~~~x✝¹ = false"
893,AliveStatements,41,bv_auto,PASS,369.653183,
894,AliveStatements,41,bv_automata_circuit_lean_prop,PASS,22.717405,
895,AliveStatements,41,bv_automata_circuit_lean,PASS,8.350774,
896,AliveStatements,41,bv_normalize_automata_circuit_lean,PASS,23.562115,
897,AliveStatements,41,bv_automata_circuit_cadical_prop,PASS,611.81307,
898,AliveStatements,41,bv_automata_circuit_cadical,PASS,600.839977,
899,AliveStatements,41,bv_normalize_automata_circuit_cadical,PASS,611.858029,
900,AliveStatements,41,bv_mba,FAIL,5.182147,"unable to reflect term '
      (x✝ ^^^ BitVec.ofInt w (-1)) &&& x✝¹ ||| x✝'.
    Expected 'int * variable'."
901,AliveStatements,41,bv_normalize_mba,FAIL,19.880227,internal exception #5
902,AliveStatements,42,rfl,FAIL,483.139336,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ||| x✝ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ||| x✝ ^^^ -1#w = x✝ ^^^ -1#w ||| x✝¹"
903,AliveStatements,42,bv_bitwise,PASS,127745.507422,
904,AliveStatements,42,bv_ac,FAIL,27.526761,internal exception #5
905,AliveStatements,42,bv_distrib,FAIL,121.638389,internal exception #5
906,AliveStatements,42,bv_ring,FAIL,130.376452,internal exception #5
907,AliveStatements,42,bv_of_bool,FAIL,21.128186,simp made no progress
908,AliveStatements,42,bv_omega,FAIL,5.769876,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ -1#w ||| x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ||| x✝ ^^^ -1#w).toNat
     c := ↑2 ^ w"
909,AliveStatements,42,bv_automata_classic_prop,PASS,21.762386,
910,AliveStatements,42,bv_automata_classic,PASS,8.852654,
911,AliveStatements,42,bv_normalize_automata_classic,PASS,23.866524,
912,AliveStatements,42,simp,FAIL,102.751321,simp made no progress
913,AliveStatements,42,bv_normalize,FAIL,15.35814,internal exception #5
914,AliveStatements,42,bv_decide,FAIL,160.754872,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(x✝ &&& x✝¹) &&& ~~~(x✝ ^^^ -1#w) ==
       ~~~(x✝ ^^^ -1#w) &&& ~~~x✝¹]
    Consider the following assignment:
    ~~~(x✝ &&& x✝¹) &&& ~~~(x✝ ^^^ -1#w) == ~~~(x✝ ^^^ -1#w) &&& ~~~x✝¹ = false"
915,AliveStatements,42,bv_auto,PASS,379.799825,
916,AliveStatements,42,bv_automata_circuit_lean_prop,PASS,23.838944,
917,AliveStatements,42,bv_automata_circuit_lean,PASS,9.300514,
918,AliveStatements,42,bv_normalize_automata_circuit_lean,PASS,24.273924,
919,AliveStatements,42,bv_automata_circuit_cadical_prop,PASS,601.583896,
920,AliveStatements,42,bv_automata_circuit_cadical,PASS,592.440713,
921,AliveStatements,42,bv_normalize_automata_circuit_cadical,PASS,611.75035,
922,AliveStatements,42,bv_mba,FAIL,5.157576,"unable to reflect term '
      x✝ &&& x✝¹ ||| x✝ ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
923,AliveStatements,42,bv_normalize_mba,FAIL,20.049627,internal exception #5
924,AliveStatements,43,rfl,FAIL,483.579046,"tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹ = x✝ ^^^ x✝¹"
925,AliveStatements,43,bv_bitwise,PASS,30805.082472,
926,AliveStatements,43,bv_ac,FAIL,737.814715,internal exception #5
927,AliveStatements,43,bv_distrib,FAIL,4068.398683,internal exception #5
928,AliveStatements,43,bv_ring,FAIL,1364.806515,internal exception #5
929,AliveStatements,43,bv_of_bool,FAIL,194.6343,simp made no progress
930,AliveStatements,43,bv_omega,FAIL,62.246218,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑(x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹).toNat
     c := ↑2 ^ w"
931,AliveStatements,43,bv_automata_classic_prop,PASS,93961.738697,
932,AliveStatements,43,bv_automata_classic,PASS,10.060633,
933,AliveStatements,43,bv_normalize_automata_classic,PASS,27.029022,
934,AliveStatements,43,simp,FAIL,107.192038,simp made no progress
935,AliveStatements,43,bv_normalize,FAIL,12.301512,internal exception #5
936,AliveStatements,43,bv_decide,FAIL,158.340094,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~(x✝ &&& (x✝¹ ^^^ -1#w)) &&&
           ~~~(x✝ ^^^ x✝¹)) ==
       x✝ ^^^ x✝¹]
    Consider the following assignment:
    ~~~(~~~(x✝ &&& (x✝¹ ^^^ -1#w)) &&& ~~~(x✝ ^^^ x✝¹)) == x✝ ^^^ x✝¹ = false"
937,AliveStatements,43,bv_auto,PASS,376.939687,
938,AliveStatements,43,bv_automata_circuit_lean_prop,PASS,26.874592,
939,AliveStatements,43,bv_automata_circuit_lean,PASS,9.057544,
940,AliveStatements,43,bv_normalize_automata_circuit_lean,PASS,20.766086,
941,AliveStatements,43,bv_automata_circuit_cadical_prop,PASS,609.907692,
942,AliveStatements,43,bv_automata_circuit_cadical,PASS,593.028832,
943,AliveStatements,43,bv_normalize_automata_circuit_cadical,PASS,603.669715,
944,AliveStatements,43,bv_mba,FAIL,5.112097,"unable to reflect term '
      x✝ &&& (x✝¹ ^^^ BitVec.ofInt w (-1)) ||| x✝ ^^^ x✝¹'.
    Expected 'int * variable'."
945,AliveStatements,43,bv_normalize_mba,FAIL,17.049868,internal exception #5
946,AliveStatements,44,rfl,FAIL,318.523727,"tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹ = x✝ ^^^ x✝¹"
947,AliveStatements,44,bv_bitwise,PASS,134757.752611,
948,AliveStatements,44,bv_ac,FAIL,40.840212,internal exception #5
949,AliveStatements,44,bv_distrib,FAIL,149.70059,internal exception #5
950,AliveStatements,44,bv_ring,FAIL,130.996242,internal exception #5
951,AliveStatements,44,bv_of_bool,FAIL,22.065885,simp made no progress
952,AliveStatements,44,bv_omega,FAIL,6.001136,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑(x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹).toNat
     c := ↑2 ^ w"
953,AliveStatements,44,bv_automata_classic_prop,PASS,23.170435,
954,AliveStatements,44,bv_automata_classic,PASS,8.530474,
955,AliveStatements,44,bv_normalize_automata_classic,PASS,21.680675,
956,AliveStatements,44,simp,FAIL,127.303325,simp made no progress
957,AliveStatements,44,bv_normalize,FAIL,13.433941,internal exception #5
958,AliveStatements,44,bv_decide,FAIL,159.855423,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~(x✝ &&& (x✝¹ ^^^ -1#w)) &&&
           ~~~((x✝ ^^^ -1#w) &&& x✝¹)) ==
       x✝ ^^^ x✝¹]
    Consider the following assignment:
    ~~~(~~~(x✝ &&& (x✝¹ ^^^ -1#w)) &&& ~~~((x✝ ^^^ -1#w) &&& x✝¹)) == x✝ ^^^ x✝¹ = false"
959,AliveStatements,44,bv_auto,PASS,438.740916,
960,AliveStatements,44,bv_automata_circuit_lean_prop,PASS,25.946382,
961,AliveStatements,44,bv_automata_circuit_lean,PASS,9.810534,
962,AliveStatements,44,bv_normalize_automata_circuit_lean,PASS,22.848554,
963,AliveStatements,44,bv_automata_circuit_cadical_prop,PASS,614.263258,
964,AliveStatements,44,bv_automata_circuit_cadical,PASS,599.608199,
965,AliveStatements,44,bv_normalize_automata_circuit_cadical,PASS,612.38793,
966,AliveStatements,44,bv_mba,FAIL,5.553666,"unable to reflect term '
      x✝ &&& (x✝¹ ^^^ BitVec.ofInt w (-1)) ||| (x✝ ^^^ BitVec.ofInt w (-1)) &&& x✝¹'.
    Expected 'int * variable'."
967,AliveStatements,44,bv_normalize_mba,FAIL,18.483528,internal exception #5
968,AliveStatements,45,rfl,FAIL,221.503801,"tactic 'rfl' failed, the left-hand side
      x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹ ||| x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝ = x✝ ^^^ x✝¹ ||| x✝²"
969,AliveStatements,45,bv_bitwise,PASS,118432.512364,
970,AliveStatements,45,bv_ac,FAIL,21.611746,internal exception #5
971,AliveStatements,45,bv_distrib,FAIL,113.810643,internal exception #5
972,AliveStatements,45,bv_ring,FAIL,78.292638,internal exception #5
973,AliveStatements,45,bv_of_bool,FAIL,20.268976,simp made no progress
974,AliveStatements,45,bv_omega,FAIL,5.433047,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹ ||| x✝²).toNat
     b := ↑(x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝).toNat
     c := ↑2 ^ w"
975,AliveStatements,45,bv_automata_classic_prop,PASS,21.201195,
976,AliveStatements,45,bv_automata_classic,PASS,7.647675,
977,AliveStatements,45,bv_normalize_automata_classic,PASS,22.135175,
978,AliveStatements,45,simp,FAIL,100.742473,simp made no progress
979,AliveStatements,45,bv_normalize,FAIL,14.69837,internal exception #5
980,AliveStatements,45,bv_decide,FAIL,161.089682,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(x✝ ^^^ x✝¹) &&&
         ~~~(x✝¹ ^^^ x✝² ^^^ x✝) ==
       ~~~(x✝ ^^^ x✝¹) &&& ~~~x✝²]
    Consider the following assignment:
    ~~~(x✝ ^^^ x✝¹) &&& ~~~(x✝¹ ^^^ x✝² ^^^ x✝) == ~~~(x✝ ^^^ x✝¹) &&& ~~~x✝² = false"
981,AliveStatements,45,bv_auto,PASS,314.131079,
982,AliveStatements,45,bv_automata_circuit_lean_prop,PASS,22.319195,
983,AliveStatements,45,bv_automata_circuit_lean,PASS,7.912205,
984,AliveStatements,45,bv_normalize_automata_circuit_lean,PASS,22.851635,
985,AliveStatements,45,bv_automata_circuit_cadical_prop,PASS,313.00085,
986,AliveStatements,45,bv_automata_circuit_cadical,PASS,300.397149,
987,AliveStatements,45,bv_normalize_automata_circuit_cadical,PASS,313.88568,
988,AliveStatements,45,bv_mba,FAIL,3.487268,"unable to reflect term '
      x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝'.
    Expected 'int * variable'."
989,AliveStatements,45,bv_normalize_mba,FAIL,17.977138,internal exception #5
990,AliveStatements,46,rfl,FAIL,398.964873,"tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& x✝² ||| x✝
    is not definitionally equal to the right-hand side
      x✝ ||| x✝² &&& x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& x✝² ||| x✝ = x✝ ||| x✝² &&& x✝¹"
991,AliveStatements,46,bv_bitwise,PASS,132003.993377,
992,AliveStatements,46,bv_ac,FAIL,25.612162,internal exception #5
993,AliveStatements,46,bv_distrib,FAIL,116.850342,internal exception #5
994,AliveStatements,46,bv_ring,FAIL,76.922699,internal exception #5
995,AliveStatements,46,bv_of_bool,FAIL,18.772007,simp made no progress
996,AliveStatements,46,bv_omega,FAIL,5.277926,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝² &&& x✝¹).toNat
     b := ↑((x✝ ||| x✝¹) &&& x✝² ||| x✝).toNat
     c := ↑2 ^ w"
997,AliveStatements,46,bv_automata_classic_prop,PASS,21.199366,
998,AliveStatements,46,bv_automata_classic,PASS,7.351855,
999,AliveStatements,46,bv_normalize_automata_classic,PASS,25.258773,
1000,AliveStatements,46,simp,FAIL,99.639734,simp made no progress
1001,AliveStatements,46,bv_normalize,FAIL,16.462228,internal exception #5
1002,AliveStatements,46,bv_decide,FAIL,165.954229,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~(~~~x✝ &&& ~~~x✝¹) &&& x✝²) &&&
         ~~~x✝ ==
       ~~~x✝ &&& ~~~(x✝² &&& x✝¹)]
    Consider the following assignment:
    ~~~(~~~(~~~x✝ &&& ~~~x✝¹) &&& x✝²) &&& ~~~x✝ == ~~~x✝ &&& ~~~(x✝² &&& x✝¹) = false"
1003,AliveStatements,46,bv_auto,PASS,295.443172,
1004,AliveStatements,46,bv_automata_circuit_lean_prop,PASS,22.618385,
1005,AliveStatements,46,bv_automata_circuit_lean,PASS,7.511195,
1006,AliveStatements,46,bv_normalize_automata_circuit_lean,PASS,24.303224,
1007,AliveStatements,46,bv_automata_circuit_cadical_prop,PASS,311.456111,
1008,AliveStatements,46,bv_automata_circuit_cadical,PASS,300.518968,
1009,AliveStatements,46,bv_normalize_automata_circuit_cadical,PASS,320.062896,
1010,AliveStatements,46,bv_mba,FAIL,3.662057,"unable to reflect term '
      (x✝ ||| x✝¹) &&& x✝² ||| x✝'.
    Expected 'int * variable'."
1011,AliveStatements,46,bv_normalize_mba,FAIL,20.570006,internal exception #5
1012,AliveStatements,47,rfl,FAIL,240.688029,"tactic 'rfl' failed, the left-hand side
      x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w = x✝ &&& x✝¹ ^^^ -1#w"
1013,AliveStatements,47,bv_bitwise,PASS,21833.311545,
1014,AliveStatements,47,bv_ac,FAIL,1798.213234,internal exception #5
1015,AliveStatements,47,bv_distrib,FAIL,8064.036545,internal exception #5
1016,AliveStatements,47,bv_ring,FAIL,5161.11259,internal exception #5
1017,AliveStatements,47,bv_of_bool,FAIL,549.954302,simp made no progress
1018,AliveStatements,47,bv_omega,FAIL,155.203426,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w"
1019,AliveStatements,47,bv_automata_classic_prop,PASS,107093.462814,
1020,AliveStatements,47,bv_automata_classic,PASS,11.898592,
1021,AliveStatements,47,bv_normalize_automata_classic,PASS,29.39482,
1022,AliveStatements,47,simp,FAIL,122.211509,simp made no progress
1023,AliveStatements,47,bv_normalize,FAIL,13.065011,internal exception #5
1024,AliveStatements,47,bv_decide,FAIL,159.362363,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~(x✝ ^^^ -1#w) &&&
           ~~~(x✝¹ ^^^ -1#w)) ==
       x✝ &&& x✝¹ ^^^ -1#w]
    Consider the following assignment:
    ~~~(~~~(x✝ ^^^ -1#w) &&& ~~~(x✝¹ ^^^ -1#w)) == x✝ &&& x✝¹ ^^^ -1#w = false"
1025,AliveStatements,47,bv_auto,PASS,224.695599,
1026,AliveStatements,47,bv_automata_circuit_lean_prop,PASS,32.885078,
1027,AliveStatements,47,bv_automata_circuit_lean,PASS,17.550288,
1028,AliveStatements,47,bv_normalize_automata_circuit_lean,PASS,29.177291,
1029,AliveStatements,47,bv_automata_circuit_cadical_prop,PASS,609.807511,
1030,AliveStatements,47,bv_automata_circuit_cadical,PASS,603.297245,
1031,AliveStatements,47,bv_normalize_automata_circuit_cadical,PASS,614.202959,
1032,AliveStatements,47,bv_mba,FAIL,5.360147,"unable to reflect term '
      x✝ ^^^ BitVec.ofInt w (-1) ||| x✝¹ ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1033,AliveStatements,47,bv_normalize_mba,FAIL,17.853148,internal exception #5
1034,AliveStatements,48,rfl,FAIL,346.663967,"tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝ ^^^ x✝¹ = x✝ ||| x✝¹"
1035,AliveStatements,48,bv_bitwise,PASS,153591.567367,
1036,AliveStatements,48,bv_ac,FAIL,23.308574,internal exception #5
1037,AliveStatements,48,bv_distrib,FAIL,82.745744,internal exception #5
1038,AliveStatements,48,bv_ring,FAIL,77.126369,internal exception #5
1039,AliveStatements,48,bv_of_bool,FAIL,17.881208,simp made no progress
1040,AliveStatements,48,bv_omega,FAIL,4.832057,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑(x✝ ||| x✝ ^^^ x✝¹).toNat
     c := ↑2 ^ w"
1041,AliveStatements,48,bv_automata_classic_prop,PASS,19.382217,
1042,AliveStatements,48,bv_automata_classic,PASS,6.983306,
1043,AliveStatements,48,bv_normalize_automata_classic,PASS,20.501116,
1044,AliveStatements,48,simp,FAIL,64.467137,simp made no progress
1045,AliveStatements,48,bv_normalize,FAIL,13.722441,internal exception #5
1046,AliveStatements,48,bv_decide,FAIL,159.321193,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~x✝ &&& ~~~(x✝ ^^^ x✝¹) ==
       ~~~x✝ &&& ~~~x✝¹]
    Consider the following assignment:
    ~~~x✝ &&& ~~~(x✝ ^^^ x✝¹) == ~~~x✝ &&& ~~~x✝¹ = false"
1047,AliveStatements,48,bv_auto,PASS,258.385887,
1048,AliveStatements,48,bv_automata_circuit_lean_prop,PASS,20.803367,
1049,AliveStatements,48,bv_automata_circuit_lean,PASS,7.414375,
1050,AliveStatements,48,bv_normalize_automata_circuit_lean,PASS,20.228456,
1051,AliveStatements,48,bv_automata_circuit_cadical_prop,PASS,313.62115,
1052,AliveStatements,48,bv_automata_circuit_cadical,PASS,301.731708,
1053,AliveStatements,48,bv_normalize_automata_circuit_cadical,PASS,314.700799,
1054,AliveStatements,48,bv_mba,FAIL,3.185878,"unable to reflect term '
      x✝ ||| x✝ ^^^ x✝¹'.
    Expected 'int * variable'."
1055,AliveStatements,48,bv_normalize_mba,FAIL,16.927809,internal exception #5
1056,AliveStatements,49,rfl,FAIL,493.34197,"tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹ = x✝ ||| x✝¹ ^^^ -1#w"
1057,AliveStatements,49,bv_bitwise,PASS,145507.817045,
1058,AliveStatements,49,bv_ac,FAIL,29.67788,internal exception #5
1059,AliveStatements,49,bv_distrib,FAIL,132.435612,internal exception #5
1060,AliveStatements,49,bv_ring,FAIL,125.008096,internal exception #5
1061,AliveStatements,49,bv_of_bool,FAIL,20.161926,simp made no progress
1062,AliveStatements,49,bv_omega,FAIL,5.679686,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹).toNat
     c := ↑2 ^ w"
1063,AliveStatements,49,bv_automata_classic_prop,PASS,20.592187,
1064,AliveStatements,49,bv_automata_classic,PASS,8.527144,
1065,AliveStatements,49,bv_normalize_automata_classic,PASS,24.249524,
1066,AliveStatements,49,simp,FAIL,113.624014,simp made no progress
1067,AliveStatements,49,bv_normalize,FAIL,15.469619,internal exception #5
1068,AliveStatements,49,bv_decide,FAIL,160.300123,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~x✝ &&& ~~~(x✝ ^^^ -1#w ^^^ x✝¹) ==
       ~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    ~~~x✝ &&& ~~~(x✝ ^^^ -1#w ^^^ x✝¹) == ~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w) = false"
1069,AliveStatements,49,bv_auto,PASS,432.908209,
1070,AliveStatements,49,bv_automata_circuit_lean_prop,PASS,32.351639,
1071,AliveStatements,49,bv_automata_circuit_lean,PASS,17.938698,
1072,AliveStatements,49,bv_normalize_automata_circuit_lean,PASS,33.171108,
1073,AliveStatements,49,bv_automata_circuit_cadical_prop,PASS,605.935204,
1074,AliveStatements,49,bv_automata_circuit_cadical,PASS,594.692261,
1075,AliveStatements,49,bv_normalize_automata_circuit_cadical,PASS,614.142328,
1076,AliveStatements,49,bv_mba,FAIL,5.098237,"unable to reflect term '
      x✝ ||| x✝ ^^^ BitVec.ofInt w (-1) ^^^ x✝¹'.
    Expected 'int * variable'."
1077,AliveStatements,49,bv_normalize_mba,FAIL,20.241817,internal exception #5
1078,AliveStatements,50,rfl,FAIL,248.813793,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹ = x✝ ||| x✝¹"
1079,AliveStatements,50,bv_bitwise,PASS,152607.415146,
1080,AliveStatements,50,bv_ac,FAIL,32.910988,internal exception #5
1081,AliveStatements,50,bv_distrib,FAIL,100.253063,internal exception #5
1082,AliveStatements,50,bv_ring,FAIL,81.035495,internal exception #5
1083,AliveStatements,50,bv_of_bool,FAIL,19.231387,simp made no progress
1084,AliveStatements,50,bv_omega,FAIL,5.483477,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹).toNat
     c := ↑2 ^ w"
1085,AliveStatements,50,bv_automata_classic_prop,PASS,20.434056,
1086,AliveStatements,50,bv_automata_classic,PASS,7.117965,
1087,AliveStatements,50,bv_normalize_automata_classic,PASS,21.672126,
1088,AliveStatements,50,simp,FAIL,77.334698,simp made no progress
1089,AliveStatements,50,bv_normalize,FAIL,14.63454,internal exception #5
1090,AliveStatements,50,bv_decide,FAIL,161.085932,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(x✝ &&& x✝¹) &&& ~~~(x✝ ^^^ x✝¹) ==
       ~~~x✝ &&& ~~~x✝¹]
    Consider the following assignment:
    ~~~(x✝ &&& x✝¹) &&& ~~~(x✝ ^^^ x✝¹) == ~~~x✝ &&& ~~~x✝¹ = false"
1091,AliveStatements,50,bv_auto,PASS,272.807657,
1092,AliveStatements,50,bv_automata_circuit_lean_prop,PASS,21.889885,
1093,AliveStatements,50,bv_automata_circuit_lean,PASS,8.034525,
1094,AliveStatements,50,bv_normalize_automata_circuit_lean,PASS,22.360435,
1095,AliveStatements,50,bv_automata_circuit_cadical_prop,PASS,313.82212,
1096,AliveStatements,50,bv_automata_circuit_cadical,PASS,308.183843,
1097,AliveStatements,50,bv_normalize_automata_circuit_cadical,PASS,317.893177,
1098,AliveStatements,50,bv_mba,FAIL,3.515057,"unable to reflect term '
      x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹'.
    Expected 'int * variable'."
1099,AliveStatements,50,bv_normalize_mba,FAIL,17.972358,internal exception #5
1100,AliveStatements,51,rfl,FAIL,681.445814,"tactic 'rfl' failed, the left-hand side
      x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w = x✝ ||| x✝¹ ^^^ -1#w"
1101,AliveStatements,51,bv_bitwise,PASS,151003.800931,
1102,AliveStatements,51,bv_ac,FAIL,32.449888,internal exception #5
1103,AliveStatements,51,bv_distrib,FAIL,134.13183,internal exception #5
1104,AliveStatements,51,bv_ring,FAIL,126.108385,internal exception #5
1105,AliveStatements,51,bv_of_bool,FAIL,19.554977,simp made no progress
1106,AliveStatements,51,bv_omega,FAIL,5.633746,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w).toNat
     c := ↑2 ^ w"
1107,AliveStatements,51,bv_automata_classic_prop,PASS,21.915956,
1108,AliveStatements,51,bv_automata_classic,PASS,7.855314,
1109,AliveStatements,51,bv_normalize_automata_classic,PASS,24.722444,
1110,AliveStatements,51,simp,FAIL,113.962223,simp made no progress
1111,AliveStatements,51,bv_normalize,FAIL,17.888268,internal exception #5
1112,AliveStatements,51,bv_decide,FAIL,166.030779,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~x✝ &&&
         ~~~(~~~(~~~x✝ &&& ~~~x✝¹) ^^^ -1#w) ==
       ~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    ~~~x✝ &&& ~~~(~~~(~~~x✝ &&& ~~~x✝¹) ^^^ -1#w) == ~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w) = false"
1113,AliveStatements,51,bv_auto,PASS,407.146247,
1114,AliveStatements,51,bv_automata_circuit_lean_prop,PASS,33.913027,
1115,AliveStatements,51,bv_automata_circuit_lean,PASS,18.729558,
1116,AliveStatements,51,bv_normalize_automata_circuit_lean,PASS,35.316676,
1117,AliveStatements,51,bv_automata_circuit_cadical_prop,PASS,618.381975,
1118,AliveStatements,51,bv_automata_circuit_cadical,PASS,604.585815,
1119,AliveStatements,51,bv_normalize_automata_circuit_cadical,PASS,614.188878,
1120,AliveStatements,51,bv_mba,FAIL,5.036697,"unable to reflect term '
      x✝ ||| (x✝ ||| x✝¹) ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1121,AliveStatements,51,bv_normalize_mba,FAIL,21.776485,internal exception #5
1122,AliveStatements,52,rfl,FAIL,591.461743,"tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w = x✝ ||| x✝¹ ^^^ -1#w"
1123,AliveStatements,52,bv_bitwise,PASS,153576.077547,
1124,AliveStatements,52,bv_ac,FAIL,29.004541,internal exception #5
1125,AliveStatements,52,bv_distrib,FAIL,131.813571,internal exception #5
1126,AliveStatements,52,bv_ring,FAIL,125.138996,internal exception #5
1127,AliveStatements,52,bv_of_bool,FAIL,20.134137,simp made no progress
1128,AliveStatements,52,bv_omega,FAIL,5.676446,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w"
1129,AliveStatements,52,bv_automata_classic_prop,PASS,21.588006,
1130,AliveStatements,52,bv_automata_classic,PASS,7.665225,
1131,AliveStatements,52,bv_normalize_automata_classic,PASS,23.345145,
1132,AliveStatements,52,simp,FAIL,112.656794,simp made no progress
1133,AliveStatements,52,bv_normalize,FAIL,15.49193,internal exception #5
1134,AliveStatements,52,bv_decide,FAIL,165.497439,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~x✝ &&& ~~~(x✝ ^^^ x✝¹ ^^^ -1#w) ==
       ~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    ~~~x✝ &&& ~~~(x✝ ^^^ x✝¹ ^^^ -1#w) == ~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w) = false"
1135,AliveStatements,52,bv_auto,PASS,411.810294,
1136,AliveStatements,52,bv_automata_circuit_lean_prop,PASS,32.455168,
1137,AliveStatements,52,bv_automata_circuit_lean,PASS,17.837718,
1138,AliveStatements,52,bv_normalize_automata_circuit_lean,PASS,32.733958,
1139,AliveStatements,52,bv_automata_circuit_cadical_prop,PASS,606.422623,
1140,AliveStatements,52,bv_automata_circuit_cadical,PASS,601.715987,
1141,AliveStatements,52,bv_normalize_automata_circuit_cadical,PASS,621.353754,
1142,AliveStatements,52,bv_mba,FAIL,5.019557,"unable to reflect term '
      x✝ ||| x✝ ^^^ x✝¹ ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1143,AliveStatements,52,bv_normalize_mba,FAIL,20.065597,internal exception #5
1144,AliveStatements,53,rfl,FAIL,251.292291,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹ = x✝ ^^^ -1#w ^^^ x✝¹"
1145,AliveStatements,53,bv_bitwise,PASS,154654.977404,
1146,AliveStatements,53,bv_ac,FAIL,27.483642,internal exception #5
1147,AliveStatements,53,bv_distrib,FAIL,120.594459,internal exception #5
1148,AliveStatements,53,bv_ring,FAIL,128.166764,internal exception #5
1149,AliveStatements,53,bv_of_bool,FAIL,20.432786,simp made no progress
1150,AliveStatements,53,bv_omega,FAIL,5.721506,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ -1#w ^^^ x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹).toNat
     c := ↑2 ^ w"
1151,AliveStatements,53,bv_automata_classic_prop,PASS,21.471876,
1152,AliveStatements,53,bv_automata_classic,PASS,7.692365,
1153,AliveStatements,53,bv_normalize_automata_classic,PASS,19.596737,
1154,AliveStatements,53,simp,FAIL,102.002801,simp made no progress
1155,AliveStatements,53,bv_normalize,FAIL,12.390162,internal exception #5
1156,AliveStatements,53,bv_decide,FAIL,162.296411,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~(x✝ &&& x✝¹) &&&
           ~~~(x✝ ^^^ -1#w ^^^ x✝¹)) ==
       x✝ ^^^ -1#w ^^^ x✝¹]
    Consider the following assignment:
    ~~~(~~~(x✝ &&& x✝¹) &&& ~~~(x✝ ^^^ -1#w ^^^ x✝¹)) == x✝ ^^^ -1#w ^^^ x✝¹ = false"
1157,AliveStatements,53,bv_auto,PASS,572.256147,
1158,AliveStatements,53,bv_automata_circuit_lean_prop,PASS,24.177774,
1159,AliveStatements,53,bv_automata_circuit_lean,PASS,9.845213,
1160,AliveStatements,53,bv_normalize_automata_circuit_lean,PASS,22.986425,
1161,AliveStatements,53,bv_automata_circuit_cadical_prop,PASS,607.866302,
1162,AliveStatements,53,bv_automata_circuit_cadical,PASS,599.050249,
1163,AliveStatements,53,bv_normalize_automata_circuit_cadical,PASS,612.222089,
1164,AliveStatements,53,bv_mba,FAIL,5.217317,"unable to reflect term '
      x✝ &&& x✝¹ ||| x✝ ^^^ BitVec.ofInt w (-1) ^^^ x✝¹'.
    Expected 'int * variable'."
1165,AliveStatements,53,bv_normalize_mba,FAIL,17.195798,internal exception #5
1166,AliveStatements,54,rfl,FAIL,247.732324,"tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝¹ ||| x✝²
    is not definitionally equal to the right-hand side
      x✝ ||| x✝² ||| x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝¹ ||| x✝² = x✝ ||| x✝² ||| x✝¹"
1167,AliveStatements,54,bv_bitwise,PASS,160525.793828,
1168,AliveStatements,54,bv_ac,PASS,12.811791,
1169,AliveStatements,54,bv_distrib,PASS,164.3921,
1170,AliveStatements,54,bv_ring,FAIL,72.026341,internal exception #5
1171,AliveStatements,54,bv_of_bool,FAIL,17.161399,simp made no progress
1172,AliveStatements,54,bv_omega,FAIL,4.759397,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝² ||| x✝¹).toNat
     b := ↑(x✝ ||| x✝¹ ||| x✝²).toNat
     c := ↑2 ^ w"
1173,AliveStatements,54,bv_automata_classic_prop,PASS,19.358187,
1174,AliveStatements,54,bv_automata_classic,PASS,7.727994,
1175,AliveStatements,54,bv_normalize_automata_classic,PASS,25.196664,
1176,AliveStatements,54,simp,FAIL,86.030262,simp made no progress
1177,AliveStatements,54,bv_normalize,FAIL,18.740157,internal exception #5
1178,AliveStatements,54,bv_decide,FAIL,164.67402,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~x✝ &&& ~~~x✝¹ &&& ~~~x✝² ==
       ~~~x✝ &&& ~~~x✝² &&& ~~~x✝¹]
    Consider the following assignment:
    ~~~x✝ &&& ~~~x✝¹ &&& ~~~x✝² == ~~~x✝ &&& ~~~x✝² &&& ~~~x✝¹ = false"
1179,AliveStatements,54,bv_auto,PASS,281.111581,
1180,AliveStatements,54,bv_automata_circuit_lean_prop,PASS,20.317717,
1181,AliveStatements,54,bv_automata_circuit_lean,PASS,7.951454,
1182,AliveStatements,54,bv_normalize_automata_circuit_lean,PASS,27.084922,
1183,AliveStatements,54,bv_automata_circuit_cadical_prop,PASS,311.405161,
1184,AliveStatements,54,bv_automata_circuit_cadical,PASS,306.529205,
1185,AliveStatements,54,bv_normalize_automata_circuit_cadical,PASS,318.931806,
1186,AliveStatements,54,bv_mba,FAIL,3.052848,"unable to reflect term '
      x✝ ||| x✝¹ ||| x✝²'.
    Expected 'int * variable'."
1187,AliveStatements,54,bv_normalize_mba,FAIL,21.578695,internal exception #5
1188,AliveStatements,55,rfl,FAIL,247.284864,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w = x✝ ||| x✝¹ ^^^ -1#w"
1189,AliveStatements,55,bv_bitwise,PASS,23915.01929,
1190,AliveStatements,55,bv_ac,FAIL,1866.657269,internal exception #5
1191,AliveStatements,55,bv_distrib,FAIL,6431.433739,internal exception #5
1192,AliveStatements,55,bv_ring,FAIL,4266.42629,internal exception #5
1193,AliveStatements,55,bv_of_bool,FAIL,511.696247,simp made no progress
1194,AliveStatements,55,bv_omega,FAIL,164.78008,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹ ^^^ -1#w).toNat
     b := ↑((x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w"
1195,AliveStatements,55,bv_automata_classic_prop,PASS,131140.256856,
1196,AliveStatements,55,bv_automata_classic,PASS,10.893982,
1197,AliveStatements,55,bv_normalize_automata_classic,PASS,28.337531,
1198,AliveStatements,55,simp,FAIL,114.314804,simp made no progress
1199,AliveStatements,55,bv_normalize,FAIL,12.893941,internal exception #5
1200,AliveStatements,55,bv_decide,FAIL,158.780943,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w ==
       ~~~(~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w))]
    Consider the following assignment:
    (x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w == ~~~(~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w)) = false"
1201,AliveStatements,55,bv_auto,PASS,237.028462,
1202,AliveStatements,55,bv_automata_circuit_lean_prop,PASS,27.571612,
1203,AliveStatements,55,bv_automata_circuit_lean,PASS,12.501361,
1204,AliveStatements,55,bv_normalize_automata_circuit_lean,PASS,25.723253,
1205,AliveStatements,55,bv_automata_circuit_cadical_prop,PASS,618.410276,
1206,AliveStatements,55,bv_automata_circuit_cadical,PASS,597.350099,
1207,AliveStatements,55,bv_normalize_automata_circuit_cadical,PASS,609.465381,
1208,AliveStatements,55,bv_mba,FAIL,5.504537,"unable to reflect term '
      (x✝ ^^^ BitVec.ofInt w (-1)) &&& x✝¹ ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1209,AliveStatements,55,bv_normalize_mba,FAIL,17.879258,internal exception #5
1210,AliveStatements,56,rfl,FAIL,233.680663,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w = x✝ &&& (x✝¹ ^^^ -1#w)"
1211,AliveStatements,56,bv_bitwise,PASS,20233.591928,
1212,AliveStatements,56,bv_ac,FAIL,1555.524787,internal exception #5
1213,AliveStatements,56,bv_distrib,FAIL,5251.146571,internal exception #5
1214,AliveStatements,56,bv_ring,FAIL,5234.821321,internal exception #5
1215,AliveStatements,56,bv_of_bool,FAIL,207.88893,simp made no progress
1216,AliveStatements,56,bv_omega,FAIL,60.40425,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& (x✝¹ ^^^ -1#w)).toNat
     b := ↑((x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w).toNat
     c := ↑2 ^ w"
1217,AliveStatements,56,bv_automata_classic_prop,PASS,132611.826539,
1218,AliveStatements,56,bv_automata_classic,PASS,9.370624,
1219,AliveStatements,56,bv_normalize_automata_classic,PASS,21.150966,
1220,AliveStatements,56,simp,FAIL,114.869093,simp made no progress
1221,AliveStatements,56,bv_normalize,FAIL,13.138631,internal exception #5
1222,AliveStatements,56,bv_decide,FAIL,158.778954,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~(x✝ ^^^ -1#w) &&& ~~~x✝¹) ^^^
         -1#w ==
       x✝ &&& (x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    ~~~(~~~(x✝ ^^^ -1#w) &&& ~~~x✝¹) ^^^ -1#w == x✝ &&& (x✝¹ ^^^ -1#w) = false"
1223,AliveStatements,56,bv_auto,PASS,239.517649,
1224,AliveStatements,56,bv_automata_circuit_lean_prop,PASS,32.119838,
1225,AliveStatements,56,bv_automata_circuit_lean,PASS,18.835208,
1226,AliveStatements,56,bv_normalize_automata_circuit_lean,PASS,30.091299,
1227,AliveStatements,56,bv_automata_circuit_cadical_prop,PASS,606.227594,
1228,AliveStatements,56,bv_automata_circuit_cadical,PASS,599.130878,
1229,AliveStatements,56,bv_normalize_automata_circuit_cadical,PASS,614.520118,
1230,AliveStatements,56,bv_mba,FAIL,5.704716,"unable to reflect term '
      (x✝ ^^^ BitVec.ofInt w (-1) ||| x✝¹) ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1231,AliveStatements,56,bv_normalize_mba,FAIL,18.131098,internal exception #5
1232,AliveStatements,57,rfl,FAIL,376.049828,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ -1#w = x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w"
1233,AliveStatements,57,bv_bitwise,PASS,22002.691711,
1234,AliveStatements,57,bv_ac,FAIL,1777.695429,internal exception #5
1235,AliveStatements,57,bv_distrib,FAIL,7764.255296,internal exception #5
1236,AliveStatements,57,bv_ring,FAIL,4791.506598,internal exception #5
1237,AliveStatements,57,bv_of_bool,FAIL,254.961519,simp made no progress
1238,AliveStatements,57,bv_omega,FAIL,120.643409,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ &&& x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w"
1239,AliveStatements,57,bv_automata_classic_prop,PASS,136444.313311,
1240,AliveStatements,57,bv_automata_classic,PASS,10.605123,
1241,AliveStatements,57,bv_normalize_automata_classic,PASS,27.348372,
1242,AliveStatements,57,simp,FAIL,117.033891,simp made no progress
1243,AliveStatements,57,bv_normalize,FAIL,12.745231,internal exception #5
1244,AliveStatements,57,bv_decide,FAIL,159.425264,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ &&& x✝¹ ^^^ -1#w ==
       ~~~(~~~(x✝ ^^^ -1#w) &&& ~~~(x✝¹ ^^^ -1#w))]
    Consider the following assignment:
    x✝ &&& x✝¹ ^^^ -1#w == ~~~(~~~(x✝ ^^^ -1#w) &&& ~~~(x✝¹ ^^^ -1#w)) = false"
1245,AliveStatements,57,bv_auto,PASS,222.264951,
1246,AliveStatements,57,bv_automata_circuit_lean_prop,PASS,29.354851,
1247,AliveStatements,57,bv_automata_circuit_lean,PASS,14.44194,
1248,AliveStatements,57,bv_normalize_automata_circuit_lean,PASS,26.762402,
1249,AliveStatements,57,bv_automata_circuit_cadical_prop,PASS,606.816963,
1250,AliveStatements,57,bv_automata_circuit_cadical,PASS,596.014651,
1251,AliveStatements,57,bv_normalize_automata_circuit_cadical,PASS,606.986253,
1252,AliveStatements,57,bv_mba,FAIL,5.259186,"unable to reflect term '
      x✝ &&& x✝¹ ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1253,AliveStatements,57,bv_normalize_mba,FAIL,17.475548,internal exception #5
1254,AliveStatements,58,rfl,FAIL,245.693785,"tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) ^^^ -1#w
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) ^^^ -1#w = (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)"
1255,AliveStatements,58,bv_bitwise,PASS,19069.595378,
1256,AliveStatements,58,bv_ac,FAIL,1636.411553,internal exception #5
1257,AliveStatements,58,bv_distrib,FAIL,8602.324303,internal exception #5
1258,AliveStatements,58,bv_ring,FAIL,4264.811602,internal exception #5
1259,AliveStatements,58,bv_of_bool,FAIL,411.172814,simp made no progress
1260,AliveStatements,58,bv_omega,FAIL,106.478969,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)).toNat
     b := ↑((x✝ ||| x✝¹) ^^^ -1#w).toNat
     c := ↑2 ^ w"
1261,AliveStatements,58,bv_automata_classic_prop,PASS,140441.400601,
1262,AliveStatements,58,bv_automata_classic,PASS,11.315033,
1263,AliveStatements,58,bv_normalize_automata_classic,PASS,28.602451,
1264,AliveStatements,58,simp,FAIL,127.182435,simp made no progress
1265,AliveStatements,58,bv_normalize,FAIL,13.168631,internal exception #5
1266,AliveStatements,58,bv_decide,FAIL,158.675084,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~x✝ &&& ~~~x✝¹) ^^^ -1#w ==
       (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    ~~~(~~~x✝ &&& ~~~x✝¹) ^^^ -1#w == (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) = false"
1267,AliveStatements,58,bv_auto,PASS,227.760407,
1268,AliveStatements,58,bv_automata_circuit_lean_prop,PASS,27.551011,
1269,AliveStatements,58,bv_automata_circuit_lean,PASS,13.965581,
1270,AliveStatements,58,bv_normalize_automata_circuit_lean,PASS,26.291222,
1271,AliveStatements,58,bv_automata_circuit_cadical_prop,PASS,601.988027,
1272,AliveStatements,58,bv_automata_circuit_cadical,PASS,594.349331,
1273,AliveStatements,58,bv_normalize_automata_circuit_cadical,PASS,603.126976,
1274,AliveStatements,58,bv_mba,FAIL,5.295506,"unable to reflect term '
      (x✝ ||| x✝¹) ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1275,AliveStatements,58,bv_normalize_mba,FAIL,17.775798,internal exception #5
1276,AliveStatements,59,rfl,FAIL,377.221967,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝.sshiftRight' x✝¹
    case neg
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ (x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w = x✝.sshiftRight' x✝¹"
1277,AliveStatements,59,bv_bitwise,PASS,20222.746864,
1278,AliveStatements,59,bv_ac,FAIL,1872.354775,internal exception #5
1279,AliveStatements,59,bv_distrib,FAIL,7714.749669,internal exception #5
1280,AliveStatements,59,bv_ring,FAIL,3309.109542,internal exception #5
1281,AliveStatements,59,bv_of_bool,FAIL,300.091699,simp made no progress
1282,AliveStatements,59,bv_omega,FAIL,148.30179,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝.sshiftRight' x✝¹).toNat
     e := ↑((x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w).toNat"
1283,AliveStatements,59,bv_automata_classic_prop,FAIL,140330.069377,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 2).xor Copy.Term.one.neg)
                      (Copy.Term.var 3)))) =
              true)) =
        true
    is false"
1284,AliveStatements,59,bv_automata_classic,FAIL,11.515842,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 2).xor Copy.Term.one.neg)
                      (Copy.Term.var 3)))) =
              true)) =
        true
    is false"
1285,AliveStatements,59,bv_normalize_automata_classic,FAIL,24.821283,internal exception #5
1286,AliveStatements,59,simp,FAIL,146.392372,internal exception #5
1287,AliveStatements,59,bv_normalize,FAIL,13.297771,internal exception #5
1288,AliveStatements,59,bv_decide,FAIL,158.339934,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^
         -1#w ==
       x✝.sshiftRight' x✝¹,
     x✝¹ <ᵤ BitVec.ofNat w w]
    Consider the following assignment:
    x✝¹ <ᵤ BitVec.ofNat w w = true
    (x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w == x✝.sshiftRight' x✝¹ = false"
1289,AliveStatements,59,bv_auto,PASS,221.065222,
1290,AliveStatements,59,bv_automata_circuit_lean_prop,FAIL,21.659795,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                      (Predicate.eq ((Term.var 2).xor Term.one.neg) (Term.var 3))).eval
                  vars w =
                false)) =
        true
    is false"
1291,AliveStatements,59,bv_automata_circuit_lean,FAIL,9.719264,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                      (Predicate.eq ((Term.var 2).xor Term.one.neg) (Term.var 3))).eval
                  vars w =
                false)) =
        true
    is false"
1292,AliveStatements,59,bv_normalize_automata_circuit_lean,FAIL,23.961563,internal exception #5
1293,AliveStatements,59,bv_automata_circuit_cadical_prop,FAIL,465.554768,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1294,AliveStatements,59,bv_automata_circuit_cadical,FAIL,447.95871,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1295,AliveStatements,59,bv_normalize_automata_circuit_cadical,FAIL,462.67247,internal exception #5
1296,AliveStatements,59,bv_mba,FAIL,4.768727,"unable to reflect term '
      (x✝ ^^^ BitVec.ofInt w (-1)).sshiftRight' x✝¹ ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1297,AliveStatements,59,bv_normalize_mba,FAIL,18.199897,internal exception #5
1298,AliveStatements,60,rfl,FAIL,1220.875551,"tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ <ₛ x✝¹) ^^^ -1#1
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝¹ ≤ₛ x✝)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ <ₛ x✝¹) ^^^ -1#1 = BitVec.ofBool (x✝¹ ≤ₛ x✝)"
1299,AliveStatements,60,bv_bitwise,FAIL,13758.195748,internal exception #5
1300,AliveStatements,60,bv_ac,FAIL,3222.36227,internal exception #5
1301,AliveStatements,60,bv_distrib,FAIL,10683.426869,internal exception #5
1302,AliveStatements,60,bv_ring,FAIL,6182.516696,internal exception #5
1303,AliveStatements,60,bv_of_bool,FAIL,1859.720853,simp made no progress
1304,AliveStatements,60,bv_omega,FAIL,105.865169,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝¹ ≤ₛ x✝)).toNat
     b := ↑(BitVec.ofBool (x✝ <ₛ x✝¹) ^^^ -1#1).toNat"
1305,AliveStatements,60,bv_automata_classic_prop,FAIL,174.573463,"found multiple bitvector widths in the target: 
      OfNat.ofNat.{0} Nat 1 (instOfNatNat 1) → BitVec.ofBool (BitVec.sle _uniq.3146 _uniq.5734 _uniq.5735)_uniq.3146 → _uniq.5734"
1306,AliveStatements,60,bv_automata_classic,FAIL,0.87556,"found multiple bitvector widths in the target: 
      OfNat.ofNat.{0} Nat 1 (instOfNatNat 1) → BitVec.ofBool (BitVec.sle _uniq.3146 _uniq.5734 _uniq.5735)_uniq.3146 → _uniq.5734"
1307,AliveStatements,60,bv_normalize_automata_classic,FAIL,900.238856,internal exception #5
1308,AliveStatements,60,simp,FAIL,2972.393218,internal exception #5
1309,AliveStatements,60,bv_normalize,FAIL,433.917759,internal exception #5
1310,AliveStatements,60,bv_decide,PASS,141368.21482,
1311,AliveStatements,60,bv_auto,PASS,883.586507,
1312,AliveStatements,60,bv_automata_circuit_lean_prop,FAIL,12.483132,"found multiple bitvector widths in the target: 
      1 → BitVec.ofBool (x✝¹ ≤ₛ x✝); w → x✝¹"
1313,AliveStatements,60,bv_automata_circuit_lean,FAIL,0.174209,"found multiple bitvector widths in the target: 
      1 → BitVec.ofBool (x✝¹ ≤ₛ x✝); w → x✝¹"
1314,AliveStatements,60,bv_normalize_automata_circuit_lean,FAIL,26.524433,internal exception #5
1315,AliveStatements,60,bv_automata_circuit_cadical_prop,FAIL,13.064681,"found multiple bitvector widths in the target: 
      1 → BitVec.ofBool (x✝¹ ≤ₛ x✝); w → x✝¹"
1316,AliveStatements,60,bv_automata_circuit_cadical,FAIL,1.753359,"found multiple bitvector widths in the target: 
      1 → BitVec.ofBool (x✝¹ ≤ₛ x✝); w → x✝¹"
1317,AliveStatements,60,bv_normalize_automata_circuit_cadical,FAIL,29.10551,internal exception #5
1318,AliveStatements,60,bv_mba,FAIL,4.185917,"unable to reflect term '
      BitVec.ofBool (x✝ <ₛ x✝¹) ^^^ BitVec.ofInt 1 (-1)'.
    Expected 'int * variable'."
1319,AliveStatements,60,bv_normalize_mba,FAIL,29.527061,internal exception #5
1320,AliveStatements,61,rfl,FAIL,1517.160673,"tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝¹ + (-1#w - x✝)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - x✝¹ ^^^ -1#w = x✝¹ + (-1#w - x✝)"
1321,AliveStatements,61,bv_bitwise,FAIL,21200.41107,internal exception #5
1322,AliveStatements,61,bv_ac,FAIL,1859.680923,internal exception #5
1323,AliveStatements,61,bv_distrib,FAIL,4608.279951,internal exception #5
1324,AliveStatements,61,bv_ring,FAIL,5373.753408,internal exception #5
1325,AliveStatements,61,bv_of_bool,FAIL,140.400886,simp made no progress
1326,AliveStatements,61,bv_omega,FAIL,120.414339,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝¹.toNat + ((2 ^ w - 1 % 2 ^ w) % 2 ^ w + (2 ^ w - x✝.toNat)) % 2 ^ w) % ↑(2 ^ w)
     b := ↑(x✝ - x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w"
1327,AliveStatements,61,bv_automata_classic_prop,PASS,143172.082621,
1328,AliveStatements,61,bv_automata_classic,PASS,10.709203,
1329,AliveStatements,61,bv_normalize_automata_classic,PASS,30.14414,
1330,AliveStatements,61,simp,FAIL,115.807592,simp made no progress
1331,AliveStatements,61,bv_normalize,FAIL,14.57424,internal exception #5
1332,AliveStatements,61,bv_decide,FAIL,161.429772,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ + -x✝¹ ^^^ -1#w ==
       x✝¹ + (-1#w + -x✝)]
    Consider the following assignment:
    x✝ + -x✝¹ ^^^ -1#w == x✝¹ + (-1#w + -x✝) = false"
1333,AliveStatements,61,bv_auto,PASS,781.908706,
1334,AliveStatements,61,bv_automata_circuit_lean_prop,PASS,246.306925,
1335,AliveStatements,61,bv_automata_circuit_lean,PASS,234.372583,
1336,AliveStatements,61,bv_normalize_automata_circuit_lean,PASS,244.772436,
1337,AliveStatements,61,bv_automata_circuit_cadical_prop,PASS,608.440202,
1338,AliveStatements,61,bv_automata_circuit_cadical,PASS,589.408164,
1339,AliveStatements,61,bv_normalize_automata_circuit_cadical,PASS,610.919391,
1340,AliveStatements,61,bv_mba,FAIL,7.733505,"unable to reflect term '
      x✝ + -x✝¹ ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1341,AliveStatements,61,bv_normalize_mba,FAIL,21.674615,internal exception #5
1342,AliveStatements,62,rfl,FAIL,1712.907252,"tactic 'rfl' failed, the left-hand side
      x✝ + x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      -1#w - x✝¹ - x✝
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ + x✝¹ ^^^ -1#w = -1#w - x✝¹ - x✝"
1343,AliveStatements,62,bv_bitwise,FAIL,20515.508089,internal exception #5
1344,AliveStatements,62,bv_ac,FAIL,1637.317332,internal exception #5
1345,AliveStatements,62,bv_distrib,FAIL,5393.321705,internal exception #5
1346,AliveStatements,62,bv_ring,FAIL,6127.438863,internal exception #5
1347,AliveStatements,62,bv_of_bool,FAIL,111.654335,simp made no progress
1348,AliveStatements,62,bv_omega,FAIL,111.286815,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(((2 ^ w - 1 % 2 ^ w) % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑(x✝ + x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w"
1349,AliveStatements,62,bv_automata_classic_prop,PASS,148182.931282,
1350,AliveStatements,62,bv_automata_classic,PASS,10.484543,
1351,AliveStatements,62,bv_normalize_automata_classic,PASS,29.005671,
1352,AliveStatements,62,simp,FAIL,115.902292,simp made no progress
1353,AliveStatements,62,bv_normalize,FAIL,14.012141,internal exception #5
1354,AliveStatements,62,bv_decide,FAIL,160.802202,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ + x✝¹ ^^^ -1#w == -1#w + -x✝¹ + -x✝]
    Consider the following assignment:
    x✝ + x✝¹ ^^^ -1#w == -1#w + -x✝¹ + -x✝ = false"
1355,AliveStatements,62,bv_auto,PASS,764.856387,
1356,AliveStatements,62,bv_automata_circuit_lean_prop,PASS,227.749918,
1357,AliveStatements,62,bv_automata_circuit_lean,PASS,209.15495,
1358,AliveStatements,62,bv_normalize_automata_circuit_lean,PASS,229.462656,
1359,AliveStatements,62,bv_automata_circuit_cadical_prop,PASS,611.63114,
1360,AliveStatements,62,bv_automata_circuit_cadical,PASS,594.191772,
1361,AliveStatements,62,bv_normalize_automata_circuit_cadical,PASS,612.396109,
1362,AliveStatements,62,bv_mba,FAIL,8.431705,"unable to reflect term '
      x✝ + x✝¹ ^^^ BitVec.ofInt w (-1)'.
    Expected 'int * variable'."
1363,AliveStatements,62,bv_normalize_mba,FAIL,22.076515,internal exception #5
1364,AliveStatements,63,rfl,FAIL,296.938911,"tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) ^^^ x✝¹ = x✝ &&& (x✝¹ ^^^ -1#w)"
1365,AliveStatements,63,bv_bitwise,PASS,191429.285114,
1366,AliveStatements,63,bv_ac,FAIL,36.654925,internal exception #5
1367,AliveStatements,63,bv_distrib,FAIL,124.570877,internal exception #5
1368,AliveStatements,63,bv_ring,FAIL,127.027525,internal exception #5
1369,AliveStatements,63,bv_of_bool,FAIL,20.013026,simp made no progress
1370,AliveStatements,63,bv_omega,FAIL,5.695966,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& (x✝¹ ^^^ -1#w)).toNat
     b := ↑((x✝ ||| x✝¹) ^^^ x✝¹).toNat
     c := ↑2 ^ w"
1371,AliveStatements,63,bv_automata_classic_prop,PASS,19.779467,
1372,AliveStatements,63,bv_automata_classic,PASS,7.353805,
1373,AliveStatements,63,bv_normalize_automata_classic,PASS,20.731726,
1374,AliveStatements,63,simp,FAIL,101.511792,simp made no progress
1375,AliveStatements,63,bv_normalize,FAIL,12.528062,internal exception #5
1376,AliveStatements,63,bv_decide,FAIL,158.731504,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~x✝ &&& ~~~x✝¹) ^^^ x✝¹ ==
       x✝ &&& (x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    ~~~(~~~x✝ &&& ~~~x✝¹) ^^^ x✝¹ == x✝ &&& (x✝¹ ^^^ -1#w) = false"
1377,AliveStatements,63,bv_auto,PASS,380.463114,
1378,AliveStatements,63,bv_automata_circuit_lean_prop,PASS,21.426116,
1379,AliveStatements,63,bv_automata_circuit_lean,PASS,8.232824,
1380,AliveStatements,63,bv_normalize_automata_circuit_lean,PASS,20.014937,
1381,AliveStatements,63,bv_automata_circuit_cadical_prop,PASS,615.001688,
1382,AliveStatements,63,bv_automata_circuit_cadical,PASS,601.948367,
1383,AliveStatements,63,bv_normalize_automata_circuit_cadical,PASS,608.951552,
1384,AliveStatements,63,bv_mba,FAIL,5.023437,"unable to reflect term '
      (x✝ ||| x✝¹) ^^^ x✝¹'.
    Expected 'int * variable'."
1385,AliveStatements,63,bv_normalize_mba,FAIL,16.999568,internal exception #5
1386,AliveStatements,64,rfl,FAIL,496.066728,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#w) &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ x✝¹ = (x✝ ^^^ -1#w) &&& x✝¹"
1387,AliveStatements,64,bv_bitwise,PASS,194901.873427,
1388,AliveStatements,64,bv_ac,FAIL,25.950442,internal exception #5
1389,AliveStatements,64,bv_distrib,FAIL,117.735721,internal exception #5
1390,AliveStatements,64,bv_ring,FAIL,123.942807,internal exception #5
1391,AliveStatements,64,bv_of_bool,FAIL,18.567788,simp made no progress
1392,AliveStatements,64,bv_omega,FAIL,5.457956,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ^^^ -1#w) &&& x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ^^^ x✝¹).toNat
     c := ↑2 ^ w"
1393,AliveStatements,64,bv_automata_classic_prop,PASS,19.791287,
1394,AliveStatements,64,bv_automata_classic,PASS,7.012095,
1395,AliveStatements,64,bv_normalize_automata_classic,PASS,17.226239,
1396,AliveStatements,64,simp,FAIL,100.137862,simp made no progress
1397,AliveStatements,64,bv_normalize,FAIL,10.496693,internal exception #5
1398,AliveStatements,64,bv_decide,FAIL,157.114995,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ &&& x✝¹ ^^^ x✝¹ ==
       (x✝ ^^^ -1#w) &&& x✝¹]
    Consider the following assignment:
    x✝ &&& x✝¹ ^^^ x✝¹ == (x✝ ^^^ -1#w) &&& x✝¹ = false"
1399,AliveStatements,64,bv_auto,PASS,356.554001,
1400,AliveStatements,64,bv_automata_circuit_lean_prop,PASS,20.870896,
1401,AliveStatements,64,bv_automata_circuit_lean,PASS,8.645214,
1402,AliveStatements,64,bv_normalize_automata_circuit_lean,PASS,23.770474,
1403,AliveStatements,64,bv_automata_circuit_cadical_prop,PASS,613.722629,
1404,AliveStatements,64,bv_automata_circuit_cadical,PASS,602.660686,
1405,AliveStatements,64,bv_normalize_automata_circuit_cadical,PASS,608.198952,
1406,AliveStatements,64,bv_mba,FAIL,4.802907,"unable to reflect term '
      x✝ &&& x✝¹ ^^^ x✝¹'.
    Expected 'int * variable'."
1407,AliveStatements,64,bv_normalize_mba,FAIL,14.87179,internal exception #5
1408,AliveStatements,65,rfl,FAIL,404.415698,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹) = x✝ ^^^ x✝¹"
1409,AliveStatements,65,bv_bitwise,PASS,194365.597627,
1410,AliveStatements,65,bv_ac,FAIL,24.039554,internal exception #5
1411,AliveStatements,65,bv_distrib,FAIL,94.192937,internal exception #5
1412,AliveStatements,65,bv_ring,FAIL,80.244626,internal exception #5
1413,AliveStatements,65,bv_of_bool,FAIL,18.857197,simp made no progress
1414,AliveStatements,65,bv_omega,FAIL,5.374306,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹)).toNat
     c := ↑2 ^ w"
1415,AliveStatements,65,bv_automata_classic_prop,PASS,18.992428,
1416,AliveStatements,65,bv_automata_classic,PASS,7.316335,
1417,AliveStatements,65,bv_normalize_automata_classic,PASS,20.499486,
1418,AliveStatements,65,simp,FAIL,77.418338,simp made no progress
1419,AliveStatements,65,bv_normalize,FAIL,13.841761,internal exception #5
1420,AliveStatements,65,bv_decide,FAIL,163.44902,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ &&& x✝¹ ^^^ ~~~(~~~x✝ &&& ~~~x✝¹) ==
       x✝ ^^^ x✝¹]
    Consider the following assignment:
    x✝ &&& x✝¹ ^^^ ~~~(~~~x✝ &&& ~~~x✝¹) == x✝ ^^^ x✝¹ = false"
1421,AliveStatements,65,bv_auto,PASS,270.623779,
1422,AliveStatements,65,bv_automata_circuit_lean_prop,PASS,20.476056,
1423,AliveStatements,65,bv_automata_circuit_lean,PASS,7.915685,
1424,AliveStatements,65,bv_normalize_automata_circuit_lean,PASS,20.968116,
1425,AliveStatements,65,bv_automata_circuit_cadical_prop,PASS,314.377849,
1426,AliveStatements,65,bv_automata_circuit_cadical,PASS,301.213768,
1427,AliveStatements,65,bv_normalize_automata_circuit_cadical,PASS,319.626095,
1428,AliveStatements,65,bv_mba,FAIL,3.525408,"unable to reflect term '
      x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹)'.
    Expected 'int * variable'."
1429,AliveStatements,65,bv_normalize_mba,FAIL,17.253178,internal exception #5
1430,AliveStatements,66,rfl,FAIL,477.96014,"tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹) = x✝ ^^^ x✝¹"
1431,AliveStatements,66,bv_bitwise,PASS,187099.753806,
1432,AliveStatements,66,bv_ac,FAIL,29.16029,internal exception #5
1433,AliveStatements,66,bv_distrib,FAIL,148.40741,internal exception #5
1434,AliveStatements,66,bv_ring,FAIL,124.168487,internal exception #5
1435,AliveStatements,66,bv_of_bool,FAIL,19.357337,simp made no progress
1436,AliveStatements,66,bv_omega,FAIL,5.707266,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑((x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹)).toNat
     c := ↑2 ^ w"
1437,AliveStatements,66,bv_automata_classic_prop,PASS,19.966987,
1438,AliveStatements,66,bv_automata_classic,PASS,7.828125,
1439,AliveStatements,66,bv_normalize_automata_classic,PASS,23.942194,
1440,AliveStatements,66,simp,FAIL,126.006715,simp made no progress
1441,AliveStatements,66,bv_normalize,FAIL,16.786009,internal exception #5
1442,AliveStatements,66,bv_decide,FAIL,164.36866,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w)) ^^^
         ~~~(~~~(x✝ ^^^ -1#w) &&& ~~~x✝¹) ==
       x✝ ^^^ x✝¹]
    Consider the following assignment:
    ~~~(~~~x✝ &&& ~~~(x✝¹ ^^^ -1#w)) ^^^ ~~~(~~~(x✝ ^^^ -1#w) &&& ~~~x✝¹) == x✝ ^^^ x✝¹ = false"
1443,AliveStatements,66,bv_auto,PASS,445.466111,
1444,AliveStatements,66,bv_automata_circuit_lean_prop,PASS,21.639535,
1445,AliveStatements,66,bv_automata_circuit_lean,PASS,8.908744,
1446,AliveStatements,66,bv_normalize_automata_circuit_lean,PASS,25.978883,
1447,AliveStatements,66,bv_automata_circuit_cadical_prop,PASS,617.860976,
1448,AliveStatements,66,bv_automata_circuit_cadical,PASS,603.547355,
1449,AliveStatements,66,bv_normalize_automata_circuit_cadical,PASS,616.140117,
1450,AliveStatements,66,bv_mba,FAIL,5.306416,"unable to reflect term '
      (x✝ ||| x✝¹ ^^^ BitVec.ofInt w (-1)) ^^^ (x✝ ^^^ BitVec.ofInt w (-1) ||| x✝¹)'.
    Expected 'int * variable'."
1451,AliveStatements,66,bv_normalize_mba,FAIL,21.634246,internal exception #5
1452,AliveStatements,67,rfl,FAIL,287.965197,"tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹ = x✝ ^^^ x✝¹"
1453,AliveStatements,67,bv_bitwise,PASS,194969.216252,
1454,AliveStatements,67,bv_ac,FAIL,30.03795,internal exception #5
1455,AliveStatements,67,bv_distrib,FAIL,150.128979,internal exception #5
1456,AliveStatements,67,bv_ring,FAIL,124.081207,internal exception #5
1457,AliveStatements,67,bv_of_bool,FAIL,19.911687,simp made no progress
1458,AliveStatements,67,bv_omega,FAIL,5.715986,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑(x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹).toNat
     c := ↑2 ^ w"
1459,AliveStatements,67,bv_automata_classic_prop,PASS,20.457306,
1460,AliveStatements,67,bv_automata_classic,PASS,8.652824,
1461,AliveStatements,67,bv_normalize_automata_classic,PASS,21.357426,
1462,AliveStatements,67,simp,FAIL,127.822934,simp made no progress
1463,AliveStatements,67,bv_normalize,FAIL,13.915171,internal exception #5
1464,AliveStatements,67,bv_decide,FAIL,160.166273,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ &&& (x✝¹ ^^^ -1#w) ^^^
         (x✝ ^^^ -1#w) &&& x✝¹ ==
       x✝ ^^^ x✝¹]
    Consider the following assignment:
    x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹ == x✝ ^^^ x✝¹ = false"
1465,AliveStatements,67,bv_auto,PASS,445.144221,
1466,AliveStatements,67,bv_automata_circuit_lean_prop,PASS,22.530265,
1467,AliveStatements,67,bv_automata_circuit_lean,PASS,9.237484,
1468,AliveStatements,67,bv_normalize_automata_circuit_lean,PASS,22.337445,
1469,AliveStatements,67,bv_automata_circuit_cadical_prop,PASS,610.73315,
1470,AliveStatements,67,bv_automata_circuit_cadical,PASS,598.813419,
1471,AliveStatements,67,bv_normalize_automata_circuit_cadical,PASS,616.056587,
1472,AliveStatements,67,bv_mba,FAIL,5.263706,"unable to reflect term '
      x✝ &&& (x✝¹ ^^^ BitVec.ofInt w (-1)) ^^^ (x✝ ^^^ BitVec.ofInt w (-1)) &&& x✝¹'.
    Expected 'int * variable'."
1473,AliveStatements,67,bv_normalize_mba,FAIL,18.519008,internal exception #5
1474,AliveStatements,68,rfl,FAIL,312.50606,"tactic 'rfl' failed, the left-hand side
      x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²)
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²) = (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹"
1475,AliveStatements,68,bv_bitwise,PASS,185338.594307,
1476,AliveStatements,68,bv_ac,FAIL,40.499423,internal exception #5
1477,AliveStatements,68,bv_distrib,FAIL,162.073641,internal exception #5
1478,AliveStatements,68,bv_ring,FAIL,129.585143,internal exception #5
1479,AliveStatements,68,bv_of_bool,FAIL,20.089747,simp made no progress
1480,AliveStatements,68,bv_omega,FAIL,6.094516,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹).toNat
     b := ↑(x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²)).toNat
     c := ↑2 ^ w"
1481,AliveStatements,68,bv_automata_classic_prop,PASS,21.303005,
1482,AliveStatements,68,bv_automata_classic,PASS,9.598654,
1483,AliveStatements,68,bv_normalize_automata_classic,PASS,25.312643,
1484,AliveStatements,68,simp,FAIL,141.249105,simp made no progress
1485,AliveStatements,68,bv_normalize,FAIL,15.76109,internal exception #5
1486,AliveStatements,68,bv_decide,FAIL,162.096161,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ ^^^ x✝¹ ^^^ ~~~(~~~x✝ &&& ~~~x✝²) ==
       (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹]
    Consider the following assignment:
    x✝ ^^^ x✝¹ ^^^ ~~~(~~~x✝ &&& ~~~x✝²) == (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹ = false"
1487,AliveStatements,68,bv_auto,PASS,441.886214,
1488,AliveStatements,68,bv_automata_circuit_lean_prop,PASS,22.265076,
1489,AliveStatements,68,bv_automata_circuit_lean,PASS,10.975992,
1490,AliveStatements,68,bv_normalize_automata_circuit_lean,PASS,26.138943,
1491,AliveStatements,68,bv_automata_circuit_cadical_prop,PASS,610.68874,
1492,AliveStatements,68,bv_automata_circuit_cadical,PASS,597.74301,
1493,AliveStatements,68,bv_normalize_automata_circuit_cadical,PASS,622.739482,
1494,AliveStatements,68,bv_mba,FAIL,5.141987,"unable to reflect term '
      x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²)'.
    Expected 'int * variable'."
1495,AliveStatements,68,bv_normalize_mba,FAIL,20.199776,internal exception #5
1496,AliveStatements,69,rfl,FAIL,291.604334,"tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹) = x✝ ||| x✝¹"
1497,AliveStatements,69,bv_bitwise,PASS,204476.863219,
1498,AliveStatements,69,bv_ac,FAIL,29.225551,internal exception #5
1499,AliveStatements,69,bv_distrib,FAIL,99.120263,internal exception #5
1500,AliveStatements,69,bv_ring,FAIL,79.599627,internal exception #5
1501,AliveStatements,69,bv_of_bool,FAIL,18.099138,simp made no progress
1502,AliveStatements,69,bv_omega,FAIL,5.345986,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹)).toNat
     c := ↑2 ^ w"
1503,AliveStatements,69,bv_automata_classic_prop,PASS,17.714438,
1504,AliveStatements,69,bv_automata_classic,PASS,7.502385,
1505,AliveStatements,69,bv_normalize_automata_classic,PASS,18.565478,
1506,AliveStatements,69,simp,FAIL,77.222158,simp made no progress
1507,AliveStatements,69,bv_normalize,FAIL,11.538432,internal exception #5
1508,AliveStatements,69,bv_decide,FAIL,158.165564,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹) ==
       ~~~(~~~x✝ &&& ~~~x✝¹)]
    Consider the following assignment:
    x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹) == ~~~(~~~x✝ &&& ~~~x✝¹) = false"
1509,AliveStatements,69,bv_auto,PASS,271.331498,
1510,AliveStatements,69,bv_automata_circuit_lean_prop,PASS,18.961887,
1511,AliveStatements,69,bv_automata_circuit_lean,PASS,6.919466,
1512,AliveStatements,69,bv_normalize_automata_circuit_lean,PASS,18.355508,
1513,AliveStatements,69,bv_automata_circuit_cadical_prop,PASS,309.757372,
1514,AliveStatements,69,bv_automata_circuit_cadical,PASS,299.826859,
1515,AliveStatements,69,bv_normalize_automata_circuit_cadical,PASS,312.76381,
1516,AliveStatements,69,bv_mba,FAIL,3.381368,"unable to reflect term '
      x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹)'.
    Expected 'int * variable'."
1517,AliveStatements,69,bv_normalize_mba,FAIL,14.52863,internal exception #5
1518,AliveStatements,70,rfl,FAIL,539.920628,"tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) = x✝ &&& x✝¹ ^^^ -1#w"
1519,AliveStatements,70,bv_bitwise,PASS,205275.379144,
1520,AliveStatements,70,bv_ac,FAIL,32.864798,internal exception #5
1521,AliveStatements,70,bv_distrib,FAIL,150.467309,internal exception #5
1522,AliveStatements,70,bv_ring,FAIL,126.088306,internal exception #5
1523,AliveStatements,70,bv_of_bool,FAIL,19.846156,simp made no progress
1524,AliveStatements,70,bv_omega,FAIL,5.774126,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w)).toNat
     c := ↑2 ^ w"
1525,AliveStatements,70,bv_automata_classic_prop,PASS,19.999777,
1526,AliveStatements,70,bv_automata_classic,PASS,7.786985,
1527,AliveStatements,70,bv_normalize_automata_classic,PASS,21.756035,
1528,AliveStatements,70,simp,FAIL,127.689455,simp made no progress
1529,AliveStatements,70,bv_normalize,FAIL,13.89622,internal exception #5
1530,AliveStatements,70,bv_decide,FAIL,159.504763,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ &&& (x✝¹ ^^^ -1#w) ^^^
         (x✝ ^^^ -1#w) ==
       x✝ &&& x✝¹ ^^^ -1#w]
    Consider the following assignment:
    x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) == x✝ &&& x✝¹ ^^^ -1#w = false"
1531,AliveStatements,70,bv_auto,PASS,449.647739,
1532,AliveStatements,70,bv_automata_circuit_lean_prop,PASS,82.111875,
1533,AliveStatements,70,bv_automata_circuit_lean,PASS,70.453682,
1534,AliveStatements,70,bv_normalize_automata_circuit_lean,PASS,84.283224,
1535,AliveStatements,70,bv_automata_circuit_cadical_prop,PASS,613.967098,
1536,AliveStatements,70,bv_automata_circuit_cadical,PASS,602.668766,
1537,AliveStatements,70,bv_normalize_automata_circuit_cadical,PASS,609.876841,
1538,AliveStatements,70,bv_mba,FAIL,5.368027,"unable to reflect term '
      x✝ &&& (x✝¹ ^^^ BitVec.ofInt w (-1)) ^^^ (x✝ ^^^ BitVec.ofInt w (-1))'.
    Expected 'int * variable'."
1539,AliveStatements,70,bv_normalize_mba,FAIL,18.644257,internal exception #5
1540,AliveStatements,71,rfl,FAIL,406.287598,"tactic 'rfl' failed, the left-hand side
      (x✝ ≤ᵤ x✝¹) ^^ x✝ != x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ ≤ᵤ x✝
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ ((x✝ ≤ᵤ x✝¹) ^^ x✝ != x✝¹) = (x✝¹ ≤ᵤ x✝)"
1541,AliveStatements,71,bv_bitwise,FAIL,3.406048,"no applicable extensionality theorem found for
      Bool"
1542,AliveStatements,71,bv_ac,FAIL,852.862238,internal exception #5
1543,AliveStatements,71,bv_distrib,FAIL,2412.756103,internal exception #5
1544,AliveStatements,71,bv_ring,FAIL,2288.330956,internal exception #5
1545,AliveStatements,71,bv_of_bool,PASS,7373.388717,
1546,AliveStatements,71,bv_omega,FAIL,80.673166,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
1547,AliveStatements,71,bv_automata_classic_prop,FAIL,606.845483,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      ((x✝ ≤ᵤ x✝¹) ≠ (x✝ != x✝¹)) = ((x✝¹ ≤ᵤ x✝) = true)"
1548,AliveStatements,71,bv_automata_classic,FAIL,60.698879,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      ((x✝ ≤ᵤ x✝¹) ^^ x✝ != x✝¹) = (x✝¹ ≤ᵤ x✝)."
1549,AliveStatements,71,bv_normalize_automata_classic,FAIL,983.641561,internal exception #5
1550,AliveStatements,71,simp,FAIL,1695.107944,simp made no progress
1551,AliveStatements,71,bv_normalize,FAIL,822.010909,internal exception #5
1552,AliveStatements,71,bv_decide,FAIL,1077.229258,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝¹ <ᵤ x✝, x✝ == x✝¹, x✝ <ᵤ x✝¹]
    Consider the following assignment:
    x✝¹ <ᵤ x✝ = true
    x✝ == x✝¹ = true
    x✝ <ᵤ x✝¹ = false"
1553,AliveStatements,71,bv_auto,PASS,7835.931567,
1554,AliveStatements,71,bv_automata_circuit_lean_prop,FAIL,356.315411,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      ((x✝ ≤ᵤ x✝¹) ≠ (x✝ != x✝¹)) = ((x✝¹ ≤ᵤ x✝) = true)"
1555,AliveStatements,71,bv_automata_circuit_lean,FAIL,38.511204,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      ((x✝ ≤ᵤ x✝¹) ^^ x✝ != x✝¹) = (x✝¹ ≤ᵤ x✝)."
1556,AliveStatements,71,bv_normalize_automata_circuit_lean,FAIL,488.115043,internal exception #5
1557,AliveStatements,71,bv_automata_circuit_cadical_prop,FAIL,491.497361,"unknown equality kind, expected 'bv = bv' or 'bv.slt bv = true' or 'bv.sle bv = true'. Found 
      ((x✝ ≤ᵤ x✝¹) ≠ (x✝ != x✝¹)) = ((x✝¹ ≤ᵤ x✝) = true)"
1558,AliveStatements,71,bv_automata_circuit_cadical,FAIL,92.444008,"only boolean conditionals allowed are 'bv.slt bv = true', 'bv.sle bv = true'. Found 
      ((x✝ ≤ᵤ x✝¹) ^^ x✝ != x✝¹) = (x✝¹ ≤ᵤ x✝)."
1559,AliveStatements,71,bv_normalize_automata_circuit_cadical,FAIL,688.190858,internal exception #5
1560,AliveStatements,71,bv_mba,FAIL,9.840154,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      ((x✝ ≤ᵤ x✝¹) ^^ x✝ != x✝¹) = (x✝¹ ≤ᵤ x✝)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ ((x✝ ≤ᵤ x✝¹) ^^ x✝ != x✝¹) = (x✝¹ ≤ᵤ x✝)"
1561,AliveStatements,71,bv_normalize_mba,FAIL,373.17114,internal exception #5
1562,AliveStatements,72,rfl,FAIL,2188.427233,"tactic 'rfl' failed, the left-hand side
      x✝ * -1#w
    is not definitionally equal to the right-hand side
      0#w - x✝
    case some
    w : ℕ
    x✝ : BitVec w
    ⊢ x✝ * -1#w = 0#w - x✝"
1563,AliveStatements,72,bv_bitwise,PASS,13593.012958,
1564,AliveStatements,72,bv_ac,FAIL,3691.368086,internal exception #5
1565,AliveStatements,72,bv_distrib,PASS,13674.618074,
1566,AliveStatements,72,bv_ring,FAIL,7791.131317,internal exception #5
1567,AliveStatements,72,bv_of_bool,FAIL,471.620924,simp made no progress
1568,AliveStatements,72,bv_omega,FAIL,140.932476,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑(x✝.toNat * ((2 ^ w - 1 % 2 ^ w) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w"
1569,AliveStatements,72,bv_automata_classic_prop,FAIL,178476.658916,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0)
                    (Copy.Term.zero.sub (Copy.Term.var 1)))) =
              true)) =
        true
    is false"
1570,AliveStatements,72,bv_automata_classic,FAIL,6.487466,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0)
                    (Copy.Term.zero.sub (Copy.Term.var 1)))) =
              true)) =
        true
    is false"
1571,AliveStatements,72,bv_normalize_automata_classic,FAIL,17.040388,internal exception #5
1572,AliveStatements,72,simp,PASS,193.582111,
1573,AliveStatements,72,bv_normalize,FAIL,10.712933,internal exception #5
1574,AliveStatements,72,bv_decide,FAIL,157.989444,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ * -1#w == -x✝]
    Consider the following assignment:
    x✝ * -1#w == -x✝ = false"
1575,AliveStatements,72,bv_auto,PASS,139.570407,
1576,AliveStatements,72,bv_automata_circuit_lean_prop,FAIL,17.563708,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq (Term.var 0) (Term.zero.sub (Term.var 1))).eval vars w = false)) =
        true
    is false"
1577,AliveStatements,72,bv_automata_circuit_lean,FAIL,5.992126,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq (Term.var 0) (Term.zero.sub (Term.var 1))).eval vars w = false)) =
        true
    is false"
1578,AliveStatements,72,bv_normalize_automata_circuit_lean,FAIL,17.427558,internal exception #5
1579,AliveStatements,72,bv_automata_circuit_cadical_prop,FAIL,462.39446,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1580,AliveStatements,72,bv_automata_circuit_cadical,FAIL,444.050932,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1581,AliveStatements,72,bv_normalize_automata_circuit_cadical,FAIL,463.75726,internal exception #5
1582,AliveStatements,72,bv_mba,FAIL,6.801305,"unable to reflect term coefficient '
      x✝'. Expected an integer."
1583,AliveStatements,72,bv_normalize_mba,FAIL,16.792429,internal exception #5
1584,AliveStatements,73,rfl,FAIL,513.267956,"tactic 'rfl' failed, the left-hand side
      (x✝ + x✝¹) * x✝²
    is not definitionally equal to the right-hand side
      x✝ * x✝² + x✝¹ * x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ + x✝¹) * x✝² = x✝ * x✝² + x✝¹ * x✝²"
1585,AliveStatements,73,bv_bitwise,FAIL,9212.650954,internal exception #5
1586,AliveStatements,73,bv_ac,FAIL,2017.290198,internal exception #5
1587,AliveStatements,73,bv_distrib,FAIL,7284.022138,internal exception #5
1588,AliveStatements,73,bv_ring,PASS,3068.801573,
1589,AliveStatements,73,bv_of_bool,FAIL,373.557079,simp made no progress
1590,AliveStatements,73,bv_omega,FAIL,333.422947,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat * x✝².toNat % 2 ^ w + x✝¹.toNat * x✝².toNat % 2 ^ w) % ↑(2 ^ w)
     b := ↑((x✝.toNat + x✝¹.toNat) % 2 ^ w * x✝².toNat) % ↑(2 ^ w)
     c := ↑2 ^ w"
1591,AliveStatements,73,bv_automata_classic_prop,FAIL,180650.544819,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0)
                    ((Copy.Term.var 1).add (Copy.Term.var 2)))) =
              true)) =
        true
    is false"
1592,AliveStatements,73,bv_automata_classic,FAIL,7.461385,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0)
                    ((Copy.Term.var 1).add (Copy.Term.var 2)))) =
              true)) =
        true
    is false"
1593,AliveStatements,73,bv_normalize_automata_classic,FAIL,19.550677,internal exception #5
1594,AliveStatements,73,simp,FAIL,129.536993,simp made no progress
1595,AliveStatements,73,bv_normalize,FAIL,12.038442,internal exception #5
1596,AliveStatements,73,bv_decide,FAIL,161.059102,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ + x✝¹) * x✝² ==
       x✝ * x✝² + x✝¹ * x✝²]
    Consider the following assignment:
    (x✝ + x✝¹) * x✝² == x✝ * x✝² + x✝¹ * x✝² = false"
1597,AliveStatements,73,bv_auto,PASS,534.893291,
1598,AliveStatements,73,bv_automata_circuit_lean_prop,FAIL,18.353158,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq (Term.var 0) ((Term.var 1).add (Term.var 2))).eval vars w = false)) =
        true
    is false"
1599,AliveStatements,73,bv_automata_circuit_lean,FAIL,6.648506,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq (Term.var 0) ((Term.var 1).add (Term.var 2))).eval vars w = false)) =
        true
    is false"
1600,AliveStatements,73,bv_normalize_automata_circuit_lean,FAIL,19.113057,internal exception #5
1601,AliveStatements,73,bv_automata_circuit_cadical_prop,FAIL,462.8012,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1602,AliveStatements,73,bv_automata_circuit_cadical,FAIL,448.659109,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1603,AliveStatements,73,bv_normalize_automata_circuit_cadical,FAIL,463.058689,internal exception #5
1604,AliveStatements,73,bv_mba,FAIL,5.403417,"unable to reflect term coefficient '
      x✝ + x✝¹'. Expected an integer."
1605,AliveStatements,73,bv_normalize_mba,FAIL,17.078079,internal exception #5
1606,AliveStatements,74,rfl,FAIL,895.70688,"tactic 'rfl' failed, the left-hand side
      (0#w - x✝) * (0#w - x✝¹)
    is not definitionally equal to the right-hand side
      x✝ * x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (0#w - x✝) * (0#w - x✝¹) = x✝ * x✝¹"
1607,AliveStatements,74,bv_bitwise,PASS,23169.179809,
1608,AliveStatements,74,bv_ac,FAIL,1500.804444,internal exception #5
1609,AliveStatements,74,bv_distrib,PASS,9316.300575,
1610,AliveStatements,74,bv_ring,FAIL,2017.310988,internal exception #5
1611,AliveStatements,74,bv_of_bool,FAIL,189.064053,simp made no progress
1612,AliveStatements,74,bv_omega,FAIL,133.45815,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat * x✝¹.toNat) % ↑(2 ^ w)
     b := ↑((0 % 2 ^ w + (2 ^ w - x✝.toNat)) % 2 ^ w * ((0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w"
1613,AliveStatements,74,bv_automata_classic_prop,FAIL,180106.041845,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) (Copy.Term.var 1))) =
              true)) =
        true
    is false"
1614,AliveStatements,74,bv_automata_classic,FAIL,8.400464,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) (Copy.Term.var 1))) =
              true)) =
        true
    is false"
1615,AliveStatements,74,bv_normalize_automata_classic,FAIL,25.333663,internal exception #5
1616,AliveStatements,74,simp,PASS,285.818809,
1617,AliveStatements,74,bv_normalize,FAIL,12.465952,internal exception #5
1618,AliveStatements,74,bv_decide,FAIL,158.912653,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [-x✝ * -x✝¹ == x✝ * x✝¹]
    Consider the following assignment:
    -x✝ * -x✝¹ == x✝ * x✝¹ = false"
1619,AliveStatements,74,bv_auto,PASS,299.778669,
1620,AliveStatements,74,bv_automata_circuit_lean_prop,FAIL,18.226618,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide (∀ (w : ℕ) (vars : List BitStream), (Predicate.eq (Term.var 0) (Term.var 1)).eval vars w = false)) =
        true
    is false"
1621,AliveStatements,74,bv_automata_circuit_lean,FAIL,6.491496,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide (∀ (w : ℕ) (vars : List BitStream), (Predicate.eq (Term.var 0) (Term.var 1)).eval vars w = false)) =
        true
    is false"
1622,AliveStatements,74,bv_normalize_automata_circuit_lean,FAIL,18.805597,internal exception #5
1623,AliveStatements,74,bv_automata_circuit_cadical_prop,FAIL,455.623975,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1624,AliveStatements,74,bv_automata_circuit_cadical,FAIL,451.876197,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1625,AliveStatements,74,bv_normalize_automata_circuit_cadical,FAIL,458.558452,internal exception #5
1626,AliveStatements,74,bv_mba,FAIL,4.736817,"unable to reflect term coefficient '
      BitVec.ofInt w 0 + -x✝'. Expected an integer."
1627,AliveStatements,74,bv_normalize_mba,FAIL,16.490719,internal exception #5
1628,AliveStatements,75,rfl,FAIL,429.037392,"tactic 'rfl' failed, the left-hand side
      x✝ / x✝¹ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ - x✝ % x✝¹
    case neg
    x✝¹ x✝ : BitVec 5
    h✝ : ¬x✝¹ = 0
    ⊢ x✝ / x✝¹ * x✝¹ = x✝ - x✝ % x✝¹"
1629,AliveStatements,75,bv_bitwise,FAIL,11363.057624,internal exception #5
1630,AliveStatements,75,bv_ac,FAIL,1053.778943,internal exception #5
1631,AliveStatements,75,bv_distrib,FAIL,7167.107536,internal exception #5
1632,AliveStatements,75,bv_ring,FAIL,1612.706039,internal exception #5
1633,AliveStatements,75,bv_of_bool,FAIL,182.364388,simp made no progress
1634,AliveStatements,75,bv_omega,FAIL,159.330353,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ f ≤ 31
      0 ≤ e ≤ 32
      c ≥ 0
      0 ≤ c - 32*d ≤ 31
      0 ≤ a ≤ 31
      a - 32*b - c + 32*d - e ≥ -31
      -32 ≤ a - 32*b - e ≤ -1
    where
     a := ↑x✝.toNat
     b := ↑(x✝.toNat + (2 ^ 5 - x✝.toNat % x✝¹.toNat)) / 32
     c := ↑(x✝.toNat / x✝¹.toNat) * ↑x✝¹.toNat
     d := ↑(x✝.toNat / x✝¹.toNat * x✝¹.toNat) / 32
     e := ↑x✝.toNat % ↑x✝¹.toNat
     f := ↑x✝¹.toNat"
1635,AliveStatements,75,bv_automata_classic_prop,FAIL,182856.688631,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1)
                      ((Copy.Term.var 2).sub (Copy.Term.var 3))))) =
              true)) =
        true
    is false"
1636,AliveStatements,75,bv_automata_classic,FAIL,15.165589,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1)
                      ((Copy.Term.var 2).sub (Copy.Term.var 3))))) =
              true)) =
        true
    is false"
1637,AliveStatements,75,bv_normalize_automata_classic,FAIL,42.725682,internal exception #5
1638,AliveStatements,75,simp,FAIL,190.388612,simp made no progress
1639,AliveStatements,75,bv_normalize,FAIL,26.827052,internal exception #5
1640,AliveStatements,75,bv_decide,PASS,201.261545,
1641,AliveStatements,75,bv_auto,PASS,939.53013,
1642,AliveStatements,75,bv_automata_circuit_lean_prop,FAIL,22.217715,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      (Predicate.eq (Term.var 1) ((Term.var 2).sub (Term.var 3)))).eval
                  vars w =
                false)) =
        true
    is false"
1643,AliveStatements,75,bv_automata_circuit_lean,FAIL,10.817473,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      (Predicate.eq (Term.var 1) ((Term.var 2).sub (Term.var 3)))).eval
                  vars w =
                false)) =
        true
    is false"
1644,AliveStatements,75,bv_normalize_automata_circuit_lean,FAIL,37.294485,internal exception #5
1645,AliveStatements,75,bv_automata_circuit_cadical_prop,FAIL,465.832917,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1646,AliveStatements,75,bv_automata_circuit_cadical,FAIL,455.286375,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1647,AliveStatements,75,bv_normalize_automata_circuit_cadical,FAIL,477.97365,internal exception #5
1648,AliveStatements,75,bv_mba,FAIL,5.111236,"unable to reflect term coefficient '
      x✝ / x✝¹'. Expected an integer."
1649,AliveStatements,75,bv_normalize_mba,FAIL,31.034399,internal exception #5
1650,AliveStatements,76,rfl,FAIL,245.063086,"tactic 'rfl' failed, the left-hand side
      x✝.sdiv x✝¹ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ - x✝.srem x✝¹
    case neg
    x✝¹ x✝ : BitVec 5
    h✝ : ¬(x✝¹ == 0 || 5 != 1 && x✝ == BitVec.intMin 5 && x✝¹ == -1) = true
    ⊢ x✝.sdiv x✝¹ * x✝¹ = x✝ - x✝.srem x✝¹"
1651,AliveStatements,76,bv_bitwise,FAIL,10930.176773,internal exception #5
1652,AliveStatements,76,bv_ac,FAIL,1054.882083,internal exception #5
1653,AliveStatements,76,bv_distrib,FAIL,4901.079415,internal exception #5
1654,AliveStatements,76,bv_ring,FAIL,2022.972004,internal exception #5
1655,AliveStatements,76,bv_of_bool,FAIL,128.715924,simp made no progress
1656,AliveStatements,76,bv_omega,FAIL,170.509406,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ e ≤ 31
      c ≥ 0
      0 ≤ c - 32*d ≤ 31
      0 ≤ a ≤ 31
      a - 32*b - c + 32*d - e ≥ -31
      -32 ≤ a - 32*b - e ≤ -1
    where
     a := ↑x✝.toNat
     b := ↑(x✝.toNat + (2 ^ 5 - (x✝.srem x✝¹).toNat)) / 32
     c := ↑(match decide (2 ^ (5 - 1) ≤ x✝.toNat), decide (2 ^ (5 - 1) ≤ x✝¹.toNat) with
        | false, false => (x✝.udiv x✝¹).toNat
        | false, true => (2 ^ 5 - (x✝.udiv (-x✝¹)).toNat) % 2 ^ 5
        | true, false => (2 ^ 5 - ((-x✝).udiv x✝¹).toNat) % 2 ^ 5
        | true, true => ((-x✝).udiv (-x✝¹)).toNat) *
      ↑x✝¹.toNat
     d := ↑((match decide (2 ^ (5 - 1) ≤ x✝.toNat), decide (2 ^ (5 - 1) ≤ x✝¹.toNat) with
          | false, false => (x✝.udiv x✝¹).toNat
          | false, true => (2 ^ 5 - (x✝.udiv (-x✝¹)).toNat) % 2 ^ 5
          | true, false => (2 ^ 5 - ((-x✝).udiv x✝¹).toNat) % 2 ^ 5
          | true, true => ((-x✝).udiv (-x✝¹)).toNat) *
          x✝¹.toNat) /
      32
     e := ↑(x✝.srem x✝¹).toNat"
1657,AliveStatements,76,bv_automata_classic_prop,FAIL,189294.990624,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    (((Copy.Predicate.width Copy.WidthPredicate.neq 1).land
                          ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1) (Copy.Term.var 2)).land
                            (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.one.neg))).lor
                      (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 3)
                        ((Copy.Term.var 1).sub (Copy.Term.var 4)))))) =
              true)) =
        true
    is false"
1658,AliveStatements,76,bv_automata_classic,FAIL,36.013916,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    (((Copy.Predicate.width Copy.WidthPredicate.neq 1).land
                          ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1) (Copy.Term.var 2)).land
                            (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.one.neg))).lor
                      (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 3)
                        ((Copy.Term.var 1).sub (Copy.Term.var 4)))))) =
              true)) =
        true
    is false"
1659,AliveStatements,76,bv_normalize_automata_classic,FAIL,98.362294,internal exception #5
1660,AliveStatements,76,simp,FAIL,105.42708,simp made no progress
1661,AliveStatements,76,bv_normalize,FAIL,71.659352,internal exception #5
1662,AliveStatements,76,bv_decide,PASS,442.402943,
1663,AliveStatements,76,bv_auto,PASS,1058.093181,
1664,AliveStatements,76,bv_automata_circuit_lean_prop,FAIL,36.921996,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      (((Predicate.widthNeq 1).land
                            ((Predicate.eq (Term.var 1) (Term.var 2)).land
                              (Predicate.eq (Term.var 0) Term.one.neg))).lor
                        (Predicate.eq (Term.var 3) ((Term.var 1).sub (Term.var 4))))).eval
                  vars w =
                false)) =
        true
    is false"
1665,AliveStatements,76,bv_automata_circuit_lean,FAIL,24.315803,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      (((Predicate.widthNeq 1).land
                            ((Predicate.eq (Term.var 1) (Term.var 2)).land
                              (Predicate.eq (Term.var 0) Term.one.neg))).lor
                        (Predicate.eq (Term.var 3) ((Term.var 1).sub (Term.var 4))))).eval
                  vars w =
                false)) =
        true
    is false"
1666,AliveStatements,76,bv_normalize_automata_circuit_lean,FAIL,97.317105,internal exception #5
1667,AliveStatements,76,bv_automata_circuit_cadical_prop,FAIL,474.001162,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1668,AliveStatements,76,bv_automata_circuit_cadical,FAIL,466.577348,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1669,AliveStatements,76,bv_normalize_automata_circuit_cadical,FAIL,538.770568,internal exception #5
1670,AliveStatements,76,bv_mba,FAIL,4.588827,"unable to reflect term coefficient '
      x✝.sdiv x✝¹'. Expected an integer."
1671,AliveStatements,76,bv_normalize_mba,FAIL,76.881669,internal exception #5
1672,AliveStatements,77,rfl,FAIL,714.025412,"tactic 'rfl' failed, the left-hand side
      x✝.sdiv x✝¹ * (0#5 - x✝¹)
    is not definitionally equal to the right-hand side
      x✝.srem x✝¹ - x✝
    case neg
    x✝¹ x✝ : BitVec 5
    h✝ : ¬(x✝¹ == 0 || 5 != 1 && x✝ == BitVec.intMin 5 && x✝¹ == -1) = true
    ⊢ x✝.sdiv x✝¹ * (0#5 - x✝¹) = x✝.srem x✝¹ - x✝"
1673,AliveStatements,77,bv_bitwise,FAIL,14091.299954,internal exception #5
1674,AliveStatements,77,bv_ac,FAIL,429.063203,internal exception #5
1675,AliveStatements,77,bv_distrib,FAIL,2446.24831,internal exception #5
1676,AliveStatements,77,bv_ring,FAIL,909.81528,internal exception #5
1677,AliveStatements,77,bv_of_bool,FAIL,59.29706,simp made no progress
1678,AliveStatements,77,bv_omega,FAIL,180.450539,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ e ≤ 31
      c ≥ 0
      0 ≤ c - 32*d ≤ 31
      0 ≤ a ≤ 31
      a - 32*b - c + 32*d - e ≥ -31
      -32 ≤ a - 32*b - e ≤ -1
    where
     a := ↑(x✝.srem x✝¹).toNat
     b := ↑((x✝.srem x✝¹).toNat + (2 ^ 5 - x✝.toNat)) / 32
     c := ↑(match decide (2 ^ (5 - 1) ≤ x✝.toNat), decide (2 ^ (5 - 1) ≤ x✝¹.toNat) with
        | false, false => (x✝.udiv x✝¹).toNat
        | false, true => (2 ^ 5 - (x✝.udiv (-x✝¹)).toNat) % 2 ^ 5
        | true, false => (2 ^ 5 - ((-x✝).udiv x✝¹).toNat) % 2 ^ 5
        | true, true => ((-x✝).udiv (-x✝¹)).toNat) *
      ↑((0 % 2 ^ 5 + (2 ^ 5 - x✝¹.toNat)) % 2 ^ 5)
     d := ↑((match decide (2 ^ (5 - 1) ≤ x✝.toNat), decide (2 ^ (5 - 1) ≤ x✝¹.toNat) with
          | false, false => (x✝.udiv x✝¹).toNat
          | false, true => (2 ^ 5 - (x✝.udiv (-x✝¹)).toNat) % 2 ^ 5
          | true, false => (2 ^ 5 - ((-x✝).udiv x✝¹).toNat) % 2 ^ 5
          | true, true => ((-x✝).udiv (-x✝¹)).toNat) *
          ((0 % 2 ^ 5 + (2 ^ 5 - x✝¹.toNat)) % 2 ^ 5)) /
      32
     e := ↑x✝.toNat"
1679,AliveStatements,77,bv_automata_classic_prop,FAIL,189574.153048,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    (((Copy.Predicate.width Copy.WidthPredicate.neq 1).land
                          ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1) (Copy.Term.var 2)).land
                            (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.one.neg))).lor
                      (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 3)
                        ((Copy.Term.var 4).sub (Copy.Term.var 1)))))) =
              true)) =
        true
    is false"
1680,AliveStatements,77,bv_automata_classic,FAIL,27.223002,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    (((Copy.Predicate.width Copy.WidthPredicate.neq 1).land
                          ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1) (Copy.Term.var 2)).land
                            (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.one.neg))).lor
                      (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 3)
                        ((Copy.Term.var 4).sub (Copy.Term.var 1)))))) =
              true)) =
        true
    is false"
1681,AliveStatements,77,bv_normalize_automata_classic,FAIL,106.845318,internal exception #5
1682,AliveStatements,77,simp,FAIL,187.711674,internal exception #5
1683,AliveStatements,77,bv_normalize,FAIL,81.597746,internal exception #5
1684,AliveStatements,77,bv_decide,PASS,441.113384,
1685,AliveStatements,77,bv_auto,PASS,1312.74815,
1686,AliveStatements,77,bv_automata_circuit_lean_prop,FAIL,36.076696,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      (((Predicate.widthNeq 1).land
                            ((Predicate.eq (Term.var 1) (Term.var 2)).land
                              (Predicate.eq (Term.var 0) Term.one.neg))).lor
                        (Predicate.eq (Term.var 3) ((Term.var 4).sub (Term.var 1))))).eval
                  vars w =
                false)) =
        true
    is false"
1687,AliveStatements,77,bv_automata_circuit_lean,FAIL,26.450422,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      (((Predicate.widthNeq 1).land
                            ((Predicate.eq (Term.var 1) (Term.var 2)).land
                              (Predicate.eq (Term.var 0) Term.one.neg))).lor
                        (Predicate.eq (Term.var 3) ((Term.var 4).sub (Term.var 1))))).eval
                  vars w =
                false)) =
        true
    is false"
1688,AliveStatements,77,bv_normalize_automata_circuit_lean,FAIL,105.40096,internal exception #5
1689,AliveStatements,77,bv_automata_circuit_cadical_prop,FAIL,473.907862,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1690,AliveStatements,77,bv_automata_circuit_cadical,FAIL,464.903518,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1691,AliveStatements,77,bv_normalize_automata_circuit_cadical,FAIL,548.001643,internal exception #5
1692,AliveStatements,77,bv_mba,FAIL,5.301677,"unable to reflect term coefficient '
      x✝.sdiv x✝¹'. Expected an integer."
1693,AliveStatements,77,bv_normalize_mba,FAIL,85.731792,internal exception #5
1694,AliveStatements,78,rfl,FAIL,422.559206,"tactic 'rfl' failed, the left-hand side
      x✝ / x✝¹ * (0#5 - x✝¹)
    is not definitionally equal to the right-hand side
      x✝ % x✝¹ - x✝
    case neg
    x✝¹ x✝ : BitVec 5
    h✝ : ¬x✝¹ = 0
    ⊢ x✝ / x✝¹ * (0#5 - x✝¹) = x✝ % x✝¹ - x✝"
1695,AliveStatements,78,bv_bitwise,FAIL,15179.498876,internal exception #5
1696,AliveStatements,78,bv_ac,FAIL,353.485583,internal exception #5
1697,AliveStatements,78,bv_distrib,FAIL,3138.556686,internal exception #5
1698,AliveStatements,78,bv_ring,FAIL,873.894084,internal exception #5
1699,AliveStatements,78,bv_of_bool,FAIL,75.293179,simp made no progress
1700,AliveStatements,78,bv_omega,FAIL,93.320768,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ f ≤ 31
      0 ≤ e ≤ 31
      c ≥ 0
      0 ≤ c - 32*d ≤ 31
      a ≥ 0
      a - 32*b - c + 32*d - e ≥ -31
      -32 ≤ a - 32*b - e ≤ -1
    where
     a := ↑x✝.toNat % ↑x✝¹.toNat
     b := ↑(x✝.toNat % x✝¹.toNat + (2 ^ 5 - x✝.toNat)) / 32
     c := ↑(x✝.toNat / x✝¹.toNat) * ↑((0 % 2 ^ 5 + (2 ^ 5 - x✝¹.toNat)) % 2 ^ 5)
     d := ↑(x✝.toNat / x✝¹.toNat * ((0 % 2 ^ 5 + (2 ^ 5 - x✝¹.toNat)) % 2 ^ 5)) / 32
     e := ↑x✝.toNat
     f := ↑x✝¹.toNat"
1701,AliveStatements,78,bv_automata_classic_prop,FAIL,194005.600417,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1)
                      ((Copy.Term.var 2).sub (Copy.Term.var 3))))) =
              true)) =
        true
    is false"
1702,AliveStatements,78,bv_automata_classic,FAIL,11.588453,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1)
                      ((Copy.Term.var 2).sub (Copy.Term.var 3))))) =
              true)) =
        true
    is false"
1703,AliveStatements,78,bv_normalize_automata_classic,FAIL,49.881517,internal exception #5
1704,AliveStatements,78,simp,FAIL,352.212404,internal exception #5
1705,AliveStatements,78,bv_normalize,FAIL,39.069424,internal exception #5
1706,AliveStatements,78,bv_decide,PASS,214.872566,
1707,AliveStatements,78,bv_auto,PASS,1366.190194,
1708,AliveStatements,78,bv_automata_circuit_lean_prop,FAIL,24.154304,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      (Predicate.eq (Term.var 1) ((Term.var 2).sub (Term.var 3)))).eval
                  vars w =
                false)) =
        true
    is false"
1709,AliveStatements,78,bv_automata_circuit_lean,FAIL,11.023903,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      (Predicate.eq (Term.var 1) ((Term.var 2).sub (Term.var 3)))).eval
                  vars w =
                false)) =
        true
    is false"
1710,AliveStatements,78,bv_normalize_automata_circuit_lean,FAIL,50.226016,internal exception #5
1711,AliveStatements,78,bv_automata_circuit_cadical_prop,FAIL,468.151216,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1712,AliveStatements,78,bv_automata_circuit_cadical,FAIL,456.408454,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1713,AliveStatements,78,bv_normalize_automata_circuit_cadical,FAIL,498.800196,internal exception #5
1714,AliveStatements,78,bv_mba,FAIL,5.869186,"unable to reflect term coefficient '
      x✝ / x✝¹'. Expected an integer."
1715,AliveStatements,78,bv_normalize_mba,FAIL,43.964061,internal exception #5
1716,AliveStatements,79,rfl,FAIL,290.949495,"tactic 'rfl' failed, the left-hand side
      x✝ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    x✝¹ x✝ : BitVec 1
    ⊢ x✝ * x✝¹ = x✝ &&& x✝¹"
1717,AliveStatements,79,bv_bitwise,PASS,7224.139868,
1718,AliveStatements,79,bv_ac,FAIL,953.179061,internal exception #5
1719,AliveStatements,79,bv_distrib,FAIL,8017.911005,internal exception #5
1720,AliveStatements,79,bv_ring,FAIL,5668.634521,internal exception #5
1721,AliveStatements,79,bv_of_bool,FAIL,734.066938,simp made no progress
1722,AliveStatements,79,bv_omega,FAIL,549.775911,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      0 ≤ b - 2*c ≤ 1
      0 ≤ a ≤ 1
      a - b + 2*c ≥ 1
    where
     a := ↑(x✝ &&& x✝¹).toNat
     b := ↑x✝.toNat * ↑x✝¹.toNat
     c := ↑(x✝.toNat * x✝¹.toNat) / 2"
1723,AliveStatements,79,bv_automata_classic_prop,FAIL,217421.964871,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0)
                    ((Copy.Term.var 1).and (Copy.Term.var 2)))) =
              true)) =
        true
    is false"
1724,AliveStatements,79,bv_automata_classic,FAIL,8.665274,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0)
                    ((Copy.Term.var 1).and (Copy.Term.var 2)))) =
              true)) =
        true
    is false"
1725,AliveStatements,79,bv_normalize_automata_classic,PASS,6.438866,
1726,AliveStatements,79,simp,FAIL,97.175895,simp made no progress
1727,AliveStatements,79,bv_normalize,PASS,3.645748,
1728,AliveStatements,79,bv_decide,PASS,3.573697,
1729,AliveStatements,79,bv_auto,PASS,79.899607,
1730,AliveStatements,79,bv_automata_circuit_lean_prop,FAIL,16.952599,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq (Term.var 0) ((Term.var 1).and (Term.var 2))).eval vars w = false)) =
        true
    is false"
1731,AliveStatements,79,bv_automata_circuit_lean,FAIL,5.909816,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              (Predicate.eq (Term.var 0) ((Term.var 1).and (Term.var 2))).eval vars w = false)) =
        true
    is false"
1732,AliveStatements,79,bv_normalize_automata_circuit_lean,PASS,3.748668,
1733,AliveStatements,79,bv_automata_circuit_cadical_prop,FAIL,461.70212,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1734,AliveStatements,79,bv_automata_circuit_cadical,FAIL,450.878778,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1735,AliveStatements,79,bv_normalize_automata_circuit_cadical,PASS,6.558975,
1736,AliveStatements,79,bv_mba,FAIL,3.092498,"unable to reflect term coefficient '
      x✝'. Expected an integer."
1737,AliveStatements,79,bv_normalize_mba,PASS,4.040778,
1738,AliveStatements,80,rfl,FAIL,508.807089,"tactic 'rfl' failed, the left-hand side
      1#w <<< x✝ * x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ <<< x✝
    case neg
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝ ≥ ↑w
    ⊢ 1#w <<< x✝ * x✝¹ = x✝¹ <<< x✝"
1739,AliveStatements,80,bv_bitwise,PASS,14033.265364,
1740,AliveStatements,80,bv_ac,FAIL,765.547586,internal exception #5
1741,AliveStatements,80,bv_distrib,PASS,6532.452272,
1742,AliveStatements,80,bv_ring,FAIL,3112.329644,internal exception #5
1743,AliveStatements,80,bv_of_bool,FAIL,208.69745,simp made no progress
1744,AliveStatements,80,bv_omega,FAIL,142.024965,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝.toNat
     c := ↑2 ^ w
     d := ↑(x✝¹ <<< x✝).toNat
     e := ↑((1#w <<< x✝).toNat * x✝¹.toNat) % ↑(2 ^ w)"
1745,AliveStatements,80,bv_automata_classic_prop,FAIL,170.980476,"expected shiftLeft by natural number, found symbolic shift amount 'x✝' at '
      x✝¹ <<< x✝'"
1746,AliveStatements,80,bv_automata_classic,FAIL,107.741577,"expected shiftLeft by natural number, found symbolic shift amount 'x✝' at '
      x✝¹ <<< x✝'"
1747,AliveStatements,80,bv_normalize_automata_classic,FAIL,305.504916,internal exception #5
1748,AliveStatements,80,simp,PASS,1949.412904,
1749,AliveStatements,80,bv_normalize,FAIL,73.273761,internal exception #5
1750,AliveStatements,80,bv_decide,FAIL,202.316834,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ <ᵤ BitVec.ofNat w w,
     1#w <<< x✝ * x✝¹ == x✝¹ <<< x✝]
    Consider the following assignment:
    x✝ <ᵤ BitVec.ofNat w w = true
    1#w <<< x✝ * x✝¹ == x✝¹ <<< x✝ = false"
1751,AliveStatements,80,bv_auto,PASS,1463.115719,
1752,AliveStatements,80,bv_automata_circuit_lean_prop,FAIL,42.462282,"expected shiftLeft by natural number, found symbolic shift amount 'x✝' at '
      x✝¹ <<< x✝'"
1753,AliveStatements,80,bv_automata_circuit_lean,FAIL,15.911739,"expected shiftLeft by natural number, found symbolic shift amount 'x✝' at '
      x✝¹ <<< x✝'"
1754,AliveStatements,80,bv_normalize_automata_circuit_lean,FAIL,60.56412,internal exception #5
1755,AliveStatements,80,bv_automata_circuit_cadical_prop,FAIL,39.167123,"expected shiftLeft by natural number, found symbolic shift amount 'x✝' at '
      x✝¹ <<< x✝'"
1756,AliveStatements,80,bv_automata_circuit_cadical,FAIL,68.571644,"expected shiftLeft by natural number, found symbolic shift amount 'x✝' at '
      x✝¹ <<< x✝'"
1757,AliveStatements,80,bv_normalize_automata_circuit_cadical,FAIL,59.082221,internal exception #5
1758,AliveStatements,80,bv_mba,FAIL,12.062842,"unable to reflect term coefficient '
      BitVec.ofInt w 1 <<< x✝'. Expected an integer."
1759,AliveStatements,80,bv_normalize_mba,FAIL,60.603789,internal exception #5
1760,AliveStatements,81,rfl,FAIL,59.89575,"tactic 'rfl' failed, the left-hand side
      some ((x✝ - x✝ % x✝¹) / x✝¹)
    is not definitionally equal to the right-hand side
      none
    case pos
    x✝¹ x✝ : BitVec 9
    h✝¹ : ¬(x✝¹ = 0 ∨ x✝¹ = 0)
    h✝ : x✝¹ = 0
    ⊢ some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none"
1761,AliveStatements,81,bv_bitwise,FAIL,3.013838,"applyExtTheorem only applies to equations, not
      some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none"
1762,AliveStatements,81,bv_ac,FAIL,508.382789,internal exception #5
1763,AliveStatements,81,bv_distrib,FAIL,3038.134324,internal exception #5
1764,AliveStatements,81,bv_ring,FAIL,4074.415219,internal exception #5
1765,AliveStatements,81,bv_of_bool,FAIL,648.302355,simp made no progress
1766,AliveStatements,81,bv_omega,PASS,431.432471,
1767,AliveStatements,81,bv_automata_classic_prop,FAIL,490.604331,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none"
1768,AliveStatements,81,bv_automata_classic,FAIL,262.770884,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none"
1769,AliveStatements,81,bv_normalize_automata_classic,PASS,1039.494593,
1770,AliveStatements,81,simp,FAIL,2204.508163,simp made no progress
1771,AliveStatements,81,bv_normalize,PASS,604.378444,
1772,AliveStatements,81,bv_decide,PASS,586.188797,
1773,AliveStatements,81,bv_auto,PASS,2118.38183,
1774,AliveStatements,81,bv_automata_circuit_lean_prop,FAIL,123.790107,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none"
1775,AliveStatements,81,bv_automata_circuit_lean,FAIL,73.799731,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none"
1776,AliveStatements,81,bv_normalize_automata_circuit_lean,PASS,231.495285,
1777,AliveStatements,81,bv_automata_circuit_cadical_prop,FAIL,116.139533,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none"
1778,AliveStatements,81,bv_automata_circuit_cadical,FAIL,93.822567,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none"
1779,AliveStatements,81,bv_normalize_automata_circuit_cadical,PASS,295.836551,
1780,AliveStatements,81,bv_mba,FAIL,1.208319,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none
    case pos
    x✝¹ x✝ : BitVec 9
    h✝¹ : ¬(x✝¹ = 0 ∨ x✝¹ = 0)
    h✝ : x✝¹ = 0
    ⊢ some ((x✝ - x✝ % x✝¹) / x✝¹) ⊑ none"
1781,AliveStatements,81,bv_normalize_mba,PASS,280.952842,
1782,AliveStatements,82,rfl,FAIL,135.818369,"tactic 'rfl' failed, the left-hand side
      (x✝ - x✝ % x✝¹) / x✝¹
    is not definitionally equal to the right-hand side
      x✝ / x✝¹
    case neg
    x✝¹ x✝ : BitVec 9
    h✝¹ : ¬(x✝¹ = 0 ∨ x✝¹ = 0)
    h✝ : ¬x✝¹ = 0
    ⊢ (x✝ - x✝ % x✝¹) / x✝¹ = x✝ / x✝¹"
1783,AliveStatements,82,bv_bitwise,FAIL,870.971486,internal exception #5
1784,AliveStatements,82,bv_ac,FAIL,86.471152,internal exception #5
1785,AliveStatements,82,bv_distrib,FAIL,334.892296,internal exception #5
1786,AliveStatements,82,bv_ring,FAIL,424.179445,internal exception #5
1787,AliveStatements,82,bv_of_bool,FAIL,38.016955,simp made no progress
1788,AliveStatements,82,bv_omega,FAIL,46.689819,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ c ≤ 511
      a - b ≥ 1
    where
     a := ↑x✝.toNat / ↑x✝¹.toNat
     b := ↑((x✝.toNat + (2 ^ 9 - x✝.toNat % x✝¹.toNat)) % 2 ^ 9) / ↑x✝¹.toNat
     c := ↑x✝¹.toNat"
1789,AliveStatements,82,bv_automata_classic_prop,FAIL,198047.135268,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                      ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                        (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1) (Copy.Term.var 2)))))) =
              true)) =
        true
    is false"
1790,AliveStatements,82,bv_automata_classic,FAIL,11.567652,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                    ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                      ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.zero).lor
                        (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1) (Copy.Term.var 2)))))) =
              true)) =
        true
    is false"
1791,AliveStatements,82,bv_normalize_automata_classic,FAIL,41.447302,internal exception #5
1792,AliveStatements,82,simp,FAIL,104.58394,simp made no progress
1793,AliveStatements,82,bv_normalize,FAIL,29.437491,internal exception #5
1794,AliveStatements,82,bv_decide,PASS,1871.171775,
1795,AliveStatements,82,bv_auto,PASS,2487.487453,
1796,AliveStatements,82,bv_automata_circuit_lean_prop,FAIL,22.585434,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      ((Predicate.eq (Term.var 0) Term.zero).lor
                        ((Predicate.eq (Term.var 0) Term.zero).lor (Predicate.eq (Term.var 1) (Term.var 2))))).eval
                  vars w =
                false)) =
        true
    is false"
1797,AliveStatements,82,bv_automata_circuit_lean,FAIL,10.287083,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.zero).lor
                      ((Predicate.eq (Term.var 0) Term.zero).lor
                        ((Predicate.eq (Term.var 0) Term.zero).lor (Predicate.eq (Term.var 1) (Term.var 2))))).eval
                  vars w =
                false)) =
        true
    is false"
1798,AliveStatements,82,bv_normalize_automata_circuit_lean,FAIL,43.508861,internal exception #5
1799,AliveStatements,82,bv_automata_circuit_cadical_prop,FAIL,470.234695,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1800,AliveStatements,82,bv_automata_circuit_cadical,FAIL,455.720125,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1801,AliveStatements,82,bv_normalize_automata_circuit_cadical,FAIL,488.829162,internal exception #5
1802,AliveStatements,82,bv_mba,FAIL,4.248607,"unable to reflect term '
      (x✝ + -(x✝ % x✝¹)) / x✝¹'.
    Expected 'int * variable'."
1803,AliveStatements,82,bv_normalize_mba,FAIL,33.249688,internal exception #5
1804,AliveStatements,83,rfl,FAIL,1376.286458,"tactic 'rfl' failed, the left-hand side
      x✝.sdiv (-1#w)
    is not definitionally equal to the right-hand side
      0#w - x✝
    case neg
    w : ℕ
    x✝ : BitVec w
    h✝ : ¬(-1#w == 0 || w != 1 && x✝ == BitVec.intMin w && -1#w == -1) = true
    ⊢ x✝.sdiv (-1#w) = 0#w - x✝"
1805,AliveStatements,83,bv_bitwise,PASS,14956.416074,
1806,AliveStatements,83,bv_ac,FAIL,1097.564115,internal exception #5
1807,AliveStatements,83,bv_distrib,FAIL,5550.089779,internal exception #5
1808,AliveStatements,83,bv_ring,FAIL,6351.113573,internal exception #5
1809,AliveStatements,83,bv_of_bool,FAIL,312.458271,simp made no progress
1810,AliveStatements,83,bv_omega,FAIL,352.814033,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑(match decide (2 ^ (w - 1) ≤ x✝.toNat), decide (2 ^ (w - 1) ≤ (2 ^ w - 1 % 2 ^ w) % 2 ^ w) with
      | false, false => (x✝.udiv (-1#w)).toNat
      | false, true => (2 ^ w - (x✝.udiv (- -1#w)).toNat) % 2 ^ w
      | true, false => (2 ^ w - ((-x✝).udiv (-1#w)).toNat) % 2 ^ w
      | true, true => ((-x✝).udiv (- -1#w)).toNat)
     c := ↑2 ^ w"
1811,AliveStatements,83,bv_automata_classic_prop,FAIL,217933.837508,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq Copy.Term.one.neg Copy.Term.zero).lor
                    (((Copy.Predicate.width Copy.WidthPredicate.neq 1).land
                          ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) (Copy.Term.var 1)).land
                            (Copy.Predicate.binary Copy.BinaryPredicate.eq Copy.Term.one.neg Copy.Term.one.neg))).lor
                      (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 2)
                        (Copy.Term.zero.sub (Copy.Term.var 0)))))) =
              true)) =
        true
    is false"
1812,AliveStatements,83,bv_automata_classic,FAIL,30.02283,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq Copy.Term.one.neg Copy.Term.zero).lor
                    (((Copy.Predicate.width Copy.WidthPredicate.neq 1).land
                          ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) (Copy.Term.var 1)).land
                            (Copy.Predicate.binary Copy.BinaryPredicate.eq Copy.Term.one.neg Copy.Term.one.neg))).lor
                      (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 2)
                        (Copy.Term.zero.sub (Copy.Term.var 0)))))) =
              true)) =
        true
    is false"
1813,AliveStatements,83,bv_normalize_automata_classic,FAIL,66.030136,internal exception #5
1814,AliveStatements,83,simp,FAIL,96.221245,internal exception #5
1815,AliveStatements,83,bv_normalize,FAIL,42.223982,internal exception #5
1816,AliveStatements,83,bv_decide,FAIL,197.594688,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ == BitVec.intMin w,
     -1#w == 0#w,
     w != 1,
     (bif BitVec.extractLsb' (w - 1) 1 x✝ == 1#1 then
         bif BitVec.extractLsb' (w - 1) 1 (-1#w) == 1#1 then -x✝ / - -1#w else -(-x✝ / -1#w)
       else bif BitVec.extractLsb' (w - 1) 1 (-1#w) == 1#1 then -(x✝ / - -1#w) else x✝ / -1#w) ==
       -x✝]
    Consider the following assignment:
    (bif BitVec.extractLsb' (w - 1) 1 x✝ == 1#1 then
        bif BitVec.extractLsb' (w - 1) 1 (-1#w) == 1#1 then -x✝ / - -1#w else -(-x✝ / -1#w)
      else bif BitVec.extractLsb' (w - 1) 1 (-1#w) == 1#1 then -(x✝ / - -1#w) else x✝ / -1#w) ==
      -x✝ = false
    -1#w == 0#w = false
    w != 1 = false
    x✝ == BitVec.intMin w = false"
1817,AliveStatements,83,bv_auto,PASS,149.751209,
1818,AliveStatements,83,bv_automata_circuit_lean_prop,FAIL,35.116916,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq Term.one.neg Term.zero).lor
                      (((Predicate.widthNeq 1).land
                            ((Predicate.eq (Term.var 0) (Term.var 1)).land
                              (Predicate.eq Term.one.neg Term.one.neg))).lor
                        (Predicate.eq (Term.var 2) (Term.zero.sub (Term.var 0))))).eval
                  vars w =
                false)) =
        true
    is false"
1819,AliveStatements,83,bv_automata_circuit_lean,FAIL,24.851484,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq Term.one.neg Term.zero).lor
                      (((Predicate.widthNeq 1).land
                            ((Predicate.eq (Term.var 0) (Term.var 1)).land
                              (Predicate.eq Term.one.neg Term.one.neg))).lor
                        (Predicate.eq (Term.var 2) (Term.zero.sub (Term.var 0))))).eval
                  vars w =
                false)) =
        true
    is false"
1820,AliveStatements,83,bv_normalize_automata_circuit_lean,FAIL,62.586718,internal exception #5
1821,AliveStatements,83,bv_automata_circuit_cadical_prop,FAIL,482.386597,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1822,AliveStatements,83,bv_automata_circuit_cadical,FAIL,482.345336,"failed to prove goal, since decideIfZerosM established that theorem is not true."
1823,AliveStatements,83,bv_normalize_automata_circuit_cadical,FAIL,529.992075,internal exception #5
1824,AliveStatements,83,bv_mba,FAIL,6.407416,"unable to reflect term '
      x✝.sdiv (BitVec.ofInt w (-1))'.
    Expected 'int * variable'."
1825,AliveStatements,83,bv_normalize_mba,FAIL,47.210228,internal exception #5
1826,AliveStatements,84,rfl,FAIL,12.456362,"tactic 'rfl' failed, the left-hand side
      some (x✝ ^^^ -1#1)
    is not definitionally equal to the right-hand side
      none
    case pos
    x✝ : BitVec 1
    h✝ : x✝ = 1#1
    ⊢ some (x✝ ^^^ -1#1) ⊑ none"
1827,AliveStatements,84,bv_bitwise,FAIL,1.428399,"applyExtTheorem only applies to equations, not
      some (x✝ ^^^ -1#1) ⊑ none"
1828,AliveStatements,84,bv_ac,FAIL,538.671829,internal exception #5
1829,AliveStatements,84,bv_distrib,FAIL,5245.116704,internal exception #5
1830,AliveStatements,84,bv_ring,FAIL,4917.946704,internal exception #5
1831,AliveStatements,84,bv_of_bool,FAIL,610.64695,simp made no progress
1832,AliveStatements,84,bv_omega,FAIL,276.172015,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
1833,AliveStatements,84,bv_automata_classic_prop,FAIL,379.940775,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1834,AliveStatements,84,bv_automata_classic,FAIL,159.186514,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1835,AliveStatements,84,bv_normalize_automata_classic,FAIL,526.464907,internal exception #5
1836,AliveStatements,84,simp,FAIL,2442.131373,internal exception #5
1837,AliveStatements,84,bv_normalize,FAIL,194.1259,internal exception #5
1838,AliveStatements,84,bv_decide,FAIL,396.499744,"The prover found a potentially spurious counterexample:
    - The following potentially relevant hypotheses could not be used: [a✝]
    Consider the following assignment:
    x✝ = 1#1"
1839,AliveStatements,84,bv_auto,FAIL,3070.512612,internal exception #5
1840,AliveStatements,84,bv_automata_circuit_lean_prop,FAIL,46.755698,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1841,AliveStatements,84,bv_automata_circuit_lean,FAIL,13.569421,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1842,AliveStatements,84,bv_normalize_automata_circuit_lean,FAIL,61.410759,internal exception #5
1843,AliveStatements,84,bv_automata_circuit_cadical_prop,FAIL,50.454346,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1844,AliveStatements,84,bv_automata_circuit_cadical,FAIL,17.990978,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1845,AliveStatements,84,bv_normalize_automata_circuit_cadical,FAIL,58.585671,internal exception #5
1846,AliveStatements,84,bv_mba,FAIL,0.44669,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some (x✝ ^^^ -1#1) ⊑ none
    case pos
    x✝ : BitVec 1
    h✝ : x✝ = 1#1
    ⊢ some (x✝ ^^^ -1#1) ⊑ none"
1847,AliveStatements,84,bv_normalize_mba,FAIL,39.659583,internal exception #5
1848,AliveStatements,85,rfl,FAIL,16.30893,"tactic 'rfl' failed, the left-hand side
      x✝ ^^^ -1#1
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#1) &&& x✝¹
    case pos
    x✝¹ x✝ : BitVec 1
    h✝ : x✝ = 1#1
    ⊢ x✝ ^^^ -1#1 = (x✝ ^^^ -1#1) &&& x✝¹"
1849,AliveStatements,85,bv_bitwise,FAIL,1856.587145,internal exception #5
1850,AliveStatements,85,bv_ac,FAIL,50.008717,internal exception #5
1851,AliveStatements,85,bv_distrib,FAIL,313.652769,internal exception #5
1852,AliveStatements,85,bv_ring,FAIL,386.531631,internal exception #5
1853,AliveStatements,85,bv_of_bool,FAIL,36.657346,simp made no progress
1854,AliveStatements,85,bv_omega,FAIL,16.241529,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑((x✝ ^^^ -1#1) &&& x✝¹).toNat
     b := ↑(x✝ ^^^ -1#1).toNat"
1855,AliveStatements,85,bv_automata_classic_prop,FAIL,209049.110893,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.neq (Copy.Term.var 0) Copy.Term.one).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 0).xor Copy.Term.one.neg)
                      (((Copy.Term.var 0).xor Copy.Term.one.neg).and (Copy.Term.var 1))))) =
              true)) =
        true
    is false"
1856,AliveStatements,85,bv_automata_classic,FAIL,11.107143,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.neq (Copy.Term.var 0) Copy.Term.one).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 0).xor Copy.Term.one.neg)
                      (((Copy.Term.var 0).xor Copy.Term.one.neg).and (Copy.Term.var 1))))) =
              true)) =
        true
    is false"
1857,AliveStatements,85,bv_normalize_automata_classic,FAIL,29.37601,internal exception #5
1858,AliveStatements,85,simp,FAIL,133.481611,internal exception #5
1859,AliveStatements,85,bv_normalize,FAIL,15.19037,internal exception #5
1860,AliveStatements,85,bv_decide,PASS,170.046186,
1861,AliveStatements,85,bv_auto,PASS,856.602326,
1862,AliveStatements,85,bv_automata_circuit_lean_prop,FAIL,20.265156,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.neq (Term.var 0) Term.one).lor
                      (Predicate.eq ((Term.var 0).xor Term.one.neg)
                        (((Term.var 0).xor Term.one.neg).and (Term.var 1)))).eval
                  vars w =
                false)) =
        true
    is false"
1863,AliveStatements,85,bv_automata_circuit_lean,FAIL,9.470844,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.neq (Term.var 0) Term.one).lor
                      (Predicate.eq ((Term.var 0).xor Term.one.neg)
                        (((Term.var 0).xor Term.one.neg).and (Term.var 1)))).eval
                  vars w =
                false)) =
        true
    is false"
1864,AliveStatements,85,bv_normalize_automata_circuit_lean,FAIL,24.398223,internal exception #5
1865,AliveStatements,85,bv_automata_circuit_cadical_prop,PASS,616.911707,
1866,AliveStatements,85,bv_automata_circuit_cadical,PASS,611.00734,
1867,AliveStatements,85,bv_normalize_automata_circuit_cadical,PASS,628.016289,
1868,AliveStatements,85,bv_mba,FAIL,4.943357,"unable to reflect term '
      x✝ ^^^ BitVec.ofInt 1 (-1)'.
    Expected 'int * variable'."
1869,AliveStatements,85,bv_normalize_mba,FAIL,19.277707,internal exception #5
1870,AliveStatements,86,rfl,FAIL,1.317119,"tactic 'rfl' failed, the left-hand side
      x✝¹
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#1) &&& x✝¹
    case neg
    x✝¹ x✝ : BitVec 1
    h✝ : ¬x✝ = 1#1
    ⊢ x✝¹ = (x✝ ^^^ -1#1) &&& x✝¹"
1871,AliveStatements,86,bv_bitwise,FAIL,390.776238,internal exception #5
1872,AliveStatements,86,bv_ac,FAIL,18.507768,internal exception #5
1873,AliveStatements,86,bv_distrib,FAIL,133.53352,internal exception #5
1874,AliveStatements,86,bv_ring,FAIL,112.971725,internal exception #5
1875,AliveStatements,86,bv_of_bool,FAIL,16.437619,simp made no progress
1876,AliveStatements,86,bv_omega,FAIL,8.141604,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑((x✝ ^^^ -1#1) &&& x✝¹).toNat
     b := ↑x✝¹.toNat"
1877,AliveStatements,86,bv_automata_classic_prop,FAIL,20.173507,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.one).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1)
                      (((Copy.Term.var 0).xor Copy.Term.one.neg).and (Copy.Term.var 1))))) =
              true)) =
        true
    is false"
1878,AliveStatements,86,bv_automata_classic,FAIL,8.455954,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.one).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1)
                      (((Copy.Term.var 0).xor Copy.Term.one.neg).and (Copy.Term.var 1))))) =
              true)) =
        true
    is false"
1879,AliveStatements,86,bv_normalize_automata_classic,FAIL,26.017042,internal exception #5
1880,AliveStatements,86,simp,FAIL,120.62449,internal exception #5
1881,AliveStatements,86,bv_normalize,FAIL,17.659618,internal exception #5
1882,AliveStatements,86,bv_decide,PASS,172.681194,
1883,AliveStatements,86,bv_auto,PASS,867.178729,
1884,AliveStatements,86,bv_automata_circuit_lean_prop,FAIL,21.255616,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.one).lor
                      (Predicate.eq (Term.var 1) (((Term.var 0).xor Term.one.neg).and (Term.var 1)))).eval
                  vars w =
                false)) =
        true
    is false"
1885,AliveStatements,86,bv_automata_circuit_lean,FAIL,9.554203,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.one).lor
                      (Predicate.eq (Term.var 1) (((Term.var 0).xor Term.one.neg).and (Term.var 1)))).eval
                  vars w =
                false)) =
        true
    is false"
1886,AliveStatements,86,bv_normalize_automata_circuit_lean,FAIL,27.124612,internal exception #5
1887,AliveStatements,86,bv_automata_circuit_cadical_prop,PASS,619.169015,
1888,AliveStatements,86,bv_automata_circuit_cadical,PASS,606.172854,
1889,AliveStatements,86,bv_normalize_automata_circuit_cadical,PASS,625.67099,
1890,AliveStatements,86,bv_mba,FAIL,4.786937,"unable to reflect term '
      x✝¹'.
    Expected 'int * variable'."
1891,AliveStatements,86,bv_normalize_mba,FAIL,22.695605,internal exception #5
1892,AliveStatements,87,rfl,FAIL,85.170312,"tactic 'rfl' failed, the left-hand side
      some (x✝ ^^^ -1#1)
    is not definitionally equal to the right-hand side
      none
    case neg
    x✝ : BitVec 1
    h✝ : ¬x✝ = 1#1
    ⊢ some (x✝ ^^^ -1#1) ⊑ none"
1893,AliveStatements,87,bv_bitwise,FAIL,2.668999,"applyExtTheorem only applies to equations, not
      some (x✝ ^^^ -1#1) ⊑ none"
1894,AliveStatements,87,bv_ac,FAIL,613.621808,internal exception #5
1895,AliveStatements,87,bv_distrib,FAIL,5748.595727,internal exception #5
1896,AliveStatements,87,bv_ring,FAIL,4373.517858,internal exception #5
1897,AliveStatements,87,bv_of_bool,FAIL,528.821456,simp made no progress
1898,AliveStatements,87,bv_omega,FAIL,293.311623,"omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants."
1899,AliveStatements,87,bv_automata_classic_prop,FAIL,384.552052,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1900,AliveStatements,87,bv_automata_classic,FAIL,181.488999,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1901,AliveStatements,87,bv_normalize_automata_classic,FAIL,753.938135,internal exception #5
1902,AliveStatements,87,simp,FAIL,3314.578008,internal exception #5
1903,AliveStatements,87,bv_normalize,FAIL,399.072752,internal exception #5
1904,AliveStatements,87,bv_decide,FAIL,517.245053,"The prover found a potentially spurious counterexample:
    - The following potentially relevant hypotheses could not be used: [a✝]
    Consider the following assignment:
    x✝ = 0#1"
1905,AliveStatements,87,bv_auto,FAIL,3482.699596,internal exception #5
1906,AliveStatements,87,bv_automata_circuit_lean_prop,FAIL,54.060704,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1907,AliveStatements,87,bv_automata_circuit_lean,FAIL,17.412748,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1908,AliveStatements,87,bv_normalize_automata_circuit_lean,FAIL,86.407752,internal exception #5
1909,AliveStatements,87,bv_automata_circuit_cadical_prop,FAIL,58.227241,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1910,AliveStatements,87,bv_automata_circuit_cadical,FAIL,22.778145,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ ^^^ -1#1) ⊑ none"
1911,AliveStatements,87,bv_normalize_automata_circuit_cadical,FAIL,157.866444,internal exception #5
1912,AliveStatements,87,bv_mba,FAIL,0.50531,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some (x✝ ^^^ -1#1) ⊑ none
    case neg
    x✝ : BitVec 1
    h✝ : ¬x✝ = 1#1
    ⊢ some (x✝ ^^^ -1#1) ⊑ none"
1913,AliveStatements,87,bv_normalize_mba,FAIL,49.177077,internal exception #5
1914,AliveStatements,88,rfl,FAIL,10.670883,"tactic 'rfl' failed, the left-hand side
      x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#1 ||| x✝¹
    case pos
    x✝¹ x✝ : BitVec 1
    h✝ : x✝ = 1#1
    ⊢ x✝¹ = x✝ ^^^ -1#1 ||| x✝¹"
1915,AliveStatements,88,bv_bitwise,FAIL,1067.324355,internal exception #5
1916,AliveStatements,88,bv_ac,FAIL,94.402926,internal exception #5
1917,AliveStatements,88,bv_distrib,FAIL,307.930864,internal exception #5
1918,AliveStatements,88,bv_ring,FAIL,325.962921,internal exception #5
1919,AliveStatements,88,bv_of_bool,FAIL,85.531093,simp made no progress
1920,AliveStatements,88,bv_omega,FAIL,18.562227,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(x✝ ^^^ -1#1 ||| x✝¹).toNat
     b := ↑x✝¹.toNat"
1921,AliveStatements,88,bv_automata_classic_prop,FAIL,217765.940021,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.neq (Copy.Term.var 0) Copy.Term.one).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1)
                      (((Copy.Term.var 0).xor Copy.Term.one.neg).or (Copy.Term.var 1))))) =
              true)) =
        true
    is false"
1922,AliveStatements,88,bv_automata_classic,FAIL,11.120813,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.neq (Copy.Term.var 0) Copy.Term.one).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 1)
                      (((Copy.Term.var 0).xor Copy.Term.one.neg).or (Copy.Term.var 1))))) =
              true)) =
        true
    is false"
1923,AliveStatements,88,bv_normalize_automata_classic,FAIL,35.201036,internal exception #5
1924,AliveStatements,88,simp,FAIL,120.688999,internal exception #5
1925,AliveStatements,88,bv_normalize,FAIL,15.91042,internal exception #5
1926,AliveStatements,88,bv_decide,PASS,170.057646,
1927,AliveStatements,88,bv_auto,PASS,840.711446,
1928,AliveStatements,88,bv_automata_circuit_lean_prop,FAIL,20.118817,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.neq (Term.var 0) Term.one).lor
                      (Predicate.eq (Term.var 1) (((Term.var 0).xor Term.one.neg).or (Term.var 1)))).eval
                  vars w =
                false)) =
        true
    is false"
1929,AliveStatements,88,bv_automata_circuit_lean,FAIL,8.702174,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.neq (Term.var 0) Term.one).lor
                      (Predicate.eq (Term.var 1) (((Term.var 0).xor Term.one.neg).or (Term.var 1)))).eval
                  vars w =
                false)) =
        true
    is false"
1930,AliveStatements,88,bv_normalize_automata_circuit_lean,FAIL,24.335564,internal exception #5
1931,AliveStatements,88,bv_automata_circuit_cadical_prop,PASS,620.853634,
1932,AliveStatements,88,bv_automata_circuit_cadical,PASS,613.436098,
1933,AliveStatements,88,bv_normalize_automata_circuit_cadical,PASS,621.683693,
1934,AliveStatements,88,bv_mba,FAIL,4.835317,"unable to reflect term '
      x✝¹'.
    Expected 'int * variable'."
1935,AliveStatements,88,bv_normalize_mba,FAIL,20.433276,internal exception #5
1936,AliveStatements,89,rfl,FAIL,3.362068,"tactic 'rfl' failed, the left-hand side
      x✝ ^^^ -1#1
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#1 ||| x✝¹
    case neg
    x✝¹ x✝ : BitVec 1
    h✝ : ¬x✝ = 1#1
    ⊢ x✝ ^^^ -1#1 = x✝ ^^^ -1#1 ||| x✝¹"
1937,AliveStatements,89,bv_bitwise,FAIL,409.150436,internal exception #5
1938,AliveStatements,89,bv_ac,FAIL,20.456886,internal exception #5
1939,AliveStatements,89,bv_distrib,FAIL,137.034898,internal exception #5
1940,AliveStatements,89,bv_ring,FAIL,122.000469,internal exception #5
1941,AliveStatements,89,bv_of_bool,FAIL,17.685548,simp made no progress
1942,AliveStatements,89,bv_omega,FAIL,8.523034,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(x✝ ^^^ -1#1 ||| x✝¹).toNat
     b := ↑(x✝ ^^^ -1#1).toNat"
1943,AliveStatements,89,bv_automata_classic_prop,FAIL,20.193976,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.one).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 0).xor Copy.Term.one.neg)
                      (((Copy.Term.var 0).xor Copy.Term.one.neg).or (Copy.Term.var 1))))) =
              true)) =
        true
    is false"
1944,AliveStatements,89,bv_automata_classic,FAIL,9.461054,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 0) Copy.Term.one).lor
                    (Copy.Predicate.binary Copy.BinaryPredicate.eq ((Copy.Term.var 0).xor Copy.Term.one.neg)
                      (((Copy.Term.var 0).xor Copy.Term.one.neg).or (Copy.Term.var 1))))) =
              true)) =
        true
    is false"
1945,AliveStatements,89,bv_normalize_automata_classic,FAIL,29.163091,internal exception #5
1946,AliveStatements,89,simp,FAIL,121.767398,internal exception #5
1947,AliveStatements,89,bv_normalize,FAIL,19.609197,internal exception #5
1948,AliveStatements,89,bv_decide,PASS,177.306861,
1949,AliveStatements,89,bv_auto,PASS,895.868749,
1950,AliveStatements,89,bv_automata_circuit_lean_prop,FAIL,21.488295,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.one).lor
                      (Predicate.eq ((Term.var 0).xor Term.one.neg)
                        (((Term.var 0).xor Term.one.neg).or (Term.var 1)))).eval
                  vars w =
                false)) =
        true
    is false"
1951,AliveStatements,89,bv_automata_circuit_lean,FAIL,9.745684,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.eq (Term.var 0) Term.one).lor
                      (Predicate.eq ((Term.var 0).xor Term.one.neg)
                        (((Term.var 0).xor Term.one.neg).or (Term.var 1)))).eval
                  vars w =
                false)) =
        true
    is false"
1952,AliveStatements,89,bv_normalize_automata_circuit_lean,FAIL,29.62005,internal exception #5
1953,AliveStatements,89,bv_automata_circuit_cadical_prop,PASS,621.381693,
1954,AliveStatements,89,bv_automata_circuit_cadical,PASS,611.88703,
1955,AliveStatements,89,bv_normalize_automata_circuit_cadical,PASS,630.411817,
1956,AliveStatements,89,bv_mba,FAIL,4.945977,"unable to reflect term '
      x✝ ^^^ BitVec.ofInt 1 (-1)'.
    Expected 'int * variable'."
1957,AliveStatements,89,bv_normalize_mba,FAIL,24.360813,internal exception #5
1958,AliveStatements,90,rfl,FAIL,32.719748,"tactic 'rfl' failed, the left-hand side
      some x✝
    is not definitionally equal to the right-hand side
      none
    case pos
    w : ℕ
    x✝ : BitVec w
    h✝ : 0#1 = 1#1
    ⊢ some x✝ ⊑ none"
1959,AliveStatements,90,bv_bitwise,FAIL,1.537009,"applyExtTheorem only applies to equations, not
      some x✝ ⊑ none"
1960,AliveStatements,90,bv_ac,PASS,400.149742,
1961,AliveStatements,90,bv_distrib,FAIL,1422.828306,internal exception #5
1962,AliveStatements,90,bv_ring,FAIL,495.094888,internal exception #5
1963,AliveStatements,90,bv_of_bool,FAIL,742.527832,simp made no progress
1964,AliveStatements,90,bv_omega,PASS,933.897164,
1965,AliveStatements,90,bv_automata_classic_prop,FAIL,699.399801,"expected predicate over bitvectors (no quantification), found:  
      some x✝ ⊑ none"
1966,AliveStatements,90,bv_automata_classic,FAIL,213.212898,"expected predicate over bitvectors (no quantification), found:  
      some x✝ ⊑ none"
1967,AliveStatements,90,bv_normalize_automata_classic,PASS,299.371069,
1968,AliveStatements,90,simp,FAIL,2049.152006,simp made no progress
1969,AliveStatements,90,bv_normalize,PASS,770.997743,
1970,AliveStatements,90,bv_decide,PASS,540.898948,
1971,AliveStatements,90,bv_auto,PASS,571.857606,
1972,AliveStatements,90,bv_automata_circuit_lean_prop,FAIL,557.688176,"expected predicate over bitvectors (no quantification), found:  
      some x✝ ⊑ none"
1973,AliveStatements,90,bv_automata_circuit_lean,FAIL,368.701603,"expected predicate over bitvectors (no quantification), found:  
      some x✝ ⊑ none"
1974,AliveStatements,90,bv_normalize_automata_circuit_lean,PASS,611.12285,
1975,AliveStatements,90,bv_automata_circuit_cadical_prop,FAIL,482.873957,"expected predicate over bitvectors (no quantification), found:  
      some x✝ ⊑ none"
1976,AliveStatements,90,bv_automata_circuit_cadical,FAIL,220.796102,"expected predicate over bitvectors (no quantification), found:  
      some x✝ ⊑ none"
1977,AliveStatements,90,bv_normalize_automata_circuit_cadical,PASS,117.191091,
1978,AliveStatements,90,bv_mba,FAIL,2.111158,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some x✝ ⊑ none
    case pos
    w : ℕ
    x✝ : BitVec w
    h✝ : 0#1 = 1#1
    ⊢ some x✝ ⊑ none"
1979,AliveStatements,90,bv_normalize_mba,PASS,316.498598,
1980,AliveStatements,91,rfl,FAIL,33.610137,"tactic 'rfl' failed, the left-hand side
      x✝
    is not definitionally equal to the right-hand side
      x✝¹
    case pos
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : 0#1 = 1#1
    ⊢ x✝ = x✝¹"
1981,AliveStatements,91,bv_bitwise,PASS,2936.583052,
1982,AliveStatements,91,bv_ac,PASS,275.653835,
1983,AliveStatements,91,bv_distrib,FAIL,2339.470192,internal exception #5
1984,AliveStatements,91,bv_ring,FAIL,227.996837,internal exception #5
1985,AliveStatements,91,bv_of_bool,FAIL,730.47671,simp made no progress
1986,AliveStatements,91,bv_omega,PASS,398.666733,
1987,AliveStatements,91,bv_automata_classic_prop,PASS,250340.825876,
1988,AliveStatements,91,bv_automata_classic,PASS,8.357584,
1989,AliveStatements,91,bv_normalize_automata_classic,PASS,5.530186,
1990,AliveStatements,91,simp,FAIL,30.64666,simp made no progress
1991,AliveStatements,91,bv_normalize,PASS,3.795967,
1992,AliveStatements,91,bv_decide,PASS,3.736538,
1993,AliveStatements,91,bv_auto,PASS,38.754193,
1994,AliveStatements,91,bv_automata_circuit_lean_prop,PASS,14.606511,
1995,AliveStatements,91,bv_automata_circuit_lean,PASS,6.198505,
1996,AliveStatements,91,bv_normalize_automata_circuit_lean,PASS,3.920208,
1997,AliveStatements,91,bv_automata_circuit_cadical_prop,PASS,616.158567,
1998,AliveStatements,91,bv_automata_circuit_cadical,PASS,608.261832,
1999,AliveStatements,91,bv_normalize_automata_circuit_cadical,PASS,6.785635,
2000,AliveStatements,91,bv_mba,FAIL,2.291799,"unable to reflect term '
      x✝'.
    Expected 'int * variable'."
2001,AliveStatements,91,bv_normalize_mba,PASS,3.914337,
2002,AliveStatements,92,rfl,FAIL,30.968319,"tactic 'rfl' failed, the left-hand side
      some (x✝ <<< x✝¹ >>> x✝¹)
    is not definitionally equal to the right-hand side
      none
    case pos
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝¹ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    h✝ : x✝¹ ≥ ↑w
    ⊢ some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2003,AliveStatements,92,bv_bitwise,FAIL,2.650988,"applyExtTheorem only applies to equations, not
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2004,AliveStatements,92,bv_ac,FAIL,427.150524,internal exception #5
2005,AliveStatements,92,bv_distrib,FAIL,5901.704104,internal exception #5
2006,AliveStatements,92,bv_ring,FAIL,2717.588268,internal exception #5
2007,AliveStatements,92,bv_of_bool,FAIL,428.688343,simp made no progress
2008,AliveStatements,92,bv_omega,PASS,276.677434,
2009,AliveStatements,92,bv_automata_classic_prop,FAIL,303.372487,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2010,AliveStatements,92,bv_automata_classic,FAIL,168.207927,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2011,AliveStatements,92,bv_normalize_automata_classic,PASS,582.907839,
2012,AliveStatements,92,simp,FAIL,3186.357904,internal exception #5
2013,AliveStatements,92,bv_normalize,PASS,229.135416,
2014,AliveStatements,92,bv_decide,PASS,216.705605,
2015,AliveStatements,92,bv_auto,PASS,2031.197288,
2016,AliveStatements,92,bv_automata_circuit_lean_prop,FAIL,52.688175,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2017,AliveStatements,92,bv_automata_circuit_lean,FAIL,25.217193,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2018,AliveStatements,92,bv_normalize_automata_circuit_lean,PASS,61.653238,
2019,AliveStatements,92,bv_automata_circuit_cadical_prop,FAIL,47.565608,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2020,AliveStatements,92,bv_automata_circuit_cadical,FAIL,29.045771,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2021,AliveStatements,92,bv_normalize_automata_circuit_cadical,PASS,65.535136,
2022,AliveStatements,92,bv_mba,FAIL,0.41637,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none
    case pos
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝¹ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    h✝ : x✝¹ ≥ ↑w
    ⊢ some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2023,AliveStatements,92,bv_normalize_mba,PASS,100.271453,
2024,AliveStatements,93,rfl,FAIL,13.010292,"tactic 'rfl' failed, the left-hand side
      x✝ <<< x✝¹ >>> x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (-1#w) >>> x✝¹
    case neg
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝¹ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ x✝ <<< x✝¹ >>> x✝¹ = x✝ &&& (-1#w) >>> x✝¹"
2025,AliveStatements,93,bv_bitwise,PASS,229819.507541,
2026,AliveStatements,93,bv_ac,FAIL,16.358809,internal exception #5
2027,AliveStatements,93,bv_distrib,FAIL,202.332944,internal exception #5
2028,AliveStatements,93,bv_ring,FAIL,126.255335,internal exception #5
2029,AliveStatements,93,bv_of_bool,FAIL,17.459459,simp made no progress
2030,AliveStatements,93,bv_omega,FAIL,8.428064,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝ &&& (-1#w) >>> x✝¹).toNat
     e := ↑(x✝ <<< x✝¹ >>> x✝¹).toNat"
2031,AliveStatements,93,bv_automata_classic_prop,FAIL,31.559639,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                    ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                      ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                        (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 2)
                          ((Copy.Term.var 3).and (Copy.Term.var 4))))))) =
              true)) =
        true
    is false"
2032,AliveStatements,93,bv_automata_classic,FAIL,18.805947,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                    ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                      ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                        (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 2)
                          ((Copy.Term.var 3).and (Copy.Term.var 4))))))) =
              true)) =
        true
    is false"
2033,AliveStatements,93,bv_normalize_automata_classic,FAIL,40.541133,internal exception #5
2034,AliveStatements,93,simp,FAIL,195.118129,internal exception #5
2035,AliveStatements,93,bv_normalize,FAIL,20.768586,internal exception #5
2036,AliveStatements,93,bv_decide,FAIL,170.070576,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ <<< x✝¹ >>> x✝¹ ==
       x✝ &&& (-1#w) >>> x✝¹,
     x✝¹ <ᵤ BitVec.ofNat w w]
    Consider the following assignment:
    x✝¹ <ᵤ BitVec.ofNat w w = true
    x✝ <<< x✝¹ >>> x✝¹ == x✝ &&& (-1#w) >>> x✝¹ = false"
2037,AliveStatements,93,bv_auto,PASS,561.035924,
2038,AliveStatements,93,bv_automata_circuit_lean_prop,FAIL,21.972005,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                      ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                        ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                          (Predicate.eq (Term.var 2) ((Term.var 3).and (Term.var 4)))))).eval
                  vars w =
                false)) =
        true
    is false"
2039,AliveStatements,93,bv_automata_circuit_lean,FAIL,10.974593,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                      ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                        ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                          (Predicate.eq (Term.var 2) ((Term.var 3).and (Term.var 4)))))).eval
                  vars w =
                false)) =
        true
    is false"
2040,AliveStatements,93,bv_normalize_automata_circuit_lean,FAIL,30.947529,internal exception #5
2041,AliveStatements,93,bv_automata_circuit_cadical_prop,FAIL,470.246595,"failed to prove goal, since decideIfZerosM established that theorem is not true."
2042,AliveStatements,93,bv_automata_circuit_cadical,FAIL,460.254761,"failed to prove goal, since decideIfZerosM established that theorem is not true."
2043,AliveStatements,93,bv_normalize_automata_circuit_cadical,FAIL,480.495818,internal exception #5
2044,AliveStatements,93,bv_mba,FAIL,5.215647,"unable to reflect term '
      x✝ <<< x✝¹ >>> x✝¹'.
    Expected 'int * variable'."
2045,AliveStatements,93,bv_normalize_mba,FAIL,25.353143,internal exception #5
2046,AliveStatements,94,rfl,FAIL,15.36322,"tactic 'rfl' failed, the left-hand side
      some (x✝ >>> x✝¹ <<< x✝¹)
    is not definitionally equal to the right-hand side
      none
    case pos
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝¹ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    h✝ : x✝¹ ≥ ↑w
    ⊢ some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none"
2047,AliveStatements,94,bv_bitwise,FAIL,2.309579,"applyExtTheorem only applies to equations, not
      some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none"
2048,AliveStatements,94,bv_ac,FAIL,420.756178,internal exception #5
2049,AliveStatements,94,bv_distrib,FAIL,9778.302555,internal exception #5
2050,AliveStatements,94,bv_ring,FAIL,2334.487625,internal exception #5
2051,AliveStatements,94,bv_of_bool,FAIL,267.691191,simp made no progress
2052,AliveStatements,94,bv_omega,PASS,168.648817,
2053,AliveStatements,94,bv_automata_classic_prop,FAIL,229.407376,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none"
2054,AliveStatements,94,bv_automata_classic,FAIL,217.596604,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none"
2055,AliveStatements,94,bv_normalize_automata_classic,PASS,193.81146,
2056,AliveStatements,94,simp,FAIL,2626.3019,internal exception #5
2057,AliveStatements,94,bv_normalize,PASS,69.796933,
2058,AliveStatements,94,bv_decide,PASS,127.982354,
2059,AliveStatements,94,bv_auto,PASS,1876.343102,
2060,AliveStatements,94,bv_automata_circuit_lean_prop,FAIL,49.895306,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none"
2061,AliveStatements,94,bv_automata_circuit_lean,FAIL,24.075194,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none"
2062,AliveStatements,94,bv_normalize_automata_circuit_lean,PASS,112.118715,
2063,AliveStatements,94,bv_automata_circuit_cadical_prop,FAIL,52.329165,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none"
2064,AliveStatements,94,bv_automata_circuit_cadical,FAIL,30.31004,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none"
2065,AliveStatements,94,bv_normalize_automata_circuit_cadical,PASS,71.420332,
2066,AliveStatements,94,bv_mba,FAIL,0.706499,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none
    case pos
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝¹ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    h✝ : x✝¹ ≥ ↑w
    ⊢ some (x✝ >>> x✝¹ <<< x✝¹) ⊑ none"
2067,AliveStatements,94,bv_normalize_mba,PASS,132.391871,
2068,AliveStatements,95,rfl,FAIL,6.916146,"tactic 'rfl' failed, the left-hand side
      x✝ >>> x✝¹ <<< x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (-1#w) <<< x✝¹
    case neg
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝¹ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ x✝ >>> x✝¹ <<< x✝¹ = x✝ &&& (-1#w) <<< x✝¹"
2069,AliveStatements,95,bv_bitwise,PASS,894.27191,
2070,AliveStatements,95,bv_ac,FAIL,20.646856,internal exception #5
2071,AliveStatements,95,bv_distrib,FAIL,673.748678,internal exception #5
2072,AliveStatements,95,bv_ring,FAIL,196.926088,internal exception #5
2073,AliveStatements,95,bv_of_bool,FAIL,20.838676,simp made no progress
2074,AliveStatements,95,bv_omega,FAIL,9.602734,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝ &&& (-1#w) <<< x✝¹).toNat
     e := ↑(x✝ >>> x✝¹ <<< x✝¹).toNat"
2075,AliveStatements,95,bv_automata_classic_prop,FAIL,64.281737,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      x✝ >>> x✝¹ <<< x✝¹'"
2076,AliveStatements,95,bv_automata_classic,FAIL,6.772685,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      x✝ >>> x✝¹ <<< x✝¹'"
2077,AliveStatements,95,bv_normalize_automata_classic,FAIL,30.12894,internal exception #5
2078,AliveStatements,95,simp,FAIL,513.538866,internal exception #5
2079,AliveStatements,95,bv_normalize,FAIL,71.224282,internal exception #5
2080,AliveStatements,95,bv_decide,FAIL,148.80692,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ >>> x✝¹ <<< x✝¹ ==
       x✝ &&& (-1#w) <<< x✝¹,
     x✝¹ <ᵤ BitVec.ofNat w w]
    Consider the following assignment:
    x✝¹ <ᵤ BitVec.ofNat w w = true
    x✝ >>> x✝¹ <<< x✝¹ == x✝ &&& (-1#w) <<< x✝¹ = false"
2081,AliveStatements,95,bv_auto,PASS,595.239801,
2082,AliveStatements,95,bv_automata_circuit_lean_prop,FAIL,23.650415,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      x✝ >>> x✝¹ <<< x✝¹'"
2083,AliveStatements,95,bv_automata_circuit_lean,FAIL,6.728715,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      x✝ >>> x✝¹ <<< x✝¹'"
2084,AliveStatements,95,bv_normalize_automata_circuit_lean,FAIL,30.1115,internal exception #5
2085,AliveStatements,95,bv_automata_circuit_cadical_prop,FAIL,22.639125,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      x✝ >>> x✝¹ <<< x✝¹'"
2086,AliveStatements,95,bv_automata_circuit_cadical,FAIL,8.439824,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      x✝ >>> x✝¹ <<< x✝¹'"
2087,AliveStatements,95,bv_normalize_automata_circuit_cadical,FAIL,81.703665,internal exception #5
2088,AliveStatements,95,bv_mba,FAIL,5.544387,"unable to reflect term '
      x✝ >>> x✝¹ <<< x✝¹'.
    Expected 'int * variable'."
2089,AliveStatements,95,bv_normalize_mba,FAIL,31.058489,internal exception #5
2090,AliveStatements,96,rfl,FAIL,11.674913,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²
    is not definitionally equal to the right-hand side
      x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝²
    case neg
    w : ℕ
    x✝³ x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬(x✝² ≥ ↑w ∨ x✝² ≥ ↑w)
    ⊢ (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝² = x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝²"
2091,AliveStatements,96,bv_bitwise,FAIL,1734.209657,internal exception #5
2092,AliveStatements,96,bv_ac,FAIL,35.190006,internal exception #5
2093,AliveStatements,96,bv_distrib,PASS,1765.564657,
2094,AliveStatements,96,bv_ring,FAIL,147.495251,internal exception #5
2095,AliveStatements,96,bv_of_bool,FAIL,23.821274,simp made no progress
2096,AliveStatements,96,bv_omega,FAIL,9.345894,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝².toNat
     c := ↑2 ^ w
     d := ↑(x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝²).toNat
     e := ↑((x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²).toNat"
2097,AliveStatements,96,bv_automata_classic_prop,FAIL,25.663422,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²'"
2098,AliveStatements,96,bv_automata_classic,FAIL,9.561104,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²'"
2099,AliveStatements,96,bv_normalize_automata_classic,FAIL,34.602347,internal exception #5
2100,AliveStatements,96,simp,FAIL,522.05682,internal exception #5
2101,AliveStatements,96,bv_normalize,FAIL,23.178654,internal exception #5
2102,AliveStatements,96,bv_decide,FAIL,168.640387,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [(x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝² ==
       x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝²,
     x✝² <ᵤ BitVec.ofNat w w]
    Consider the following assignment:
    x✝² <ᵤ BitVec.ofNat w w = true
    (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝² == x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝² = false"
2103,AliveStatements,96,bv_auto,PASS,2434.700178,
2104,AliveStatements,96,bv_automata_circuit_lean_prop,FAIL,44.30088,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²'"
2105,AliveStatements,96,bv_automata_circuit_lean,FAIL,8.434165,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²'"
2106,AliveStatements,96,bv_normalize_automata_circuit_lean,FAIL,86.167212,internal exception #5
2107,AliveStatements,96,bv_automata_circuit_cadical_prop,FAIL,25.649573,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²'"
2108,AliveStatements,96,bv_automata_circuit_cadical,FAIL,7.438775,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²'"
2109,AliveStatements,96,bv_normalize_automata_circuit_cadical,FAIL,31.543429,internal exception #5
2110,AliveStatements,96,bv_mba,FAIL,7.403185,"unable to reflect term '
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²'.
    Expected 'int * variable'."
2111,AliveStatements,96,bv_normalize_mba,FAIL,28.94184,internal exception #5
2112,AliveStatements,97,rfl,FAIL,10.363253,"tactic 'rfl' failed, the left-hand side
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹
    case neg
    w : ℕ
    x✝³ x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    ⊢ (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹ = x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹"
2113,AliveStatements,97,bv_bitwise,FAIL,1762.984098,internal exception #5
2114,AliveStatements,97,bv_ac,FAIL,50.084586,internal exception #5
2115,AliveStatements,97,bv_distrib,PASS,1830.783803,
2116,AliveStatements,97,bv_ring,FAIL,156.615125,internal exception #5
2117,AliveStatements,97,bv_of_bool,FAIL,26.223232,simp made no progress
2118,AliveStatements,97,bv_omega,FAIL,9.382494,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹).toNat
     e := ↑((x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹).toNat"
2119,AliveStatements,97,bv_automata_classic_prop,FAIL,24.705773,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹'"
2120,AliveStatements,97,bv_automata_classic,FAIL,7.058366,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹'"
2121,AliveStatements,97,bv_normalize_automata_classic,FAIL,34.692766,internal exception #5
2122,AliveStatements,97,simp,FAIL,518.730353,internal exception #5
2123,AliveStatements,97,bv_normalize,FAIL,29.09184,internal exception #5
2124,AliveStatements,97,bv_decide,FAIL,172.470125,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [~~~(~~~(x✝ >>> x✝¹ &&& x✝²) &&&
             ~~~x✝³) <<<
         x✝¹ ==
       ~~~(~~~(x✝ &&& x✝² <<< x✝¹) &&& ~~~(x✝³ <<< x✝¹)),
     x✝¹ <ᵤ BitVec.ofNat w w]
    Consider the following assignment:
    x✝¹ <ᵤ BitVec.ofNat w w = true
    ~~~(~~~(x✝ >>> x✝¹ &&& x✝²) &&& ~~~x✝³) <<< x✝¹ == ~~~(~~~(x✝ &&& x✝² <<< x✝¹) &&& ~~~(x✝³ <<< x✝¹)) = false"
2125,AliveStatements,97,bv_auto,PASS,2414.969861,
2126,AliveStatements,97,bv_automata_circuit_lean_prop,FAIL,19.403937,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹'"
2127,AliveStatements,97,bv_automata_circuit_lean,FAIL,6.063016,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹'"
2128,AliveStatements,97,bv_normalize_automata_circuit_lean,FAIL,37.917085,internal exception #5
2129,AliveStatements,97,bv_automata_circuit_cadical_prop,FAIL,27.340232,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹'"
2130,AliveStatements,97,bv_automata_circuit_cadical,FAIL,12.263371,"expected shiftLeft by natural number, found symbolic shift amount 'x✝¹' at '
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹'"
2131,AliveStatements,97,bv_normalize_automata_circuit_cadical,FAIL,33.098698,internal exception #5
2132,AliveStatements,97,bv_mba,FAIL,4.147047,"unable to reflect term '
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹'.
    Expected 'int * variable'."
2133,AliveStatements,97,bv_normalize_mba,FAIL,29.97356,internal exception #5
2134,AliveStatements,98,rfl,FAIL,6.075655,"tactic 'rfl' failed, the left-hand side
      some ((x✝ ^^^ x✝¹) >>> x✝²)
    is not definitionally equal to the right-hand side
      none
    case pos
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝¹ : ¬x✝² ≥ ↑w
    h✝ : x✝² ≥ ↑w ∨ x✝² ≥ ↑w
    ⊢ some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none"
2135,AliveStatements,98,bv_bitwise,FAIL,0.99285,"applyExtTheorem only applies to equations, not
      some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none"
2136,AliveStatements,98,bv_ac,FAIL,403.07249,internal exception #5
2137,AliveStatements,98,bv_distrib,FAIL,3668.309421,internal exception #5
2138,AliveStatements,98,bv_ring,FAIL,2400.413171,internal exception #5
2139,AliveStatements,98,bv_of_bool,FAIL,330.690818,simp made no progress
2140,AliveStatements,98,bv_omega,PASS,263.417963,
2141,AliveStatements,98,bv_automata_classic_prop,FAIL,355.052082,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none"
2142,AliveStatements,98,bv_automata_classic,FAIL,181.266259,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none"
2143,AliveStatements,98,bv_normalize_automata_classic,PASS,366.059114,
2144,AliveStatements,98,simp,FAIL,1188.463743,internal exception #5
2145,AliveStatements,98,bv_normalize,PASS,137.869078,
2146,AliveStatements,98,bv_decide,PASS,83.098754,
2147,AliveStatements,98,bv_auto,PASS,1602.564596,
2148,AliveStatements,98,bv_automata_circuit_lean_prop,FAIL,51.771785,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none"
2149,AliveStatements,98,bv_automata_circuit_lean,FAIL,28.808191,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none"
2150,AliveStatements,98,bv_normalize_automata_circuit_lean,PASS,77.928147,
2151,AliveStatements,98,bv_automata_circuit_cadical_prop,FAIL,119.61796,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none"
2152,AliveStatements,98,bv_automata_circuit_cadical,FAIL,24.691783,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none"
2153,AliveStatements,98,bv_normalize_automata_circuit_cadical,PASS,77.548489,
2154,AliveStatements,98,bv_mba,FAIL,0.7403,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none
    case pos
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝¹ : ¬x✝² ≥ ↑w
    h✝ : x✝² ≥ ↑w ∨ x✝² ≥ ↑w
    ⊢ some ((x✝ ^^^ x✝¹) >>> x✝²) ⊑ none"
2155,AliveStatements,98,bv_normalize_mba,PASS,121.541908,
2156,AliveStatements,99,rfl,FAIL,7.514165,"tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) >>> x✝²
    is not definitionally equal to the right-hand side
      x✝ >>> x✝² ^^^ x✝¹ >>> x✝²
    case neg
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝¹ : ¬x✝² ≥ ↑w
    h✝ : ¬(x✝² ≥ ↑w ∨ x✝² ≥ ↑w)
    ⊢ (x✝ ^^^ x✝¹) >>> x✝² = x✝ >>> x✝² ^^^ x✝¹ >>> x✝²"
2157,AliveStatements,99,bv_bitwise,PASS,1539.641158,
2158,AliveStatements,99,bv_ac,FAIL,34.900247,internal exception #5
2159,AliveStatements,99,bv_distrib,FAIL,480.490868,internal exception #5
2160,AliveStatements,99,bv_ring,FAIL,245.364365,internal exception #5
2161,AliveStatements,99,bv_of_bool,FAIL,30.12103,simp made no progress
2162,AliveStatements,99,bv_omega,FAIL,19.117137,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝².toNat
     c := ↑2 ^ w
     d := ↑(x✝ >>> x✝² ^^^ x✝¹ >>> x✝²).toNat
     e := ↑((x✝ ^^^ x✝¹) >>> x✝²).toNat"
2163,AliveStatements,99,bv_automata_classic_prop,FAIL,231227.568848,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                    ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                      ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                        (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 2)
                          ((Copy.Term.var 3).xor (Copy.Term.var 4))))))) =
              true)) =
        true
    is false"
2164,AliveStatements,99,bv_automata_classic,FAIL,29.01674,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                    ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                      ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                        (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 2)
                          ((Copy.Term.var 3).xor (Copy.Term.var 4))))))) =
              true)) =
        true
    is false"
2165,AliveStatements,99,bv_normalize_automata_classic,FAIL,58.085821,internal exception #5
2166,AliveStatements,99,simp,FAIL,172.704784,internal exception #5
2167,AliveStatements,99,bv_normalize,FAIL,19.625187,internal exception #5
2168,AliveStatements,99,bv_decide,FAIL,168.995287,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝² <ᵤ BitVec.ofNat w w,
     (x✝ ^^^ x✝¹) >>> x✝² == x✝ >>> x✝² ^^^ x✝¹ >>> x✝²]
    Consider the following assignment:
    x✝² <ᵤ BitVec.ofNat w w = true
    (x✝ ^^^ x✝¹) >>> x✝² == x✝ >>> x✝² ^^^ x✝¹ >>> x✝² = false"
2169,AliveStatements,99,bv_auto,PASS,288.746856,
2170,AliveStatements,99,bv_automata_circuit_lean_prop,FAIL,20.894106,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                      ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                        ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                          (Predicate.eq (Term.var 2) ((Term.var 3).xor (Term.var 4)))))).eval
                  vars w =
                false)) =
        true
    is false"
2171,AliveStatements,99,bv_automata_circuit_lean,FAIL,10.858753,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                      ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                        ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                          (Predicate.eq (Term.var 2) ((Term.var 3).xor (Term.var 4)))))).eval
                  vars w =
                false)) =
        true
    is false"
2172,AliveStatements,99,bv_normalize_automata_circuit_lean,FAIL,31.102219,internal exception #5
2173,AliveStatements,99,bv_automata_circuit_cadical_prop,FAIL,470.771864,"failed to prove goal, since decideIfZerosM established that theorem is not true."
2174,AliveStatements,99,bv_automata_circuit_cadical,FAIL,461.940491,"failed to prove goal, since decideIfZerosM established that theorem is not true."
2175,AliveStatements,99,bv_normalize_automata_circuit_cadical,FAIL,486.692043,internal exception #5
2176,AliveStatements,99,bv_mba,FAIL,3.409768,"unable to reflect term '
      (x✝ ^^^ x✝¹) >>> x✝²'.
    Expected 'int * variable'."
2177,AliveStatements,99,bv_normalize_mba,FAIL,22.719775,internal exception #5
2178,AliveStatements,100,rfl,FAIL,17.352168,"tactic 'rfl' failed, the left-hand side
      some ((x✝ + x✝¹) <<< x✝²)
    is not definitionally equal to the right-hand side
      none
    case pos
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝¹ : ¬x✝² ≥ ↑w
    h✝ : x✝² ≥ ↑w ∨ x✝² ≥ ↑w
    ⊢ some ((x✝ + x✝¹) <<< x✝²) ⊑ none"
2179,AliveStatements,100,bv_bitwise,FAIL,0.23637,"applyExtTheorem only applies to equations, not
      some ((x✝ + x✝¹) <<< x✝²) ⊑ none"
2180,AliveStatements,100,bv_ac,FAIL,287.625867,internal exception #5
2181,AliveStatements,100,bv_distrib,FAIL,6002.994267,internal exception #5
2182,AliveStatements,100,bv_ring,FAIL,1554.439618,internal exception #5
2183,AliveStatements,100,bv_of_bool,FAIL,148.08901,simp made no progress
2184,AliveStatements,100,bv_omega,PASS,142.650795,
2185,AliveStatements,100,bv_automata_classic_prop,FAIL,71.901101,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ + x✝¹) <<< x✝²) ⊑ none"
2186,AliveStatements,100,bv_automata_classic,FAIL,79.970477,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ + x✝¹) <<< x✝²) ⊑ none"
2187,AliveStatements,100,bv_normalize_automata_classic,PASS,126.789545,
2188,AliveStatements,100,simp,FAIL,1547.003573,internal exception #5
2189,AliveStatements,100,bv_normalize,PASS,55.191793,
2190,AliveStatements,100,bv_decide,PASS,93.420177,
2191,AliveStatements,100,bv_auto,PASS,2137.925217,
2192,AliveStatements,100,bv_automata_circuit_lean_prop,FAIL,220.282963,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ + x✝¹) <<< x✝²) ⊑ none"
2193,AliveStatements,100,bv_automata_circuit_lean,FAIL,14.30074,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ + x✝¹) <<< x✝²) ⊑ none"
2194,AliveStatements,100,bv_normalize_automata_circuit_lean,PASS,86.871202,
2195,AliveStatements,100,bv_automata_circuit_cadical_prop,FAIL,28.255441,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ + x✝¹) <<< x✝²) ⊑ none"
2196,AliveStatements,100,bv_automata_circuit_cadical,FAIL,11.888672,"expected predicate over bitvectors (no quantification), found:  
      some ((x✝ + x✝¹) <<< x✝²) ⊑ none"
2197,AliveStatements,100,bv_normalize_automata_circuit_cadical,PASS,35.411616,
2198,AliveStatements,100,bv_mba,FAIL,0.22533,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some ((x✝ + x✝¹) <<< x✝²) ⊑ none
    case pos
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝¹ : ¬x✝² ≥ ↑w
    h✝ : x✝² ≥ ↑w ∨ x✝² ≥ ↑w
    ⊢ some ((x✝ + x✝¹) <<< x✝²) ⊑ none"
2199,AliveStatements,100,bv_normalize_mba,PASS,33.984407,
2200,AliveStatements,101,rfl,FAIL,6.388256,"tactic 'rfl' failed, the left-hand side
      (x✝ + x✝¹) <<< x✝²
    is not definitionally equal to the right-hand side
      x✝ <<< x✝² + x✝¹ <<< x✝²
    case neg
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝¹ : ¬x✝² ≥ ↑w
    h✝ : ¬(x✝² ≥ ↑w ∨ x✝² ≥ ↑w)
    ⊢ (x✝ + x✝¹) <<< x✝² = x✝ <<< x✝² + x✝¹ <<< x✝²"
2201,AliveStatements,101,bv_bitwise,PASS,634.177125,
2202,AliveStatements,101,bv_ac,FAIL,22.052775,internal exception #5
2203,AliveStatements,101,bv_distrib,PASS,582.39005,
2204,AliveStatements,101,bv_ring,FAIL,237.008221,internal exception #5
2205,AliveStatements,101,bv_of_bool,FAIL,20.925696,simp made no progress
2206,AliveStatements,101,bv_omega,FAIL,12.015892,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝².toNat
     c := ↑2 ^ w
     d := ↑((x✝ <<< x✝²).toNat + (x✝¹ <<< x✝²).toNat) % ↑(2 ^ w)
     e := ↑((x✝ + x✝¹) <<< x✝²).toNat"
2207,AliveStatements,101,bv_automata_classic_prop,FAIL,18.254447,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ + x✝¹) <<< x✝²'"
2208,AliveStatements,101,bv_automata_classic,FAIL,5.937466,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ + x✝¹) <<< x✝²'"
2209,AliveStatements,101,bv_normalize_automata_classic,FAIL,32.796548,internal exception #5
2210,AliveStatements,101,simp,PASS,666.009514,
2211,AliveStatements,101,bv_normalize,FAIL,26.138373,internal exception #5
2212,AliveStatements,101,bv_decide,FAIL,172.987884,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝² <ᵤ BitVec.ofNat w w,
     (x✝ + x✝¹) <<< x✝² == x✝ <<< x✝² + x✝¹ <<< x✝²]
    Consider the following assignment:
    x✝² <ᵤ BitVec.ofNat w w = true
    (x✝ + x✝¹) <<< x✝² == x✝ <<< x✝² + x✝¹ <<< x✝² = false"
2213,AliveStatements,101,bv_auto,PASS,520.606701,
2214,AliveStatements,101,bv_automata_circuit_lean_prop,FAIL,18.620128,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ + x✝¹) <<< x✝²'"
2215,AliveStatements,101,bv_automata_circuit_lean,FAIL,6.671845,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ + x✝¹) <<< x✝²'"
2216,AliveStatements,101,bv_normalize_automata_circuit_lean,FAIL,33.914408,internal exception #5
2217,AliveStatements,101,bv_automata_circuit_cadical_prop,FAIL,68.861653,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ + x✝¹) <<< x✝²'"
2218,AliveStatements,101,bv_automata_circuit_cadical,FAIL,8.425925,"expected shiftLeft by natural number, found symbolic shift amount 'x✝²' at '
      (x✝ + x✝¹) <<< x✝²'"
2219,AliveStatements,101,bv_normalize_automata_circuit_cadical,FAIL,44.20458,internal exception #5
2220,AliveStatements,101,bv_mba,FAIL,4.163157,"unable to reflect term '
      (x✝ + x✝¹) <<< x✝²'.
    Expected 'int * variable'."
2221,AliveStatements,101,bv_normalize_mba,FAIL,36.963196,internal exception #5
2222,AliveStatements,102,rfl,FAIL,27.646142,"tactic 'rfl' failed, the left-hand side
      some (x✝ <<< x✝¹ >>> x✝¹)
    is not definitionally equal to the right-hand side
      none
    case pos
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝¹ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    h✝ : x✝¹ ≥ ↑w
    ⊢ some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2223,AliveStatements,102,bv_bitwise,FAIL,3.246617,"applyExtTheorem only applies to equations, not
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2224,AliveStatements,102,bv_ac,FAIL,573.358096,internal exception #5
2225,AliveStatements,102,bv_distrib,FAIL,5776.876148,internal exception #5
2226,AliveStatements,102,bv_ring,FAIL,2055.761902,internal exception #5
2227,AliveStatements,102,bv_of_bool,FAIL,435.487318,simp made no progress
2228,AliveStatements,102,bv_omega,PASS,298.80375,
2229,AliveStatements,102,bv_automata_classic_prop,FAIL,462.203511,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2230,AliveStatements,102,bv_automata_classic,FAIL,238.71061,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2231,AliveStatements,102,bv_normalize_automata_classic,PASS,612.440969,
2232,AliveStatements,102,simp,FAIL,2996.086482,internal exception #5
2233,AliveStatements,102,bv_normalize,PASS,242.309007,
2234,AliveStatements,102,bv_decide,PASS,259.197866,
2235,AliveStatements,102,bv_auto,PASS,2207.86954,
2236,AliveStatements,102,bv_automata_circuit_lean_prop,FAIL,52.444955,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2237,AliveStatements,102,bv_automata_circuit_lean,FAIL,31.602769,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2238,AliveStatements,102,bv_normalize_automata_circuit_lean,PASS,150.682379,
2239,AliveStatements,102,bv_automata_circuit_cadical_prop,FAIL,93.049667,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2240,AliveStatements,102,bv_automata_circuit_cadical,FAIL,49.688087,"expected predicate over bitvectors (no quantification), found:  
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2241,AliveStatements,102,bv_normalize_automata_circuit_cadical,PASS,139.095887,
2242,AliveStatements,102,bv_mba,FAIL,0.81295,"tactic 'apply' failed, failed to unify
      ?x = ?y
    with
      some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none
    case pos
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝¹ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    h✝ : x✝¹ ≥ ↑w
    ⊢ some (x✝ <<< x✝¹ >>> x✝¹) ⊑ none"
2243,AliveStatements,102,bv_normalize_mba,PASS,106.361189,
2244,AliveStatements,103,rfl,FAIL,8.889684,"tactic 'rfl' failed, the left-hand side
      x✝ <<< x✝¹ >>> x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (-1#w) >>> x✝¹
    case neg
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝¹ : ¬(x✝¹ ≥ ↑w ∨ x✝¹ ≥ ↑w)
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ x✝ <<< x✝¹ >>> x✝¹ = x✝ &&& (-1#w) >>> x✝¹"
2245,AliveStatements,103,bv_bitwise,PASS,235711.822141,
2246,AliveStatements,103,bv_ac,FAIL,21.515646,internal exception #5
2247,AliveStatements,103,bv_distrib,FAIL,210.687158,internal exception #5
2248,AliveStatements,103,bv_ring,FAIL,124.925677,internal exception #5
2249,AliveStatements,103,bv_of_bool,FAIL,17.270838,simp made no progress
2250,AliveStatements,103,bv_omega,FAIL,8.455244,"omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝ &&& (-1#w) >>> x✝¹).toNat
     e := ↑(x✝ <<< x✝¹ >>> x✝¹).toNat"
2251,AliveStatements,103,bv_automata_classic_prop,FAIL,27.659152,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                    ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                      ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                        (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 2)
                          ((Copy.Term.var 3).and (Copy.Term.var 4))))))) =
              true)) =
        true
    is false"
2252,AliveStatements,103,bv_automata_classic,FAIL,18.017118,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (formulaIsUniversal
                (AutoStructs.formula_of_predicate
                  ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                    ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                      ((Copy.Predicate.binary Copy.BinaryPredicate.ule (Copy.Term.var 0) (Copy.Term.var 1)).lor
                        (Copy.Predicate.binary Copy.BinaryPredicate.eq (Copy.Term.var 2)
                          ((Copy.Term.var 3).and (Copy.Term.var 4))))))) =
              true)) =
        true
    is false"
2253,AliveStatements,103,bv_normalize_automata_classic,FAIL,38.467884,internal exception #5
2254,AliveStatements,103,simp,FAIL,192.295111,internal exception #5
2255,AliveStatements,103,bv_normalize,FAIL,20.625426,internal exception #5
2256,AliveStatements,103,bv_decide,FAIL,170.241856,"The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [x✝ <<< x✝¹ >>> x✝¹ ==
       x✝ &&& (-1#w) >>> x✝¹,
     x✝¹ <ᵤ BitVec.ofNat w w]
    Consider the following assignment:
    x✝¹ <ᵤ BitVec.ofNat w w = true
    x✝ <<< x✝¹ >>> x✝¹ == x✝ &&& (-1#w) >>> x✝¹ = false"
2257,AliveStatements,103,bv_auto,PASS,557.637436,
2258,AliveStatements,103,bv_automata_circuit_lean_prop,FAIL,23.170584,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                      ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                        ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                          (Predicate.eq (Term.var 2) ((Term.var 3).and (Term.var 4)))))).eval
                  vars w =
                false)) =
        true
    is false"
2259,AliveStatements,103,bv_automata_circuit_lean,FAIL,11.458862,"tactic 'bv_automata_circuit' evaluated that the proposition
      Lean.reduceBool
          (decide
            (∀ (w : ℕ) (vars : List BitStream),
              ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                      ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                        ((Predicate.ule (Term.var 0) (Term.var 1)).lor
                          (Predicate.eq (Term.var 2) ((Term.var 3).and (Term.var 4)))))).eval
                  vars w =
                false)) =
        true
    is false"
2260,AliveStatements,103,bv_normalize_automata_circuit_lean,FAIL,31.34364,internal exception #5
2261,AliveStatements,103,bv_automata_circuit_cadical_prop,FAIL,472.156613,"failed to prove goal, since decideIfZerosM established that theorem is not true."
2262,AliveStatements,103,bv_automata_circuit_cadical,FAIL,465.675088,"failed to prove goal, since decideIfZerosM established that theorem is not true."
2263,AliveStatements,103,bv_normalize_automata_circuit_cadical,FAIL,485.595674,internal exception #5
2264,AliveStatements,103,bv_mba,FAIL,5.289087,"unable to reflect term '
      x✝ <<< x✝¹ >>> x✝¹'.
    Expected 'int * variable'."
2265,AliveStatements,103,bv_normalize_mba,FAIL,25.625423,internal exception #5
