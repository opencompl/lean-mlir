⚠ [880/2570] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [883/2570] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [899/2570] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:30:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:32:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:37:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:39:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:53:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:2: Apply builder was used for a theorem with conclusion A ↔ B.
You probably want to use the simp builder or create an alias that applies the theorem in one direction.
Use `set_option aesop.warn.applyIff false` to disable this warning.
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:57:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:60:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:71:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:70:2: Apply builder was used for a theorem with conclusion A ↔ B.
You probably want to use the simp builder or create an alias that applies the theorem in one direction.
Use `set_option aesop.warn.applyIff false` to disable this warning.
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:76:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:80:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:85:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:99:37: declaration uses 'sorry'
⚠ [905/2570] Replayed SSA.Experimental.Bits.AutoStructs.Basic
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:461:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:1070:4: declaration uses 'sorry'
⚠ [2562/2570] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:28:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:30:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:41:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:53:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:79:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:166:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:183:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:210:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:262:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:274:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:302:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:305:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:318:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:321:4: declaration uses 'sorry'
⚠ [2564/2570] Replayed SSA.Experimental.Bits.AutoStructs.FormulaToAuto
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:381:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:409:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:446:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:551:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:659:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:702:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:750:6: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 115.607719 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.401720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 63.812050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 109.202709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.714670 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.587150 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(~~~x ||| ~~~y).toNat
     b := ↑2 ^ w
     c := ↑(x &&& y).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 83.393910 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 54.069770 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 9.776470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 68.065230 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (~~~(x &&& y) == ~~~x ||| ~~~y)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x &&& y) == ~~~x ||| ~~~y) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 281.645818 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 113.600539 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.023510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 63.910150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 108.534649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.763590 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.434540 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(~~~x &&& ~~~y).toNat
     b := ↑2 ^ w
     c := ↑(x ||| y).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 82.579600 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 53.909860 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.419080 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 68.440120 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (~~~(x ||| y) == ~~~x &&& ~~~y)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x ||| y) == ~~~x &&& ~~~y) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 279.861158 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 206.390578 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.668500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 100.334550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 147.038899 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.449270 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.235200 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(2 ^ w - 1 - x.toNat + (2 ^ w - 1 % 2 ^ w)) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(x.toNat + 1 % 2 ^ w) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 122.421360 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 92.837009 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize PASS, TIME_ELAPSED 6.144640 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.865680 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 886.126927 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 206.780490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.646350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 102.538499 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 148.651050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.774940 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.363270 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(2 ^ w - 1 - x.toNat + 1 % 2 ^ w) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(x.toNat + (2 ^ w - 1 % 2 ^ w)) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 122.897169 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 95.207200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 13.520110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.628941 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (~~~(x + -1#w) == ~~~x + 1#w)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x + -1#w) == ~~~x + 1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 765.416725 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 188.791120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 10.241100 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 74.264129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 160.188230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.292240 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.681220 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(x.toNat + (2 ^ w - 1 % 2 ^ w)) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(2 ^ w - x.toNat) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 97.997489 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 70.586240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.703270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 68.881099 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (~~~(-x) == x + -1#w)]
    Consider the following assignment:
    BitVec.ofBool (~~~(-x) == x + -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 695.018658 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 103.878120 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.167780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 54.451620 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 104.151719 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.969040 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.107150 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(~~~x ^^^ y).toNat
     b := ↑2 ^ w
     c := ↑(x ^^^ y).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 72.537190 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 46.357620 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 8.745540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 67.039849 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (~~~(x ^^^ y) == ~~~x ^^^ y)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x ^^^ y) == ~~~x ^^^ y) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 257.362879 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 103.315990 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.928580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 53.872390 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 102.810599 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.755060 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.061900 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(~~~x ^^^ y).toNat
     b := ↑2 ^ w
     c := ↑(x ^^^ y).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 71.862660 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 45.894320 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 8.684410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 66.925248 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (~~~(x ^^^ y) == ~~~x ^^^ y)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x ^^^ y) == ~~~x ^^^ y) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 256.833140 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 156.711108 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.080221 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 53.701150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.549039 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.525120 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.395000 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(2 ^ w - 1 - x.toNat + (2 ^ w - y.toNat)) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(x.toNat + y.toNat) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 77.135740 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 47.594919 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.510110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 69.827749 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (~~~(x + y) == ~~~x + -y)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x + y) == ~~~x + -y) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 796.147698 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 157.716139 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.160040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 54.588040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 154.410839 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.499540 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.467380 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(2 ^ w - 1 - x.toNat + y.toNat) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(x.toNat + (2 ^ w - y.toNat)) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 78.012490 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 48.684170 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.619650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 69.911079 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (~~~(x + -y) == ~~~x + y)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x + -y) == ~~~x + y) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 677.963418 ms, 
TACEND
