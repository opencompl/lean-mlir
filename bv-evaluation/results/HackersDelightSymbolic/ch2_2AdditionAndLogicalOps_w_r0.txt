⚠ [881/899] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [884/899] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [885/899] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [891/899] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [892/899] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 85.362375 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.677084 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.556542 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 80.385459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 8.154250 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.789833 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(2 ^ w - 1 - x.toNat + 1 % 2 ^ w) % ↑(2 ^ w)
     b := ↑(2 ^ w - x.toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 32.092458 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 67.437209 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (-x == ~~~x + 1#w)]
    Consider the following assignment:
    BitVec.ofBool (-x == ~~~x + 1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 305.468083 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 86.993375 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 6.930459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.448917 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 86.266541 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 8.184542 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.978417 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≤ -2
    where
     a := ↑(2 ^ w - x.toNat) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(x.toNat + (2 ^ w - 1 % 2 ^ w)) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 29.895167 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 67.217750 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (-x == ~~~(x + -1#w))]
    Consider the following assignment:
    BitVec.ofBool (-x == ~~~(x + -1#w)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 318.289667 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 89.134666 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 7.791042 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.131291 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 78.985625 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 8.238042 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.783750 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑((2 ^ w - x.toNat) % 2 ^ w + (2 ^ w - 1 % 2 ^ w)) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑x.toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 28.977708 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 66.556125 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (~~~x == -x + -1#w)]
    Consider the following assignment:
    BitVec.ofBool (~~~x == -x + -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 305.543792 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 83.214542 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.062791 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.832875 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 82.936334 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 8.334750 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.250959 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x.toNat + 1 % 2 ^ w) % ↑(2 ^ w)
     b := ↑(2 ^ w - (2 ^ w - 1 - x.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 30.458750 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 66.613875 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (-~~~x == x + 1#w)]
    Consider the following assignment:
    BitVec.ofBool (-~~~x == x + 1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 311.993000 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 88.567125 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 6.899459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.660292 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 85.752709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 8.553584 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.158875 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(x.toNat + (2 ^ w - 1 % 2 ^ w)) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(2 ^ w - x.toNat) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 30.340959 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 68.066042 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (~~~(-x) == x + -1#w)]
    Consider the following assignment:
    BitVec.ofBool (~~~(-x) == x + -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 321.735625 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 89.798292 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 11.778500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.819167 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 88.746459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 9.867459 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.179292 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x.toNat + (2 ^ w - (2 ^ w - 1 - y.toNat))) % 2 ^ w + (2 ^ w - 1 % 2 ^ w)) % ↑(2 ^ w)
     b := ↑(x.toNat + y.toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 53.730084 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.013000 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x + y == x + -~~~y + -1#w)]
    Consider the following assignment:
    BitVec.ofBool (x + y == x + -~~~y + -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 402.298041 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 87.563500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.037958 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.738250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 81.446625 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.060750 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.334375 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x ^^^ y).toNat + 2 % 2 ^ w * (x &&& y).toNat % 2 ^ w) % ↑(2 ^ w)
     b := ↑(x.toNat + y.toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 55.604750 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1))
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).add (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 65.870666 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x + y == (x ^^^ y) + 2#w * (x &&& y))]
    Consider the following assignment:
    BitVec.ofBool (x + y == (x ^^^ y) + 2#w * (x &&& y)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 375.917500 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 83.851458 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.699042 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.258042 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 77.227708 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 9.411375 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.975458 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x ||| y).toNat + (x &&& y).toNat) % ↑(2 ^ w)
     b := ↑(x.toNat + y.toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 42.859209 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 68.559708 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x + y == (x ||| y) + (x &&& y))]
    Consider the following assignment:
    BitVec.ofBool (x + y == (x ||| y) + (x &&& y)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 329.306500 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 91.100084 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.163542 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 29.960250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 93.101000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.882208 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.105709 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(2 % 2 ^ w * (x ||| y).toNat % 2 ^ w + (2 ^ w - (x ^^^ y).toNat)) % ↑(2 ^ w)
     b := ↑(x.toNat + y.toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.302084 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1))
            ((AutoStructs.Term.var 2).sub ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.666625 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x + y == 2#w * (x ||| y) + -(x ^^^ y))]
    Consider the following assignment:
    BitVec.ofBool (x + y == 2#w * (x ||| y) + -(x ^^^ y)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 410.251959 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 89.664500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.362375 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.435500 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 90.970959 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 9.121875 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.390667 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x.toNat + (2 ^ w - 1 - y.toNat)) % 2 ^ w + 1 % 2 ^ w) % ↑(2 ^ w)
     b := ↑(x.toNat + (2 ^ w - y.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 40.436875 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.660250 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x + -y == x + ~~~y + 1#w)]
    Consider the following assignment:
    BitVec.ofBool (x + -y == x + ~~~y + 1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 347.176208 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 90.586708 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.771625 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.129666 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 103.472875 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.317916 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.087375 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x ^^^ y).toNat + (2 ^ w - 2 % 2 ^ w * (~~~x &&& y).toNat % 2 ^ w)) % ↑(2 ^ w)
     b := ↑(x.toNat + (2 ^ w - y.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 44.360709 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).sub (AutoStructs.Term.var 1))
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).sub (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.531500 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x + -y == (x ^^^ y) + -(2#w * (~~~x &&& y)))]
    Consider the following assignment:
    BitVec.ofBool (x + -y == (x ^^^ y) + -(2#w * (~~~x &&& y))) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 397.388125 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 87.331291 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.404500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.884250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 96.449625 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 9.246917 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.881542 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x &&& ~~~y).toNat + (2 ^ w - (~~~x &&& y).toNat)) % ↑(2 ^ w)
     b := ↑(x.toNat + (2 ^ w - y.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 36.389875 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.194291 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x + -y == (x &&& ~~~y) + -(~~~x &&& y))]
    Consider the following assignment:
    BitVec.ofBool (x + -y == (x &&& ~~~y) + -(~~~x &&& y)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 334.413917 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 90.111791 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.935500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.555792 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 104.486250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.345750 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.911208 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(2 % 2 ^ w * (x &&& ~~~y).toNat % 2 ^ w + (2 ^ w - (x ^^^ y).toNat)) % ↑(2 ^ w)
     b := ↑(x.toNat + (2 ^ w - y.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.035750 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).sub (AutoStructs.Term.var 1))
            ((AutoStructs.Term.var 2).sub ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.173166 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x + -y == 2#w * (x &&& ~~~y) + -(x ^^^ y))]
    Consider the following assignment:
    BitVec.ofBool (x + -y == 2#w * (x &&& ~~~y) + -(x ^^^ y)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 409.045500 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 93.419917 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.420500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.828542 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 85.087167 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 9.943334 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.646458 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x ||| y).toNat + (2 ^ w - (x &&& y).toNat)) % ↑(2 ^ w)
     b := ↑(x ^^^ y).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 31.136542 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 68.966084 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x ^^^ y == (x ||| y) + -(x &&& y))]
    Consider the following assignment:
    BitVec.ofBool (x ^^^ y == (x ||| y) + -(x &&& y)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 314.180250 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 93.285875 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 11.761750 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.654833 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 84.119500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 9.680833 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.499375 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x ||| y).toNat + (2 ^ w - y.toNat)) % ↑(2 ^ w)
     b := ↑(x &&& ~~~y).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 30.789292 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 69.180333 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x &&& ~~~y == (x ||| y) + -y)]
    Consider the following assignment:
    BitVec.ofBool (x &&& ~~~y == (x ||| y) + -y) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 317.230750 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 93.509083 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 10.599417 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.248083 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 78.454750 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 8.715417 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.178042 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x.toNat + (2 ^ w - (x &&& y).toNat)) % ↑(2 ^ w)
     b := ↑(x &&& ~~~y).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 30.113375 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 69.003041 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x &&& ~~~y == x + -(x &&& y))]
    Consider the following assignment:
    BitVec.ofBool (x &&& ~~~y == x + -(x &&& y)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 299.079208 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 94.381041 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 7.883833 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.197208 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 99.552041 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 8.646708 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.533875 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑((y.toNat + (2 ^ w - x.toNat)) % 2 ^ w + (2 ^ w - 1 % 2 ^ w)) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(x.toNat + (2 ^ w - y.toNat)) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 39.524334 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 69.534125 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (~~~(x + -y) == y + -x + -1#w)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x + -y) == y + -x + -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 389.333542 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 88.162625 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 9.206125 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.797208 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 86.487250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 8.880417 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.974125 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(2 ^ w - 1 - x.toNat + y.toNat) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(x.toNat + (2 ^ w - y.toNat)) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 33.822625 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 68.683833 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (~~~(x + -y) == ~~~x + y)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x + -y) == ~~~x + y) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 320.824375 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 98.298459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.180000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.457542 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 87.644042 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.326916 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.783500 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑(((x &&& y).toNat + (2 ^ w - (x ||| y).toNat)) % 2 ^ w + (2 ^ w - 1 % 2 ^ w)) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(x ^^^ y).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 41.524750 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.231500 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (~~~(x ^^^ y) == (x &&& y) + -(x ||| y) + -1#w)]
    Consider the following assignment:
    BitVec.ofBool (~~~(x ^^^ y) == (x &&& y) + -(x ||| y) + -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 392.915750 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 95.986083 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.410292 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.091125 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 73.662750 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.022125 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.259292 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      b - c ≥ 1
      a ≥ 0
      a - b ≤ -1
      a - b + c ≥ 0
    where
     a := ↑((x &&& y).toNat + (2 ^ w - 1 - (x ||| y).toNat)) % ↑(2 ^ w)
     b := ↑2 ^ w
     c := ↑(x ^^^ y).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 34.327083 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 69.321292 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (~~~(x ^^^ y) == (x &&& y) + ~~~(x ||| y))]
    Consider the following assignment:
    BitVec.ofBool (~~~(x ^^^ y) == (x &&& y) + ~~~(x ||| y)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 311.575833 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 89.044708 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.037417 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.551875 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 72.761417 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 9.511334 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.039709 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x &&& ~~~y).toNat + y.toNat) % ↑(2 ^ w)
     b := ↑(x ||| y).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 32.552958 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 67.317833 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x ||| y == (x &&& ~~~y) + y)]
    Consider the following assignment:
    BitVec.ofBool (x ||| y == (x &&& ~~~y) + y) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 289.951709 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 88.353458 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.126833 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.921709 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 81.071208 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 9.458084 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.713584 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((~~~x ||| y).toNat + (2 ^ w - (2 ^ w - 1 - x.toNat))) % ↑(2 ^ w)
     b := ↑(x &&& y).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 31.209291 ms, 
  TACBENCH bv_decide FAIL, TIME_ELAPSED 68.771250 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x &&& y == (~~~x ||| y) + -~~~x)]
    Consider the following assignment:
    BitVec.ofBool (x &&& y == (~~~x ||| y) + -~~~x) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 312.781209 ms, 
TACEND
