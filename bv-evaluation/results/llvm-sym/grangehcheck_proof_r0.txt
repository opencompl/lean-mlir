⚠ [880/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [883/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [884/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [890/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [891/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 154.683719 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 48.772340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 25.880880 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 176.509050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 189.522558 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.795310 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ &&& 2147483647#32 >ᵤ x✝)).toNat
     b := ↑(ofBool (x✝ ≥ₛ 0#32) &&& ofBool (x✝¹ &&& 2147483647#32 >ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.648790 ms, MSGSTART 
    Equality ((x✝ ≥ₛ 0#32) && x✝¹ &&& 2147483647#32 >ₛ x✝) = (x✝¹ &&& 2147483647#32 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 150.688120 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 828.794258 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 1.122270 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some 0#1 ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.521520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.640180 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.411339 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.127470 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.285850 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 19.748230 ms, MSGSTART 
    Unsupported syntax some 0#1 ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 139.885580 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 429.415578 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 200.101900 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 119.275479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.588100 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 241.673769 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 64.882960 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 16.843380 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 49.579470 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬((((AutoStructs.Term.var 1).evalNat fun n =>
                if n = 2 then 2147483647#32 else if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 32) &&&
              (AutoStructs.Term.var 2).evalNat fun n =>
                if n = 2 then 2147483647#32 else if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n =>
              if n = 2 then 2147483647#32 else if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝¹ &&& 2147483647#32 >ₛ x✝) = false
    x✝¹ x✝ : BitVec 32
    c✝¹ : BitVec 1
    heq✝¹ : ofBool (x✝ ≥ₛ 0#32) = 1#1
    c✝ : BitVec 1
    heq✝ : ofBool (x✝ >ₛ -1#32) = 0#1
    ⊢ ¬((((AutoStructs.Term.var 1).evalNat fun n =>
                  if n = 2 then 2147483647#32 else if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 32) &&&
                (AutoStructs.Term.var 2).evalNat fun n =>
                  if n = 2 then 2147483647#32 else if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n =>
                if n = 2 then 2147483647#32 else if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝¹ &&& 2147483647#32 >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 191.002409 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 595.692688 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 228.421510 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 59.622840 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.290890 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.099749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 41.094270 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.048210 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.155450 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 133.434569 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 303.799879 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 126.592259 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.256730 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.160920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 174.956859 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 109.374880 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.389250 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ &&& 2147483647#32 ≥ᵤ x✝)).toNat
     b := ↑(ofBool (x✝ >ₛ -1#32) &&& ofBool (x✝¹ &&& 2147483647#32 ≥ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.638680 ms, MSGSTART 
    Equality ((x✝ >ₛ 4294967295#32) && x✝¹ &&& 2147483647#32 ≥ₛ x✝) =
      (x✝¹ &&& 2147483647#32 ≥ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 110.402770 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 732.614807 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.012209 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 36.653400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.317650 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.997269 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 108.802100 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.280190 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ &&& 2147483647#32 >ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ &&& 2147483647#32 >ₛ x✝¹) &&& ofBool (x✝¹ ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.853940 ms, MSGSTART 
    Equality ((x✝ &&& 2147483647#32 >ₛ x✝¹) && x✝¹ ≥ₛ 0#32) = (x✝ &&& 2147483647#32 >ᵤ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 111.176839 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 515.860588 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 138.228929 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.615400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.277060 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.634719 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 64.458800 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.596190 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ &&& 2147483647#32 >ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝¹ ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.857780 ms, MSGSTART 
    Equality (x✝¹ ≥ₛ 0#32) = (x✝ &&& 2147483647#32 >ᵤ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 118.859699 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 422.822339 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 140.213820 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.433649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.163930 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 128.903850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 18.010350 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.395910 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.230290 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.405909 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 270.400699 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 122.821940 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.300610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.821230 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 137.921339 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 105.589210 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.206190 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ &&& 2147483647#32 ≥ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ &&& 2147483647#32 ≥ₛ x✝¹) &&& ofBool (x✝¹ ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.400599 ms, MSGSTART 
    Equality ((x✝ &&& 2147483647#32 ≥ₛ x✝¹) && x✝¹ ≥ₛ 0#32) = (x✝ &&& 2147483647#32 ≥ᵤ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 111.352870 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 498.251398 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 139.976240 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.208999 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.304990 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.600440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 66.730220 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.726080 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ &&& 2147483647#32 ≥ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝¹ ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.318660 ms, MSGSTART 
    Equality (x✝¹ ≥ₛ 0#32) = (x✝ &&& 2147483647#32 ≥ᵤ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 119.602649 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 368.084449 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.521590 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.117580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.627809 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 128.222430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.684930 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.267240 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.203870 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.071099 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 256.042009 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 126.985639 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.592160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.464540 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.355879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 107.068760 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.463000 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ ≥ᵤ x✝¹ &&& 2147483647#32)).toNat
     b := ↑(ofBool (0#32 >ₛ x✝) ||| ofBool (x✝ ≥ₛ x✝¹ &&& 2147483647#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.396170 ms, MSGSTART 
    Equality ((0#32 >ₛ x✝) || x✝ ≥ₛ x✝¹ &&& 2147483647#32) = (x✝ ≥ᵤ x✝¹ &&& 2147483647#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 110.519389 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 576.637888 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.912560 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.656909 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.994120 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 164.870480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 103.956649 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.550330 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ᵤ x✝¹ &&& 2147483647#32)).toNat
     b := ↑(ofBool (-1#32 ≥ₛ x✝) ||| ofBool (x✝ >ₛ x✝¹ &&& 2147483647#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.580820 ms, MSGSTART 
    Equality ((4294967295#32 ≥ₛ x✝) || x✝ >ₛ x✝¹ &&& 2147483647#32) =
      (x✝ >ᵤ x✝¹ &&& 2147483647#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 107.040250 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1204.464875 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.662970 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some 1#1 ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 10.007240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.074130 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 72.939210 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 9.368200 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.693999 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 10.989070 ms, MSGSTART 
    Unsupported syntax some 1#1 ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 252.422419 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 337.193429 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 187.827849 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.754330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.467160 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.096039 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 36.878500 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.777160 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.067040 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 124.274859 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 365.963809 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 183.231729 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 72.541950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.275950 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.396139 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 36.744300 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.068260 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 41.520830 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.lt)
            ((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)) (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 226.095289 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 518.393798 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 192.193340 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.299309 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.188680 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.552950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 100.076189 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.321460 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ᵤ x✝ &&& 2147483647#32)).toNat
     b := ↑(ofBool (x✝¹ ≥ₛ x✝ &&& 2147483647#32) ||| ofBool (0#32 >ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.265420 ms, MSGSTART 
    Equality ((x✝¹ ≥ₛ x✝ &&& 2147483647#32) || 0#32 >ₛ x✝¹) = (x✝¹ ≥ᵤ x✝ &&& 2147483647#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 108.617320 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 595.938767 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 219.688389 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.688610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.349250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.750500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.572050 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.725230 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.687129 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.491970 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 301.003069 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 139.294189 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 42.318050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.370600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.094969 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 64.709050 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.575170 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ᵤ x✝ &&& 2147483647#32)).toNat
     b := ↑(ofBool (0#32 >ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.796640 ms, MSGSTART 
    Equality (0#32 >ₛ x✝¹) = (x✝¹ ≥ᵤ x✝ &&& 2147483647#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.440180 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 364.483039 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.909579 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.944500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.700740 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 128.576570 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 99.619489 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.236930 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ᵤ x✝ &&& 2147483647#32)).toNat
     b := ↑(ofBool (x✝¹ >ₛ x✝ &&& 2147483647#32) ||| ofBool (0#32 >ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.231950 ms, MSGSTART 
    Equality ((x✝¹ >ₛ x✝ &&& 2147483647#32) || 0#32 >ₛ x✝¹) = (x✝¹ >ᵤ x✝ &&& 2147483647#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.450400 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 584.700277 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 157.481660 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.067670 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.698790 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.133550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.229460 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.663580 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.117080 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.269939 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 288.913229 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 172.627239 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 46.691420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.293510 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.153299 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 64.483410 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.527560 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ᵤ x✝ &&& 2147483647#32)).toNat
     b := ↑(ofBool (0#32 >ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.066320 ms, MSGSTART 
    Equality (0#32 >ₛ x✝¹) = (x✝¹ >ᵤ x✝ &&& 2147483647#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 165.492989 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 470.447468 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 78.294420 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 66.125859 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.465380 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.809480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 96.057539 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.670330 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ &&& 2147483647#32 >ₛ x✝) &&& ofBool (x✝ >ₛ 0#32)).toNat
     b := ↑(ofBool (x✝ >ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.403810 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ 0#32) = true → (x✝¹ &&& 2147483647#32 >ₛ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1447)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 32)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.ofNat [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 32)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 0)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 738772))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 32)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 738772)))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `HAnd.hAnd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `instHAndOfAndOp [Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.instAndOp [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 738771)))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.ofNat [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 32)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 2147483647)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 2147483647))))))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 122.361420 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 310.189188 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 80.447770 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.216690 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.642620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.156369 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 102.838640 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.420610 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 28.844730 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 221.383729 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 211.527969 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 277.031039 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 65.584520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 29.360600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.528529 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 132.392580 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.199860 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ₛ x✝) &&& ofBool (x✝ >ₛ -1#32)).toNat
     b := ↑(ofBool (x✝¹ >ₛ x✝) &&& ofBool (x✝ ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.140230 ms, MSGSTART 
    Equality ((x✝¹ >ₛ x✝) && x✝ ≥ₛ 0#32) = ((x✝¹ >ₛ x✝) && x✝ >ₛ 4294967295#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 113.512149 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 457.456288 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 148.850760 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 51.997950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.767920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 158.771249 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 126.459449 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.509250 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ₛ x✝) &&& ofBool (x✝ >ₛ -1#32)).toNat
     b := ↑(ofBool (x✝ ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.932610 ms, MSGSTART 
    Equality (x✝ ≥ₛ 0#32) = ((x✝¹ >ₛ x✝) && x✝ >ₛ 4294967295#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 228.927059 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 932.933076 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 74.134929 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.598690 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.243940 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 154.288329 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 101.084670 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.065640 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 28.699080 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 115.064610 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 196.937709 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.378619 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 81.355390 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 38.896160 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 164.832669 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 167.955420 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.492040 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ &&& 2147483647#32 >ₛ x✝) &&& ofBool (x✝² >ₛ -1#32)).toNat
     b := ↑(ofBool (x✝¹ &&& 2147483647#32 >ₛ x✝) &&& ofBool (x✝² ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.987280 ms, MSGSTART 
    Equality ((x✝¹ &&& 2147483647#32 >ₛ x✝) && x✝² ≥ₛ 0#32) =
      ((x✝¹ &&& 2147483647#32 >ₛ x✝) && x✝² >ₛ 4294967295#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 116.705949 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 547.230608 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 139.404060 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 9.330750 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.383520 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.349239 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 86.486100 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.437330 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝² >ₛ -1#32)).toNat
     b := ↑(ofBool (x✝² ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.583570 ms, MSGSTART 
    Equality (x✝² ≥ₛ 0#32) = (x✝² >ₛ 4294967295#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 138.055269 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 85.238990 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 175.588199 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 29.380690 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.623200 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 163.430129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 119.433249 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.770489 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != x✝¹ &&& 2147483647#32) &&& ofBool (x✝ >ₛ -1#32)).toNat
     b := ↑(ofBool (x✝ != x✝¹ &&& 2147483647#32) &&& ofBool (x✝ ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 18.729450 ms, MSGSTART 
    Equality (x✝ != x✝¹ &&& 2147483647#32 && x✝ ≥ₛ 0#32) =
      (x✝ != x✝¹ &&& 2147483647#32 && x✝ >ₛ 4294967295#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 161.851350 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 117.578849 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 167.554159 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 41.978260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.603210 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 166.093659 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 111.679650 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.441090 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != x✝¹ &&& 2147483647#32) &&& ofBool (x✝ >ₛ -1#32)).toNat
     b := ↑(ofBool (x✝ ≥ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.595910 ms, MSGSTART 
    Equality (x✝ ≥ₛ 0#32) = (x✝ != x✝¹ &&& 2147483647#32 && x✝ >ₛ 4294967295#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 122.544489 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 787.970367 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 76.352479 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.608870 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.745620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 165.663739 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 87.935070 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.013830 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.363280 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 115.237039 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 217.086360 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 156.279919 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.557440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.432970 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.381130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 102.320229 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.781530 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 72.007740 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.lt)
              (AutoStructs.Term.var 0) ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)))
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
              AutoStructs.Term.zero (AutoStructs.Term.var 0))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.889489 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 412.471399 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 164.953010 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 34.925710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.875380 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.359579 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 35.048370 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.295410 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.335630 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le) AutoStructs.Term.zero
            (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 107.847259 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 308.071979 ms, 
TACEND
