⚠ [673/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [884/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [887/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [893/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [894/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 134.934129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.906880 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.361630 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.930061 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.940199 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.057670 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ >ᵤ 6#8)).toNat
     d := ↑(ofBool (127#8 >>> x✝ == 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.052070 ms, MSGSTART 
    Equality (127#8 >>> x✝.toNat == 0#8) = (x✝ >ᵤ 6#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 138.032580 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 665.698327 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:11:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 159.010489 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 44.969210 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 26.123740 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 203.984629 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 56.314680 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.246020 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ >ᵤ 6#8)).toNat
     d := ↑(ofBool ((127#8).sshiftRight' x✝ == 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 39.666700 ms, MSGSTART 
    Equality ((127#8).sshiftRight x✝.toNat == 0#8) = (x✝ >ᵤ 6#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 126.317969 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 586.707887 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:21:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 135.647709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.508640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.616120 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 257.337599 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 61.857150 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.624180 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (7#8 >ᵤ x✝)).toNat
     d := ↑(ofBool (127#8 >>> x✝ != 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 31.815780 ms, MSGSTART 
    Equality (127#8 >>> x✝.toNat != 0#8) = (7#8 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 135.530539 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 664.066801 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:31:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 167.380890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.429919 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.732900 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 253.332270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 73.823389 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.648609 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (7#8 >ᵤ x✝)).toNat
     d := ↑(ofBool ((127#8).sshiftRight' x✝ != 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 28.152010 ms, MSGSTART 
    Equality ((127#8).sshiftRight x✝.toNat != 0#8) = (7#8 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 131.628711 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 611.709927 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:41:8: warning: declaration uses 'sorry'
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:57:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:67:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 185.984170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.227599 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.085270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 249.756869 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 76.445430 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.508200 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 0#8)).toNat
     d := ↑(ofBool (127#8 >>> x✝ == 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 95.240969 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 2) AutoStructs.Term.zero)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 132.725100 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 495.793588 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:71:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.483799 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.605760 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 25.725790 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 237.150419 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 98.576619 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.162120 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 0#8)).toNat
     d := ↑(ofBool (127#8 >>> x✝ != 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.545680 ms, MSGSTART 
    Equality (127#8 >>> x✝.toNat != 127#8) = (x✝ != 0#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 136.687109 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 607.108039 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:81:8: warning: declaration uses 'sorry'
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:98:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:109:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 194.737079 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.564400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.514390 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 239.082809 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 74.988180 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 11.509910 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 0#8)).toNat
     d := ↑(ofBool (126#8 >>> x✝ == 126#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.817749 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 2) AutoStructs.Term.zero)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.650660 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 494.640368 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:113:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 130.162800 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.469240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.377559 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 231.112990 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 77.630309 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.633370 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 0#8)).toNat
     d := ↑(ofBool (126#8 >>> x✝ != 126#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.283730 ms, MSGSTART 
    Equality (126#8 >>> x✝.toNat != 126#8) = (x✝ != 0#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 158.731089 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 425.840339 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:124:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 135.111809 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.009940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.731060 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.708899 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.739500 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.229090 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 7#8)).toNat
     d := ↑(ofBool (128#8 >>> x✝ == 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.983200 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.one)
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 1) (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 107.213619 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 357.675529 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:135:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 147.987789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.564270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.561700 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 139.302660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 58.341739 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.420260 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 7#8)).toNat
     d := ↑(ofBool (128#8 >>> x✝ == 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 56.603050 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.one)
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 1) (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.967260 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 365.201288 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:146:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 129.337510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.978350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.936299 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 137.825399 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 53.509050 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.423210 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 7#8)).toNat
     d := ↑(ofBool (128#8 >>> x✝ != 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.597450 ms, MSGSTART 
    Equality (128#8 >>> x✝.toNat != 1#8) = (x✝ != 7#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.226909 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 401.307798 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:156:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 116.266679 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.691780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.268920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 134.397239 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 53.789830 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.257740 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 7#8)).toNat
     d := ↑(ofBool (128#8 >>> x✝ != 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.083280 ms, MSGSTART 
    Equality (128#8 >>> x✝.toNat != 1#8) = (x✝ != 7#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.288440 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 394.440418 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:167:8: warning: declaration uses 'sorry'
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:184:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:195:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 133.080759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.791430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.600880 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 134.013520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 41.796069 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.117450 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 2#8)).toNat
     d := ↑(ofBool (4#8 >>> x✝ == 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.495190 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.one)
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 1) (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.397880 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 351.959758 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:199:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 124.092850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.877410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.459980 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 132.692859 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 53.324890 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.028650 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 2#8)).toNat
     d := ↑(ofBool (4#8 >>> x✝ != 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.603580 ms, MSGSTART 
    Equality (4#8 >>> x✝.toNat != 1#8) = (x✝ != 2#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 107.728619 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 398.117659 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:210:8: warning: declaration uses 'sorry'
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:227:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:237:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 124.035920 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.054710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.126100 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 132.993780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.172420 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.194440 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 2#8)).toNat
     d := ↑(ofBool (4#8 >>> x✝ == 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 52.446300 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.one)
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 1) (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 247.339948 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 492.929168 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:241:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 219.872639 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.376790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.342590 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 133.120239 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 53.714940 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.234080 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 2#8)).toNat
     d := ↑(ofBool (4#8 >>> x✝ != 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.804940 ms, MSGSTART 
    Equality (4#8 >>> x✝.toNat != 1#8) = (x✝ != 2#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.022229 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 387.862389 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:251:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 132.891129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.550030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.165280 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.989170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 41.983779 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.195390 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 4#8)).toNat
     d := ↑(ofBool (80#8 >>> x✝ == 5#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 63.319550 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 2) (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 162.780119 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 467.042269 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:261:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 225.346819 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.855650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.299830 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.713329 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 53.548000 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.154660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 4#8)).toNat
     d := ↑(ofBool (80#8 >>> x✝ != 5#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.610560 ms, MSGSTART 
    Equality (80#8 >>> x✝.toNat != 5#8) = (x✝ != 4#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 108.249599 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 410.032479 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:272:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 126.029729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.804780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.247380 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 132.527719 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 41.726520 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.202620 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 4#8)).toNat
     d := ↑(ofBool (80#8 >>> x✝ == 5#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 64.801120 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 2) (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.473039 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 355.030169 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:283:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 184.064040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.333299 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.213400 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 132.035460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 52.918310 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.142780 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 4#8)).toNat
     d := ↑(ofBool (80#8 >>> x✝ != 5#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.373770 ms, MSGSTART 
    Equality (80#8 >>> x✝.toNat != 5#8) = (x✝ != 4#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.223569 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 402.721968 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:293:8: warning: declaration uses 'sorry'
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:310:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:321:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:331:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:341:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 120.190120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.763060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.615170 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.835789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.947600 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.261630 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 42.309150 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.499729 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 303.438499 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:345:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 150.610000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.145880 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.371690 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 132.913689 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.935250 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.250250 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 41.557010 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.428259 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 306.549089 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:355:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 111.482879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.420430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.387660 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.644779 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 29.400950 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.641930 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 43.968080 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.420580 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 298.965188 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:365:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 249.205709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.207460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.827030 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 135.615869 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 35.005530 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.098590 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.447630 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.675229 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 299.726209 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:374:8: warning: declaration uses 'sorry'
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:389:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:399:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:408:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:417:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 160.426810 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.973600 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.600710 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.778579 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 29.025390 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.573950 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 41.928300 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.821479 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 351.701949 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:421:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 245.249689 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.021580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.154670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.198319 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.682280 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.670050 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 40.424720 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.365100 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 292.129148 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:430:8: warning: declaration uses 'sorry'
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:444:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:453:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:463:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:473:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:484:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 142.402120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.171200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.751270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.058269 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 40.385120 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.585010 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(↑32).toNat
     b := ↑x✝¹.toNat
     c := ↑(ofBool (x✝ == 0#32)).toNat
     d := ↑(ofBool (x✝.sshiftRight' x✝¹ == 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 42.545620 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.zero)
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 1) AutoStructs.Term.zero)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 178.422979 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 328.487689 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:488:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 137.831829 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.935440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.406250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.858789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 52.990260 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.673530 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(↑32).toNat
     b := ↑x✝¹.toNat
     c := ↑(ofBool (x✝ != 0#32)).toNat
     d := ↑(ofBool (x✝ >>> x✝¹ != 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.652020 ms, MSGSTART 
    Equality (x✝ >>> x✝¹.toNat != 0#32) = (x✝ != 0#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 148.114450 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 375.681348 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:498:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 113.015670 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.115050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.252969 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.158500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 29.095160 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.147980 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ᵤ 1#4)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 0#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.685410 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 0#4) = (x✝ >ᵤ 1#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.098919 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 298.461139 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 109.615999 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.625320 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.453920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.741900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.611249 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.995030 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ᵤ 3#4)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.842680 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 1#4) = (x✝ >ᵤ 3#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.306470 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 296.444759 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 110.387140 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.314020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.314550 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 128.032719 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.669870 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.003870 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ᵤ 5#4)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 2#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.014370 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 2#4) = (x✝ >ᵤ 5#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 139.478149 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 358.808799 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 284.074249 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.388020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.025940 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.891649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.179190 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.988810 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (0#4 >ₛ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 3#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.319150 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 3#4) = (0#4 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.160850 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 344.478738 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 115.871980 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.254720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.475120 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.702719 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.528240 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.008650 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (0#4 >ₛ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 4#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.333940 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 4#4) = (0#4 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.090439 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 346.255189 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 216.410799 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.372890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.950810 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.415749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.241230 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.978360 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (0#4 >ₛ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 5#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.748870 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 5#4) = (0#4 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.150920 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 344.033838 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 117.957710 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.851120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.920670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.596239 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.078210 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.950450 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (0#4 >ₛ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 6#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.460490 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 6#4) = (0#4 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 146.630309 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 342.612269 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 116.372280 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.579729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.596730 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.111780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.371290 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.959510 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (0#4 >ₛ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 7#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.789660 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 7#4) = (0#4 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.003409 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 344.678879 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 117.289859 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.515140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.677980 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.250870 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 62.884420 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.039181 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (0#4 >ₛ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 8#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.184649 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 8#4) = (0#4 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.205080 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 343.546509 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 117.031999 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.918590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.900180 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.554810 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.464469 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.993350 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (0#4 >ₛ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 9#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.938789 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 9#4) = (0#4 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.064630 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 342.923919 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 116.211089 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.874350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.943900 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.185010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.518989 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.974040 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (0#4 >ₛ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 10#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.251160 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 10#4) = (0#4 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.666650 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 345.782089 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 117.241659 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.367380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.774730 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.962240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.372259 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.038760 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (0#4 >ₛ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 11#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.318970 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 11#4) = (0#4 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.091590 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 346.231108 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 112.300119 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.117790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.595030 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.519960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.744740 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.040890 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ᵤ 9#4)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 12#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.250789 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 12#4) = (x✝ >ᵤ 9#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.863200 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 305.851459 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 112.375510 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.237310 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.645280 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.246899 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.966390 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.050460 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ᵤ 11#4)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 13#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.500130 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 13#4) = (x✝ >ᵤ 11#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.562679 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 310.115169 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 112.082289 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.309900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.688260 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.970850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.871739 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.032780 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ᵤ 13#4)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 1#4 >ᵤ 14#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.210770 ms, MSGSTART 
    Equality (x✝.sshiftRight 1 >ᵤ 14#4) = (x✝ >ᵤ 13#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.013600 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 312.946039 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 43.866740 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.091850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.729320 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 153.133249 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.795980 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.005660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.162040 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n =>
              if n = 1 then x✝.sshiftRight 1 else if n = 0 then 15#4 else BitVec.zero 4) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n =>
              if n = 1 then x✝.sshiftRight 1 else if n = 0 then 15#4 else BitVec.zero 4) =
          true
    is not definitionally equal to the right-hand side
      (x✝.sshiftRight 1 >ᵤ 15#4) = false
    x✝ : BitVec 4
    h✝ : ¬1#4 ≥ ↑4
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n =>
                if n = 1 then x✝.sshiftRight 1 else if n = 0 then 15#4 else BitVec.zero 4) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n =>
                if n = 1 then x✝.sshiftRight 1 else if n = 0 then 15#4 else BitVec.zero 4) =
            true ↔
        (x✝.sshiftRight 1 >ᵤ 15#4) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.058360 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 217.509299 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 107.632859 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 8.828170 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.484460 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.603260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.328690 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.859640 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.558950 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬((AutoStructs.Term.zero.evalNat fun n => if n = 0 then x✝.sshiftRight 1 else BitVec.zero 4) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝.sshiftRight 1 else BitVec.zero 4) =
          true
    is not definitionally equal to the right-hand side
      (0#4 >ᵤ x✝.sshiftRight 1) = false
    x✝ : BitVec 4
    h✝ : ¬1#4 ≥ ↑4
    ⊢ ¬((AutoStructs.Term.zero.evalNat fun n => if n = 0 then x✝.sshiftRight 1 else BitVec.zero 4) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝.sshiftRight 1 else BitVec.zero 4) =
            true ↔
        (0#4 >ᵤ x✝.sshiftRight 1) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 184.263959 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 90.027639 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 110.963199 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.385580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.225220 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.639830 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.060770 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.847070 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (2#4 >ᵤ x✝)).toNat
     c := ↑(ofBool (1#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.982619 ms, MSGSTART 
    Equality (1#4 >ᵤ x✝.sshiftRight 1) = (2#4 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 118.215190 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 305.523459 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 111.240720 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.667640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.638680 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.797819 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.177250 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.933830 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (4#4 >ᵤ x✝)).toNat
     c := ↑(ofBool (2#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.813690 ms, MSGSTART 
    Equality (2#4 >ᵤ x✝.sshiftRight 1) = (4#4 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.334999 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 310.783819 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 110.936829 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.008390 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.660290 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.422389 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.174610 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.975290 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (6#4 >ᵤ x✝)).toNat
     c := ↑(ofBool (3#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.769930 ms, MSGSTART 
    Equality (3#4 >ᵤ x✝.sshiftRight 1) = (6#4 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.633220 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 312.830939 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.411449 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.773360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.961810 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.357820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.415019 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.116500 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ₛ -1#4)).toNat
     c := ↑(ofBool (4#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.044200 ms, MSGSTART 
    Equality (4#4 >ᵤ x✝.sshiftRight 1) = (x✝ >ₛ 15#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.248820 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 348.519638 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.835959 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.212090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.713530 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 159.446069 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.866200 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.174320 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ₛ -1#4)).toNat
     c := ↑(ofBool (5#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.188320 ms, MSGSTART 
    Equality (5#4 >ᵤ x✝.sshiftRight 1) = (x✝ >ₛ 15#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.538060 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 347.913238 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.602650 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.870490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.072090 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.356149 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.161340 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.087720 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ₛ -1#4)).toNat
     c := ↑(ofBool (6#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.921880 ms, MSGSTART 
    Equality (6#4 >ᵤ x✝.sshiftRight 1) = (x✝ >ₛ 15#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.995469 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 349.266429 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.470340 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.540800 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.260290 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.838679 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.719640 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.126190 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ₛ -1#4)).toNat
     c := ↑(ofBool (7#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.104280 ms, MSGSTART 
    Equality (7#4 >ᵤ x✝.sshiftRight 1) = (x✝ >ₛ 15#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.629089 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 351.511659 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.281229 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.318720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.150690 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.110280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.687759 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.166980 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ₛ -1#4)).toNat
     c := ↑(ofBool (8#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.104510 ms, MSGSTART 
    Equality (8#4 >ᵤ x✝.sshiftRight 1) = (x✝ >ₛ 15#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.455480 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 351.410178 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.645519 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.533300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.267770 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.933359 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.997570 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.171090 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ₛ -1#4)).toNat
     c := ↑(ofBool (9#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.125830 ms, MSGSTART 
    Equality (9#4 >ᵤ x✝.sshiftRight 1) = (x✝ >ₛ 15#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.422100 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 351.227898 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.144759 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.774150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.278670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.984449 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 64.129590 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.136600 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ₛ -1#4)).toNat
     c := ↑(ofBool (10#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.164230 ms, MSGSTART 
    Equality (10#4 >ᵤ x✝.sshiftRight 1) = (x✝ >ₛ 15#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.983989 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 354.194219 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 117.967270 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.416050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.153030 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.319219 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.845380 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.129400 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ₛ -1#4)).toNat
     c := ↑(ofBool (11#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.021940 ms, MSGSTART 
    Equality (11#4 >ᵤ x✝.sshiftRight 1) = (x✝ >ₛ 15#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.257089 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 351.321109 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 117.781450 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.417350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.092260 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.509200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.843589 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.136320 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (x✝ >ₛ -1#4)).toNat
     c := ↑(ofBool (12#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.018970 ms, MSGSTART 
    Equality (12#4 >ᵤ x✝.sshiftRight 1) = (x✝ >ₛ 15#4) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.585720 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 353.518778 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 112.745719 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.447830 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.776020 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.192190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.612939 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.957930 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (10#4 >ᵤ x✝)).toNat
     c := ↑(ofBool (13#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.018540 ms, MSGSTART 
    Equality (13#4 >ᵤ x✝.sshiftRight 1) = (10#4 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 142.035700 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 317.661768 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 113.345119 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.613250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.882820 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.869510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.587660 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.953660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (12#4 >ᵤ x✝)).toNat
     c := ↑(ofBool (14#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.035659 ms, MSGSTART 
    Equality (14#4 >ᵤ x✝.sshiftRight 1) = (12#4 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.956690 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 314.684099 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 114.136320 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.727060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.254470 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.322759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.943150 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.093630 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      2 ≤ a ≤ 15
    where
     a := ↑(↑4).toNat
     b := ↑(ofBool (14#4 >ᵤ x✝)).toNat
     c := ↑(ofBool (-1#4 >ᵤ x✝.sshiftRight' 1#4)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.678720 ms, MSGSTART 
    Equality (15#4 >ᵤ x✝.sshiftRight 1) = (14#4 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.067119 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 314.552809 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 117.023540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.657390 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.571810 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.228679 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 35.627310 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.204740 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 0#8)).toNat
     d := ↑(ofBool (2#8 >>> x✝ >ᵤ 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.463530 ms, MSGSTART 
    Equality (2#8 >>> x✝.toNat >ᵤ 1#8) = (x✝ == 0#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.031660 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 354.001388 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:826:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 113.246580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.996120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.164300 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.255369 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 29.397470 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.875340 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (7#8 >ᵤ x✝)).toNat
     d := ↑(ofBool (128#8 >>> x✝ >ᵤ 1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.474350 ms, MSGSTART 
    Equality (128#8 >>> x✝.toNat >ᵤ 1#8) = (7#8 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.565030 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 307.353098 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:836:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.574240 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool ((128#8).sshiftRight' x✝ >ᵤ 160#8)) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 6.623770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.539240 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.409149 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.243650 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.424430 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      0 ≤ c - 256*d ≤ 127
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(128#8 >>> x✝).toNat * ↑(2 ^ x✝.toNat)
     d := ↑((128#8 >>> x✝).toNat * 2 ^ x✝.toNat) / 256 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.413850 ms, MSGSTART 
    Unsupported syntax some (ofBool ((128#8).sshiftRight x✝.toNat >ᵤ 160#8)) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofBool [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.ult [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 8)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 160)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 160))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.sshiftRight [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.ofNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 128)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.toNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2077946))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.785910 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 376.162058 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.582400 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (128#8 >>> x✝ >ₛ 3#8)) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 6.959860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.274630 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.849579 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 36.298510 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.504580 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      0 ≤ c - 256*d ≤ 127
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(128#8 >>> x✝).toNat * ↑(2 ^ x✝.toNat)
     d := ↑((128#8 >>> x✝).toNat * 2 ^ x✝.toNat) / 256 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.508260 ms, MSGSTART 
    Unsupported syntax some (ofBool (128#8 >>> x✝.toNat >ₛ 3#8)) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofBool [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.slt [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 8)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 3)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 3))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HShiftRight.hShiftRight [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.const `Nat []))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.instHShiftRightNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.ofNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 128)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.toNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2099268))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.670530 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 408.090648 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 113.926280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.511249 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.334490 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.895050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 29.693780 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.965960 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ >ᵤ 1#8)).toNat
     d := ↑(ofBool (2#8 >ᵤ 4#8 >>> x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.450330 ms, MSGSTART 
    Equality (2#8 >ᵤ 4#8 >>> x✝.toNat) = (x✝ >ᵤ 1#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.218929 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 307.802399 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:868:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 117.376399 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.480610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.259780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.833249 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 40.838410 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.201870 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(↑32).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 0#32)).toNat
     d := ↑(ofBool (16#32 >ᵤ 16#32 >>> x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.362030 ms, MSGSTART 
    Equality (16#32 >ᵤ 16#32 >>> x✝.toNat) = (x✝ != 0#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 112.462180 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 361.647928 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:878:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 117.561270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.556140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.314750 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.339799 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 41.003330 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.252960 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 0#8)).toNat
     d := ↑(ofBool (128#8 >ᵤ 128#8 >>> x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.483340 ms, MSGSTART 
    Equality (128#8 >ᵤ 128#8 >>> x✝.toNat) = (x✝ != 0#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.396710 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 362.056268 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:888:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.573880 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (160#8 >ᵤ (128#8).sshiftRight' x✝)) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 6.558430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.568110 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.300820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.235129 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.396890 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      0 ≤ c - 256*d ≤ 127
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(128#8 >>> x✝).toNat * ↑(2 ^ x✝.toNat)
     d := ↑((128#8 >>> x✝).toNat * 2 ^ x✝.toNat) / 256 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.406840 ms, MSGSTART 
    Unsupported syntax some (ofBool (160#8 >ᵤ (128#8).sshiftRight x✝.toNat)) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofBool [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.ult [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 8)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.sshiftRight [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.ofNat [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 128)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.toNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                    (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2208072)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.ofNat [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 8)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 160)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 160)))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.499600 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 376.217018 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.574730 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (3#8 >ₛ 128#8 >>> x✝)) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 6.975740 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.284920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.764060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 36.128490 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.455880 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      0 ≤ c - 256*d ≤ 127
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(128#8 >>> x✝).toNat * ↑(2 ^ x✝.toNat)
     d := ↑((128#8 >>> x✝).toNat * 2 ^ x✝.toNat) / 256 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.512050 ms, MSGSTART 
    Unsupported syntax some (ofBool (3#8 >ₛ 128#8 >>> x✝.toNat)) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofBool [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.slt [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 8)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.const `HShiftRight.hShiftRight [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                            (Lean.Expr.app
                              (Lean.Expr.const `BitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                          (Lean.Expr.const `Nat []))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instHShiftRightNat [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.ofNat [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 128)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.toNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                    (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2229394)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.ofNat [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 8)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 3)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 3)))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.230469 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 409.613608 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 123.778929 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.044730 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 14.318940 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 162.654609 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 78.710380 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.424510 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ != 0#8)).toNat
     d := ↑(ofBool (239#8 >>> x✝ >ₛ -1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.602480 ms, MSGSTART 
    Equality (239#8 >>> x✝.toNat >ₛ 255#8) = (x✝ != 0#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 105.338759 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 440.204939 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:920:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 123.558460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.677730 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 14.118580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.333509 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 70.968030 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.215260 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ c ≤ 1
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(ofBool (x✝ == 0#8)).toNat
     d := ↑(ofBool (0#8 >ₛ 239#8 >>> x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.427550 ms, MSGSTART 
    Equality (0#8 >ₛ 239#8 >>> x✝.toNat) = (x✝ == 0#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.571759 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 395.256209 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshr_proof.lean:930:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 147.143899 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.863420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 24.175970 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 166.458379 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 139.579620 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.508469 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      8 ≤ a ≤ 255
    where
     a := ↑(↑8).toNat
     b := ↑(ofBool (0#8 >ₛ x✝ ^^^ x✝¹)).toNat
     c := ↑(ofBool (x✝ >>> 7#8 == zeroExtend 8 (ofBool (x✝¹ >ₛ -1#8)))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.781390 ms, MSGSTART 
    Equality (x✝ >>> 7 == setWidth 8 (ofBool (x✝¹ >ₛ 255#8))) = (0#8 >ₛ x✝ ^^^ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.983270 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 657.802717 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 149.470949 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 39.550030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.688790 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 214.535939 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 169.273719 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.491090 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      8 ≤ a ≤ 255
    where
     a := ↑(↑8).toNat
     b := ↑(ofBool (0#8 >ₛ x✝) ^^^ ofBool (x✝¹ >ₛ -1#32)).toNat
     c := ↑(ofBool (x✝ >>> 7#8 != zeroExtend 8 (ofBool (x✝¹ >ₛ -1#32)))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.017470 ms, MSGSTART 
    Equality (x✝ >>> 7 != setWidth 8 (ofBool (x✝¹ >ₛ 4294967295#32))) =
      ((0#8 >ₛ x✝) ^^ x✝¹ >ₛ 4294967295#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.682230 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 720.969387 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 150.637280 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 190.638839 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 101.541979 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 163.832730 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 273.478869 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.297440 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      8 ≤ a ≤ 255
    where
     a := ↑(↑8).toNat
     b := ↑(ofBool (0#8 >ₛ x✝¹ &&& x✝)).toNat
     c := ↑(ofBool (x✝ >>> 7#8 >ₛ zeroExtend 8 (ofBool (x✝¹ >ₛ -1#8)))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 20.873120 ms, MSGSTART 
    Equality (x✝ >>> 7 >ₛ setWidth 8 (ofBool (x✝¹ >ₛ 255#8))) = (0#8 >ₛ x✝¹ &&& x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 121.960549 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 942.548926 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 144.664119 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 36.517580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 26.405080 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 165.820399 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 138.208450 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.264010 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      8 ≤ a ≤ 255
    where
     a := ↑(↑8).toNat
     b := ↑(ofBool (0#8 >ₛ x✝ ^^^ x✝¹)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 7#8 == signExtend 8 (ofBool (x✝¹ >ₛ -1#8)))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.303430 ms, MSGSTART 
    Equality (x✝.sshiftRight 7 == signExtend 8 (ofBool (x✝¹ >ₛ 255#8))) = (0#8 >ₛ x✝ ^^^ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 115.719539 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 659.548517 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 147.048979 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 60.433240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.457040 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 212.679629 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 168.202460 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.242279 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      8 ≤ a ≤ 255
    where
     a := ↑(↑8).toNat
     b := ↑(ofBool (0#8 >ₛ x✝) ^^^ ofBool (x✝¹ >ₛ -1#32)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 7#8 != signExtend 8 (ofBool (x✝¹ >ₛ -1#32)))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.524590 ms, MSGSTART 
    Equality (x✝.sshiftRight 7 != signExtend 8 (ofBool (x✝¹ >ₛ 4294967295#32))) =
      ((0#8 >ₛ x✝) ^^ x✝¹ >ₛ 4294967295#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 116.411820 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 716.768747 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 197.074109 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 34.677540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.768309 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 137.020380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 44.431270 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.514080 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      32 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(ofBool (0#32 >ₛ x✝¹) &&& (x✝ ^^^ 1#1)).toNat
     c := ↑(ofBool (x✝¹ >>> 31#32 >ᵤ zeroExtend 32 x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.498939 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and ((AutoStructs.Term.var 2).xor AutoStructs.Term.one))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.228150 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 343.773818 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 202.695920 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 47.585649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 37.181980 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.494120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 59.750079 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.520710 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      32 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(ofBool (0#32 >ₛ x✝¹) &&& (x✝ ^^^ 1#1)).toNat
     c := ↑(ofBool (x✝¹ >>> 31#32 >ₛ zeroExtend 32 x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 116.178500 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and ((AutoStructs.Term.var 2).xor AutoStructs.Term.one))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 112.283709 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 348.507179 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 146.438329 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 51.768140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 38.607620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 163.973409 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 76.447390 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.089810 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      32 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(ofBool (x✝¹ >ₛ -1#32) ^^^ x✝).toNat
     c := ↑(ofBool (signExtend 32 x✝ == x✝¹.sshiftRight' 31#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 63.290850 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.933229 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 289.425529 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.493570 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 38.184070 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.659019 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.794630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 45.930000 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.670740 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      32 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(ofBool (x✝¹ >>> 31#32 == signExtend 32 x✝)).toNat
     c := ↑(ofBool (signExtend 32 x✝ == x✝¹ >>> 31#32)).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 46.480260 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.909209 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 230.913099 ms, 
TACEND
