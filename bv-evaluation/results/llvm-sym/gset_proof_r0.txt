⚠ [673/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [873/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [890/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [893/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [894/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 113.959760 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.019650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.370580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 85.883430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 32.855790 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.650541 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.186069 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝) = false
    x✝ : BitVec 32
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.695461 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 175.626239 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 136.556861 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.764459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.386360 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 181.510030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 47.846920 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.991819 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 40.107750 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝) = false
    x✝ : BitVec 32
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.001569 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 229.714259 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 205.777689 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 57.463970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.932580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 141.858020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 50.501730 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.942760 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 48.060970 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.719310 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 136.688450 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 183.183529 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.227381 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.387840 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.548389 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 47.999820 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.298240 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 33.986340 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.989310 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 153.026980 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 205.375939 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.716280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.409670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 224.254759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 18.497900 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.384870 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 47.784480 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.039099 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 329.255619 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 143.908361 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 12.934320 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.473680 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 232.145949 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 30.130930 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.619760 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 40.744400 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬((AutoStructs.Term.zero.evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (0#32 >ᵤ x✝) = false
    x✝ : BitVec 32
    ⊢ ¬((AutoStructs.Term.zero.evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (0#32 >ᵤ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.050090 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 150.221589 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 136.600799 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 11.498260 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.370571 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 132.710128 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 29.686310 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.422620 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 40.263231 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬((AutoStructs.Term.zero.evalNat fun n => if n = 0 then x✝ else BitVec.zero 1) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 1) =
          true
    is not definitionally equal to the right-hand side
      (0#1 >ᵤ x✝) = false
    x✝ : BitVec 1
    ⊢ ¬((AutoStructs.Term.zero.evalNat fun n => if n = 0 then x✝ else BitVec.zero 1) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 1) =
            true ↔
        (0#1 >ᵤ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.348260 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 108.408479 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 49.633221 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.298801 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.832590 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 98.437789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 22.536150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.493011 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 32.504270 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 1) >ᵤ
            AutoStructs.Term.one.evalNat fun n => if n = 0 then x✝ else BitVec.zero 1) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ᵤ 1#1) = false
    x✝ : BitVec 1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 1) >ᵤ
              AutoStructs.Term.one.evalNat fun n => if n = 0 then x✝ else BitVec.zero 1) =
            true ↔
        (x✝ >ᵤ 1#1) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.702270 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 379.219080 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 137.585070 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.168990 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.671390 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 143.925949 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 29.763790 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.807620 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 41.617740 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.le)
            (AutoStructs.Term.var 0) AutoStructs.Term.one) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 2.750570 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 279.287829 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 147.435989 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.678140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.050790 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 108.555359 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 24.510401 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.200710 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 40.095830 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.256190 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 297.622188 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 207.539390 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.007020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 29.359319 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 146.788920 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 20.796190 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.571460 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(x✝ ||| x✝¹ ^^^ 1#1).toNat
     b := ↑(ofBool (x✝ ≥ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.643490 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).or ((AutoStructs.Term.var 2).xor AutoStructs.Term.one))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.517390 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 428.342878 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 219.082549 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 34.767501 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 26.172909 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 144.111570 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 52.710770 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.511110 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(x✝ ^^^ x✝¹ ^^^ 1#1).toNat
     b := ↑(ofBool (x✝ == x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 71.739779 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).xor AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.559590 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 401.627929 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 176.366739 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 84.323300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 43.263590 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 264.497838 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 166.295470 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.381850 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ 1#64)).toNat
     b := ↑(ofBool (x✝ >ₛ 0#64) &&& ofBool (ofBool (x✝ == 1#64) == 0#1)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.511439 ms, MSGSTART 
    Equality ((x✝ >ₛ 0#64) && ofBool (x✝ == 1#64) == 0#1) = (x✝ >ₛ 1#64) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 146.638671 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 783.278156 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 159.775009 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 46.136570 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.754250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 139.381989 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 88.369730 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.668890 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ 1#64)).toNat
     b := ↑(ofBool (ofBool (x✝ == 1#64) == 0#1)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.062010 ms, MSGSTART 
    Equality (ofBool (x✝ == 1#64) == 0#1) = (x✝ >ₛ 1#64) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 129.393989 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 584.618458 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 135.417509 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.653410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.175980 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 128.299099 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 37.627020 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.916640 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.346540 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.482630 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 269.043169 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 133.252889 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.240650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.622620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 134.027849 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 120.334580 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.160030 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ 1#64)).toNat
     b := ↑(ofBool (x✝ == 1#64) ^^^ ofBool (x✝ >ₛ 0#64)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.556550 ms, MSGSTART 
    Equality (x✝ == 1#64 ^^ x✝ >ₛ 0#64) = (x✝ >ₛ 1#64) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 115.391159 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 483.875078 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 130.923900 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.936370 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.998050 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 128.746809 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 115.602710 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.048910 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ 1#64)).toNat
     b := ↑(ofBool (x✝ >ₛ 0#64) ^^^ ofBool (x✝ == 1#64)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.918470 ms, MSGSTART 
    Equality ((x✝ >ₛ 0#64) ^^ x✝ == 1#64) = (x✝ >ₛ 1#64) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 216.496379 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 591.700277 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 133.869390 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.461730 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.231150 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 141.115909 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 123.277099 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.110100 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 5#64)).toNat
     b := ↑(ofBool (x✝ >ₛ 4#64) ^^^ ofBool (6#64 >ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.603680 ms, MSGSTART 
    Equality ((x✝ >ₛ 4#64) ^^ 6#64 >ₛ x✝) = (x✝ != 5#64) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.616060 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 448.156608 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.085479 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.779780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.145250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.069040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 122.769049 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.117800 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 5#64)).toNat
     b := ↑(ofBool (6#64 >ₛ x✝) ^^^ ofBool (x✝ >ₛ 4#64)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.618780 ms, MSGSTART 
    Equality ((6#64 >ₛ x✝) ^^ x✝ >ₛ 4#64) = (x✝ != 5#64) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.286240 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 457.134228 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 132.853789 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.182020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.430560 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.088529 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 131.665450 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.285880 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 18446744073709551611#64)).toNat
     b := ↑(ofBool (x✝ >ₛ 18446744073709551610#64) ^^^ ofBool (18446744073709551612#64 >ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.415840 ms, MSGSTART 
    Equality ((x✝ >ₛ 18446744073709551610#64) ^^ 18446744073709551612#64 >ₛ x✝) =
      (x✝ != 18446744073709551611#64) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 111.908829 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 445.745728 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.721430 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.930000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.252620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 137.478989 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 116.869720 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.108800 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 127#8)).toNat
     b := ↑(ofBool (128#8 >ₛ x✝) ^^^ ofBool (x✝ >ₛ 126#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.410339 ms, MSGSTART 
    Equality ((128#8 >ₛ x✝) ^^ x✝ >ₛ 126#8) = (x✝ == 127#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.144680 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 425.682618 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 174.214219 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.165420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.821180 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 134.134129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 86.346610 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.278850 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ a ≤ 1
      1 ≤ a - 4294967296*b ≤ 4294967295
    where
     a := ↑(ofBool (x✝ != 0#32) &&& ofBool (x✝ >ₛ 3656758794#32)).toNat
     b := ↑(ofBool (x✝ != 0#32) &&& ofBool (x✝ >ₛ 3656758794#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 31.359530 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 228.188679 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 359.374428 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 273.344849 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.188930 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.937860 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.522209 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 85.603630 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 23.545910 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.731380 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 225.155339 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 298.626518 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 162.056350 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.182089 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.357000 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.873540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 85.106899 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.551990 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ a ≤ 1
      1 ≤ a - 4294967296*b ≤ 4294967295
    where
     a := ↑(ofBool (x✝ != 0#32) &&& ofBool (x✝ >ₛ 3656758794#32)).toNat
     b := ↑(ofBool (x✝ != 0#32) &&& ofBool (x✝ >ₛ 3656758794#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 28.173390 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.632570 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 336.047448 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 176.396349 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.597670 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.263620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.091520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 86.000219 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 11.666140 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ a ≤ 1
      1 ≤ a - 4294967296*b ≤ 4294967295
    where
     a := ↑(ofBool (x✝ != 0#32) &&& ofBool (x✝ >ₛ 3656758794#32)).toNat
     b := ↑(ofBool (x✝ != 0#32) &&& ofBool (x✝ >ₛ 3656758794#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.861720 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 180.478909 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 355.410159 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 169.001539 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.124950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.762260 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 132.395619 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 90.987960 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 25.464200 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 32.457500 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 132.325539 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 306.737229 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 103.748100 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.595500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.977290 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.886949 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 29.000490 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.130670 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 44.055380 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1))
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 129.484919 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 299.922839 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 104.227279 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.106380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.765420 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.788100 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.916019 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.211960 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 40.396410 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).or AutoStructs.Term.one)
              (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 79.216240 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 294.488029 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 188.227959 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.384170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.099960 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.096500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 29.677330 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.054190 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(x✝ ^^^ x✝¹ ^^^ 1#1).toNat
     b := ↑(ofBool (zeroExtend 32 x✝ == zeroExtend 32 x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 41.023099 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).xor AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 82.797830 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 404.594918 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 118.911119 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.520480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.210380 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.786720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 34.580219 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.545821 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ b - 4294967296*c ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b + 4294967296*c ≥ 1
    where
     a := ↑(x✝ &&& 1#32).toNat
     b := ↑(ofBool (x✝ &&& 1#32 != 0#32)).toNat
     c := ↑(ofBool (x✝ &&& 1#32 != 0#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 32.349339 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 81.643460 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 544.835088 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.596350 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (zeroExtend 32 (ofBool (x✝ &&& 4#32 != 0#32))) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 11.178570 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.902900 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.125260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.457459 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.266450 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ a ≤ 2
    where
     a := ↑(↑32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.404560 ms, MSGSTART 
    Unsupported syntax some (setWidth 32 (ofBool (x✝ &&& 4#32 != 0#32))) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 32)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.setWidth [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 1)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofBool [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `bne [Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instBEqOfDecidableEq [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `instDecidableEqBitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.const `HAnd.hAnd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                              (Lean.Expr.app
                                (Lean.Expr.const `BitVec [])
                                (Lean.Expr.app
                                  (Lean.Expr.app
                                    (Lean.Expr.app
                                      (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero])
                                      (Lean.Expr.const `Nat []))
                                    (Lean.Expr.lit (Lean.Literal.natVal 32)))
                                  (Lean.Expr.app
                                    (Lean.Expr.const `instOfNatNat [])
                                    (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                            (Lean.Expr.app
                              (Lean.Expr.const `BitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.const `instHAndOfAndOp [Lean.Level.zero])
                            (Lean.Expr.app
                              (Lean.Expr.const `BitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec.instAndOp [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app
                                (Lean.Expr.const `instOfNatNat [])
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
                      (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 874428)))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.ofNat [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 4)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 4)))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 0)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 32)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 3.889600 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 147.800150 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 138.727490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.202409 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.848770 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 138.313200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 35.790080 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.166720 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ c - 4294967296*d ≤ 4294967295
      0 ≤ b ≤ 4294967295
      b - c + 4294967296*d ≥ 1
      3 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(x✝ >>> 2#32 &&& 1#32).toNat
     c := ↑(ofBool (x✝ &&& 4#32 != 0#32)).toNat
     d := ↑(ofBool (x✝ &&& 4#32 != 0#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 37.930309 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.227350 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 653.720067 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 148.906329 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.482680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.720620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 177.878619 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 79.188590 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.270320 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 242.342269 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.lt)
              ((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)) (AutoStructs.Term.var 2))
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.lt)
              (AutoStructs.Term.var 3) ((AutoStructs.Term.var 4).and (AutoStructs.Term.var 5)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.971060 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 731.017317 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 209.542679 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.729040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.094040 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 162.349949 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 37.015390 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.869650 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 41.656460 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.lt)
            (AutoStructs.Term.var 0) ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 200.544959 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 355.127399 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 126.842330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.900709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.065660 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 134.939160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.245010 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.273350 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ b - 4294967296*c ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b + 4294967296*c ≥ 1
    where
     a := ↑(x✝ &&& 1#32 ^^^ 1#32).toNat
     b := ↑(ofBool (x✝ &&& 1#32 == 0#32)).toNat
     c := ↑(ofBool (x✝ &&& 1#32 == 0#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 37.133650 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            (((AutoStructs.Term.var 1).and AutoStructs.Term.one).xor AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 183.022459 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 629.460517 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 149.800919 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.325910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 28.498670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 145.254709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.309180 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.898160 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ c - 4294967296*d ≤ 4294967295
      0 ≤ b ≤ 4294967295
      b - c + 4294967296*d ≥ 1
      3 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(x✝ >>> 2#32 &&& 1#32 ^^^ 1#32).toNat
     c := ↑(ofBool ((x✝ &&& 4#32) >>> 2#32 == 0#32)).toNat
     d := ↑(ofBool ((x✝ &&& 4#32) >>> 2#32 == 0#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 44.195690 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            (((AutoStructs.Term.var 1).and AutoStructs.Term.one).xor AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.217080 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 691.535277 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 102.873030 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.735110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.903740 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.449059 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.484080 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.077970 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.753050 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬((((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then 2#32 else BitVec.zero 32) &&&
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then 2#32 else BitVec.zero 32) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then 2#32 else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ &&& 2#32 >ᵤ 2#32) = false
    x✝ : BitVec 32
    ⊢ ¬((((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then 2#32 else BitVec.zero 32) &&&
                (AutoStructs.Term.var 0).evalNat fun n =>
                  if n = 1 then x✝ else if n = 0 then 2#32 else BitVec.zero 32) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then 2#32 else BitVec.zero 32) =
            true ↔
        (x✝ &&& 2#32 >ᵤ 2#32) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 79.386989 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 278.074649 ms, 
TACEND
