⚠ [673/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [885/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [888/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [893/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [894/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 156.494689 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.428990 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 24.718630 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 173.710549 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 125.885410 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.458250 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 50.151410 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2889)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2888))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2889)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 130.383939 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 520.709388 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 198.114109 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 34.951180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.494010 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 192.047240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 39.073539 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 11.151481 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.192159 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 126.085429 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 437.366860 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 171.806179 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.999850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 28.453260 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 267.566459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 127.149579 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 11.309159 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.204870 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝¹ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 67801)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 67802))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 67801)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 127.937990 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 576.951238 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 162.051599 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.280490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.235150 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 143.544020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.605390 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.662480 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 50.558750 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 124.908399 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 366.756770 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 184.835659 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 36.188970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 37.579850 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 200.401079 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 133.101930 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.993030 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.012660 ms, MSGSTART 
    Unsupported syntax x✝ = 127#8 → (x✝¹ >ₛ x✝) = false === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 131455)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 127)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 131455)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 131454))))
        (Lean.Expr.const `Bool.false []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 124.739940 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 533.855868 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 132.098189 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.992189 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.309621 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 81.072709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 39.039160 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.911140 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.492060 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) =
          true
    is not definitionally equal to the right-hand side
      (x✝¹ >ₛ x✝) = false
    x✝¹ x✝ : BitVec 8
    c✝ : BitVec 1
    heq✝ : ofBool (x✝ == 127#8) = 1#1
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) =
            true ↔
        (x✝¹ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.269420 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 197.737050 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 172.923360 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.639220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 24.984729 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 209.032149 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 50.779920 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.563960 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 31.474200 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196611)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196610))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196611)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.244999 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 336.083259 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 125.684860 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.085279 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.690270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 177.920090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.188340 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.082490 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 44.432329 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.440000 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 307.504549 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 122.231639 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.116300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.344360 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.698840 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.377719 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.844230 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 31.553380 ms, MSGSTART 
    Unsupported syntax x✝ = 255#8 → (x✝¹ >ᵤ x✝) = false === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 255804)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 255804)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 255803))))
        (Lean.Expr.const `Bool.false []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.812000 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 314.746839 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 119.748390 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.367440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.436580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 75.021790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.092409 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.219599 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.118990 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) =
          true
    is not definitionally equal to the right-hand side
      (x✝¹ >ᵤ x✝) = false
    x✝¹ x✝ : BitVec 8
    c✝ : BitVec 1
    heq✝ : ofBool (x✝ == -1#8) = 1#1
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) =
            true ↔
        (x✝¹ >ᵤ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.323800 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 158.614769 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.671480 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.505779 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.304920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 173.545590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.940480 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.283230 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.706959 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝¹ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 309532)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 309533))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 309532)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.882970 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 475.590948 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.253430 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.422380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.427791 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 167.621879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.641890 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.122600 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 43.000199 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.225920 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 333.413569 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 126.731239 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.005130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 36.484390 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 245.420519 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 41.066800 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.973680 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 32.184940 ms, MSGSTART 
    Unsupported syntax x✝ = 255#8 → (x✝¹ >ᵤ x✝) = false === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 368418)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 368418)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 368417))))
        (Lean.Expr.const `Bool.false []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.491779 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 314.069159 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 115.771480 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.241129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.827360 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 67.361330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.071600 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.289600 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.411500 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) =
          true
    is not definitionally equal to the right-hand side
      (x✝¹ >ᵤ x✝) = false
    x✝¹ x✝ : BitVec 8
    c✝ : BitVec 1
    heq✝ : ofBool (x✝ == -1#8) = 1#1
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝ else BitVec.zero 8) =
            true ↔
        (x✝¹ >ᵤ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.388890 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 154.776989 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 126.613589 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.136290 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.482280 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.538059 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 79.514170 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.361300 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.099050 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝ = 256#9 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 9)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 422788)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 422789))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 9)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 422789)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 9)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 256)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 256)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.726209 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 353.873398 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 125.857149 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.546660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.328470 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.346940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.581810 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.115540 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 37.841150 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.960029 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 307.292259 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.007710 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.133860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.319089 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.052270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 79.525160 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.553150 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.064429 ms, MSGSTART 
    Unsupported syntax x✝ = 128#8 → (x✝ >ₛ x✝¹) = false === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 487276)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 487275)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 487276))))
        (Lean.Expr.const `Bool.false []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.142360 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 358.392849 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 126.180320 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.044980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.886060 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 67.692349 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 35.365739 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.077180 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.405290 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝¹) = false
    x✝¹ x✝ : BitVec 8
    c✝ : BitVec 1
    heq✝ : ofBool (x✝ == 128#8) = 1#1
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) =
            true ↔
        (x✝ >ₛ x✝¹) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 112.207310 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 291.491229 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 223.412369 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.244550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.093610 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.503679 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 78.165480 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.400220 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.818620 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝¹ = 128#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 551658)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 551657))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 551657)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 128)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 138.301709 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 348.968009 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 221.978059 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.866850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.981880 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.915459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.164650 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.880110 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 35.953510 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.652280 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 336.122488 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 223.046339 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.203200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.980670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.832620 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 78.978669 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.335370 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 28.554150 ms, MSGSTART 
    Unsupported syntax x✝ = 128#8 → (x✝ >ₛ x✝¹) = false === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 615469)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 615468)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 615469))))
        (Lean.Expr.const `Bool.false []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 194.376449 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 343.416559 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.853939 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.317050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.605230 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.929100 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 35.183170 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.852930 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.936500 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝¹) = false
    x✝¹ x✝ : BitVec 8
    c✝ : BitVec 1
    heq✝ : ofBool (x✝ == 128#8) = 1#1
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) =
            true ↔
        (x✝ >ₛ x✝¹) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.262329 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 183.041810 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 115.551870 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.524640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.104610 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.199329 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 37.653630 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.419100 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.146050 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝ = 0#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 680516)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 680517))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 680517)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 87.488770 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 295.215398 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 115.186210 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.855540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.933430 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.191889 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.721010 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.777280 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 33.471270 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.zero)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.820370 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 281.492249 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 114.902899 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.881590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.853810 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.597230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 37.721830 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.217640 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 28.236230 ms, MSGSTART 
    Unsupported syntax x✝ = 0#8 → (x✝ >ᵤ x✝¹) = false === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 734132)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 734131)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 734132))))
        (Lean.Expr.const `Bool.false []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 87.068609 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 288.019279 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 113.279760 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.751960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.490520 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.096229 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.672000 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.906370 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.399930 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ᵤ x✝¹) = false
    x✝¹ x✝ : BitVec 8
    c✝ : BitVec 1
    heq✝ : ofBool (x✝ == 0#8) = 1#1
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) =
            true ↔
        (x✝ >ᵤ x✝¹) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.290570 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 152.722979 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 115.815370 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.124869 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.989120 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.689030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 37.787890 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.395570 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.804190 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝¹ = 0#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 784517)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 784516))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 784516)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 87.247179 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 297.547299 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 115.610700 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.039960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.169530 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.678879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.876090 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.852710 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 34.360820 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.zero)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.615360 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 279.364778 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 214.810639 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.499680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.724030 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.112219 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 37.702300 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.296240 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.916850 ms, MSGSTART 
    Unsupported syntax x✝ = 0#8 → (x✝ >ᵤ x✝¹) = false === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.SimpLemmas._hyg 1811)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 837824)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 837823)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 837824))))
        (Lean.Expr.const `Bool.false []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.874489 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 338.687909 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 114.037079 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.136270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.592790 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.835710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.929750 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.933170 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.656850 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ᵤ x✝¹) = false
    x✝¹ x✝ : BitVec 8
    c✝ : BitVec 1
    heq✝ : ofBool (x✝ == 0#8) = 1#1
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 8) =
            true ↔
        (x✝ >ᵤ x✝¹) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.324269 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 151.898840 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 156.128739 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.469870 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.769890 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.040509 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 84.309410 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.501830 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.155880 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 1) (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 201.384739 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 370.235918 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 208.083499 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.077060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.625530 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.234420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.430280 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.226310 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 36.083499 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.702840 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 287.937339 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 156.102530 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.947550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.509310 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.909850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 83.850600 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.460391 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.247439 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)))
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 2) (AutoStructs.Term.var 0))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.293450 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 424.961778 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 307.578079 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.445479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.534990 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.649600 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 34.727970 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.000980 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.749950 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
            (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.969819 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 192.309070 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 153.221120 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.685800 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.484330 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.571359 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 83.534170 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.508260 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.630930 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 1) (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.911929 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 367.374569 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 156.445149 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.134480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.397110 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.022089 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.479240 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.022200 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 35.368870 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.297910 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 287.562688 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 153.752559 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.390100 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.368780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.883009 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 84.017100 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.484460 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.148070 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)))
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 2) (AutoStructs.Term.var 0))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.778049 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 376.354129 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 182.619459 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.864330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.636910 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 70.457900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 34.907859 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.022730 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 31.012920 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
            (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 152.073310 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 344.691338 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 222.734959 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.481670 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.595410 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.892519 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 43.523820 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.589150 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 49.902390 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 1) (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 137.062889 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 319.495399 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 150.849809 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.535350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.574500 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.549350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.402649 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.158300 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 35.756170 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.261730 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 431.250658 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 248.419759 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.095820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.399130 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 159.938829 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 43.434980 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.587240 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 49.294050 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)))
            (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 2) (AutoStructs.Term.var 0))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 154.024449 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 321.471859 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 190.940429 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.193600 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.297810 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.970200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.554550 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.089300 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 28.727570 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.le)
            (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.427299 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 160.187209 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 198.251230 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.060479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.340120 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 159.696660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 43.275680 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.626220 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 50.885399 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 1) (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 134.743410 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 320.303658 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 151.823719 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.216730 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.539650 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 156.203079 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.530390 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.241780 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 36.408640 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 144.717419 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 280.419999 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 148.023249 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.480780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.308510 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 158.087569 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 43.715880 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.678220 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 50.387890 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)))
            (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 2) (AutoStructs.Term.var 0))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.320009 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 320.691929 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 153.821900 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.897359 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.281470 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.465820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.523600 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.129070 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 28.837870 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.le)
            (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.200320 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 160.784779 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 154.690859 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.915460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.374360 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.519799 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 83.963980 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.469640 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 57.479600 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.954339 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 373.091719 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 157.206039 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.947800 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.494540 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.364229 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.681300 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.986250 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 35.059700 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.825680 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 288.715409 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 155.145069 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.180660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.239920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.566430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 83.954689 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.450270 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 57.116300 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)))
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 0) (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.190240 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 379.404528 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 159.145959 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.155190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.413360 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.678820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 34.758300 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.971100 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.103800 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
            (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.673939 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 193.860229 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 154.758279 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.450810 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.375180 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.403230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 84.001979 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.434230 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 56.472880 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.355230 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 432.212468 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 157.225529 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.047890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.441240 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.651090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.613380 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.995229 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 35.202300 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.569330 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 287.547589 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 155.449289 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.322780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.377050 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.351900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 90.211959 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.473480 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 56.518240 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.or
            (AutoStructs.Formula.unop AutoStructs.Unop.neg
              (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)))
            (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
              (AutoStructs.Term.var 0) (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.181920 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 374.265008 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 260.441379 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.720320 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.494820 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.071490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 34.777659 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.000050 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.795120 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.signed AutoStructs.RelationOrdering.le)
            (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.767800 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 193.677259 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 173.390419 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.245630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.246630 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.518009 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.575410 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.446740 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 47.337610 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 121.018839 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 234.876989 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhorhicmphminhmax_proof.lean:557:4: warning: exponent 427 exceeds the threshold 256, exponentiation operation was not evaluated, use `set_option exponentiation.threshold <num>` to set a new threshold
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 178.373739 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.481840 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.384430 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.460230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.527349 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.061800 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 34.917190 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.zero)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 125.018100 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 299.965329 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 147.339149 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.087970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.250040 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.266990 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.767779 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.422470 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 39.392930 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.850450 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 229.263229 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 153.252260 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.877990 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.386680 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.680299 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.609080 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.961140 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.616690 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.le)
            (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.386290 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 157.399349 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 159.308819 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.343450 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.291110 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.966270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.061770 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.436470 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 28.918849 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.488820 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 216.745979 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 150.675089 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.663770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.518590 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.451730 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.523659 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.971250 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.290110 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.zero)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.773370 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 269.670929 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 148.412990 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.370200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.402400 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.392520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.658910 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.422920 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 29.384190 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.530389 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 219.518119 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 232.434719 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.800980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.381660 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.614710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.533609 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.954630 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.543950 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom (AutoStructs.Relation.unsigned AutoStructs.RelationOrdering.le)
            (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.281900 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 158.492219 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.161150 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.551900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.842300 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.353529 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 76.322630 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.897850 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 127#8)).toNat
     b := ↑(ofBool (x✝ ≥ₛ x✝¹) &&& ofBool (x✝ == 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.864850 ms, MSGSTART 
    Unsupported syntax x✝ = 127#8 → (x✝ ≥ₛ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1832704)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 127)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1832703)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1832704))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.497029 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 341.913869 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.736739 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.136950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.649280 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.477290 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.700689 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.568440 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.564950 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.354290 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 254.499649 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.538070 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.946440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.605799 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.853320 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.789500 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.603520 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.800280 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.746209 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 256.870049 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.498859 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.279220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.938110 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.226650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 77.925309 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.877210 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 127#8)).toNat
     b := ↑(ofBool (x✝ == 127#8) &&& ofBool (x✝ ≥ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.755030 ms, MSGSTART 
    Unsupported syntax x✝ = 127#8 → (x✝ ≥ₛ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1920978)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 127)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1920977)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1920978))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.720980 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 363.479028 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 51.516000 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.378540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.509360 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.927739 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.946480 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.487810 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.708280 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.580899 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 178.880450 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.992089 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.671500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.606650 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.201040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 67.805270 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.046689 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.408550 ms, MSGSTART 
    Equality (x✝ ≥ₛ x✝¹) = (x✝ == 127#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 110.157050 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 405.917788 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 52.033810 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.909800 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.600059 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.764360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.832080 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.495100 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.660630 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.783229 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 181.267240 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.779420 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.157620 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.195880 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.104109 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 76.467290 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.882150 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ == 127#8)).toNat
     b := ↑(ofBool (x✝¹ ≥ₛ x✝) &&& ofBool (x✝¹ == 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.139860 ms, MSGSTART 
    Unsupported syntax x✝¹ = 127#8 → (x✝¹ ≥ₛ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2036407)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 127)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2036408)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2036407))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.873959 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 344.209639 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.758259 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.141280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.704650 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.973230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.889250 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.595370 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.763000 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.546149 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 257.614439 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 137.267789 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.075400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.826980 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.380899 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 78.009300 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.895210 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 127#8)).toNat
     b := ↑(ofBool (x✝ == 127#8) &&& ofBool (x✝ ≥ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.028230 ms, MSGSTART 
    Unsupported syntax x✝ = 127#8 → (x✝ ≥ₛ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2097985)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 127)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2097984)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2097985))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.972019 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 364.802449 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 51.146120 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.357721 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.480790 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.454570 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.013260 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.508320 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.701100 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.190339 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 180.247750 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 132.995189 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.647520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.542960 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.556530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 68.110269 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.063750 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.274890 ms, MSGSTART 
    Equality (x✝ ≥ₛ x✝¹) = (x✝ == 127#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.987130 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 408.652868 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 51.851749 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.684970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.703640 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.322800 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.050580 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.498440 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.885940 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.029589 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 180.362949 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 122.493700 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.590690 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.824909 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 156.120300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.153830 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.039520 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == -1#8)).toNat
     b := ↑(ofBool (x✝ ≥ᵤ x✝¹) &&& ofBool (x✝ == -1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.985079 ms, MSGSTART 
    Unsupported syntax x✝ = 255#8 → (x✝ ≥ᵤ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2214492)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2214491)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2214492))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.493250 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 299.391379 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.407020 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.460010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.944920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 152.484590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.675820 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.851180 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.139400 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.093279 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 252.999359 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.957339 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.771840 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.723620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.632129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 44.118380 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.025300 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == -1#8)).toNat
     b := ↑(ofBool (x✝ == -1#8) &&& ofBool (x✝ ≥ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.678520 ms, MSGSTART 
    Unsupported syntax x✝ = 255#8 → (x✝ ≥ᵤ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2271054)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2271053)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2271054))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.479600 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 321.264148 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 55.162980 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.975080 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.764890 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.824289 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.438310 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.736090 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.014030 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.144660 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 184.579909 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.989560 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.236260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.006860 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.043179 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.854640 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.341190 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.055970 ms, MSGSTART 
    Equality (x✝ ≥ᵤ x✝¹) = (x✝ == 255#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.777139 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 344.576779 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 55.481329 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.004130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.821430 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 152.744780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.489470 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.728029 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.366520 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.203870 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 185.046089 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 122.536129 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.526220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.754470 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.867670 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 42.039149 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.032870 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ == -1#8)).toNat
     b := ↑(ofBool (x✝¹ ≥ᵤ x✝) &&& ofBool (x✝¹ == -1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.996110 ms, MSGSTART 
    Unsupported syntax x✝¹ = 255#8 → (x✝¹ ≥ᵤ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2380668)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2380669)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2380668))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.331640 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 300.238609 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.313959 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.560250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.973590 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.942680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.520670 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.754630 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.238779 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.620890 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 252.527559 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.301259 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.512010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.624360 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.160459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 43.718120 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.022790 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == -1#8)).toNat
     b := ↑(ofBool (x✝ == -1#8) &&& ofBool (x✝ ≥ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.716080 ms, MSGSTART 
    Unsupported syntax x✝ = 255#8 → (x✝ ≥ᵤ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2436908)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2436907)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2436908))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.528909 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 322.043959 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 55.241020 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.910650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.716270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 152.266199 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.602620 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.765870 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.161030 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.929639 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 184.339970 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.266799 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.245000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.948220 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.225450 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.744050 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.298570 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.900939 ms, MSGSTART 
    Equality (x✝ ≥ᵤ x✝¹) = (x✝ == 255#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.326380 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 346.016429 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 55.624260 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.131560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.807130 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 153.535349 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.762160 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.777120 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.243900 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.731560 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 186.238469 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.196639 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.310740 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.120490 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.620689 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 76.908780 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.869340 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 128#8)).toNat
     b := ↑(ofBool (x✝¹ ≥ₛ x✝) &&& ofBool (x✝ == 128#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.178700 ms, MSGSTART 
    Unsupported syntax x✝ = 128#8 → (x✝¹ ≥ₛ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2547255)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2547255)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2547254))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.015229 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 346.521548 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.486010 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.532499 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.819001 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.054029 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.894480 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.622300 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.825650 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.392629 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 257.321299 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.550579 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.904240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.936000 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.512840 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 78.401879 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.886510 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 128#8)).toNat
     b := ↑(ofBool (x✝ == 128#8) &&& ofBool (x✝¹ ≥ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.059750 ms, MSGSTART 
    Unsupported syntax x✝ = 128#8 → (x✝¹ ≥ₛ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2609713)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2609713)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2609712))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.171060 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 368.551818 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 51.440720 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.622770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.525200 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.577899 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.189740 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.578530 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.973340 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.272579 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 180.940010 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 133.947449 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.720850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.626550 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.361820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 68.558360 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.120950 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.333450 ms, MSGSTART 
    Equality (x✝¹ ≥ₛ x✝) = (x✝ == 128#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 110.488889 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 409.725208 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 52.013300 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.845449 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.556050 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.920180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.171330 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.586820 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.038600 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.081149 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 181.150460 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.621730 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.288940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.147220 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.268229 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 77.332150 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.894780 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ == 128#8)).toNat
     b := ↑(ofBool (x✝ ≥ₛ x✝¹) &&& ofBool (x✝¹ == 128#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.193050 ms, MSGSTART 
    Unsupported syntax x✝¹ = 128#8 → (x✝ ≥ₛ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2725332)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2725332)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2725333))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.085489 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 346.548359 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.873179 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.524550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.799780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.886980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.053000 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.680890 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.949839 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.786990 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 257.958379 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.669160 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.059170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.155080 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.070319 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 78.642560 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.876610 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 128#8)).toNat
     b := ↑(ofBool (x✝ == 128#8) &&& ofBool (x✝¹ ≥ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.998350 ms, MSGSTART 
    Unsupported syntax x✝ = 128#8 → (x✝¹ ≥ₛ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2787100)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2787100)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2787099))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.344779 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 367.830699 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 51.588979 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.697120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.562460 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.448900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.049920 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.537530 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.797230 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.565719 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 181.039999 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 133.870649 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.826880 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.582170 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.760940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 68.460509 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.103080 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.364640 ms, MSGSTART 
    Equality (x✝¹ ≥ₛ x✝) = (x✝ == 128#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 110.515630 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 409.859108 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 52.241399 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.957280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.627610 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.550380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.109280 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.604150 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.087560 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.971329 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 181.474789 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.767569 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.308239 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.071420 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.776650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 41.479140 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.874920 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 0#8)).toNat
     b := ↑(ofBool (x✝¹ ≥ᵤ x✝) &&& ofBool (x✝ == 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.007400 ms, MSGSTART 
    Unsupported syntax x✝ = 0#8 → (x✝¹ ≥ᵤ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2903492)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2903492)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2903491))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.004619 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 291.153049 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.636060 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.020470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.520490 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.303759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.670420 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.557560 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.681100 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.387359 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 244.167800 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.320570 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.132250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.018969 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.779520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 43.293580 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.862440 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 0#8)).toNat
     b := ↑(ofBool (x✝ == 0#8) &&& ofBool (x✝¹ ≥ᵤ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.953840 ms, MSGSTART 
    Unsupported syntax x✝ = 0#8 → (x✝¹ ≥ᵤ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2954574)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2954574)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2954573))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.522179 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 314.225739 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 51.440830 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.566380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.332650 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.556029 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.847270 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.521350 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.754410 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.884369 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 175.140850 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.127860 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.001110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.307780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.285829 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.382670 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.075160 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.280750 ms, MSGSTART 
    Equality (x✝¹ ≥ᵤ x✝) = (x✝ == 0#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.993439 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 325.615569 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 52.338860 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.801330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.371960 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.849849 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.193880 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.565180 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.950590 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.118089 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 175.900480 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.381979 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.344540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.136610 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.976889 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 41.467130 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.857750 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ == 0#8)).toNat
     b := ↑(ofBool (x✝ ≥ᵤ x✝¹) &&& ofBool (x✝¹ == 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.151700 ms, MSGSTART 
    Unsupported syntax x✝¹ = 0#8 → (x✝ ≥ᵤ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3052377)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3052377)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3052378))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.748680 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 291.083548 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 122.897259 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.078970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.533700 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.291070 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.139520 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.585650 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.540349 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.916480 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 245.474869 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.629739 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.236270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.079480 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.242869 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 43.161670 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.869570 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == 0#8)).toNat
     b := ↑(ofBool (x✝ == 0#8) &&& ofBool (x✝¹ ≥ᵤ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.837700 ms, MSGSTART 
    Unsupported syntax x✝ = 0#8 → (x✝¹ ≥ᵤ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3103137)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3103137)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3103136))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.246930 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 314.528538 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 51.527340 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.557730 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.359500 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.386940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 26.880099 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.503380 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.693030 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 194.500770 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 174.852340 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 136.881240 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.912910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.308890 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.204869 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.404160 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.066150 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.211620 ms, MSGSTART 
    Equality (x✝¹ ≥ᵤ x✝) = (x✝ == 0#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.343909 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 325.013569 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 52.238110 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.628640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.380410 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.556689 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 27.316230 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.554940 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.984990 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.566079 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 176.308440 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.835510 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.108540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.323430 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.899339 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 77.147720 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.913290 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ ≥ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝ ≥ₛ x✝¹) ||| ofBool (x✝ == 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.116110 ms, MSGSTART 
    Unsupported syntax x✝ = 127#8 → (x✝ ≥ₛ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3202032)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 127)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3202031)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3202032))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.415059 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 349.581209 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 167.557619 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.166380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.600880 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 70.291890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 35.152969 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.038590 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.236620 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.641770 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 242.120309 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 141.293529 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.097150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.764810 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.165430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 69.186460 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.467209 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.490440 ms, MSGSTART 
    Equality (x✝ == 127#8) = (x✝ ≥ₛ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.849010 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 423.190318 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.601429 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.206690 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.563510 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.387640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 75.243819 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.922620 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ ≥ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝ == 127#8) ||| ofBool (x✝ ≥ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.294220 ms, MSGSTART 
    Unsupported syntax x✝ = 127#8 → (x✝ ≥ₛ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3301991)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 127)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3301990)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3301991))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.498790 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 394.560798 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.893330 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.315260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.143400 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.219149 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 76.726660 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.919980 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ₛ x✝)).toNat
     b := ↑(ofBool (x✝¹ ≥ₛ x✝) ||| ofBool (x✝¹ == 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.894940 ms, MSGSTART 
    Unsupported syntax x✝¹ = 127#8 → (x✝¹ ≥ₛ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3338473)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 127)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3338474)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3338473))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.814239 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 347.850629 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 166.570949 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.954270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.629260 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 70.197410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 35.152330 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.018740 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.275799 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 107.720620 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 241.765189 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 141.251740 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.772159 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.584580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.228130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 68.860500 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.460830 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.356030 ms, MSGSTART 
    Equality (x✝¹ == 127#8) = (x✝¹ ≥ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.724319 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 420.948228 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.429050 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.598379 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.347860 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.911220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 75.841540 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.934179 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ ≥ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝ == 127#8) ||| ofBool (x✝ ≥ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.400160 ms, MSGSTART 
    Unsupported syntax x✝ = 127#8 → (x✝ ≥ₛ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3437944)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 127)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3437943)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3437944))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.970610 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 347.928348 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.855279 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.615690 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.656210 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.529759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 41.197120 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.039070 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ ≥ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ ≥ᵤ x✝¹) ||| ofBool (x✝ == -1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.645670 ms, MSGSTART 
    Unsupported syntax x✝ = 255#8 → (x✝ ≥ᵤ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3475240)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3475239)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3475240))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.919850 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 302.957898 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 80.524669 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.371860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.654900 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.653260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.711610 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 6.971460 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.159460 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.432229 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 154.599760 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.597240 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.475469 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.123780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.344710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 34.137090 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.609590 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.055540 ms, MSGSTART 
    Equality (x✝ == 255#8) = (x✝ ≥ᵤ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.091729 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 345.750829 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.023889 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.891500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.950290 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.745899 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 40.540180 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.056820 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ ≥ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ == -1#8) ||| ofBool (x✝ ≥ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.984090 ms, MSGSTART 
    Unsupported syntax x✝ = 255#8 → (x✝ ≥ᵤ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3554911)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3554910)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3554911))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.590010 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 302.405788 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.284569 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.613640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.704110 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.087810 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 41.538159 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.050300 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ᵤ x✝)).toNat
     b := ↑(ofBool (x✝¹ ≥ᵤ x✝) ||| ofBool (x✝¹ == -1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.626440 ms, MSGSTART 
    Unsupported syntax x✝¹ = 255#8 → (x✝¹ ≥ᵤ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3585321)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3585322)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3585321))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.846110 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 301.868919 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 80.069140 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.357549 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.644600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.367330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.707810 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.001310 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.151650 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.114690 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 153.779079 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.114540 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.357440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.992050 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.328619 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 34.234710 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.543690 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.041370 ms, MSGSTART 
    Equality (x✝¹ == 255#8) = (x✝¹ ≥ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 105.148909 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 345.372989 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.728750 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.513179 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.748729 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.574740 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 40.411590 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.027130 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ ≥ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ == -1#8) ||| ofBool (x✝ ≥ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.872709 ms, MSGSTART 
    Unsupported syntax x✝ = 255#8 → (x✝ ≥ᵤ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3664872)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 255)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3664871)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3664872))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.775260 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 302.399369 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 130.444850 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.409450 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.202509 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.182560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 76.749710 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.929070 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ₛ x✝)).toNat
     b := ↑(ofBool (x✝¹ ≥ₛ x✝) ||| ofBool (x✝ == 128#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.074959 ms, MSGSTART 
    Unsupported syntax x✝ = 128#8 → (x✝¹ ≥ₛ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3695812)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3695812)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3695811))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.870570 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 347.643319 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 167.266029 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.037300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.650340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.882229 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 34.795070 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 6.981900 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.347220 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 107.141720 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 241.228659 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 192.407830 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.447150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.646250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.471950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 69.021560 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.622049 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.452340 ms, MSGSTART 
    Equality (x✝ == 128#8) = (x✝¹ ≥ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.093470 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 419.600388 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 130.224280 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.382470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.228850 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.446590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 75.611419 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.921920 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ₛ x✝)).toNat
     b := ↑(ofBool (x✝ == 128#8) ||| ofBool (x✝¹ ≥ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.225040 ms, MSGSTART 
    Unsupported syntax x✝ = 128#8 → (x✝¹ ≥ₛ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3795917)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3795917)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3795916))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.349300 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 347.134998 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 132.163949 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.402130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.066720 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.263479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 76.571800 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.900030 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ ≥ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝ ≥ₛ x✝¹) ||| ofBool (x✝¹ == 128#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.989490 ms, MSGSTART 
    Unsupported syntax x✝¹ = 128#8 → (x✝ ≥ₛ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3832465)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3832465)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3832466))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.670960 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 349.079058 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 169.525579 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.299410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.862580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 71.325390 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 35.645810 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.248810 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.320320 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 107.960009 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 243.473619 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 144.480770 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.082100 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.837920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.496589 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 68.369400 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.420390 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.448670 ms, MSGSTART 
    Equality (x✝¹ == 128#8) = (x✝ ≥ₛ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.454259 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 421.474968 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 130.252000 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.285519 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.147360 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.809410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 75.619650 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.914110 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ₛ x✝)).toNat
     b := ↑(ofBool (x✝ == 128#8) ||| ofBool (x✝¹ ≥ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.208769 ms, MSGSTART 
    Unsupported syntax x✝ = 128#8 → (x✝¹ ≥ₛ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3932082)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 128)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sle [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3932082)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3932081))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.743950 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 348.114109 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 122.240629 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.264050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.029340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.820380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 40.546999 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.852930 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ᵤ x✝)).toNat
     b := ↑(ofBool (x✝¹ ≥ᵤ x✝) ||| ofBool (x✝ == 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.037900 ms, MSGSTART 
    Unsupported syntax x✝ = 0#8 → (x✝¹ ≥ᵤ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3969204)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3969204)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 3969203))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.147280 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 291.342929 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 80.499320 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.378360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.657900 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.537669 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.783040 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 6.973720 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.151420 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.598460 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 153.582309 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.324520 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.866900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.375570 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.925679 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.664170 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.394680 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.315480 ms, MSGSTART 
    Equality (x✝ == 0#8) = (x✝¹ ≥ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.425000 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 328.005468 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 121.924389 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.186370 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.120120 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.134739 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 39.641220 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.876590 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ᵤ x✝)).toNat
     b := ↑(ofBool (x✝ == 0#8) ||| ofBool (x✝¹ ≥ᵤ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.073270 ms, MSGSTART 
    Unsupported syntax x✝ = 0#8 → (x✝¹ ≥ᵤ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4043412)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4043412)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4043411))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.531050 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 292.879139 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 222.563499 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.242680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.999230 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.261219 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 40.576160 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.887340 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ ≥ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ ≥ᵤ x✝¹) ||| ofBool (x✝¹ == 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.206860 ms, MSGSTART 
    Unsupported syntax x✝¹ = 0#8 → (x✝ ≥ᵤ x✝¹) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4071111)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4071111)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4071112))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 144.151220 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 292.124408 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 80.252949 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.339470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.640840 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.484990 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.594240 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 6.941040 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.040570 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.495299 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 154.067070 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 126.745260 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.923529 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.299640 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.365980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.537160 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.423170 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.250020 ms, MSGSTART 
    Equality (x✝¹ == 0#8) = (x✝ ≥ᵤ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.359619 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 327.401089 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 123.078720 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.485440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.040519 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.669940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 39.803390 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.884140 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ᵤ x✝)).toNat
     b := ↑(ofBool (x✝ == 0#8) ||| ofBool (x✝¹ ≥ᵤ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.111420 ms, MSGSTART 
    Unsupported syntax x✝ = 0#8 → (x✝¹ ≥ᵤ x✝) = true === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4145199)))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofNat [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 0)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ule [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4145199)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4145198))))
        (Lean.Expr.const `Bool.true []))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.878819 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 293.025379 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.063620 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.328900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.362920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.409909 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.676280 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.918290 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ₛ x✝)).toNat
     b := ↑(ofBool (x✝¹ >ₛ x✝) &&& ofBool (x✝ != 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.423100 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4173413)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4173412))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4173413)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.178329 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 381.075109 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 140.915220 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.749720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.806520 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.957279 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 74.540300 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.950030 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.743230 ms, MSGSTART 
    Equality (x✝ != 127#8) = (x✝¹ >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.452929 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 525.825918 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 59.283929 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.520560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.422260 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 66.104120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 34.963800 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.052200 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.895410 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.612519 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 127.931550 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.052189 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.145190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.268860 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.109729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 81.760280 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.907420 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ₛ x✝)).toNat
     b := ↑(ofBool (x✝ != 127#8) &&& ofBool (x✝¹ >ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.690420 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4269575)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4269574))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4269575)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.680479 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 360.985169 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.130500 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.390060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.305459 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.743180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.693260 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.922560 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝ >ₛ x✝¹) &&& ofBool (x✝¹ != 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.286409 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝¹ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4306357)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4306358))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4306357)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.871540 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 380.002228 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 141.772970 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.190710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.877880 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.514059 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 74.543660 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.896270 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.637880 ms, MSGSTART 
    Equality (x✝¹ != 127#8) = (x✝ >ₛ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.492319 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 425.507368 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 59.301050 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.657480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.463790 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 66.340849 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 35.065950 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.079300 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.021160 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.980300 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 128.591299 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.379599 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.285790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.377220 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.500620 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.155169 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.931860 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ₛ x✝)).toNat
     b := ↑(ofBool (x✝ != 127#8) &&& ofBool (x✝¹ >ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.399320 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4402034)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4402033))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4402034)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.871220 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 361.382658 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 226.298269 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.924240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.427780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 156.085399 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 47.553100 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.032370 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ᵤ x✝)).toNat
     b := ↑(ofBool (x✝¹ >ᵤ x✝) &&& ofBool (x✝ != -1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.565640 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4439630)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4439629))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4439630)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 187.564739 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 334.241009 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.393299 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.620940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.287410 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.176999 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 40.154090 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.082490 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.769880 ms, MSGSTART 
    Equality (x✝ != 255#8) = (x✝¹ >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.834770 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 351.037148 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 47.744090 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.790470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.717290 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.798049 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.904730 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.060540 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.834680 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.011400 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 115.823679 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 126.238940 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.708470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.361600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 154.814439 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 46.851500 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.051610 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ᵤ x✝)).toNat
     b := ↑(ofBool (x✝ != -1#8) &&& ofBool (x✝¹ >ᵤ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.317660 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4516556)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4516555))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4516556)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.173749 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 316.330349 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 125.867640 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.715810 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.248310 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.103989 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 47.428630 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.051790 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ >ᵤ x✝¹) &&& ofBool (x✝¹ != -1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.356940 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝¹ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4547167)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4547168))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4547167)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.210689 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 332.651109 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.244439 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.751130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.371580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 150.592010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 39.879700 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.090570 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.730240 ms, MSGSTART 
    Equality (x✝¹ != 255#8) = (x✝ >ᵤ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 105.298029 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 352.426899 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 47.252100 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.617780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.708720 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.411410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.794960 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.006250 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.717720 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.969609 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 115.785750 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 125.918129 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.907640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.510660 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 162.397929 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 47.324810 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.072230 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ᵤ x✝)).toNat
     b := ↑(ofBool (x✝ != -1#8) &&& ofBool (x✝¹ >ᵤ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.720560 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4623976)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4623975))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4623976)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.548220 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 317.317109 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.509380 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.776400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.314479 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.801290 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.682100 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.925440 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝ >ₛ x✝¹) &&& ofBool (x✝ != 128#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.196800 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝ = 128#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4655116)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4655117))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4655117)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 128)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.016539 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 378.921698 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 141.266980 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.643800 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.696540 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.269439 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 74.356370 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.930660 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.642250 ms, MSGSTART 
    Equality (x✝ != 128#8) = (x✝ >ₛ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 118.416099 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 426.949618 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 59.568210 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.616480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.414140 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 66.320780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 35.104090 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.112759 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.916740 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 108.176600 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 127.984259 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.626930 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.271960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.312720 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.217569 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.028360 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.908390 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝ != 128#8) &&& ofBool (x✝ >ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.354880 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝ = 128#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4751424)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4751425))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4751425)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 128)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.690879 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 361.550089 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 132.083639 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.135840 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.344340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.008860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.888229 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.900950 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ₛ x✝)).toNat
     b := ↑(ofBool (x✝¹ >ₛ x✝) &&& ofBool (x✝¹ != 128#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.282980 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝¹ = 128#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4788274)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4788273))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4788273)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 128)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.908160 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 379.276588 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 141.201869 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.707950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.747050 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.319210 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 74.307230 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.933609 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.591990 ms, MSGSTART 
    Equality (x✝¹ != 128#8) = (x✝¹ >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 118.588180 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 427.581398 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 59.292919 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.565720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.440510 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.761220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 34.911550 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.038420 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.782540 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 108.651739 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 127.487660 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.667739 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.149170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.363440 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.250869 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.303260 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.910740 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝ != 128#8) &&& ofBool (x✝ >ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.402070 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝ = 128#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4884095)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4884096))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4884096)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 128)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.479869 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 361.909139 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 126.364899 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.602470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.221380 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.593180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 46.881010 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.860790 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ >ᵤ x✝¹) &&& ofBool (x✝ != 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.284529 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝ = 0#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4921517)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4921518))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4921518)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.450560 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 325.043049 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.784209 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.330860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.210150 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.616060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 39.467270 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.924101 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.518699 ms, MSGSTART 
    Equality (x✝ != 0#8) = (x✝ >ᵤ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.170650 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 334.246759 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 47.507990 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.726180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.741580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.985770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.900780 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.055960 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.888640 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.439389 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 116.102690 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 125.400989 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.445380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.288380 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.958720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 46.474479 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.864060 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ != 0#8) &&& ofBool (x✝ >ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.376690 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝ = 0#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4994445)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4994446))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 4994446)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.007940 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 307.511059 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 124.474739 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.496400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.142710 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.582220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 46.574470 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.893280 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ᵤ x✝)).toNat
     b := ↑(ofBool (x✝¹ >ᵤ x✝) &&& ofBool (x✝¹ != 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.061009 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝¹ = 0#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5023085)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5023084))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5023084)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.061140 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 325.452149 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 365.501259 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.317620 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.176540 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.051889 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 39.442650 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.919690 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.576750 ms, MSGSTART 
    Equality (x✝¹ != 0#8) = (x✝¹ >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 154.718529 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 331.963289 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 47.303549 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.682770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.736340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.565510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.849120 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.038460 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.866460 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.372069 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 115.799820 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 125.811110 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.510859 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.407920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.473240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 46.409800 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.870520 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ᵤ x✝¹)).toNat
     b := ↑(ofBool (x✝ != 0#8) &&& ofBool (x✝ >ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.328829 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝ = 0#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1391)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5095894)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5095895))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5095895)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.219600 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 308.608189 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 132.731730 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.777319 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.394190 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.547870 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 80.723469 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.905099 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 127#8)).toNat
     b := ↑(ofBool (x✝¹ >ₛ x✝) ||| ofBool (x✝ != 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.393010 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5125185)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5125184))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5125185)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.539530 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 362.824528 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 164.762699 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.967040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.319050 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.494749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.955880 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.185450 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.728680 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 108.406529 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 302.483679 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 132.491379 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.195060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.402500 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.291649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 83.121130 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.941520 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 127#8)).toNat
     b := ↑(ofBool (x✝ != 127#8) ||| ofBool (x✝¹ >ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.004290 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5188706)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5188705))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5188706)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.963869 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 361.708799 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 84.077059 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.630230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.283630 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.144160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.979390 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.490959 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.007020 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.733640 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 215.071389 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 83.209210 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.446600 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.183600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.277269 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.681400 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.430750 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.721140 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.893970 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 216.341799 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 138.312219 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.776740 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.826100 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.353310 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 74.505759 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.590160 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.670940 ms, MSGSTART 
    Equality (x✝¹ >ₛ x✝) = (x✝ != 127#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 115.520170 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 421.698808 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 133.602659 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.924429 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.389470 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.434430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 80.494929 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.971920 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ != 127#8)).toNat
     b := ↑(ofBool (x✝ >ₛ x✝¹) ||| ofBool (x✝¹ != 127#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.464570 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝¹ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5304261)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5304262))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5304261)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.187910 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 363.294688 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 164.820480 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.887210 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.303570 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.867339 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.768100 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.160740 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.778880 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 158.409109 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 345.897589 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 133.786669 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.838970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.346520 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.399279 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.821090 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.899250 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 127#8)).toNat
     b := ↑(ofBool (x✝ != 127#8) ||| ofBool (x✝¹ >ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.406500 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝ = 127#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5367089)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5367088))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5367089)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 127)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 127)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.433679 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 363.903429 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 83.946389 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.494280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.195980 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.162630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.190620 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.431060 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.714769 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.066620 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 215.734309 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 83.765220 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.443650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.252330 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.967949 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.920070 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.442590 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.955300 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.982600 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 216.274219 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 138.048290 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.768119 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.833930 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.657060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 74.256060 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.645770 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.681899 ms, MSGSTART 
    Equality (x✝¹ >ₛ x✝) = (x✝ != 127#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 116.452290 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 422.235658 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.632449 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.678910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.585460 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.307550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 45.845509 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.056990 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != -1#8)).toNat
     b := ↑(ofBool (x✝¹ >ᵤ x✝) ||| ofBool (x✝ != -1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.553370 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5483725)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5483724))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5483725)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.309260 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 319.048149 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 159.716349 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.232970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.899520 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.675259 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.540770 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.368640 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.536020 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.012530 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 292.695428 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.792059 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.362030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.333230 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.409799 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 48.063400 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.030070 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != -1#8)).toNat
     b := ↑(ofBool (x✝ != -1#8) ||| ofBool (x✝¹ >ᵤ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.346210 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5540988)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5540987))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5540988)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.217340 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 317.896148 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 86.328040 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.648000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.846240 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.699639 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.558190 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.735800 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.448180 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.182460 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 220.072690 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 85.833509 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.687700 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.853640 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 154.906720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.390780 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.734779 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.393250 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.471020 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 219.545439 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 133.904620 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.846830 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.325350 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.980649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 39.833100 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.848860 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.756620 ms, MSGSTART 
    Equality (x✝¹ >ᵤ x✝) = (x✝ != 255#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.979539 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 358.394149 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.875639 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.586570 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.469710 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 156.817779 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 45.681740 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.062340 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ != -1#8)).toNat
     b := ↑(ofBool (x✝ >ᵤ x✝¹) ||| ofBool (x✝¹ != -1#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.545830 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝¹ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5647294)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5647295))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5647294)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.135230 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 320.413788 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 210.845389 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.317180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.949020 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 154.673659 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.352700 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.309390 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.498430 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.023680 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 292.227449 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.723899 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.389680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 22.366820 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.194909 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 48.044850 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.025780 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != -1#8)).toNat
     b := ↑(ofBool (x✝ != -1#8) ||| ofBool (x✝¹ >ᵤ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.439180 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝ = 255#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5704232)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5704231))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5704232)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 255)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 255)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.238080 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 317.264438 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 86.270020 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.673460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.805320 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 154.885689 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.373810 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.693450 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.420370 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.536310 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 220.032969 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 86.031130 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.774609 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.874580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 154.841920 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.427690 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.720000 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.336780 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.455159 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 219.094359 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 134.328920 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.793750 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.327160 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 151.344159 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 39.767220 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.815370 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.798670 ms, MSGSTART 
    Equality (x✝¹ >ᵤ x✝) = (x✝ != 255#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 110.170109 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 357.152709 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 134.269099 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.993820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.429410 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.370960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 80.986769 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.929100 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 128#8)).toNat
     b := ↑(ofBool (x✝ >ₛ x✝¹) ||| ofBool (x✝ != 128#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.578000 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝ = 128#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5811273)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5811274))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5811274)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 128)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.727300 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 365.511608 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 166.096330 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.856149 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.397850 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.409490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.954290 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.256400 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.725900 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.169559 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 298.897239 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 134.582070 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.804370 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.256070 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.101419 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.950870 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.908000 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 128#8)).toNat
     b := ↑(ofBool (x✝ != 128#8) ||| ofBool (x✝ >ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.338840 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝ = 128#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5874984)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5874985))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5874985)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 128)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 108.415139 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 364.520899 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 83.505680 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.550950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.187810 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.683859 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.816440 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.429050 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.674090 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.696760 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 215.681759 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 82.907940 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.443550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.164090 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.817669 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.706070 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.460440 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.801780 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.000709 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 216.799760 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 139.480979 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.651150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.854960 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.861660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 74.833939 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.664660 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.732960 ms, MSGSTART 
    Equality (x✝ >ₛ x✝¹) = (x✝ != 128#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 127.975980 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 426.578398 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 134.688449 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.964460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.310090 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.190719 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 80.589780 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.916120 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ != 128#8)).toNat
     b := ↑(ofBool (x✝¹ >ₛ x✝) ||| ofBool (x✝¹ != 128#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.315460 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ₛ x✝) = true → ¬x✝¹ = 128#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5990731)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5990730))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 5990730)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 128)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.952079 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 364.978599 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 166.092119 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.924390 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.313500 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.106920 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.719240 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.160819 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.505690 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.907720 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 297.612449 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 133.822279 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.945370 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.353960 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.118190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 82.650019 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.898620 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 128#8)).toNat
     b := ↑(ofBool (x✝ != 128#8) ||| ofBool (x✝ >ₛ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.359600 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝ = 128#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.slt [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6053747)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6053748))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6053748)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 128)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 128)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 105.568780 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 364.424478 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 83.455010 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.433660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.204850 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.835739 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.695510 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.411280 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.521300 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.952379 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 215.738850 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 83.257789 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.894960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.371180 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 124.480430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.999430 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.629830 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.389019 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.773400 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 215.626069 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 139.696350 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.838610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.812170 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.854159 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 74.355650 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.633440 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.746690 ms, MSGSTART 
    Equality (x✝ >ₛ x✝¹) = (x✝ != 128#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.052819 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 426.469378 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.573250 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.227630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.361990 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.013499 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 45.162450 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.863820 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#8)).toNat
     b := ↑(ofBool (x✝ >ᵤ x✝¹) ||| ofBool (x✝ != 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.574880 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝ = 0#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6170268)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6170269))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6170269)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.616529 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 311.401779 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 159.159060 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.063140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.319920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.115880 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.949540 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.214890 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.936900 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.086049 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 288.732699 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.229279 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.042350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.287670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.393729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 47.835590 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.826640 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#8)).toNat
     b := ↑(ofBool (x✝ != 0#8) ||| ofBool (x✝ >ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.160030 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝ = 0#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6223841)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6223842))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6223842)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.036239 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 309.351589 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 84.242030 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.559780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.277210 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.982499 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.930320 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.470550 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.809350 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.194840 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 212.795029 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 83.280250 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.467020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.223910 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.911459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.838430 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.484620 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.848380 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 101.319049 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 213.369439 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.891429 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.441050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.240190 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.145240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 39.035289 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.573480 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.626330 ms, MSGSTART 
    Equality (x✝ >ᵤ x✝¹) = (x✝ != 0#8) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.576250 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 338.234618 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.080309 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.093070 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.333270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.795759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 45.071070 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.896310 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ != 0#8)).toNat
     b := ↑(ofBool (x✝¹ >ᵤ x✝) ||| ofBool (x✝¹ != 0#8)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.359970 ms, MSGSTART 
    Unsupported syntax (x✝¹ >ᵤ x✝) = true → ¬x✝¹ = 0#8 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1802)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6322877)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6322876))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6322876)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.320220 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 310.138348 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 160.402369 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.077840 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.308980 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.259859 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.953450 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.222050 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.728080 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.922910 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 288.539668 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 176.573939 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.044590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.318600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.597069 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 47.446760 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.834360 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#823)).toNat
     b := ↑(ofBool (x✝ != 0#823) ||| ofBool (x✝ >ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 29.232760 ms, MSGSTART 
    Unsupported syntax (x✝ >ᵤ x✝¹) = true → ¬x✝ = 0#823 === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1774)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ult [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 823)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 823)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6376123)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6376124))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app
                (Lean.Expr.const `BitVec [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 823)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 823))))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6376124)))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 823)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 823)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 141.251939 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 361.730909 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 83.871859 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.472510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.212480 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.719700 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 32.044870 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.671350 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.640960 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 113.319099 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 212.624669 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 83.095270 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.532550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.240830 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.687719 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 31.760200 ms, 
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.434940 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 23.627840 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 113.754820 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 212.499839 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhorhicmphminhmax_proof.lean:1855:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
