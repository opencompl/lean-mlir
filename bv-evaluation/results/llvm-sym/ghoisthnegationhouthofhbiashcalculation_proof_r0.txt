⚠ [880/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [883/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [884/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [890/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [891/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 125.474960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 170.878219 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 235.465679 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 362.925910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 22.228029 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 16.325280 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ e ≤ 255
      0 ≤ d ≤ 255
      0 ≤ b ≤ 255
      -256 ≤ b - 256*c - e ≤ -1
      1 ≤ 256*a + d ≤ 256
      256*a + b - 256*c + d - e ≤ -1
    where
     a := ↑(0 % 2 ^ 8 + (2 ^ 8 - (x✝¹ &&& x✝ + -1#8).toNat)) / 256
     b := ↑(0#8 - x✝ &&& x✝¹).toNat
     c := ↑((0#8 - x✝ &&& x✝¹).toNat + (2 ^ 8 - x✝¹.toNat)) / 256
     d := ↑(x✝¹ &&& x✝ + -1#8).toNat
     e := ↑x✝¹.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 112.594900 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).neg.and (AutoStructs.Term.var 1)).sub (AutoStructs.Term.var 1))
            ((AutoStructs.Term.var 1).and ((AutoStructs.Term.var 0).add (AutoStructs.Term.var 2))).neg) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 128.312040 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1278.488376 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 129.030439 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 167.830550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 130.893340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 234.942728 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.740840 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.178570 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 255
      0 ≤ b ≤ 255
      -256 ≤ b - 256*c - d ≤ -1
      0 ≤ a ≤ 255
      a - b + 256*c + d ≥ 257
    where
     a := ↑(x✝ &&& x✝¹ + -1#8).toNat
     b := ↑x✝.toNat
     c := ↑(x✝.toNat + (2 ^ 8 - (0#8 - x✝¹ &&& x✝).toNat)) / 256
     d := ↑(0#8 - x✝¹ &&& x✝).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 74.234080 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((AutoStructs.Term.var 0).sub ((AutoStructs.Term.var 1).neg.and (AutoStructs.Term.var 0)))
            ((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).add (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.144729 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1039.657897 ms, 
TACEND
