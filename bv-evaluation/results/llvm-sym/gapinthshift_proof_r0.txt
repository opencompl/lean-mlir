⚠ [880/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [883/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [884/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [890/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [891/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 129.259480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 36.935310 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 153.421080 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 225.094549 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 24.734990 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 22.857810 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      d ≥ 0
      0 ≤ d - 36028797018963968*e ≤ 36028797018963967
      0 ≤ 3*d - 108086391056891904*e - 36028797018963968*f ≤ 36028797018963967
      0 ≤ b ≤ 36028797018963967
      0 ≤ 3*b - 18014398509481984*c ≤ 18014398509481983
      6*b - 36028797018963968*c - 3*d + 108086391056891904*e + 36028797018963968*f ≥ 1
      2 ≤ a ≤ 36028797018963967
    where
     a := ↑(↑55).toNat
     b := ↑x✝.toNat
     c := ↑(x✝.toNat * (6 % 2 ^ 55)) / 36028797018963968
     d := ↑x✝.toNat * ↑(2 ^ (1 % 2 ^ 55))
     e := ↑(x✝.toNat * 2 ^ (1 % 2 ^ 55)) / 36028797018963968
     f := ↑(x✝.toNat * 2 ^ (1 % 2 ^ 55) % 2 ^ 55 * (3 % 2 ^ 55)) / 36028797018963968 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 193.591169 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 712.542887 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1765.891765 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 147.034879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.209240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.075430 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 187.463100 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 19.567080 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 27.888910 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      d ≥ 0
      0 ≤ d - 36028797018963968*e ≤ 36028797018963967
      0 ≤ b ≤ 36028797018963967
      0 ≤ 3*b - 18014398509481984*c ≤ 18014398509481983
      6*b - 36028797018963968*c - d + 36028797018963968*e ≥ 1
      2 ≤ a ≤ 36028797018963967
    where
     a := ↑(↑55).toNat
     b := ↑x✝.toNat
     c := ↑(x✝.toNat * (6 % 2 ^ 55)) / 36028797018963968
     d := ↑(x✝.toNat * (3 % 2 ^ 55) % 2 ^ 55) * ↑(2 ^ (1 % 2 ^ 55))
     e := ↑(x✝.toNat * (3 % 2 ^ 55) % 2 ^ 55 * 2 ^ (1 % 2 ^ 55)) / 36028797018963968 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.840230 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 605.893846 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1405.664456 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:34:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 84.907130 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 215.618729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 96.060560 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 149.512739 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 20.445710 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 52.463890 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      1 ≤ b - 128*c ≤ 127
      5 ≤ a ≤ 127
    where
     a := ↑(↑7).toNat
     b := ↑(x✝.toNat * 2 ^ (4 % 2 ^ 7) % 2 ^ 7) * ↑(2 ^ (3 % 2 ^ 7))
     c := ↑(x✝.toNat * 2 ^ (4 % 2 ^ 7) % 2 ^ 7 * 2 ^ (3 % 2 ^ 7)) / 128 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 57.194319 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.zero) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.711620 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 232.556279 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 347.519818 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.793110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 24.998970 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 90.209120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.210870 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.425980 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 131071
      0 ≤ b ≤ 131071
      b - c ≥ 1
      17 ≤ a ≤ 131071
    where
     a := ↑(↑17).toNat
     b := ↑(x✝ &&& 1#17).toNat
     c := ↑(x✝ <<< 16#17 >>> 16#17).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 48.820559 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 75.874790 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 664.890837 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:57:83: error: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.654810 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ >>> 2#9 * x✝ >>> 2#9 >>> 3#9) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 15.077650 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.389450 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 107.952770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.162590 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.908780 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      4 ≤ a ≤ 5
    where
     a := ↑(↑9).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 20.352050 ms, MSGSTART 
    Unsupported syntax some (x✝ >>> 2 * x✝ >>> 5) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 9)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 9)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HMul.hMul [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 9)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 9)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 9)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHMul [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 9)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instMul [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 9)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HShiftRight.hShiftRight [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 9)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                        (Lean.Expr.const `Nat []))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 9)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.instHShiftRightNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 9)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 568092)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 2)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 2))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `HShiftRight.hShiftRight [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 9)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                      (Lean.Expr.const `Nat []))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 9)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instHShiftRightNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 9)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9))))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 568092)))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 5)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 5))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 9)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 9)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 8.263509 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 127.963700 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 33.221509 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 18.396670 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.824370 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.288660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.321050 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 14.439300 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      d ≥ 0
      0 ≤ d - 512*e ≤ 511
      b ≥ 0
      0 ≤ b - 512*c ≤ 511
      b - 512*c - d + 512*e ≥ 1
      6 ≤ a ≤ 511
    where
     a := ↑(↑9).toNat
     b := ↑(x✝ >>> 2#9).toNat * ↑(x✝ >>> 5#9).toNat
     c := ↑((x✝ >>> 2#9).toNat * (x✝ >>> 5#9).toNat) / 512
     d := ↑(x✝ >>> 2#9).toNat * ↑(x✝ >>> 2#9 >>> 3#9).toNat
     e := ↑((x✝ >>> 2#9).toNat * (x✝ >>> 2#9 >>> 3#9).toNat) / 512 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 20.135819 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 81.086420 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 15.329610 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:79:56: error: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 150.031829 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 1571.755713 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 755.151387 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.234180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.287670 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.510830 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      0 ≤ c - 8388608*d ≤ 8388607
      0 ≤ b ≤ 8388607
      b - c + 8388608*d ≥ 1
      13 ≤ a ≤ 8388607
    where
     a := ↑(↑23).toNat
     b := ↑(x✝ * 6#23 &&& 8384512#23).toNat
     c := ↑((x✝ * 3#23) >>> 11#23).toNat * ↑(2 ^ (12 % 2 ^ 23))
     d := ↑(((x✝ * 3#23) >>> 11#23).toNat * 2 ^ (12 % 2 ^ 23)) / 8388608 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 45.958899 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 105.452900 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 2823.902698 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 123.069439 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 368.119689 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 188.081309 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 78.642160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.407160 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.980159 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      0 ≤ c - 140737488355328*d ≤ 140737488355327
      0 ≤ b ≤ 140737488355327
      b - c + 140737488355328*d ≥ 1
      9 ≤ a ≤ 140737488355327
    where
     a := ↑(↑47).toNat
     b := ↑(x✝ &&& 140737488355072#47).toNat
     c := ↑(x✝.sshiftRight' 8#47).toNat * ↑(2 ^ (8 % 2 ^ 47))
     d := ↑((x✝.sshiftRight' 8#47).toNat * 2 ^ (8 % 2 ^ 47)) / 140737488355328 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 39.474360 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.637610 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1085.873285 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 130.529540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 1745.244283 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 881.054656 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.788379 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.792260 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.318130 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      0 ≤ c - 262144*d ≤ 262143
      0 ≤ b ≤ 262143
      b - c + 262144*d ≥ 1
      10 ≤ a ≤ 262143
    where
     a := ↑(↑18).toNat
     b := ↑(x✝ * 6#18 &&& 261632#18).toNat
     c := ↑((x✝ * 3#18).sshiftRight' 8#18).toNat * ↑(2 ^ (9 % 2 ^ 18))
     d := ↑(((x✝ * 3#18).sshiftRight' 8#18).toNat * 2 ^ (9 % 2 ^ 18)) / 262144 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 43.751620 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 103.161350 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 3105.984437 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.624320 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some ((x✝ >>> 4#35 ||| 1234#35) <<< 4#35) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.895610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.562660 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 83.926320 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.886150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.848499 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      5 ≤ a ≤ 34359738367
    where
     a := ↑(↑35).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 19.780770 ms, MSGSTART 
    Unsupported syntax some ((x✝ >>> 4 ||| 1234#35) <<< 4) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 35)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 35)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HShiftLeft.hShiftLeft [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 35)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
                    (Lean.Expr.const `Nat []))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 35)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.instHShiftLeftNat [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 35)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HOr.hOr [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 35)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 35)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 35)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHOrOfOrOp [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 35)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instOrOp [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 35)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35)))))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.const `HShiftRight.hShiftRight [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                              (Lean.Expr.app
                                (Lean.Expr.const `BitVec [])
                                (Lean.Expr.app
                                  (Lean.Expr.app
                                    (Lean.Expr.app
                                      (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero])
                                      (Lean.Expr.const `Nat []))
                                    (Lean.Expr.lit (Lean.Literal.natVal 35)))
                                  (Lean.Expr.app
                                    (Lean.Expr.const `instOfNatNat [])
                                    (Lean.Expr.lit (Lean.Literal.natVal 35))))))
                            (Lean.Expr.const `Nat []))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 35)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec.instHShiftRightNat [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 35)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35))))))
                      (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 2073254)))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 4)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 4))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 35)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 1234)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1234)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 4)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 4)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 35)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 35)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 77.121920 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 305.654329 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 226.579199 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.906090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 25.413029 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 95.739970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.929780 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.235000 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c ≥ 0
      0 ≤ c - 34359738368*d ≤ 34359738367
      0 ≤ b ≤ 34359738367
      b - c + 34359738368*d ≥ 1
      5 ≤ a ≤ 34359738367
    where
     a := ↑(↑35).toNat
     b := ↑(x✝ &&& 34359718608#35 ||| 19744#35).toNat
     c := ↑(x✝ >>> 4#35 ||| 1234#35).toNat * ↑(2 ^ (4 % 2 ^ 35))
     d := ↑((x✝ >>> 4#35 ||| 1234#35).toNat * 2 ^ (4 % 2 ^ 35)) / 34359738368 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 51.033270 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.572179 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 653.177258 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 230.707969 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.975080 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.864280 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 89.722789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.949290 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.256330 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 604462909807314587353087
      0 ≤ b ≤ 604462909807314587353087
      b - c ≥ 1
      5 ≤ a ≤ 604462909807314587353087
    where
     a := ↑(↑79).toNat
     b := ↑(x✝ &&& 77#79).toNat
     c := ↑((x✝ <<< 4#79 &&& 1234#79) >>> 4#79).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 43.422910 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 177.179669 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 557.278878 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 20.506840 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 6.842770 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.642960 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 78.287180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.017180 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.237200 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      0 ≤ 3*b - 35184372088832*c ≤ 11
      3 ≤ a ≤ 35184372088831
    where
     a := ↑(↑45).toNat
     b := ↑2 ^ (2 % 2 ^ 45)
     c := ↑(3 % 2 ^ 45 * 2 ^ (2 % 2 ^ 45)) / 35184372088832 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.460820 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.789970 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 8.426780 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 19.580429 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 6.883490 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.630730 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 78.887550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.835160 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.214150 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      0 ≤ b - 35184372088832*c ≤ 3
      3 ≤ a ≤ 35184372088831
    where
     a := ↑(↑45).toNat
     b := ↑2 ^ (2 % 2 ^ 45)
     c := ↑(1 % 2 ^ 45 * 2 ^ (2 % 2 ^ 45)) / 35184372088832 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.835890 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.748900 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 8.321000 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 23.617490 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 7.624550 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.839850 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.165889 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.376700 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.577870 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      0 ≤ b - 140737488355328*c ≤ 7
      0 ≤ a ≤ 9007199254740991
      a ≥ 4
    where
     a := ↑(↑53).toNat
     b := ↑2 ^ (3 % 2 ^ 8 % 2 ^ 53)
     c := ↑(64 % 2 ^ 53 * 2 ^ (3 % 2 ^ 8 % 2 ^ 53)) / 9007199254740992 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 20.191690 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 7.078480 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 14.465180 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 22.909310 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 7.257860 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.711920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.269469 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.222360 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.615410 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      0 ≤ b - 140737488355328*c ≤ 1
      0 ≤ a ≤ 9007199254740991
      a ≥ 2
    where
     a := ↑(↑53).toNat
     b := ↑2 ^ (1 % 2 ^ 8 % 2 ^ 53)
     c := ↑(64 % 2 ^ 53 * 2 ^ (1 % 2 ^ 8 % 2 ^ 53)) / 9007199254740992 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 20.764170 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 7.048130 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 14.797190 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 120.395609 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.095980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 26.434130 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 137.578709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 55.791370 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.011960 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      5 ≤ a ≤ 19342813113834066795298815
    where
     a := ↑(↑84).toNat
     b := ↑(ofBool (x✝ &&& 16#84 != 0#84)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 4#84 &&& 1#84 != 0#84)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 19.433370 ms, MSGSTART 
    Equality (x✝.sshiftRight 4 &&& 1#84 != 0#84) = (x✝ &&& 16#84 != 0#84) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 123.620389 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 422.633249 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 134.540009 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.445790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.110410 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 140.777449 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 44.461260 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.090430 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      4 ≤ a ≤ 81129638414606681695789005144063
    where
     a := ↑(↑106).toNat
     b := ↑(ofBool (x✝ &&& 81129638414606681695789005144056#106 == 9872#106)).toNat
     c := ↑(ofBool (x✝ >>> 3#106 == 1234#106)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 96.134150 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 2).and (AutoStructs.Term.var 3))
              (AutoStructs.Term.var 4))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 98.275159 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 423.364369 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 110.337059 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.444770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.454120 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.349089 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.702090 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.362660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      11 ≤ a ≤ 2047
    where
     a := ↑(↑11).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 43.682990 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 84.290250 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 292.138989 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 216.941529 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.150690 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.077870 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 127.689460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 34.650349 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.191970 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      3 ≤ a ≤ 137438953471
    where
     a := ↑(↑37).toNat
     b := ↑(ofBool (4#37 >ᵤ x✝)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 2#37 == 0#37)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 18.037050 ms, MSGSTART 
    Equality (x✝.sshiftRight 2 == 0#37) = (4#37 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 114.380340 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 366.050868 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 117.354270 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.256260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.625210 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 164.835979 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 35.812530 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.461840 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      3 ≤ a ≤ 549755813887
    where
     a := ↑(↑39).toNat
     b := ↑(ofBool (x✝ >ᵤ 549755813883#39)).toNat
     c := ↑(ofBool (x✝.sshiftRight' 2#39 == -1#39)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 19.435340 ms, MSGSTART 
    Equality (x✝.sshiftRight 2 == 549755813887#39) = (x✝ >ᵤ 549755813883#39) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 121.208809 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 386.982069 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 109.797670 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.742030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.361250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 130.812090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.311740 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.355700 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      13 ≤ a ≤ 8191
    where
     a := ↑(↑13).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 49.921969 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.unop AutoStructs.Unop.neg
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.906820 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 299.114949 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 131.309070 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 126.477839 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.341430 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 141.451949 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 44.027700 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.084610 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      7 ≤ a ≤ 4095
    where
     a := ↑(↑12).toNat
     b := ↑(ofBool (x✝ &&& 63#12 == 62#12)).toNat
     c := ↑(ofBool (x✝ <<< 6#12 == 3968#12)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 94.447790 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1))
            (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 2).and (AutoStructs.Term.var 3))
              (AutoStructs.Term.var 4))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.503129 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 437.295539 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.099530 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 221.569999 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.811860 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 133.210649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 43.628940 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.131220 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      8 ≤ a ≤ 16383
    where
     a := ↑(↑14).toNat
     b := ↑(ofBool (x✝ &&& 127#14 == 0#14)).toNat
     c := ↑(ofBool (x✝ <<< 7#14 == 0#14)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 55.785070 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) AutoStructs.Term.zero)
            (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2))
              AutoStructs.Term.zero)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.709399 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 405.298399 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:242:105: error: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:253:91: error: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:264:71: error: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:275:83: error: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
