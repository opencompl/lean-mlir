⚠ [673/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [885/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [888/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [893/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [894/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 67.997989 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 15.453260 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.369290 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 243.704120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 53.048160 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.439280 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 20.225570 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 6.488470 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 10.455720 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 50.610680 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 11.739460 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.185310 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 228.914219 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 42.420719 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.414690 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.210430 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.641520 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 6.922990 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 124.445000 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.978830 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.078420 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 103.487350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 34.768479 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.575050 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.339440 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝) = false
    x✝ : BitVec 32
    c✝ : BitVec 1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 87.358080 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 235.299589 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 72.828090 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 20.012560 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.086190 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 245.330919 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 57.935270 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.242910 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(1#1 ^^^ 1#1).toNat
     b := ↑(ofBool (9#32 == 1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 32.236130 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 10.081380 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 17.141710 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 73.379760 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 18.464290 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.699780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 211.301529 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 53.449250 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.419720 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(1#1 ^^^ 1#1).toNat
     b := ↑(ofBool (9#32 == 1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 27.599910 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 9.231180 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 17.499930 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 143.987039 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.490210 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.768671 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 132.771879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 29.644080 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.402340 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(0#1 ^^^ 1#1).toNat
     b := ↑(ofBool (x✝ == x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.364331 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 6.815860 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 16.101750 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 138.240419 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.806560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.214440 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 129.217689 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 46.783430 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.169560 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 43.103379 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝) = false
    x✝ : BitVec 32
    c✝ : BitVec 1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.887490 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 235.977280 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 130.999399 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.365650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.434870 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.524990 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 37.645610 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.396750 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 44.589760 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝¹ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝¹ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝¹ >ₛ x✝¹) = false
    x✝¹ x✝ : BitVec 32
    c✝ : BitVec 1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝¹ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝¹ else BitVec.zero 32) =
            true ↔
        (x✝¹ >ₛ x✝¹) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.692219 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 228.359250 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 135.403220 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.033889 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 12.238170 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 128.226970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 52.315299 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.197830 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 40.268110 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝) = false
    x✝¹ x✝ : BitVec 32
    c✝ : BitVec 1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.971430 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 206.261899 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 134.993669 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.804250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.907450 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 97.260710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 30.015490 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.978000 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.301109 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝¹ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝¹ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝¹ >ₛ x✝¹) = false
    x✝² x✝¹ x✝ : BitVec 32
    c✝ : BitVec 1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝¹ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝¹ else BitVec.zero 32) =
            true ↔
        (x✝¹ >ₛ x✝¹) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 85.089380 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 227.986809 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.759170 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (x✝ >ₛ x✝)) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 7.142070 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.665990 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 68.487250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 30.677470 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.406050 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.783900 ms, MSGSTART 
    Unsupported syntax some (ofBool (x✝ >ₛ x✝)) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofBool [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.slt [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 32)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 222117)))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 222117))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.214930 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 76.147369 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 108.984480 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.571860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.439270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 72.380759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 31.076570 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.062050 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.748860 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝) = false
    x✝ : BitVec 32
    c✝¹ c✝ : BitVec 1
    heq✝ : 1#1 ^^^ 1#1 = 0#1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 85.478900 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 184.902929 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.733630 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (x✝ >ₛ x✝)) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 7.037610 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.417270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 68.022510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 30.128290 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.265790 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.396700 ms, MSGSTART 
    Unsupported syntax some (ofBool (x✝ >ₛ x✝)) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofBool [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.slt [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 32)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 222126)))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 222126))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.214660 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 75.768339 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 108.242120 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.332340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.644859 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 73.088789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 31.063200 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.723050 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.991420 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝) = false
    x✝¹ x✝ : BitVec 32
    c✝¹ c✝ : BitVec 1
    heq✝ : 1#1 ^^^ 1#1 = 0#1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 85.060420 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 178.893249 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.959720 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (x✝ >ₛ x✝)) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 8.558880 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.195270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 74.127569 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 41.659470 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.105340 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.040210 ms, MSGSTART 
    Unsupported syntax some (ofBool (x✝ >ₛ x✝)) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofBool [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.slt [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 32)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 222135)))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 222135))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 6.923420 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 80.124180 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 110.216619 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.217940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.532400 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 72.166290 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 30.408800 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.831670 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.374059 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝) = false
    x✝¹ x✝ : BitVec 32
    c✝¹ c✝ : BitVec 1
    heq✝ : 1#1 ^^^ 1#1 = 0#1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 85.228340 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 171.541359 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 42.842350 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 7.620320 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.439640 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 70.715930 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 36.989800 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.780500 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.402670 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝¹) = false
    x✝¹ x✝ : BitVec 32
    c✝¹ c✝ : BitVec 1
    heq✝ : 0#1 ^^^ 1#1 = 0#1
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝ else if n = 0 then x✝¹ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝¹) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.784980 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 24.780970 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 44.913140 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 6.878000 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 26.254440 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 64.239470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 93.954719 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.754690 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ >ₛ x✝²)).toNat
     b := ↑(ofBool (x✝ >ₛ x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.751570 ms, MSGSTART 
    Equality (x✝ >ₛ x✝) = (x✝¹ >ₛ x✝²) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.546780 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 23.375460 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 107.785900 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.343350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.769590 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 71.048959 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 30.245920 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.894880 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.951790 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝ >ₛ x✝) = false
    x✝² x✝¹ x✝ : BitVec 32
    c✝¹ c✝ : BitVec 1
    heq✝ : 1#1 ^^^ 1#1 = 0#1
    ⊢ ¬(((AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 0 then x✝ else BitVec.zero 32) =
            true ↔
        (x✝ >ₛ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 85.639400 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 171.010359 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 71.192620 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 7.131600 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.454860 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 71.424699 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 37.464630 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.564670 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 25.204500 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝² else BitVec.zero 32) >ₛ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝² else BitVec.zero 32) =
          true
    is not definitionally equal to the right-hand side
      (x✝¹ >ₛ x✝²) = false
    x✝² x✝¹ x✝ : BitVec 32
    c✝¹ c✝ : BitVec 1
    heq✝ : 0#1 ^^^ 1#1 = 0#1
    ⊢ ¬(((AutoStructs.Term.var 1).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝² else BitVec.zero 32) >ₛ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then x✝¹ else if n = 0 then x✝² else BitVec.zero 32) =
            true ↔
        (x✝¹ >ₛ x✝²) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.625810 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 22.454620 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 91.259300 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.665320 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.196570 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 113.845749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 19.172600 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.916390 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.955190 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.614950 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 9.633310 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.792480 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (x✝ == x✝)) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 8.536190 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.373580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 70.882289 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.747590 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.391380 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.493300 ms, MSGSTART 
    Unsupported syntax some 1#1 ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.880060 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 87.126840 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 72.096579 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.319090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.402970 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 77.425700 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.477370 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.410000 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.995460 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.534590 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 7.980500 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.612570 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (x✝¹ == x✝¹)) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 6.368030 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.843840 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 68.758519 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.809490 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.455870 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.569550 ms, MSGSTART 
    Unsupported syntax some 1#1 ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.191940 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 87.407530 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 78.955120 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 6.982510 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.218570 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 77.113780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 28.126800 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.122060 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 34.675009 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.648530 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 36.954959 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 72.480360 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.066010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.533540 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 76.555890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.078329 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.175380 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.584220 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.462110 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 7.644500 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.659610 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (x✝ == x✝)) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 6.806750 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.697660 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 68.974160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.045180 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.505900 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.965280 ms, MSGSTART 
    Unsupported syntax some 1#1 ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.936220 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 86.902249 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 80.445590 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 7.490210 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.719270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 83.733509 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 30.944710 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.393580 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 36.854040 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.040000 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 37.528860 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 72.442089 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.903950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.730610 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 77.801190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.317710 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.409970 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.586740 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.428520 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 8.292200 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 82.844539 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 7.037070 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.807140 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 69.033500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.115240 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.596730 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ == x✝²)).toNat
     b := ↑(ofBool (x✝¹ == x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 32.165350 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.800770 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 166.947029 ms, 
TACEND
