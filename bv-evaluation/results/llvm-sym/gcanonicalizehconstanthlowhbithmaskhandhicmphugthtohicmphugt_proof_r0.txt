⚠ [673/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [884/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [887/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [893/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [894/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 136.778220 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 53.727000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 37.985950 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 260.526929 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 33.861510 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 11.775170 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 50.197130 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬((((AutoStructs.Term.var 0).evalNat fun n => if n = 1 then 3#8 else if n = 0 then x✝ else BitVec.zero 8) &&&
              (AutoStructs.Term.var 1).evalNat fun n => if n = 1 then 3#8 else if n = 0 then x✝ else BitVec.zero 8) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then 3#8 else if n = 0 then x✝ else BitVec.zero 8) =
          true
    is not definitionally equal to the right-hand side
      (x✝ &&& 3#8 >ᵤ x✝) = false
    x✝ : BitVec 8
    ⊢ ¬((((AutoStructs.Term.var 0).evalNat fun n => if n = 1 then 3#8 else if n = 0 then x✝ else BitVec.zero 8) &&&
                (AutoStructs.Term.var 1).evalNat fun n => if n = 1 then 3#8 else if n = 0 then x✝ else BitVec.zero 8) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n => if n = 1 then 3#8 else if n = 0 then x✝ else BitVec.zero 8) =
            true ↔
        (x✝ &&& 3#8 >ᵤ x✝) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.383919 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 468.194339 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 155.851410 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.597879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 37.503260 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 293.651619 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 45.416940 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 16.963370 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.610900 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      ¬((((AutoStructs.Term.var 1).evalNat fun n =>
                if n = 1 then 255#8 >>> x✝.toNat else if n = 0 then x✝¹ else BitVec.zero 8) &&&
              (AutoStructs.Term.var 0).evalNat fun n =>
                if n = 1 then 255#8 >>> x✝.toNat else if n = 0 then x✝¹ else BitVec.zero 8) >ᵤ
            (AutoStructs.Term.var 0).evalNat fun n =>
              if n = 1 then 255#8 >>> x✝.toNat else if n = 0 then x✝¹ else BitVec.zero 8) =
          true
    is not definitionally equal to the right-hand side
      (255#8 >>> x✝.toNat &&& x✝¹ >ᵤ x✝¹) = false
    x✝¹ x✝ : BitVec 8
    h✝ : ¬x✝ ≥ ↑8
    ⊢ ¬((((AutoStructs.Term.var 1).evalNat fun n =>
                  if n = 1 then 255#8 >>> x✝.toNat else if n = 0 then x✝¹ else BitVec.zero 8) &&&
                (AutoStructs.Term.var 0).evalNat fun n =>
                  if n = 1 then 255#8 >>> x✝.toNat else if n = 0 then x✝¹ else BitVec.zero 8) >ᵤ
              (AutoStructs.Term.var 0).evalNat fun n =>
                if n = 1 then 255#8 >>> x✝.toNat else if n = 0 then x✝¹ else BitVec.zero 8) =
            true ↔
        (255#8 >>> x✝.toNat &&& x✝¹ >ᵤ x✝¹) = false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 118.786059 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 517.743838 ms, 
TACEND
