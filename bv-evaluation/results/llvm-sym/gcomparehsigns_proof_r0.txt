⚠ [880/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [883/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [884/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [890/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [891/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 174.414971 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 158.602551 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 41.259940 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 245.487519 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 276.335459 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.833820 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ c - 4294967296*d ≤ 4294967295
      0 ≤ a ≤ 1
      0 ≤ a - 4294967296*b ≤ 4294967295
      a - 4294967296*b - c + 4294967296*d ≥ 1
    where
     a := ↑(ofBool (x✝ ^^^ x✝¹ >ₛ -1#32)).toNat
     b := ↑(ofBool (x✝ ^^^ x✝¹ >ₛ -1#32)).toNat / 4294967296
     c := ↑(ofBool (0#32 >ₛ x✝) ^^^ ofBool (x✝¹ >ₛ -1#32)).toNat
     d := ↑(ofBool (0#32 >ₛ x✝) ^^^ ofBool (x✝¹ >ₛ -1#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 92.525860 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 128.106639 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 395.764469 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 1.073050 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (zeroExtend 32 (ofBool (x✝ &&& 8#32 == x✝¹ &&& 8#32))) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 22.272510 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 25.265730 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 265.094449 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 55.201830 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.513100 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ a ≤ 3
    where
     a := ↑(↑32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.292809 ms, MSGSTART 
    Unsupported syntax some (setWidth 32 (ofBool (x✝ &&& 8#32 == x✝¹ &&& 8#32))) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 32)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.setWidth [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 1)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofBool [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `BEq.beq [Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instBEqOfDecidableEq [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `instDecidableEqBitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.const `HAnd.hAnd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                              (Lean.Expr.app
                                (Lean.Expr.const `BitVec [])
                                (Lean.Expr.app
                                  (Lean.Expr.app
                                    (Lean.Expr.app
                                      (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero])
                                      (Lean.Expr.const `Nat []))
                                    (Lean.Expr.lit (Lean.Literal.natVal 32)))
                                  (Lean.Expr.app
                                    (Lean.Expr.const `instOfNatNat [])
                                    (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                            (Lean.Expr.app
                              (Lean.Expr.const `BitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.const `instHAndOfAndOp [Lean.Level.zero])
                            (Lean.Expr.app
                              (Lean.Expr.const `BitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec.instAndOp [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app
                                (Lean.Expr.const `instOfNatNat [])
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
                      (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 47209)))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.ofNat [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.const `HAnd.hAnd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                            (Lean.Expr.app
                              (Lean.Expr.const `BitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `instHAndOfAndOp [Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec.instAndOp [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
                    (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 47208)))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.ofNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 32)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.539280 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 277.857510 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 256.494399 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 51.390851 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 57.068729 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 252.501259 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 63.157660 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 19.342130 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ c - 4294967296*d ≤ 4294967295
      0 ≤ b ≤ 4294967295
      b - c + 4294967296*d ≥ 1
      4 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑((x✝ ^^^ x✝¹) >>> 3#32 &&& 1#32 ^^^ 1#32).toNat
     c := ↑(ofBool (x✝ &&& 8#32 == x✝¹ &&& 8#32)).toNat
     d := ↑(ofBool (x✝ &&& 8#32 == x✝¹ &&& 8#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 88.292350 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            (((AutoStructs.Term.var 1).and AutoStructs.Term.one).xor AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 123.617609 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 892.963127 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 147.296009 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 76.097490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 62.904119 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 252.610999 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 94.009940 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 13.027670 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ d - 4294967296*e ≤ 4294967295
      0 ≤ b ≤ 1
      0 ≤ b - 4294967296*c ≤ 4294967295
      b - 4294967296*c - d + 4294967296*e ≥ 1
      32 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(ofBool (x✝ ^^^ x✝¹ >ₛ -1#32)).toNat
     c := ↑(ofBool (x✝ ^^^ x✝¹ >ₛ -1#32)).toNat / 4294967296
     d := ↑(ofBool (x✝ >>> 31#32 == x✝¹ >>> 31#32)).toNat
     e := ↑(ofBool (x✝ >>> 31#32 == x✝¹ >>> 31#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 82.879910 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.978630 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 301.228258 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 147.599789 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 50.550330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 45.471640 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 203.504430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 89.492639 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 13.241531 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ d - 4294967296*e ≤ 4294967295
      0 ≤ b ≤ 1
      0 ≤ b - 4294967296*c ≤ 4294967295
      b - 4294967296*c - d + 4294967296*e ≥ 1
      30 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(ofBool (x✝ ^^^ x✝¹ >ₛ -1#32)).toNat
     c := ↑(ofBool (x✝ ^^^ x✝¹ >ₛ -1#32)).toNat / 4294967296
     d := ↑(ofBool (x✝ >>> 29#32 ||| 35#32 == x✝¹ >>> 29#32 ||| 35#32)).toNat
     e := ↑(ofBool (x✝ >>> 29#32 ||| 35#32 == x✝¹ >>> 29#32 ||| 35#32)).toNat / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 78.739239 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 111.374440 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 335.149528 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 147.491760 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 82.218899 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 53.365260 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 186.644179 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 100.886800 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.115090 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      32 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(ofBool (1#32 >ₛ x✝)).toNat
     c := ↑(ofBool (1#32 >ₛ x✝.sshiftRight' 31#32 ||| (0#32 - x✝) >>> 31#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 24.010890 ms, MSGSTART 
    Equality (1#32 >ₛ x✝.sshiftRight 31 ||| (-x✝) >>> 31) = (1#32 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 118.239849 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 567.296728 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 150.896089 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 77.227910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 50.074330 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 178.181729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 95.477340 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.504640 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      64 ≤ a ≤ 18446744073709551615
    where
     a := ↑(↑64).toNat
     b := ↑(ofBool (1#64 >ₛ x✝)).toNat
     c := ↑(ofBool (1#64 >ₛ x✝.sshiftRight' 63#64 ||| (0#64 - x✝) >>> 63#64)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.499050 ms, MSGSTART 
    Equality (1#64 >ₛ x✝.sshiftRight 63 ||| (-x✝) >>> 63) = (1#64 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 132.898129 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 569.846728 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 166.321590 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 113.537750 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 54.518720 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 224.719269 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 125.659499 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.839450 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      64 ≤ a ≤ 18446744073709551615
    where
     a := ↑(↑64).toNat
     b := ↑(ofBool (1#64 >ₛ x✝)).toNat
     c := ↑(ofBool (1#32 >ₛ truncate 32 (x✝.sshiftRight' 63#64 ||| (0#64 - x✝) >>> 63#64))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.182120 ms, MSGSTART 
    Equality (1#32 >ₛ setWidth 32 (x✝.sshiftRight 63) ||| setWidth 32 ((-x✝) >>> 63)) =
      (1#64 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 134.674390 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 699.450857 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 129.059139 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 101.709480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 52.801539 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 175.375560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 121.789539 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.130100 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      25 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(ofBool (0#32 >ₛ x✝)).toNat
     c := ↑(ofBool (0#8 >ₛ truncate 8 (x✝ >>> 24#32))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.003950 ms, MSGSTART 
    Equality (0#8 >ₛ setWidth 8 (x✝ >>> 24)) = (0#32 >ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 104.283670 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 643.293497 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 126.560850 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.536100 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 24.051909 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 188.772440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 81.177999 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.437710 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      b - c ≥ 1
      24 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(ofBool (x✝ &&& 1073741824#32 != 0#32)).toNat
     c := ↑(ofBool (0#8 >ₛ truncate 8 (x✝ >>> 23#32))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 21.460180 ms, MSGSTART 
    Equality (0#8 >ₛ setWidth 8 (x✝ >>> 23)) = (x✝ &&& 1073741824#32 != 0#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.353320 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 530.730158 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.675430 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (ofBool (1#8 >ₛ truncate 8 (x✝ >>> 24#32))) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 8.781530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.802820 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 177.974319 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 37.553130 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 11.731020 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      c + 16777216*d ≥ 1
      0 ≤ b ≤ 4294967295
      0 ≤ b - 256*c ≤ 255
      0 ≤ b - 256*c - 4294967296*d ≤ 4294967295
      25 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(x✝ >>> 24#32).toNat
     c := ↑(x✝ >>> 24#32).toNat / 256
     d := ↑((x✝ >>> 24#32).toNat % 2 ^ 8) / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 18.027140 ms, MSGSTART 
    Unsupported syntax some (ofBool (1#8 >ₛ setWidth 8 (x✝ >>> 24))) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.const `BitVec.ofBool [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.slt [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 8)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.setWidth [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.const `HShiftRight.hShiftRight [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                              (Lean.Expr.app
                                (Lean.Expr.const `BitVec [])
                                (Lean.Expr.app
                                  (Lean.Expr.app
                                    (Lean.Expr.app
                                      (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero])
                                      (Lean.Expr.const `Nat []))
                                    (Lean.Expr.lit (Lean.Literal.natVal 32)))
                                  (Lean.Expr.app
                                    (Lean.Expr.const `instOfNatNat [])
                                    (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                            (Lean.Expr.const `Nat []))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec.instHShiftRightNat [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 470257)))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 24)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 24)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.ofNat [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 8)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 1)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 87.534509 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 515.282158 ms, 
TACEND
