⚠ [880/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [883/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [884/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [890/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [891/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 39.957170 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.161040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 9.637310 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.333910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.687850 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 22.610869 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      g ≥ 0
      0 ≤ g - 64*h ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      0 ≤ e - 64*f + g - 64*h - 64*i ≤ 63
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f - g + 64*h + 64*i ≥ 1
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     h := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64
     i := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 22.500691 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.975369 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 14.230270 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 1.148070 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ <<< x✝¹ + x✝² <<< x✝¹) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.234970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.960490 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 171.197531 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 21.899970 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 28.990580 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 18446744073709551615
      d - 18446744073709551616*e ≤ -1
      0 ≤ c ≤ 18446744073709551615
      0 ≤ c + d - 18446744073709551616*e ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(↑64).toNat
     b := ↑x✝¹.toNat
     c := ↑x✝.toNat
     d := ↑x✝².toNat
     e := ↑(x✝.toNat + x✝².toNat) / 18446744073709551616 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.171180 ms, MSGSTART 
    Unsupported syntax some (x✝ <<< x✝¹.toNat + x✝² <<< x✝¹.toNat) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 64)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 64)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 64)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHAdd [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instAdd [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HShiftLeft.hShiftLeft [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 64)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                        (Lean.Expr.const `Nat []))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 64)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.instHShiftLeftNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 43765)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.toNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 43764)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `HShiftLeft.hShiftLeft [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 64)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                      (Lean.Expr.const `Nat []))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instHShiftLeftNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 43763)))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.toNat [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 64)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 43764)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 64)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 1521.957086 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 2039.253152 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.750160 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ <<< x✝¹ + x✝² <<< x✝¹) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.314050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 11.457729 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 94.310290 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.691600 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 18.744699 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ f ≤ 18446744073709551615
      0 ≤ d ≤ 18446744073709551615
      0 ≤ c ≤ 18446744073709551615
      0 ≤ c + d - 18446744073709551616*e ≤ 18446744073709551615
      c + d - 18446744073709551616*e - f ≥ 1
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(↑64).toNat
     b := ↑x✝¹.toNat
     c := ↑x✝.toNat
     d := ↑x✝².toNat
     e := ↑(x✝.toNat + x✝².toNat) / 18446744073709551616
     f := ↑((x✝ + x✝²) <<< x✝¹ >>> x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.163190 ms, MSGSTART 
    Unsupported syntax some (x✝ <<< x✝¹.toNat + x✝² <<< x✝¹.toNat) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 64)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 64)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 64)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHAdd [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instAdd [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HShiftLeft.hShiftLeft [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 64)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                        (Lean.Expr.const `Nat []))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 64)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.instHShiftLeftNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 43765)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.toNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 43764)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `HShiftLeft.hShiftLeft [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 64)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                      (Lean.Expr.const `Nat []))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instHShiftLeftNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 43763)))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.toNat [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 64)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 43764)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 64)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5425.240839 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 4892.345410 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:23:95: error: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 29.811720 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.302950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.566130 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 95.981479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.184420 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 17.865500 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      g ≥ 0
      0 ≤ g - 64*h ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      0 ≤ e - 64*f + g - 64*h - 64*i ≤ 63
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f - g + 64*h + 64*i ≥ 1
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     h := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64
     i := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.350130 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 116.881630 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 16.952310 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 29.150280 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.580270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.651850 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 96.784569 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.448270 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 24.383990 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      g ≥ 0
      0 ≤ g - 64*h ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      0 ≤ e - 64*f + g - 64*h - 64*i ≤ 63
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f - g + 64*h + 64*i ≥ 1
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     h := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64
     i := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.257950 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 126.855890 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 10.767080 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 28.675640 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.344390 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.514180 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 95.247319 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.916670 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 18.111250 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      g ≥ 0
      0 ≤ g - 64*h ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      0 ≤ e - 64*f + g - 64*h - 64*i ≤ 63
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f - g + 64*h + 64*i ≥ 1
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     h := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64
     i := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.698620 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 116.004910 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 10.417950 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 28.879490 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.902480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.584500 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 96.454739 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.502220 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 20.975600 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      g ≥ 0
      0 ≤ g - 64*h ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      0 ≤ e - 64*f + g - 64*h - 64*i ≤ 63
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f - g + 64*h + 64*i ≥ 1
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + x✝².toNat) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     h := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64
     i := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.779900 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 125.730410 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 10.944270 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 242.008189 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.175580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.565200 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.292599 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.969690 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 16.433140 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      h ≥ 0
      0 ≤ h - 64*i ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      -64 ≤ e - 64*f - 64*g - h + 64*i ≤ -1
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f + 64*g + h - 64*i ≥ 65
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + (2 ^ 6 - x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6)) / 64
     h := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     i := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 55.074550 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).sub (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 116.175899 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 663.488608 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:76:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.537490 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ <<< x✝¹ - x✝² <<< x✝¹) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 9.529820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.035620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 100.550300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.540780 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.439750 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 18446744073709551615
      0 ≤ c ≤ 18446744073709551615
      c - d ≥ 1
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(↑64).toNat
     b := ↑x✝¹.toNat
     c := ↑x✝².toNat
     d := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.988409 ms, MSGSTART 
    Unsupported syntax some (x✝ <<< x✝¹.toNat - x✝² <<< x✝¹.toNat) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 64)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 64)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HSub.hSub [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 64)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHSub [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instSub [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HShiftLeft.hShiftLeft [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 64)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                        (Lean.Expr.const `Nat []))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 64)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.instHShiftLeftNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 291262)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.toNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 291261)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `HShiftLeft.hShiftLeft [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 64)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                      (Lean.Expr.const `Nat []))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instHShiftLeftNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 64)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 291260)))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.toNat [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 64)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 291261)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 64)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 3520.108286 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 3576.683325 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:88:95: error: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 156.903199 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.278500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.681420 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.095229 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.726970 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 18.341790 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      h ≥ 0
      0 ≤ h - 64*i ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      -64 ≤ e - 64*f - 64*g - h + 64*i ≤ -1
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f + 64*g + h - 64*i ≥ 65
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + (2 ^ 6 - x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6)) / 64
     h := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     i := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.440080 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).sub (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 135.829110 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 686.933777 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:97:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 268.885098 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 11.886640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.295520 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.316120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.753020 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 21.800580 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      h ≥ 0
      0 ≤ h - 64*i ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      -64 ≤ e - 64*f - 64*g - h + 64*i ≤ -1
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f + 64*g + h - 64*i ≥ 65
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + (2 ^ 6 - x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6)) / 64
     h := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     i := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.146049 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).sub (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 143.378600 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 613.609777 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:108:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 156.280529 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 11.939120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.342930 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.237859 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.641830 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 18.510240 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      h ≥ 0
      0 ≤ h - 64*i ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      -64 ≤ e - 64*f - 64*g - h + 64*i ≤ -1
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f + 64*g + h - 64*i ≥ 65
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + (2 ^ 6 - x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6)) / 64
     h := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     i := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.230040 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).sub (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 132.150000 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 596.159087 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:119:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 157.393799 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.434950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.706340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.411250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.659360 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 19.752550 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      h ≥ 0
      0 ≤ h - 64*i ≤ 63
      e ≥ 0
      0 ≤ e - 64*f ≤ 63
      -64 ≤ e - 64*f - 64*g - h + 64*i ≤ -1
      c ≥ 0
      0 ≤ c - 64*d ≤ 63
      c - 64*d - e + 64*f + 64*g + h - 64*i ≥ 65
      0 ≤ b ≤ 63
      0 ≤ a ≤ 63
      a - b ≥ 1
    where
     a := ↑(↑6).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6) * ↑(2 ^ x✝¹.toNat)
     d := ↑((x✝.toNat + (2 ^ 6 - x✝².toNat)) % 2 ^ 6 * 2 ^ x✝¹.toNat) / 64
     e := ↑x✝.toNat * ↑(2 ^ x✝¹.toNat)
     f := ↑(x✝.toNat * 2 ^ x✝¹.toNat) / 64
     g := ↑(x✝.toNat * 2 ^ x✝¹.toNat % 2 ^ 6 + (2 ^ 6 - x✝².toNat * 2 ^ x✝¹.toNat % 2 ^ 6)) / 64
     h := ↑x✝².toNat * ↑(2 ^ x✝¹.toNat)
     i := ↑(x✝².toNat * 2 ^ x✝¹.toNat) / 64 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 54.154979 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).sub (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 126.572970 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 606.430057 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:130:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 131.009720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.193110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.032840 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 109.080059 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.422150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 82.138140 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 67.177980 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.575789 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 590.237008 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:141:8: warning: declaration uses 'sorry'
