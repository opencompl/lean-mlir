⚠ [673/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [868/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [889/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [892/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [894/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 303.761480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 67.218989 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 53.228340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 252.313149 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 29.644160 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 22.781460 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ d ≤ 4294967295
      1 ≤ c ≤ 4294967295
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)).toNat
     b := ↑(42#32 / x✝ &&& (42#32 / x✝ ^^^ 43#32 / x✝¹)).toNat
     c := ↑x✝¹.toNat
     d := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 96.926010 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))
            ((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 765.228588 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1674.778495 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 171.469210 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 34.247220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 38.086170 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 196.225799 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 23.640350 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 16.872350 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ d ≤ 4294967295
      1 ≤ c ≤ 4294967295
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)).toNat
     b := ↑(42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 42#32 / x✝)).toNat
     c := ↑x✝¹.toNat
     d := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 78.192260 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 0)))
            ((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 782.599127 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1589.632274 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 149.768479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.048140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 29.326710 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 235.290549 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 27.364510 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 15.743480 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ d ≤ 4294967295
      1 ≤ c ≤ 4294967295
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(42#32 / x✝¹ &&& (43#32 / x✝ ^^^ -1#32)).toNat
     b := ↑((43#32 / x✝ ^^^ 42#32 / x✝¹) &&& 42#32 / x✝¹).toNat
     c := ↑x✝¹.toNat
     d := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 57.517560 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 1))
            ((AutoStructs.Term.var 1).and ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 774.371367 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1131.181485 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 157.934879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.782530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 24.013270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.575829 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.939170 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.533040 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝ &&& x✝¹).toNat
     b := ↑((x✝ ^^^ (x✝¹ ^^^ -1#32)) &&& x✝).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 44.123390 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).xor ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).and
              (AutoStructs.Term.var 0))
            ((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 74.768880 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 457.146058 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 116.409219 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.685190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.500880 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.145830 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.867880 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.498550 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝¹ &&& x✝).toNat
     b := ↑((x✝ ^^^ x✝¹ ^^^ -1#32) &&& x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 43.204750 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
              (AutoStructs.Term.var 1))
            ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 0))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 73.711249 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 438.950779 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 29.563150 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.727170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.028790 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 94.752630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.985230 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.811519 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ b + c - 18446744073709551616*d ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b - c + 18446744073709551616*d ≥ 1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑(x✝ &&& x✝¹).toNat
     c := ↑(x✝ ^^^ x✝¹).toNat
     d := ↑((x✝ &&& x✝¹).toNat + (x✝ ^^^ x✝¹).toNat) / 18446744073709551616 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 20.521880 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 81.322090 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 13.388030 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 127.850410 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.677900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.206860 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 71.639069 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.268760 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.465490 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 36.504040 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 123.499170 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 191.296049 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 152.260080 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.358390 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 24.565759 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 97.519770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 24.466290 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 15.225520 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ e ≤ 18446744073709551615
      1 ≤ d ≤ 18446744073709551615
      1 ≤ c ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(42#64 / x✝² ||| 42#64 / x✝¹).toNat
     b := ↑(42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝² ||| 42#64 / x✝¹).toNat
     c := ↑x✝².toNat
     d := ↑x✝¹.toNat
     e := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 60.996320 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 2512.198339 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 262.517909 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 154.724109 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.946090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.595690 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 88.658400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.586950 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 14.668969 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ e ≤ 18446744073709551615
      1 ≤ d ≤ 18446744073709551615
      1 ≤ c ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(42#64 / x✝² ||| 42#64 / x✝).toNat
     b := ↑(42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝² ||| 42#64 / x✝).toNat
     c := ↑x✝².toNat
     d := ↑x✝¹.toNat
     e := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 48.720020 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 2817.071818 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 408.805789 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 156.795179 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.713960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.624010 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 90.335470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.989720 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 14.819879 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ e ≤ 18446744073709551615
      1 ≤ d ≤ 18446744073709551615
      1 ≤ c ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(42#64 / x✝ ||| 42#64 / x✝²).toNat
     b := ↑(42#64 / x✝ ^^^ 42#64 / x✝¹ &&& 42#64 / x✝² ||| 42#64 / x✝²).toNat
     c := ↑x✝².toNat
     d := ↑x✝¹.toNat
     e := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 50.907170 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 3007.293828 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 257.238699 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 251.795659 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.445550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.621779 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 89.362640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.876160 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 14.509770 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ e ≤ 18446744073709551615
      1 ≤ d ≤ 18446744073709551615
      1 ≤ c ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(42#64 / x✝ ||| 42#64 / x✝¹).toNat
     b := ↑(42#64 / x✝ ^^^ 42#64 / x✝¹ &&& 42#64 / x✝² ||| 42#64 / x✝¹).toNat
     c := ↑x✝².toNat
     d := ↑x✝¹.toNat
     e := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 47.964700 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 3042.351877 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 262.427009 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 153.217539 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.640320 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.894480 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 91.072720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.978400 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 14.928630 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ e ≤ 18446744073709551615
      1 ≤ d ≤ 18446744073709551615
      1 ≤ c ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(42#64 / x✝ ||| 42#64 / x✝²).toNat
     b := ↑(42#64 / x✝ ||| 42#64 / x✝¹ &&& 42#64 / x✝ ^^^ 42#64 / x✝²).toNat
     c := ↑x✝².toNat
     d := ↑x✝¹.toNat
     e := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 51.402699 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 3024.849768 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 256.005339 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 254.924880 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.522539 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.563500 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 87.929270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.820490 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 14.528270 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ e ≤ 18446744073709551615
      1 ≤ d ≤ 18446744073709551615
      1 ≤ c ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(42#64 / x✝ ||| 42#64 / x✝²).toNat
     b := ↑(42#64 / x✝ ||| 42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝²).toNat
     c := ↑x✝².toNat
     d := ↑x✝¹.toNat
     e := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 49.596070 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 2888.178657 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 263.400258 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 153.685510 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.181899 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.058870 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 87.460280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.414550 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 14.327160 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ e ≤ 18446744073709551615
      1 ≤ d ≤ 18446744073709551615
      1 ≤ c ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(42#64 / x✝ ||| 42#64 / x✝¹).toNat
     b := ↑(42#64 / x✝ ||| 42#64 / x✝¹ ^^^ 42#64 / x✝² &&& 42#64 / x✝).toNat
     c := ↑x✝².toNat
     d := ↑x✝¹.toNat
     e := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 47.540950 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 2994.907397 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 401.586619 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 152.135400 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.530759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.303810 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 87.444860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.476320 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 14.432180 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ e ≤ 18446744073709551615
      1 ≤ d ≤ 18446744073709551615
      1 ≤ c ≤ 18446744073709551615
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(42#64 / x✝ ||| 42#64 / x✝¹).toNat
     b := ↑(42#64 / x✝ ||| 42#64 / x✝¹ ^^^ 42#64 / x✝ &&& 42#64 / x✝²).toNat
     c := ↑x✝².toNat
     d := ↑x✝¹.toNat
     e := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 47.339440 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 2995.346587 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 255.847979 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 224.105889 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.857820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 16.918100 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.678470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.455570 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.691290 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 255
      0 ≤ c ≤ 255
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝² &&& x✝) <<< x✝¹ &&& x✝³).toNat
     d := ↑(x✝ <<< x✝¹ &&& (x✝² <<< x✝¹ &&& x✝³)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 55.373020 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)))
            ((AutoStructs.Term.var 3).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 148.916749 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 251.635769 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 227.984009 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.677680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.412480 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.885980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.460730 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.707510 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 255
      0 ≤ c ≤ 255
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝ ||| x✝³) <<< x✝¹ ||| x✝²).toNat
     d := ↑(x✝ <<< x✝¹ ||| x✝² ||| x✝³ <<< x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 56.249310 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2))
            ((AutoStructs.Term.var 3).or (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.943949 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 254.390799 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 171.034539 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.706480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.404650 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.967710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.558370 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.744880 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 255
      0 ≤ c ≤ 255
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝² ||| x✝) >>> x✝¹ ||| x✝³).toNat
     d := ↑(x✝ >>> x✝¹ ||| (x✝² >>> x✝¹ ||| x✝³)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.632379 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((AutoStructs.Term.var 0).or ((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)))
            ((AutoStructs.Term.var 3).or (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.519910 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 247.946219 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 169.493789 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.870279 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 18.612340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 65.940910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.411140 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.689510 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 255
      0 ≤ c ≤ 255
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝¹.toNat
     c := ↑((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²).toNat
     d := ↑(x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 52.517970 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))
            ((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 102.003399 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 245.900369 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.632440 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some ((x✝ >>> x✝¹ ^^^ x✝²).sdiv (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹)) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.558100 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 13.593540 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 68.947790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.488360 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.190500 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝¹.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 18.177980 ms, MSGSTART 
    Unsupported syntax some ((x✝ >>> x✝¹.toNat ^^^ x✝²).sdiv (x✝ >>> x✝¹.toNat ^^^ x✝² ^^^ x✝³ >>> x✝¹.toNat)) ⊑
      none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.sdiv [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HXor.hXor [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHXorOfXor [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instXor [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.const `HShiftRight.hShiftRight [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                              (Lean.Expr.app
                                (Lean.Expr.const `BitVec [])
                                (Lean.Expr.app
                                  (Lean.Expr.app
                                    (Lean.Expr.app
                                      (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero])
                                      (Lean.Expr.const `Nat []))
                                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                                  (Lean.Expr.app
                                    (Lean.Expr.const `instOfNatNat [])
                                    (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                            (Lean.Expr.const `Nat []))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec.instHShiftRightNat [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1082014)))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.toNat [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                      (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1082013)))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1082012))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `HXor.hXor [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `instHXorOfXor [Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.instXor [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.const `HXor.hXor [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                            (Lean.Expr.app
                              (Lean.Expr.const `BitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `instHXorOfXor [Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec.instXor [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.const
                                  `HShiftRight.hShiftRight
                                  [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                                (Lean.Expr.app
                                  (Lean.Expr.const `BitVec [])
                                  (Lean.Expr.app
                                    (Lean.Expr.app
                                      (Lean.Expr.app
                                        (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero])
                                        (Lean.Expr.const `Nat []))
                                      (Lean.Expr.lit (Lean.Literal.natVal 8)))
                                    (Lean.Expr.app
                                      (Lean.Expr.const `instOfNatNat [])
                                      (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                              (Lean.Expr.const `Nat []))
                            (Lean.Expr.app
                              (Lean.Expr.const `BitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec.instHShiftRightNat [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1082014)))
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec.toNat [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                        (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1082013)))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1082012))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HShiftRight.hShiftRight [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.const `Nat []))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.instHShiftRightNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1082011)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.toNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1082013))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 8)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 169.459299 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 380.697808 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 267.953489 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.539060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 25.744910 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 67.311299 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.204060 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 28.560160 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      d ≥ 0
      c ≥ 0
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝¹.toNat
     c := ↑(match Decidable.decide (2 ^ (8 - 1) ≤ (x✝ >>> x✝¹ ^^^ x✝²).toNat),
        Decidable.decide (2 ^ (8 - 1) ≤ ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²).toNat) with
      | false, false => ((x✝ >>> x✝¹ ^^^ x✝²).udiv ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²)).toNat
      | false, true => (2 ^ 8 - ((x✝ >>> x✝¹ ^^^ x✝²).udiv (-((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²))).toNat) % 2 ^ 8
      | true, false => (2 ^ 8 - ((-(x✝ >>> x✝¹ ^^^ x✝²)).udiv ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²)).toNat) % 2 ^ 8
      | true, true => ((-(x✝ >>> x✝¹ ^^^ x✝²)).udiv (-((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²))).toNat)
     d := ↑(match Decidable.decide (2 ^ (8 - 1) ≤ (x✝ >>> x✝¹ ^^^ x✝²).toNat),
        Decidable.decide (2 ^ (8 - 1) ≤ (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹).toNat) with
      | false, false => ((x✝ >>> x✝¹ ^^^ x✝²).udiv (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹)).toNat
      | false, true => (2 ^ 8 - ((x✝ >>> x✝¹ ^^^ x✝²).udiv (-(x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹))).toNat) % 2 ^ 8
      | true, false => (2 ^ 8 - ((-(x✝ >>> x✝¹ ^^^ x✝²)).udiv (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹)).toNat) % 2 ^ 8
      | true, true => ((-(x✝ >>> x✝¹ ^^^ x✝²)).udiv (-(x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹))).toNat) MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 53.304790 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 1974.386322 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 782.212626 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:222:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 341.163108 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.743660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.964830 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.042060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.827299 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.288270 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32)).toNat
     b := ↑((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& (x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 62.619240 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).and
              ((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)))
            ((AutoStructs.Term.var 0).and
              (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 459.106678 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1128.460226 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 148.037339 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.703750 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 27.012200 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 112.345209 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.982090 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.003120 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝¹ &&& ((x✝ ||| x✝²) ^^^ -1#32)).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& (x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 55.276780 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
              ((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 1)))
            ((AutoStructs.Term.var 2).and
              (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 85.513860 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 507.460788 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 362.492219 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.885050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.002370 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.164439 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.553870 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.261610 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32).toNat
     b := ↑((42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32 ||| x✝² ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 61.439020 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).or
              ((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)))
            ((AutoStructs.Term.var 0).or
              (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 453.575418 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1122.077055 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 151.351999 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.733110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 27.084020 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 113.901760 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.141389 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.051380 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝¹ ||| x✝ &&& x✝² ^^^ -1#32).toNat
     b := ↑(x✝ ^^^ -1#32 ||| x✝¹ ||| x✝² ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 55.722420 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
              ((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 1)))
            ((AutoStructs.Term.var 2).or
              (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 84.279220 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 511.427438 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 169.575660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.763759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 35.125740 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 113.359610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.168730 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.400410 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ^^^ x✝²) &&& (x✝ ^^^ -1#32)).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| ((x✝ ||| x✝²) ^^^ -1#32) &&& x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.535189 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)).and
                (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 87.564110 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 541.610358 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 386.224278 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 44.366980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 45.342830 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.978770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.647480 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.589390 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(((42#32).sdiv x✝¹ ^^^ x✝²) &&& (x✝ ^^^ -1#32)).toNat
     b := ↑(((x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& x✝² |||
          (42#32).sdiv x✝¹ &&& ((x✝ ||| x✝²) ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.981989 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((AutoStructs.Term.var 1).and
                (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2))))
            (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 509.103228 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1207.520135 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 380.668509 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 44.759990 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 45.560229 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.717400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.889150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.694180 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ (42#32).sdiv x✝) &&& (x✝¹ ^^^ -1#32)).toNat
     b := ↑((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) |||
          ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 69.601849 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and
                  (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).or
              ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 3)).and
                (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 0)).and
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 499.883898 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1197.813775 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 171.504359 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.765480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 35.563740 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.780289 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.354670 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.465060 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ^^^ x✝²) &&& (x✝¹ ^^^ -1#32)).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| ((x✝² ||| x✝¹) ^^^ -1#32) &&& x✝).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 61.075480 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 3).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                (AutoStructs.Term.var 0)))
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.541330 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 552.065347 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 401.941209 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 43.913930 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 45.086039 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.842170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.830260 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.665130 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ (42#32).sdiv x✝) &&& (x✝¹ ^^^ -1#32)).toNat
     b := ↑((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) |||
          ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 68.426359 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and
                  (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).or
              ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 3)).and
                (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 0)).and
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 484.191808 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1180.906465 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 676.699107 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 50.106720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 51.191600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.011450 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.905089 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.277250 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ (42#32).sdiv x✝) &&& ((42#32).sdiv x✝¹ ^^^ -1#32)).toNat
     b := ↑((42#32).sdiv x✝ &&& (((42#32).sdiv x✝¹ ||| x✝²) ^^^ -1#32) |||
          (((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 102.352390 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and
                  (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).or
              ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 3)).and
                (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 0)).and
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 1049.990696 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 2076.888771 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.465460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.122900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 35.083809 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.730130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.991320 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.375090 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ^^^ x✝²) &&& (x✝ ^^^ -1#32)).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| ((x✝² ||| x✝) ^^^ -1#32) &&& x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.071310 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 3).or (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 2)).and
                (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.530669 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 544.677858 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.926260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.491150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 35.022679 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.075480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.181100 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.392110 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ^^^ x✝²) &&& (x✝¹ ^^^ -1#32)).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| ((x✝¹ ||| x✝²) ^^^ -1#32) &&& x✝).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 61.369990 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)).and
                (AutoStructs.Term.var 0)))
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.772549 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 546.371548 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 687.881708 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 50.851879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 51.196250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.797530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.606180 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.249530 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(((42#32).sdiv x✝¹ ^^^ x✝²) &&& ((42#32).sdiv x✝ ^^^ -1#32)).toNat
     b := ↑((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& x✝² |||
          (42#32).sdiv x✝¹ &&& ((x✝² ||| (42#32).sdiv x✝) ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 102.657299 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((AutoStructs.Term.var 1).and
                (((AutoStructs.Term.var 3).or (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 2))))
            (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 994.594946 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 2094.903661 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 969.076606 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 59.476990 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 60.380180 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.644669 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.107540 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.106260 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(((42#32).sdiv x✝¹ ^^^ (42#32).sdiv x✝²) &&& ((42#32).sdiv x✝ ^^^ -1#32)).toNat
     b := ↑((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& (42#32).sdiv x✝² |||
          (42#32).sdiv x✝¹ &&& (((42#32).sdiv x✝ ||| (42#32).sdiv x✝²) ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 164.242060 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((AutoStructs.Term.var 1).and
                (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2))))
            (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 1587.116363 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 2968.449718 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 278.832519 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 27.935939 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.107050 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.213980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.568150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.504400 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² &&& ((x✝ ||| x✝¹) ^^^ -1#32) ||| x✝¹ &&& ((x✝ ||| x✝³) ^^^ -1#32)).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| ((x✝ ||| x✝³) ^^^ -1#32) &&& x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 80.001979 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.183700 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 275.499839 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 179.103579 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 26.935650 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.808220 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.744880 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.434040 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.516850 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² &&& ((x✝ ||| x✝¹) ^^^ -1#32) ||| x✝³ &&& ((x✝ ||| x✝²) ^^^ -1#32)).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| ((x✝ ||| x✝²) ^^^ -1#32) &&& x✝³).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 80.274809 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 87.008910 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 271.984489 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 168.437340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.341849 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 34.112370 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.070610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.782960 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.434060 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ^^^ x✝²) &&& x✝ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝ &&& x✝² ^^^ -1#32 ||| x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.682359 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)).or
                (AutoStructs.Term.var 1)))
            ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.999560 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 544.656378 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 377.199019 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 42.853489 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 44.131560 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.540230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.282740 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.479420 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(((42#32).sdiv x✝¹ ^^^ x✝²) &&& x✝ ^^^ -1#32).toNat
     b := ↑((x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| x✝²) &&& ((42#32).sdiv x✝¹ ||| x✝ &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.793419 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 1).or
                (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2))))
            ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 495.201778 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1175.919405 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 371.404648 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 42.792610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 44.173060 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.393759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.160780 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.458660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ (42#32).sdiv x✝) &&& x✝¹ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& (x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.043710 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or
                  (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).and
              ((((AutoStructs.Term.var 1).and (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 3)).or
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 482.243798 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1273.989785 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.708799 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.266530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 34.245330 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.515550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.151850 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.428079 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ^^^ x✝²) &&& x✝¹ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝² &&& x✝¹ ^^^ -1#32 ||| x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.784560 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 3).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                (AutoStructs.Term.var 0)))
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.212430 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 545.505728 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 374.196508 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 43.567460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 44.502440 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.890789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.726280 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.650200 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ (42#32).sdiv x✝) &&& x✝¹ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& (x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 67.265930 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or
                  (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).and
              ((((AutoStructs.Term.var 1).and (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 3)).or
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 473.316118 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1159.539425 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 610.866327 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 47.636110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 48.006400 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.177059 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.782730 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.328030 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ (42#32).sdiv x✝) &&& (42#32).sdiv x✝¹ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹ &&& x✝² ^^^ -1#32) &&&
          ((42#32).sdiv x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 103.347090 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or
                  (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).and
              ((((AutoStructs.Term.var 1).and (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 3)).or
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 966.848346 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1939.380972 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 171.007420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.349630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 34.581669 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.870280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.361830 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.417810 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ^^^ x✝²) &&& x✝ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝² &&& x✝ ^^^ -1#32 ||| x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 61.621560 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 3).and (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 2)).or
                (AutoStructs.Term.var 1)))
            ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.554169 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 553.240978 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.587340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.310080 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 34.459389 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.357330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.340460 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.380380 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ^^^ x✝²) &&& x✝¹ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝¹ &&& x✝² ^^^ -1#32 ||| x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 61.125800 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 1).and (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)).or
                (AutoStructs.Term.var 0)))
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.657229 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 557.702748 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 669.770677 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 48.424630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 48.176620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 122.626920 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.097320 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.522569 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(((42#32).sdiv x✝¹ ^^^ x✝²) &&& (42#32).sdiv x✝ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| x✝²) &&&
          ((42#32).sdiv x✝¹ ||| x✝² &&& (42#32).sdiv x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 105.435740 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 1).or
                (((AutoStructs.Term.var 3).and (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 2))))
            ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 1014.722416 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1992.785921 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 938.121316 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 56.934850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 56.846140 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.453839 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.062760 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.019730 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(((42#32).sdiv x✝¹ ^^^ (42#32).sdiv x✝²) &&& (42#32).sdiv x✝ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| (42#32).sdiv x✝²) &&&
          ((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝ &&& (42#32).sdiv x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 163.496329 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((AutoStructs.Term.var 1).or
                (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2))))
            ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 1568.656344 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 2940.717017 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 281.269329 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 27.646879 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.109900 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.885160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.476820 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.525460 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ||| x✝ &&& x✝¹ ^^^ -1#32) &&& (x✝¹ ||| x✝ &&& x✝³ ^^^ -1#32)).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝ &&& x✝³ ^^^ -1#32 ||| x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 80.658399 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.962990 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 276.951459 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 181.274289 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 28.272860 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.192620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.719460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.828669 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.594261 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ||| x✝ &&& x✝¹ ^^^ -1#32) &&& (x✝³ ||| x✝ &&& x✝² ^^^ -1#32)).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝ &&& x✝² ^^^ -1#32 ||| x✝³)).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 81.534739 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.889130 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 276.853959 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 164.786590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.335900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.668269 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.683040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.968180 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.276230 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ &&& x✝² ||| x✝) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝² ||| x✝) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.194430 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 3).or (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 1).and (AutoStructs.Term.var 3)).or (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.348189 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 540.467058 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 371.580879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.807349 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 38.186000 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.573780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.348920 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.480280 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² &&& (42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32).toNat
     b := ↑((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 65.281019 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and
                  (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).or
              (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 3)))
            ((((AutoStructs.Term.var 2).and (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 467.016939 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1148.320055 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 164.989890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.151130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.920010 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.831649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.075710 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.271110 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ &&& x✝² ||| x✝) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝² ||| x✝) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.359790 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 3).or (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 1).and (AutoStructs.Term.var 3)).or (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 87.405279 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 538.179108 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 235.209999 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.153710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.834870 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.969569 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.970500 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.263960 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ &&& x✝² ||| x✝¹) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝² ||| x✝¹) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.724830 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 3).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 3)).or (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 189.220809 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 587.187778 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 165.326489 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.119780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.859850 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.748669 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.967370 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.294440 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ &&& x✝² ||| x✝) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.902240 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 1).and (AutoStructs.Term.var 3)).or (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.035539 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 539.410648 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 164.393679 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.410710 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.794700 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.830069 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.961620 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.317280 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² &&& x✝ ||| x✝¹) ^^^ -1#32).toNat
     b := ↑((x✝ ||| x✝¹) ^^^ -1#32 ||| ((x✝¹ ||| x✝²) ^^^ -1#32) &&& x✝).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.299280 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
              ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)).and
                (AutoStructs.Term.var 0)))
            ((((AutoStructs.Term.var 3).and (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.469269 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 536.586998 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 368.348558 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.947140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 38.206280 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.321749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.370200 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.470720 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ &&& (42#32).sdiv x✝ ||| x✝²) ^^^ -1#32).toNat
     b := ↑((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((42#32).sdiv x✝ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 65.536660 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and
                  (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).or
              (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3)))
            ((((AutoStructs.Term.var 1).and (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 2)).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 465.988148 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1140.524215 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 164.521540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.171740 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.869190 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.980459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.892780 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.336000 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ &&& x✝² ||| x✝¹) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝¹ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.215810 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 3)).or (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.873439 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 538.444568 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 168.164459 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 25.389790 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 27.807020 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.414870 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.838760 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.299390 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² &&& ((x✝ ||| x✝¹) ^^^ -1#32) ||| (x✝² ||| x✝³) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝² ||| x✝³) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 76.976029 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 85.256910 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 568.327198 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 166.847379 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 24.527020 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 26.868940 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.019149 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.934480 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.258990 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² &&& ((x✝ ||| x✝¹) ^^^ -1#32) ||| (x✝³ ||| x✝) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝³ ||| x✝) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 75.890080 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 85.224189 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 261.580009 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 161.843780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.031979 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.769270 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.381550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.903450 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.288140 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ||| x✝²) &&& x✝ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝² &&& x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.544779 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 3).and (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.226220 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 534.832908 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 364.853639 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.803780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 38.015359 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.354080 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.513560 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.546610 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ||| (42#32).sdiv x✝) &&& x✝¹ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((42#32).sdiv x✝ &&& x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 65.970539 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or
                  (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).and
              (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 3)))
            ((((AutoStructs.Term.var 2).or (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 466.094099 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1136.255965 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 163.028469 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.975400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.801030 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.778739 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.905800 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.282120 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ||| x✝²) &&& x✝ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝² &&& x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.499310 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 3).and (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.605970 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 534.505557 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 161.591110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.995610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.582079 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.862650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.319880 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.279160 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ||| x✝²) &&& x✝¹ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝² &&& x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.779170 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 3).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.630599 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 537.445388 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 262.470029 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.079040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.623459 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.161010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.911010 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.313080 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ||| x✝²) &&& x✝ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝ &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.989800 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.195179 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 536.462298 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 162.416789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.086410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.778560 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.622929 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.067990 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.317380 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ||| x✝) &&& x✝¹ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32) &&& (x✝¹ &&& x✝² ^^^ -1#32 ||| x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.054240 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
              ((((AutoStructs.Term.var 1).and (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)).or
                (AutoStructs.Term.var 0)))
            ((((AutoStructs.Term.var 3).or (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.764939 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 536.132548 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 368.929918 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.618780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 38.037980 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.643459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.368600 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.456340 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ||| (42#32).sdiv x✝) &&& x✝² ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((42#32).sdiv x✝ &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 65.564730 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or
                  (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).and
              (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3)))
            ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 2)).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 468.685228 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1135.652365 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 161.901180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.973590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 30.653430 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.825659 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.897420 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.304950 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ||| x✝²) &&& x✝¹ ^^^ -1#32).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝¹ &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.179400 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 3)).xor (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 88.743679 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 535.516388 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 162.306479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.432280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 29.357460 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.129369 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.666550 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.177750 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² &&& x✝³ ^^^ (x✝² ||| x✝ &&& x✝¹ ^^^ -1#32)).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝² &&& x✝³ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 74.516300 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 3).and (AutoStructs.Term.var 4)).xor (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 3).and (AutoStructs.Term.var 4)).xor
              ((AutoStructs.Term.var 3).or
                (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.124520 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 550.329837 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 164.533759 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 24.516510 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 26.786140 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.411449 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.865630 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.277830 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ||| x✝ &&& x✝¹ ^^^ -1#32) &&& (x✝³ &&& x✝ ^^^ -1#32)).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& (x✝³ &&& x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 76.268860 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.758130 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 259.260399 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 167.784650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.695070 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.391379 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.104310 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.950910 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.245540 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ||| x✝¹) &&& (x✝ ^^^ x✝¹ ||| x✝²) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝ ^^^ x✝¹ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.964970 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).and
                  (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 3))).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.609139 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 548.104388 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 168.362229 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.708550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.368490 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.062319 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.910150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.298580 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ||| x✝¹) &&& (x✝¹ ^^^ x✝ ||| x✝²) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝¹ ^^^ x✝ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.243700 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).and
                  (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 3))).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.848890 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 547.251398 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 375.876708 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.543410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 40.611370 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.786650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.333729 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.445660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ||| x✝²) &&& (x✝¹ ^^^ x✝² ||| (42#32).sdiv x✝) ^^^ -1#32).toNat
     b := ↑((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| (x✝¹ ^^^ x✝² ||| (42#32).sdiv x✝) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.478030 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and
                  (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).or
              ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 0)).xor
                (AutoStructs.Term.var 3)))
            ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).and
                  (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 0))).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 472.333318 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1150.321505 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 169.104269 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.941850 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.453000 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.888129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.921930 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.326390 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ||| x✝¹) &&& (x✝¹ ^^^ x✝ ||| x✝²) ^^^ -1#32).toNat
     b := ↑(((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝² ||| (x✝¹ ^^^ x✝ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.304000 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).and
                  (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 3))).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.028469 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 547.851598 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 473.722978 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.522110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 40.688780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.207729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.494890 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.458180 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ||| x✝²) &&& ((42#32).sdiv x✝ ||| x✝¹ ^^^ x✝²) ^^^ -1#32).toNat
     b := ↑((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((42#32).sdiv x✝ ||| x✝¹ ^^^ x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.574030 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and
                  (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).or
              (((AutoStructs.Term.var 0).or ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).xor
                (AutoStructs.Term.var 3)))
            ((((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).and
                  ((AutoStructs.Term.var 0).or ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 467.201518 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1149.166015 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.746170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.919879 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.595150 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.270090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.016560 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.300380 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ||| x✝¹) &&& (x✝ ^^^ x✝¹ ||| x✝²) ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ x✝¹ ||| x✝²) ^^^ -1#32 ||| ((x✝ ||| x✝¹) ^^^ -1#32) &&& x✝²).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.060429 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).xor
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 3)).and
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).and
                  (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2))).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 191.360020 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 547.937867 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 165.663960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.757399 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.934470 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.047320 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.917650 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.306410 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ^^^ x✝¹) &&& x✝² ^^^ (x✝² ||| x✝ &&& x✝¹ ^^^ -1#32)).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& ((x✝ ^^^ x✝¹) &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.883229 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 3)).xor
              ((AutoStructs.Term.var 3).or
                (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.534990 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 543.094328 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 165.786979 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.741980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.745140 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.824889 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.847610 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.241790 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ^^^ x✝) &&& x✝² ^^^ (x✝² ||| x✝ &&& x✝¹ ^^^ -1#32)).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& ((x✝¹ ^^^ x✝) &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.173790 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 3)).xor
              ((AutoStructs.Term.var 3).or
                (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.015589 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 542.016288 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 374.130429 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.806459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 38.338150 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.420220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.034500 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.348960 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ^^^ x✝²) &&& (42#32).sdiv x✝ ^^^ ((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32)).toNat
     b := ↑(((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((x✝¹ ^^^ x✝²) &&& (42#32).sdiv x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 65.662099 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or
                  (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).and
              ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).and (AutoStructs.Term.var 0)).xor
                (AutoStructs.Term.var 3)))
            ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).and (AutoStructs.Term.var 0)).xor
              ((AutoStructs.Term.var 0).or
                (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 591.263338 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1169.571605 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 167.393119 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.876000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.210650 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.746150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.987650 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.344960 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ^^^ x✝) &&& x✝² ^^^ (x✝² ||| x✝ &&& x✝¹ ^^^ -1#32)).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²) &&& ((x✝¹ ^^^ x✝) &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.558389 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 3)).xor
              ((AutoStructs.Term.var 3).or
                (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.237560 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 546.901658 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 371.625099 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.913599 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 38.150490 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.324050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.028680 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.348690 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((42#32).sdiv x✝ &&& (x✝¹ ^^^ x✝²) ^^^ ((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32)).toNat
     b := ↑(((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((42#32).sdiv x✝ &&& (x✝¹ ^^^ x✝²) ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 65.511479 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or
                  (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))).and
              (((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).xor
                (AutoStructs.Term.var 3)))
            (((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).xor
              ((AutoStructs.Term.var 0).or
                (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 485.965628 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1162.477295 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 167.781330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.904190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.022999 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.660210 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.989050 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.348390 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ^^^ x✝¹) &&& x✝² ^^^ (x✝² ||| x✝ &&& x✝¹ ^^^ -1#32)).toNat
     b := ↑(((x✝ ^^^ x✝¹) &&& x✝² ^^^ -1#32) &&& (x✝ &&& x✝¹ ^^^ -1#32 ||| x✝²)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 61.253950 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).xor
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 3)).or
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).xor
              ((AutoStructs.Term.var 2).or
                (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 3))))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.311189 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 546.362298 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 225.598049 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.455190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.988390 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.111979 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.218760 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.425860 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ x✝¹ ||| x✝) ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& x✝² ||| (x✝¹ ||| x✝ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.144990 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 2).or (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 1)))
            ((((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.198290 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 561.763767 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 175.978579 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.430280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 34.227250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.119129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.225080 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.445010 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ x✝¹ ||| x✝) ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& x✝² ||| (x✝² ||| x✝ ||| x✝¹) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.854700 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 3).or (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 2)).xor
                (AutoStructs.Term.var 1)))
            ((((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.078909 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 561.145568 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 176.283470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.459429 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 34.027780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.234530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.255040 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.408740 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ x✝¹ ||| x✝) ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& x✝² ||| (x✝¹ ||| x✝² ||| x✝) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.879759 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 2).or (AutoStructs.Term.var 3)).or (AutoStructs.Term.var 0)).xor
                (AutoStructs.Term.var 1)))
            ((((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.682950 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 557.955308 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 175.577759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.411110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.890340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.803720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.171920 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.414959 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ x✝¹ ||| x✝) ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& x✝² ||| (x✝² ||| x✝ ||| x✝¹) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.831940 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 3).or (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 2)).xor
                (AutoStructs.Term.var 1)))
            ((((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.357710 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 558.748657 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 175.491249 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.350170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.827460 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.903069 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.229880 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.425990 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ^^^ x✝¹ ||| x✝²) ^^^ -1#32).toNat
     b := ↑(x✝ &&& x✝¹ &&& (x✝² ^^^ -1#32) ||| (x✝ ||| x✝² ||| x✝¹) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.189260 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).and
                  ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 3))).or
              ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 1)).xor
                (AutoStructs.Term.var 3)))
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).xor
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.267790 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 559.872707 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 176.483399 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.524890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 34.129130 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.058269 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.204840 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.406870 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ x✝¹ ||| x✝) ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& x✝² ||| (x✝ ||| x✝¹ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.606480 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 1)))
            ((((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.801949 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 560.655048 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 432.250119 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 41.963109 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 43.129900 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.085160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.593230 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.568660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(((42#32).sdiv x✝² ^^^ x✝¹ ||| x✝) ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& (42#32).sdiv x✝² ||| ((42#32).sdiv x✝² ||| (x✝¹ ||| x✝)) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 64.833439 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 3).or ((AutoStructs.Term.var 2).or (AutoStructs.Term.var 0))).xor
                (AutoStructs.Term.var 1)))
            ((((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 0)).xor
              (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 476.095778 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1165.746005 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 378.126218 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 41.899680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 44.257390 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.220739 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.664030 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.660890 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ^^^ (42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32).toNat
     b := ↑((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& x✝² ||| ((42#32).sdiv x✝ ||| x✝¹ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 67.504700 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).and
                  (AutoStructs.Term.var 3)).or
              ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 0)).or (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 475.733938 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1167.670775 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 376.405458 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 41.832570 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 43.525000 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.731479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.686500 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.593370 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(((42#32).sdiv x✝ ^^^ x✝² ||| x✝¹) ^^^ -1#32).toNat
     b := ↑((42#32).sdiv x✝ &&& ((x✝¹ ^^^ -1#32) &&& x✝²) ||| (x✝² ||| x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 67.891320 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and
                  (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).and (AutoStructs.Term.var 3))).or
              ((((AutoStructs.Term.var 3).or (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 0)).xor
                (AutoStructs.Term.var 2)))
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 3)).or (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 524.621927 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1174.901855 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 219.743469 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.535360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.326780 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.336170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.979330 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.330159 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² ^^^ x✝¹ ||| x✝ ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32 ||| x✝¹ ||| x✝²) &&& (x✝¹ &&& x✝ &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.583760 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 2).and (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.199650 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 548.622298 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 167.864319 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.643930 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.460450 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.678679 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.108430 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.328770 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² ^^^ x✝¹ ||| x✝ ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32 ||| x✝¹ ||| x✝²) &&& (x✝² &&& x✝ &&& x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.976050 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 3).and (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 2)).xor
                (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.619340 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 546.712747 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 167.654749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.401620 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.079020 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.725369 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.928650 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.289790 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² ^^^ x✝¹ ||| x✝ ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32 ||| x✝¹ ||| x✝²) &&& (x✝¹ &&& x✝² &&& x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.980590 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 2).and (AutoStructs.Term.var 3)).and (AutoStructs.Term.var 0)).xor
                (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.573570 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 546.630327 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 167.195749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.256080 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.007090 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.530729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.896520 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.294120 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² ^^^ x✝¹ ||| x✝ ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32 ||| x✝¹ ||| x✝²) &&& (x✝² &&& x✝ &&& x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.968020 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 3).and (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 2)).xor
                (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 91.635030 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 545.009207 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 168.387399 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.410620 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.693490 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.039159 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.103550 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.301790 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝ ^^^ x✝¹ ||| x✝² ^^^ -1#32).toNat
     b := ↑((x✝ ||| x✝¹ ||| x✝² ^^^ -1#32) &&& (x✝ &&& x✝² &&& x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.739920 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).or
                  ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 3))).and
              ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 2)).and (AutoStructs.Term.var 1)).xor
                (AutoStructs.Term.var 3)))
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or
              ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 3)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.705889 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 551.109168 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 167.992649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.435950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.016430 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.362949 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.912960 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.258150 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² ^^^ x✝¹ ||| x✝ ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32 ||| x✝¹ ||| x✝²) &&& (x✝ &&& x✝¹ &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.123330 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 2)).and (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.424109 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 547.129018 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 374.649598 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.376490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 41.571000 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.554829 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.430950 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.463470 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((42#32).sdiv x✝² ^^^ x✝¹ ||| x✝ ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32 ||| x✝¹ ||| (42#32).sdiv x✝²) &&& ((42#32).sdiv x✝² &&& (x✝¹ &&& x✝) ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 63.577150 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 3).and ((AutoStructs.Term.var 2).and (AutoStructs.Term.var 0))).xor
                (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2)).or
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 472.305278 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1154.750925 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 365.439078 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.032160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 42.291580 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.056509 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.418440 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.498470 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² ^^^ (42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32 ||| x✝²) &&& ((42#32).sdiv x✝ &&& x✝¹ &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.514520 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).or ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).or
                  (AutoStructs.Term.var 3)).and
              ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 3)).xor
                (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 0)).or
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 471.991558 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1151.076705 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 367.723119 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.111520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 41.812030 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.453679 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.511930 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.547230 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((42#32).sdiv x✝ ^^^ x✝² ||| x✝¹ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ ||| (x✝¹ ^^^ -1#32 ||| x✝²)) &&& (x✝² &&& x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.527010 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or
                  (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 3))).and
              ((((AutoStructs.Term.var 3).and (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 0)).xor
                (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 3)).or
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 472.528688 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1153.191135 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 169.474500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.130110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.393859 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.125660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.122160 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.294960 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ||| x✝¹ ^^^ -1#32) &&& (x✝ ^^^ -1#32)).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& x✝² ||| (x✝¹ ||| x✝) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.427020 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 2).or (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).or ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 1))).and
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 95.901739 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 551.814638 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 169.306910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.157520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.141319 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.449890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.134370 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.322660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝ ||| x✝¹ ^^^ -1#32) &&& (x✝² ^^^ -1#32)).toNat
     b := ↑(x✝ &&& x✝¹ &&& (x✝² ^^^ -1#32) ||| (x✝¹ ||| x✝²) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.949030 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).and
                  ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 3))).or
              (((AutoStructs.Term.var 1).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3)))
            (((AutoStructs.Term.var 0).or ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3))).and
              ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 3)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.401679 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 550.502918 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 172.679179 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.213630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.623600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.568199 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.038510 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.362310 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝¹ ||| x✝² ^^^ -1#32) &&& (x✝ ^^^ -1#32)).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& x✝² ||| (x✝² ||| x✝) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.259980 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 3).or (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 2).or ((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 1))).and
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.783100 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 554.410657 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 173.733009 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.992620 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.462750 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.385959 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.024310 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.295540 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ||| x✝¹ ^^^ -1#32) &&& (x✝ ^^^ -1#32)).toNat
     b := ↑((x✝ ^^^ -1#32) &&& x✝¹ &&& x✝² ||| (x✝ ||| x✝¹) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.407280 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2)).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).or ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 1))).and
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.100690 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 550.339737 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 381.282599 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.703390 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 42.701990 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.876369 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.488920 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.521880 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((x✝² ||| (42#32).sdiv x✝ ^^^ -1#32) &&& (x✝¹ ^^^ -1#32)).toNat
     b := ↑((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& x✝² ||| ((42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 67.419230 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).and
                  (AutoStructs.Term.var 3)).or
              (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 3).or ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2))).and
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 475.986428 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1157.714385 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 364.095549 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.839090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 39.103850 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.948129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.859290 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.543560 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(((42#32).sdiv x✝ ||| x✝² ^^^ -1#32) &&& (x✝¹ ^^^ -1#32)).toNat
     b := ↑((42#32).sdiv x✝ &&& ((x✝¹ ^^^ -1#32) &&& x✝²) ||| (x✝² ||| x✝¹) ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 67.119720 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).and
                  (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).and (AutoStructs.Term.var 3))).or
              (((AutoStructs.Term.var 3).or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 0).or ((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2))).and
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 460.253888 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1132.861785 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.380189 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.334580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.647730 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.612419 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.196460 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.369380 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² &&& (x✝¹ ^^^ -1#32) ||| x✝ ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32 ||| x✝¹ ||| x✝²) &&& (x✝¹ &&& x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 61.447720 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 2).and (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).and ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 1))).or
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.598040 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 556.977997 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.366889 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.208360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.258110 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.483940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.159350 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.326110 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝ &&& (x✝¹ ^^^ -1#32) ||| x✝² ^^^ -1#32).toNat
     b := ↑((x✝ ||| x✝¹ ||| x✝² ^^^ -1#32) &&& (x✝¹ &&& x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 59.570099 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1)).or
                  ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 3))).and
              (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3)))
            (((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 3))).or
              ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 3)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 96.494350 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 557.353528 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.170170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.226219 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.707300 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.769290 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.116410 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.311790 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝¹ &&& (x✝² ^^^ -1#32) ||| x✝ ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32 ||| x✝¹ ||| x✝²) &&& (x✝² &&& x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.537929 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 3).and (AutoStructs.Term.var 0)).xor (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 2).and ((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 1))).or
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 93.534110 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 551.426008 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 173.502789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.532230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.598590 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.683340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.166240 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.330240 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² &&& (x✝¹ ^^^ -1#32) ||| x✝ ^^^ -1#32).toNat
     b := ↑((x✝ ^^^ -1#32 ||| x✝¹ ||| x✝²) &&& (x✝ &&& x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 60.347559 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 1)))
            (((AutoStructs.Term.var 3).and ((AutoStructs.Term.var 2).xor (AutoStructs.Term.var 1))).or
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 97.530740 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 557.615258 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 377.721429 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.623450 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 42.624669 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.830250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.484600 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.495160 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝² &&& ((42#32).sdiv x✝ ^^^ -1#32) ||| x✝¹ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32 ||| x✝²) &&& ((42#32).sdiv x✝ &&& x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 68.020100 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).or ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).or
                  (AutoStructs.Term.var 3)).and
              (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 3).and ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2))).or
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 472.482128 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1208.530495 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 413.909848 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.886180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 39.373880 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 119.967109 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.497000 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.517780 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑((42#32).sdiv x✝ &&& (x✝² ^^^ -1#32) ||| x✝¹ ^^^ -1#32).toNat
     b := ↑(((42#32).sdiv x✝ ||| (x✝¹ ^^^ -1#32 ||| x✝²)) &&& (x✝² &&& x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 67.151010 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or
                  (((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 3))).and
              (((AutoStructs.Term.var 3).and (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2)))
            (((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 3).xor (AutoStructs.Term.var 2))).or
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 454.522998 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1175.446045 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 145.997920 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.668389 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 23.407690 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.840540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.874370 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.811250 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 15
      0 ≤ a ≤ 15
      a - b ≥ 1
    where
     a := ↑(x✝¹ &&& (x✝ ^^^ -1#4)).toNat
     b := ↑((x✝ ^^^ -1#4 ||| x✝¹) &&& (x✝ ^^^ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 45.364930 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2)).and
              ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)))
            ((AutoStructs.Term.var 2).and ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.487389 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 483.293188 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 140.768419 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.545610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.336670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.288500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.297390 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.421689 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(x✝ * x✝ &&& (x✝¹ * x✝¹ ^^^ -1#32)).toNat
     b := ↑((x✝ * x✝ ^^^ x✝¹ * x✝¹) &&& (x✝ * x✝ ||| x✝¹ * x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 51.596620 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and
              ((AutoStructs.Term.var 0).or ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))))
            ((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 279.233099 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 725.008757 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.578770 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (zeroExtend 16 x✝ &&& zeroExtend 16 x✝¹) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 10.573910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 10.189620 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 64.592340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.249270 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.586120 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.032990 ms, MSGSTART 
    Unsupported syntax some (setWidth 16 x✝ &&& setWidth 16 x✝¹) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 16)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 16)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HAnd.hAnd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 16)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 16)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 16)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHAndOfAndOp [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 16)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instAndOp [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 16)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.setWidth [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 16)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16)))))
                (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6906920))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.const `BitVec.setWidth [])
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 4)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 4)))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 16)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 6906919))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 16)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 16)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 81.766339 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 262.636939 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 156.694410 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.667599 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.538710 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.484030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.697160 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.732350 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 65535
      0 ≤ a ≤ 255
      0 ≤ a - 65536*b ≤ 65535
      a - 65536*b - c ≥ 1
    where
     a := ↑(x✝ &&& zeroExtend 8 x✝¹).toNat
     b := ↑(x✝ &&& zeroExtend 8 x✝¹).toNat / 65536
     c := ↑(zeroExtend 16 x✝ &&& zeroExtend 16 x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 35.698000 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      True
    is not definitionally equal to the right-hand side
      setWidth 16 x✝ &&& setWidth 16 x✝¹ = setWidth 16 x✝ &&& setWidth 16 (setWidth 8 x✝¹)
    x✝¹ : BitVec 4
    x✝ : BitVec 8
    h✝ : ¬(True ∧ (x✝ &&& zeroExtend 8 x✝¹).msb = true)
    ⊢ True ↔ setWidth 16 x✝ &&& setWidth 16 x✝¹ = setWidth 16 x✝ &&& setWidth 16 (setWidth 8 x✝¹) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.748369 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 555.309778 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 156.788240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.376580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.474359 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.872460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.744050 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.434060 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 65535
      0 ≤ a ≤ 255
      0 ≤ a - 65536*b ≤ 65535
      a - 65536*b - c ≥ 1
    where
     a := ↑(x✝¹ ||| zeroExtend 8 x✝).toNat
     b := ↑(x✝¹ ||| zeroExtend 8 x✝).toNat / 65536
     c := ↑(zeroExtend 16 x✝ ||| zeroExtend 16 x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 46.274350 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 92.183969 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 470.952088 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 113.513140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 34.879560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 27.250499 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.352420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.485750 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.876570 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 65535
      0 ≤ a ≤ 65535
      a - b ≥ 1
    where
     a := ↑(signExtend 16 (x✝¹ &&& signExtend 8 x✝)).toNat
     b := ↑(signExtend 16 x✝ &&& signExtend 16 x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 76.848200 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 85.325109 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 564.608118 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 114.052450 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.016700 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 27.833399 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 113.986770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.447160 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.880480 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 65535
      0 ≤ a ≤ 65535
      a - b ≥ 1
    where
     a := ↑(signExtend 16 (x✝ ||| signExtend 8 x✝¹)).toNat
     b := ↑(signExtend 16 x✝ ||| signExtend 16 x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 76.887030 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).or (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 81.768689 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 561.786728 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 109.969900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 34.732250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 27.433050 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 114.629269 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.522470 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.884330 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 65535
      0 ≤ a ≤ 65535
      a - b ≥ 1
    where
     a := ↑(signExtend 16 (x✝ ^^^ signExtend 8 x✝¹)).toNat
     b := ↑(signExtend 16 x✝ ^^^ signExtend 16 x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 77.200880 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 83.442539 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 570.376578 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 145.726520 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.404540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 29.004920 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 189.523719 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 48.966740 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.165670 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 56.146969 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((AutoStructs.Term.var 0).and ((AutoStructs.Term.var 1).and AutoStructs.Term.one)) AutoStructs.Term.zero) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 107.513750 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 863.388596 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 113.544059 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 78.443630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 75.375260 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.320989 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.163310 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.938620 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 4294967295
      0 ≤ a ≤ 4294967295
      -112 ≤ a - 4294967296*b ≤ 4294967183
      a - 4294967296*b - c ≥ -111
    where
     a := ↑(x✝ ||| 15#32).toNat
     b := ↑((x✝ ||| 15#32).toNat + 112 % 2 ^ 32) / 4294967296
     c := ↑(x✝ + 112#32 ||| 15#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.262710 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 2)).add (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.535959 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 613.009497 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.573930 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + 112#32 ||| 15#32) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 82.039700 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 70.930819 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 101.156200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.179430 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.874720 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.026870 ms, MSGSTART 
    Unsupported syntax some (x✝ + 112#32 ||| 15#32) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 32)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HOr.hOr [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHOrOfOrOp [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instOrOp [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHAdd [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instAdd [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 7204609)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 112)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 112)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 32)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 15)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 15))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 32)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.226199 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 430.487299 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 149.138299 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 78.872820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 75.246850 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.913609 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.175830 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 17.758310 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 4294967295
      0 ≤ a ≤ 4294967295
      -112 ≤ a - 4294967296*b ≤ 4294967183
      a - 4294967296*b - c ≥ -111
    where
     a := ↑(x✝ ||| 15#32).toNat
     b := ↑((x✝ ||| 15#32).toNat + 112 % 2 ^ 32) / 4294967296
     c := ↑(x✝ + 112#32 ||| 15#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.101350 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 2)).add (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 118.077729 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 659.886708 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.601750 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + 112#32 ||| 15#32) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 82.012240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 70.721229 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 101.172170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.177490 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 15.332070 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.139660 ms, MSGSTART 
    Unsupported syntax some (x✝ + 112#32 ||| 15#32) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 32)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HOr.hOr [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHOrOfOrOp [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instOrOp [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHAdd [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instAdd [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 7307023)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 112)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 112)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 32)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 15)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 15))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 32)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 122.331629 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 443.573878 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.711180 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + 112#32 ||| 15#32) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 283.325548 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 71.442209 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 102.064180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.231500 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 21.207820 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 1
      0 ≤ a ≤ 4294967295
      -112 ≤ a - 4294967296*b ≤ 4294967183
    where
     a := ↑(x✝ ||| 15#32).toNat
     b := ↑((x✝ ||| 15#32).toNat + 112 % 2 ^ 32) / 4294967296 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.457910 ms, MSGSTART 
    Unsupported syntax some (x✝ + 112#32 ||| 15#32) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 32)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 32)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HOr.hOr [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHOrOfOrOp [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 32)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instOrOp [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 32)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHAdd [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 32)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instAdd [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 32)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 7307023)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 32)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 112)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 112)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 32)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 15)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 15))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 32)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 32)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 137.454999 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 658.821727 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 174.382999 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 79.358370 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 75.161579 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.285870 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.258890 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 22.897020 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 4294967295
      0 ≤ a ≤ 4294967295
      -112 ≤ a - 4294967296*b ≤ 4294967183
      a - 4294967296*b - c ≥ -111
    where
     a := ↑(x✝ ||| 15#32).toNat
     b := ↑((x✝ ||| 15#32).toNat + 112 % 2 ^ 32) / 4294967296
     c := ↑(x✝ + 112#32 ||| 15#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.100980 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).or (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).or (AutoStructs.Term.var 2)).add (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 150.760159 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 726.598547 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 112.756359 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.599630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.838290 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.993069 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.239610 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.914830 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 255
      0 ≤ a ≤ 255
      -48 ≤ a - 256*b ≤ 207
      a - 256*b - c ≥ -47
    where
     a := ↑(x✝ &&& 246#8).toNat
     b := ↑((x✝ &&& 246#8).toNat + 48 % 2 ^ 8) / 256
     c := ↑(x✝ + 48#8 &&& 246#8).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.524740 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 2)).add (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 89.113410 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 559.385627 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.607530 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + 48#8 &&& 246#8) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.163350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 28.277390 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 101.535709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.199340 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.843130 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.182310 ms, MSGSTART 
    Unsupported syntax some (x✝ + 48#8 &&& 246#8) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HAnd.hAnd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHAndOfAndOp [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instAndOp [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHAdd [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instAdd [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 7551354)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 48)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 48)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 246)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 246))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 8)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 105.745989 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 385.088819 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 142.747849 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.850790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.716290 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.523899 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.246920 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 17.600320 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 255
      0 ≤ a ≤ 255
      -48 ≤ a - 256*b ≤ 207
      a - 256*b - c ≥ -47
    where
     a := ↑(x✝ &&& 246#8).toNat
     b := ↑((x✝ &&& 246#8).toNat + 48 % 2 ^ 8) / 256
     c := ↑(x✝ + 48#8 &&& 246#8).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.635990 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 2)).add (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 112.789189 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 612.873378 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.598790 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + 48#8 &&& 246#8) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.428530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 28.372440 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 101.129170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.128669 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 15.336450 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.187310 ms, MSGSTART 
    Unsupported syntax some (x✝ + 48#8 &&& 246#8) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HAnd.hAnd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHAndOfAndOp [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instAndOp [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHAdd [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instAdd [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 7622458)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 48)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 48)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 246)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 246))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 8)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 118.899500 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 397.340688 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.721280 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + 48#8 &&& 246#8) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 125.705769 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 28.842750 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 101.598220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.204770 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 21.146920 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 1
      0 ≤ a ≤ 255
      -48 ≤ a - 256*b ≤ 207
    where
     a := ↑(x✝ &&& 246#8).toNat
     b := ↑((x✝ &&& 246#8).toNat + 48 % 2 ^ 8) / 256 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.235690 ms, MSGSTART 
    Unsupported syntax some (x✝ + 48#8 &&& 246#8) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HAnd.hAnd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHAndOfAndOp [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instAndOp [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHAdd [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instAdd [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 7622458)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 48)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 48)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 246)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 246))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 8)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 132.928389 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 497.444578 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 170.544469 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 36.357780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.044510 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.342839 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.275640 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 22.805770 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 255
      0 ≤ a ≤ 255
      -48 ≤ a - 256*b ≤ 207
      a - 256*b - c ≥ -47
    where
     a := ↑(x✝ &&& 246#8).toNat
     b := ↑((x✝ &&& 246#8).toNat + 48 % 2 ^ 8) / 256
     c := ↑(x✝ + 48#8 &&& 246#8).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.901760 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).and (AutoStructs.Term.var 2)).add (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 144.073920 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 674.727367 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 119.852029 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 69.760300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 66.782080 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.843989 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.188520 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.878580 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 255
      0 ≤ a ≤ 255
      -96 ≤ a - 256*b ≤ 159
      a - 256*b - c ≥ -95
    where
     a := ↑(x✝ ^^^ 31#8).toNat
     b := ↑((x✝ ^^^ 31#8).toNat + 96 % 2 ^ 8) / 256
     c := ↑(x✝ + 96#8 ^^^ 31#8).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 48.352640 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)).add (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.481059 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 596.999288 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.571170 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + 96#8 ^^^ 31#8) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 69.211900 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 62.020649 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 101.288349 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.122500 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 12.779640 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.068390 ms, MSGSTART 
    Unsupported syntax some (x✝ + 96#8 ^^^ 31#8) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HXor.hXor [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHXorOfXor [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instXor [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHAdd [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instAdd [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 7799635)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 96)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 96)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 31)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 31))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 8)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.768129 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 418.358959 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 149.230940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 70.504419 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 66.877940 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 125.175819 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.182890 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 17.688340 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 255
      0 ≤ a ≤ 255
      -96 ≤ a - 256*b ≤ 159
      a - 256*b - c ≥ -95
    where
     a := ↑(x✝ ^^^ 31#8).toNat
     b := ↑((x✝ ^^^ 31#8).toNat + 96 % 2 ^ 8) / 256
     c := ↑(x✝ + 96#8 ^^^ 31#8).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 47.970160 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)).add (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 212.572049 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 819.074227 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.605560 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + 96#8 ^^^ 31#8) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 69.550970 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 62.428390 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 101.068529 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.081980 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 15.330940 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.113480 ms, MSGSTART 
    Unsupported syntax some (x✝ + 96#8 ^^^ 31#8) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HXor.hXor [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHXorOfXor [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instXor [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHAdd [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instAdd [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 7895852)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 96)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 96)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 31)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 31))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 8)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 116.691190 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 428.979128 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.726070 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + 96#8 ^^^ 31#8) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 245.706479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 62.353280 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 101.392340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.212750 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 21.108979 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 1
      0 ≤ a ≤ 255
      -96 ≤ a - 256*b ≤ 159
    where
     a := ↑(x✝ ^^^ 31#8).toNat
     b := ↑((x✝ ^^^ 31#8).toNat + 96 % 2 ^ 8) / 256 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 14.244620 ms, MSGSTART 
    Unsupported syntax some (x✝ + 96#8 ^^^ 31#8) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 8)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 8)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HXor.hXor [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHXorOfXor [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 8)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instXor [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 8)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHAdd [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 8)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instAdd [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 8)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))))
                  (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 7895852)))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 8)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 96)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 96)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 8)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 31)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 31))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 8)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 8)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 128.810740 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 614.942777 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 172.513509 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 70.836670 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 67.151940 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 126.029169 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.245510 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 22.755620 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 255
      0 ≤ a ≤ 255
      -96 ≤ a - 256*b ≤ 159
      a - 256*b - c ≥ -95
    where
     a := ↑(x✝ ^^^ 31#8).toNat
     b := ↑((x✝ ^^^ 31#8).toNat + 96 % 2 ^ 8) / 256
     c := ↑(x✝ + 96#8 ^^^ 31#8).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 48.358410 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 2)).add (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 144.133409 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 712.672527 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 167.419129 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 53.081520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 37.211790 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 71.158479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 45.071540 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.384330 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ₛ x✝) &&& x✝²).toNat
     b := ↑((ofBool (x✝ >ₛ x✝¹) ^^^ x✝²) &&& x✝²).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 71.944850 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 1))
            ((AutoStructs.Term.var 2).and (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 117.266709 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 248.354659 ms, 
TACEND
