⚠ [673/898] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:26:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:33:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:40:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:43:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:54:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:58:8: declaration uses 'sorry'
⚠ [884/898] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [887/898] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [893/898] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:56:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:129:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:164:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:198:6: declaration uses 'sorry'
⚠ [894/898] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 67.174950 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.560340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.151910 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 220.254938 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 22.865470 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.450760 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑x✝.toNat
     b := ↑(x✝ ^^^ -1#32 ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 64.941620 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.426510 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 221.111059 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 186.772709 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 58.622000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 39.045240 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 149.990929 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 79.638170 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.193470 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝¹ ≥ₛ x✝) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 127.540581 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 131.898649 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 381.882279 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 246.666119 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 151.002370 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 67.196061 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 297.634350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 223.749270 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.956130 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ >ₛ x✝¹)).toNat
     b := ↑(ofBool (x✝¹ ^^^ -1#32 >ₛ x✝ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 32.917350 ms, MSGSTART 
    Equality (x✝¹ ^^^ 4294967295#32 >ₛ x✝ ^^^ 4294967295#32) = (x✝ >ₛ x✝¹) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 136.800500 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 872.166157 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 117.036429 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.019670 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.568710 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 183.427399 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.563860 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.241370 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (4294967253#32 >ᵤ x✝)).toNat
     b := ↑(ofBool (x✝ ^^^ -1#32 >ᵤ 42#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.900000 ms, MSGSTART 
    Equality (x✝ ^^^ 4294967295#32 >ᵤ 42#32) = (4294967253#32 >ᵤ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 94.699730 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 346.886838 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 156.915179 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 50.625310 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 44.243600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 192.670559 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 22.139870 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.473560 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 4294967295
      0 ≤ c ≤ 4294967295
      c - d ≥ 1
      0 ≤ b ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - b ≥ 1
    where
     a := ↑(↑32).toNat
     b := ↑x✝¹.toNat
     c := ↑(x✝.sshiftRight' x✝¹).toNat
     d := ↑((x✝ ^^^ -1#32).sshiftRight' x✝¹ ^^^ -1#32).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 100.352129 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 384.184719 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 583.823519 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gnot_proof.lean:52:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 137.954279 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.101340 ms, MSGSTART 
    tactic 'simp' failed, nested error:
    maximum recursion depth has been reached
    use `set_option maxRecDepth <num>` to increase limit
    use `set_option diagnostics true` to get diagnostic information MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 19.000970 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 192.004389 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.248439 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.901421 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 255
      0 ≤ c ≤ 255
      c - d ≥ 1
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(↑8).toNat
     b := ↑x✝.toNat
     c := ↑(41#8 >>> x✝).toNat
     d := ↑((214#8).sshiftRight' x✝ ^^^ -1#8).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 42.289209 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 86.466530 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 665.834679 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gnot_proof.lean:62:8: warning: declaration uses 'sorry'
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gnot_proof.lean:76:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gnot_proof.lean:86:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gnot_proof.lean:96:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 135.588609 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 118.537600 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 119.224869 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 181.617529 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.758580 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.975421 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 255
      0 ≤ a ≤ 255
      a - b ≥ 1
    where
     a := ↑(x✝ + -1#8 &&& (x✝¹ ^^^ -1#8)).toNat
     b := ↑((0#8 - x✝ ||| x✝¹) ^^^ -1#8).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 61.931789 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).neg.or (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 2)).and
              ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2)))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 84.547850 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 716.484327 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 35.151599 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 8.977940 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.324130 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 76.975440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.457520 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.259140 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.412020 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 2.610850 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 6.383210 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 34.363290 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 8.904030 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.395710 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 76.484779 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.488980 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.115950 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.191820 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 2.770160 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 6.525840 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 78.678790 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 11.122770 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.955460 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 76.433909 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.787220 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.213160 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.716880 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 2.774380 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 6.469510 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 69.074600 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 9.438140 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.607390 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 78.499159 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.279210 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.114730 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 12.441250 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 2.721350 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 6.562870 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 68.944150 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 9.373320 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.490670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 73.688729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.100130 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.521840 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 11.898860 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 3.749040 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 6.269870 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.529850 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (0#1 ^^^ 1#1) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 10.372710 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.775440 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 75.098820 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.745800 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.960880 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.400740 ms, MSGSTART 
    Unsupported syntax some 1#1 ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.665720 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 81.461969 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 110.158840 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 9.766950 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.012429 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 72.785360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.239100 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.754380 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 30.380460 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).xor AutoStructs.Term.one).xor AutoStructs.Term.one) AutoStructs.Term.one) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.061300 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 183.759089 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 108.956139 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 11.503430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.580420 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 73.408490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.415310 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.177060 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑x✝.toNat
     b := ↑(x✝ ^^^ 1#1 ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 31.628989 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 69.775099 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 195.741119 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 111.982029 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 15.590680 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 6.052190 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 131.184159 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 18.632300 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 11.712620 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 20.385680 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 5.042880 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 7.835430 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 109.217380 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 14.661450 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.880090 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 134.334609 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.939630 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.286200 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 28.293220 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.282150 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 237.426329 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.640370 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (1#1 ^^^ 1#1) ⊑ none MSGEND
  TACBENCH bv_ac PASS, TIME_ELAPSED 9.857080 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 4.643730 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 76.463269 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.766710 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.997780 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 13.529330 ms, MSGSTART 
    Unsupported syntax some 0#1 ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.714980 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 80.161150 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 33.651849 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 8.598750 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.289200 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 74.692980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.190940 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.514460 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 11.820410 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 3.691450 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 6.119490 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 46.267060 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 8.329820 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 5.028550 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 73.009469 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.797520 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.775110 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.316240 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.zero (AutoStructs.Term.var 0)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.033650 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 113.110910 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 33.727290 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 8.624520 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 3.336870 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 73.857570 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.018150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega PASS, TIME_ELAPSED 7.479600 ms, 
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 11.854620 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 3.715860 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 6.151330 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 107.965169 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 11.755190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 7.548110 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 72.863270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.256380 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.368860 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑x✝.toNat
     b := ↑(x✝ ^^^ 1#1 ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 30.235920 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 69.604879 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 194.675219 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 107.621169 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 9.857360 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 8.377450 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 74.848600 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.794950 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.713640 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 32.377240 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).xor AutoStructs.Term.one).xor AutoStructs.Term.one) AutoStructs.Term.zero) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.429660 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 186.863039 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 161.071279 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 203.441759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 106.252880 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 229.643669 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 121.741919 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.875850 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (-1#32 >ₛ x✝¹ - x✝)).toNat
     b := ↑(ofBool (x✝ + (x✝¹ ^^^ -1#32) >ₛ 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 18.605240 ms, MSGSTART 
    Equality (x✝ + (x✝¹ ^^^ 4294967295#32) >ₛ 0#32) = (4294967295#32 >ₛ x✝¹ - x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 138.756049 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 962.030886 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 307.203088 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 34.226610 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 24.338250 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 212.088119 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 33.506320 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.890640 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ + x✝¹ >ᵤ 4294967253#32)).toNat
     b := ↑(ofBool (42#32 >ᵤ (x✝ ^^^ -1#32) - x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 19.128210 ms, MSGSTART 
    Equality (42#32 >ᵤ (x✝ ^^^ 4294967295#32) - x✝¹) = (x✝ + x✝¹ >ᵤ 4294967253#32) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 171.340179 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 497.545258 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 326.592059 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 89.882449 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 53.248000 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 227.650169 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 125.472050 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.173240 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ - x✝ ≥ₛ x✝)).toNat
     b := ↑(ofBool (x✝ ^^^ -1#32 ≥ₛ x✝ + (x✝¹ ^^^ -1#32))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 19.125029 ms, MSGSTART 
    Equality (x✝ ^^^ 4294967295#32 ≥ₛ x✝ + (x✝¹ ^^^ 4294967295#32)) = (x✝¹ - x✝ ≥ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 290.569139 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 827.132217 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 166.981499 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 56.351550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 33.119990 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.317909 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 119.712830 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.151970 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ ≥ₛ x✝)).toNat
     b := ↑(ofBool (x✝ ^^^ -1#32 ≥ₛ x✝¹ ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 16.165780 ms, MSGSTART 
    Equality (x✝ ^^^ 4294967295#32 ≥ₛ x✝¹ ^^^ 4294967295#32) = (x✝¹ ≥ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 160.498129 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 512.445868 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 228.602739 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 89.722510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 52.395049 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 223.448860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 125.847739 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.118360 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ - x✝ ≥ₛ x✝)).toNat
     b := ↑(ofBool (x✝ ^^^ -1#32 ≥ₛ x✝ + (x✝¹ ^^^ -1#32))).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 19.039470 ms, MSGSTART 
    Equality (x✝ ^^^ 4294967295#32 ≥ₛ x✝ + (x✝¹ ^^^ 4294967295#32)) = (x✝¹ - x✝ ≥ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 292.313779 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 809.418806 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 151.456490 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 55.827729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 32.411890 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.316650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 119.613699 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.019320 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝² ≥ₛ x✝)).toNat
     b := ↑(ofBool (x✝ ^^^ -1#32 ≥ₛ x✝² ^^^ -1#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 15.475990 ms, MSGSTART 
    Equality (x✝ ^^^ 4294967295#32 ≥ₛ x✝² ^^^ 4294967295#32) = (x✝² ≥ₛ x✝) has a strange type MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 110.404920 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 482.780228 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 130.353690 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 83.656859 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 77.172650 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 200.458559 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 38.882220 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.405360 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 4294967295
      0 ≤ c ≤ 4294967295
      0 ≤ a ≤ 4294967295
      a - 4294967296*b - c - d ≥ -4294967295
      -4294967296 ≤ a - 4294967296*b - d ≤ -1
    where
     a := ↑(signExtend 32 (ofBool (x✝¹ != 0#32))).toNat
     b := ↑((signExtend 32 (ofBool (x✝¹ != 0#32))).toNat + (2 ^ 32 - x✝.toNat)) / 4294967296
     c := ↑(x✝ + signExtend 32 (ofBool (x✝¹ == 0#32)) ^^^ -1#32).toNat
     d := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 166.272739 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).xor (AutoStructs.Term.var 2))
            ((AutoStructs.Term.var 3).sub (AutoStructs.Term.var 0))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 273.535729 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 981.354546 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gnot_proof.lean:205:4: error: maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 151.671959 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 49.844980 ms, MSGSTART 
    tactic 'simp' failed, nested error:
    maximum recursion depth has been reached
    use `set_option maxRecDepth <num>` to increase limit
    use `set_option diagnostics true` to get diagnostic information MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 54.032220 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 257.938309 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 37.655760 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 13.663650 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 255
      0 ≤ b ≤ 255
      b - c ≥ 1
      32 ≤ a ≤ 4294967295
    where
     a := ↑(↑32).toNat
     b := ↑(signExtend 8 (ofBool (x✝ != 0#8))).toNat
     c := ↑(truncate 8 ((zeroExtend 32 x✝ + -1#32).sshiftRight' 31#32) ^^^ -1#8).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.789399 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1))
            (AutoStructs.Term.var 2)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 109.846860 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 864.111066 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 240.506549 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.469639 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.095960 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 153.157890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 73.481899 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.379770 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (24#64 >ᵤ x✝) &&& ofBool (60#64 >ᵤ x✝¹) &&& ofBool (60#64 >ᵤ x✝²)).toNat
     b := ↑((ofBool (x✝ >ᵤ 23#64) ||| ofBool (x✝¹ >ᵤ 59#64) ||| ofBool (x✝² >ᵤ 59#64)) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.344030 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 134.278750 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 336.035688 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 217.159249 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 54.128210 ms, MSGSTART 
    tactic 'simp' failed, nested error:
    maximum recursion depth has been reached
    use `set_option maxRecDepth <num>` to increase limit
    use `set_option diagnostics true` to get diagnostic information MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 65.030490 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 299.025749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 113.420669 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.543120 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 178206#32) &&& ofBool (4294965790#32 >ᵤ x✝¹ + 4294770688#32) &&&
            ofBool (4294251083#32 >ᵤ x✝¹ + 4294049536#32) &&&
          ofBool (4294771184#32 >ᵤ x✝¹ + 4293853184#32)).toNat
     b := ↑((ofBool (x✝ == 178206#32) ||| ofBool (1506#32 >ᵤ x✝¹ + 4294772194#32) |||
              ofBool (716213#32 >ᵤ x✝¹ + 4294765749#32) |||
            ofBool (196112#32 >ᵤ x✝¹ + 4294049296#32)) ^^^
          1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 58.041880 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 166.476389 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 514.838108 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.577720 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some ((ofBool (x✝ == 0#64) ||| 1#1) ^^^ 1#1) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.221590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 17.312710 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.855749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 29.695660 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.672580 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.269770 ms, MSGSTART 
    Unsupported syntax some ((ofBool (x✝ == 0#64) ||| 1#1) ^^^ 1#1) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HXor.hXor [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 1)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 1)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 1)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHXorOfXor [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 1)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instXor [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 1)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `HOr.hOr [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 1)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 1)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 1)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `instHOrOfOrOp [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 1)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec.instOrOp [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 1)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofBool [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.const `BEq.beq [Lean.Level.zero])
                            (Lean.Expr.app
                              (Lean.Expr.const `BitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 64)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.const `instBEqOfDecidableEq [Lean.Level.zero])
                              (Lean.Expr.app
                                (Lean.Expr.const `BitVec [])
                                (Lean.Expr.app
                                  (Lean.Expr.app
                                    (Lean.Expr.app
                                      (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero])
                                      (Lean.Expr.const `Nat []))
                                    (Lean.Expr.lit (Lean.Literal.natVal 64)))
                                  (Lean.Expr.app
                                    (Lean.Expr.const `instOfNatNat [])
                                    (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                            (Lean.Expr.app
                              (Lean.Expr.const `instDecidableEqBitVec [])
                              (Lean.Expr.app
                                (Lean.Expr.app
                                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                  (Lean.Expr.lit (Lean.Literal.natVal 64)))
                                (Lean.Expr.app
                                  (Lean.Expr.const `instOfNatNat [])
                                  (Lean.Expr.lit (Lean.Literal.natVal 64)))))))
                        (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1132670)))
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec.ofNat [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 64)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 0)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.ofNat [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 1)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                      (Lean.Expr.lit (Lean.Literal.natVal 1)))
                    (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 1)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 106.869760 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 608.820877 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 100.680590 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.086590 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.214560 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 139.119419 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 37.470700 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.010210 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& 0#1).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| 1#1) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 38.415570 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or AutoStructs.Term.one).xor AutoStructs.Term.one) AutoStructs.Term.zero) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 176.283309 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 245.317639 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 222.218499 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.851040 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 27.373610 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.728519 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 57.182400 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.411680 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& ofBool (x✝¹ != 0#64)).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| 1#1) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 49.568220 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or AutoStructs.Term.one).xor AutoStructs.Term.one) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 134.326529 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 373.055349 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 100.084970 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 34.448350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 20.097590 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 139.345459 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 37.571240 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.099020 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& 0#1).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| 1#1) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 38.752450 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            (((AutoStructs.Term.var 0).or AutoStructs.Term.one).xor AutoStructs.Term.one) AutoStructs.Term.zero) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 116.828669 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 246.421539 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 109.250090 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.489720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 29.275490 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 137.027659 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 61.757370 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 9.006620 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& ofBool (x✝¹ != 0#64)).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| ofBool (x✝¹ == 0#64)) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 45.205830 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 141.036479 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 255.386159 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 218.297039 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 37.766070 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 21.970560 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.086059 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 52.542370 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.392630 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& 0#1).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| ofBool (x✝¹ == 0#64)) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 38.033120 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            AutoStructs.Term.zero) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 126.485039 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 357.517149 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 131.261889 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 52.239800 ms, MSGSTART 
    tactic 'simp' failed, nested error:
    maximum recursion depth has been reached
    use `set_option maxRecDepth <num>` to increase limit
    use `set_option diagnostics true` to get diagnostic information MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 55.721990 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 166.093659 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 16.844130 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.590160 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 18446744073709551615
      0 ≤ a ≤ 18446744073709551615
      a - b ≥ 1
    where
     a := ↑(0#64 - x✝ ||| 9223372036854775808#64).toNat
     b := ↑(x✝ + 9223372036854775807#64 &&& 9223372036854775807#64 ^^^ -1#64).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 68.554869 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq
            ((((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1)).and (AutoStructs.Term.var 1)).xor
              (AutoStructs.Term.var 2))
            ((AutoStructs.Term.var 0).neg.or (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 100.648660 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 689.413577 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 159.193499 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 33.294890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 29.700530 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 221.774119 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 50.414370 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.223580 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝¹ - x✝ &&& 4095#32 == 4095#32)).toNat
     b := ↑(ofBool (x✝ + (x✝¹ ^^^ -1#32) &&& 4095#32 == 0#32)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 115.334329 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.binop AutoStructs.Binop.equiv
            (AutoStructs.Formula.atom AutoStructs.Relation.eq
              (((AutoStructs.Term.var 0).add ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))).and
                (AutoStructs.Term.var 3))
              AutoStructs.Term.zero)
            (AutoStructs.Formula.atom AutoStructs.Relation.eq
              (((AutoStructs.Term.var 1).sub (AutoStructs.Term.var 0)).and (AutoStructs.Term.var 3))
              (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 115.123300 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 636.773317 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 116.169200 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 45.465359 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 28.181340 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 137.978360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 37.528809 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.877431 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& 1#1).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| 0#1) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 47.618649 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            ((AutoStructs.Term.var 1).and AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 123.314330 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 258.309349 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.706890 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some ((ofBool (x✝ == 0#64) ||| 0#1) ^^^ 1#1) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.177240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 15.096900 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 134.810299 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 29.777440 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.603820 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 17.973060 ms, MSGSTART 
    Unsupported syntax some (ofBool (x✝ == 0#64) ^^^ 1#1) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HXor.hXor [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app
                        (Lean.Expr.const `BitVec [])
                        (Lean.Expr.app
                          (Lean.Expr.app
                            (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                            (Lean.Expr.lit (Lean.Literal.natVal 1)))
                          (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 1)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 1)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHXorOfXor [Lean.Level.zero])
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 1)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
                  (Lean.Expr.app
                    (Lean.Expr.const `BitVec.instXor [])
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 1)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofBool [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.const `BEq.beq [Lean.Level.zero])
                        (Lean.Expr.app
                          (Lean.Expr.const `BitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 64)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.const `instBEqOfDecidableEq [Lean.Level.zero])
                          (Lean.Expr.app
                            (Lean.Expr.const `BitVec [])
                            (Lean.Expr.app
                              (Lean.Expr.app
                                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                                (Lean.Expr.lit (Lean.Literal.natVal 64)))
                              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64))))))
                        (Lean.Expr.app
                          (Lean.Expr.const `instDecidableEqBitVec [])
                          (Lean.Expr.app
                            (Lean.Expr.app
                              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                              (Lean.Expr.lit (Lean.Literal.natVal 64)))
                            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))))
                    (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1449132)))
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `BitVec.ofNat [])
                      (Lean.Expr.app
                        (Lean.Expr.app
                          (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                          (Lean.Expr.lit (Lean.Literal.natVal 64)))
                        (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 64)))))
                    (Lean.Expr.app
                      (Lean.Expr.app
                        (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                        (Lean.Expr.lit (Lean.Literal.natVal 0)))
                      (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0))))))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.const `BitVec.ofNat [])
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                    (Lean.Expr.lit (Lean.Literal.natVal 1)))
                  (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 105.557489 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 435.096089 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 213.767349 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 45.042680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 31.837060 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 137.086619 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 52.501480 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.448150 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& 1#1).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| ofBool (x✝¹ == 0#64)) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 45.657880 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            ((AutoStructs.Term.var 1).and AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 133.003699 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 458.020308 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 110.096870 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 39.583609 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 29.037540 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.719160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 61.247919 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.981070 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& ofBool (x✝¹ != 0#64)).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| ofBool (x✝¹ == 0#64)) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 44.977410 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 141.610560 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 250.227839 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 113.788629 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 44.577010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 28.045480 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.375669 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 37.244180 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.893430 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& 1#1).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| 0#1) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 46.901980 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            ((AutoStructs.Term.var 1).and AutoStructs.Term.one)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 123.852530 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 257.935299 ms, 
TACEND
TACSTART
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 205.433899 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 41.287479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 25.632269 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.660720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 57.036690 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.530640 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(ofBool (x✝ != 0#64) &&& ofBool (x✝¹ != 0#64)).toNat
     b := ↑((ofBool (x✝ == 0#64) ||| 0#1) ^^^ 1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 48.128869 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 234.864379 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 345.907209 ms, 
TACEND
