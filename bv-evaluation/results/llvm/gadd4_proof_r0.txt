⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gadd4_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gadd4_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gadd4_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gadd4_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:7:107: The SAT solver timed out while solving the problem.
Consider increasing the timeout with `set_option sat.timeout <sec>`.
If solving your problem relies inherently on using associativity or commutativity, consider enabling the `bv.ac_nf` option.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:7:107: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 64
    a✝ : ¬x % 299#64 + x / 299#64 % 64#64 * 299#64 = x % 19136#64
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 64
    a✝ : (!x % 299#64 + x / 299#64 % 64#64 * 299#64 == x % 19136#64) = true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 64: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((var0 %ᵤ 0x000000000000012b#64) + (((var0 /ᵤ 0x000000000000012b#64) %ᵤ 0x0000000000000040#64) * 0x000000000000012b#64)) == (var0 %ᵤ 0x0000000000004ac0#64))
[bv] [11.308961] Preparing LRAT reflection term
  [bv] [0.139333] Bitblasting BVLogicalExpr to AIG
  [Meta.Tactic.bv] AIG has 260482 nodes.
  [sat] [0.088835] Converting AIG to CNF
  [sat] [11.080711] Obtaining external proof certificate
    [sat] [0.230422] Serializing SAT problem to DIMACS file
    [sat] [10.849696] Running SAT solver
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:9:122: Bitwuzla proved the goal after 73.000000ms
LeanSAT proved the goal after 8453.000000ms: rewriting 11.398750ms, bitblasting 63.957917ms, SAT solving 4788.204750ms, LRAT processing 1630.759958ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:14:43: The SMT solver timed out while solving the problem.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:14:43: [bv] [0.031668] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬x - x.sdiv 299#64 * 299#64 + (x.sdiv 299#64 - (x.sdiv 299#64).sdiv 64#64 * 64#64) * 299#64 +
              (x.sdiv 19136#64 - (x.sdiv 19136#64).sdiv 9#64 * 9#64) * 19136#64 =
            x - x.sdiv 172224#64 * 172224#64
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        (!x + (~~~(x.sdiv 299#64 * 299#64) + 1#64) +
                  (x.sdiv 299#64 + (~~~((x.sdiv 299#64).sdiv 64#64 * 64#64) + 1#64)) * 299#64 +
                (x.sdiv 19136#64 + (~~~((x.sdiv 19136#64).sdiv 9#64 * 9#64) + 1#64)) * 19136#64 ==
              x + (~~~(x.sdiv 172224#64 * 172224#64) + 1#64)) =
          true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 64: x
[Meta.Tactic.bv] Reflected bv logical expression: !((((var0 + ((~ ((var0 /ₛ 0x000000000000012b#64) * 0x000000000000012b#64)) + 0x0000000000000001#64)) + (((var0 /ₛ 0x000000000000012b#64) + ((~ (((var0 /ₛ 0x000000000000012b#64) /ₛ 0x0000000000000040#64) * 0x0000000000000040#64)) + 0x0000000000000001#64)) * 0x000000000000012b#64)) + (((var0 /ₛ 0x0000000000004ac0#64) + ((~ (((var0 /ₛ 0x0000000000004ac0#64) /ₛ 0x0000000000000009#64) * 0x0000000000000009#64)) + 0x0000000000000001#64)) * 0x0000000000004ac0#64)) == (var0 + ((~ ((var0 /ₛ 0x000000000002a0c0#64) * 0x000000000002a0c0#64)) + 0x0000000000000001#64)))
[bv] [10.863145] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 64))
      (assert (not (= (bvadd (bvadd (bvadd x_0 (bvadd (bvnot (bvmul (bvsdiv x_0 #b0000000000000000000000000000000000000000000000000000000100101011) #b0000000000000000000000000000000000000000000000000000000100101011)) #b0000000000000000000000000000000000000000000000000000000000000001)) (bvmul (bvadd (bvsdiv x_0 #b0000000000000000000000000000000000000000000000000000000100101011) (bvadd (bvnot (bvmul (bvsdiv (bvsdiv x_0 #b0000000000000000000000000000000000000000000000000000000100101011) #b0000000000000000000000000000000000000000000000000000000001000000) #b0000000000000000000000000000000000000000000000000000000001000000)) #b0000000000000000000000000000000000000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000000000100101011)) (bvmul (bvadd (bvsdiv x_0 #b0000000000000000000000000000000000000000000000000100101011000000) (bvadd (bvnot (bvmul (bvsdiv (bvsdiv x_0 #b0000000000000000000000000000000000000000000000000100101011000000) #b0000000000000000000000000000000000000000000000000000000000001001) #b0000000000000000000000000000000000000000000000000000000000001001)) #b0000000000000000000000000000000000000000000000000000000000000001)) #b0000000000000000000000000000000000000000000000000100101011000000)) (bvadd x_0 (bvadd (bvnot (bvmul (bvsdiv x_0 #b0000000000000000000000000000000000000000000000101010000011000000) #b0000000000000000000000000000000000000000000000101010000011000000)) #b0000000000000000000000000000000000000000000000000000000000000001)))))
      (check-sat)
      (exit)
      
  [bv] [10.860949] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:27:110: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:27:110: [bv] [0.053902] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (x % 299#64 + x.sdiv 299#64 % 64#64 * 299#64) ⊑
            (if
                    BitVec.signExtend 128 (x.sdiv 299#64 &&& 63#64) * 299#128 <
                        BitVec.signExtend 128 (BitVec.twoPow 64 63) ∨
                      BitVec.twoPow 128 63 ≤ BitVec.signExtend 128 (x.sdiv 299#64 &&& 63#64) * 299#128 then
                  none
                else
                  if BitVec.twoPow 128 63 <<< 1 ≤ (BitVec.setWidth 128 (x.sdiv 299#64) &&& 63#128) * 299#128 then none
                  else some ((x.sdiv 299#64 &&& 63#64) * 299#64)).bind
              fun y' =>
              if (x % 299#64).msb = y'.msb ∧ ¬(x % 299#64 + y').msb = (x % 299#64).msb then none
              else if x % 299#64 + y' < x % 299#64 ∨ x % 299#64 + y' < y' then none else some (x % 299#64 + y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (x % 299#64 + x.sdiv 299#64 % 64#64 * 299#64) ⊑
            (if
                    (!((!BitVec.signExtend 128 (BitVec.twoPow 64 63) >ᵤ
                              BitVec.signExtend 128 (x.sdiv 299#64 &&& 63#64) * 299#128) &&
                          BitVec.twoPow 128 63 >ᵤ BitVec.signExtend 128 (x.sdiv 299#64 &&& 63#64) * 299#128)) =
                      true then
                  none
                else
                  if
                      (!BitVec.twoPow 128 63 <<< 1 >ᵤ (BitVec.zeroExtend 128 (x.sdiv 299#64) &&& 63#128) * 299#128) =
                        true then
                    none
                  else some ((x.sdiv 299#64 &&& 63#64) * 299#64)).bind
              fun a =>
              if
                  ((x % 299#64).getLsbD 63 == a.getLsbD 63 && !(x % 299#64 + a).getLsbD 63 == (x % 299#64).getLsbD 63) =
                    true then
                none
              else
                if (!((!x % 299#64 >ᵤ x % 299#64 + a) && !a >ᵤ x % 299#64 + a)) = true then none
                else some (x % 299#64 + a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:40:110: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:40:110: [bv] [0.054268] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (x % 299#64 + x / 29#64 % 64#64 * 299#64) ⊑
            (if
                    BitVec.signExtend 128 (x / 29#64 &&& 63#64) * 299#128 <
                        BitVec.signExtend 128 (BitVec.twoPow 64 63) ∨
                      BitVec.twoPow 128 63 ≤ BitVec.signExtend 128 (x / 29#64 &&& 63#64) * 299#128 then
                  none
                else
                  if BitVec.twoPow 128 63 <<< 1 ≤ (BitVec.setWidth 128 (x / 29#64) &&& 63#128) * 299#128 then none
                  else some ((x / 29#64 &&& 63#64) * 299#64)).bind
              fun y' =>
              if (x % 299#64).msb = y'.msb ∧ ¬(x % 299#64 + y').msb = (x % 299#64).msb then none
              else if x % 299#64 + y' < x % 299#64 ∨ x % 299#64 + y' < y' then none else some (x % 299#64 + y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (x % 299#64 + x / 29#64 % 64#64 * 299#64) ⊑
            (if
                    (!((!BitVec.signExtend 128 (BitVec.twoPow 64 63) >ᵤ
                              BitVec.signExtend 128 (x / 29#64 &&& 63#64) * 299#128) &&
                          BitVec.twoPow 128 63 >ᵤ BitVec.signExtend 128 (x / 29#64 &&& 63#64) * 299#128)) =
                      true then
                  none
                else
                  if
                      (!BitVec.twoPow 128 63 <<< 1 >ᵤ (BitVec.zeroExtend 128 (x / 29#64) &&& 63#128) * 299#128) =
                        true then
                    none
                  else some ((x / 29#64 &&& 63#64) * 299#64)).bind
              fun a =>
              if
                  ((x % 299#64).getLsbD 63 == a.getLsbD 63 && !(x % 299#64 + a).getLsbD 63 == (x % 299#64).getLsbD 63) =
                    true then
                none
              else
                if (!((!x % 299#64 >ᵤ x % 299#64 + a) && !a >ᵤ x % 299#64 + a)) = true then none
                else some (x % 299#64 + a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:45:25: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:45:25: [bv] [0.021765] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬some ((x / 10#32) <<< 4 + x % 10#32) ⊑
            (if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 (x / 10#32) * 6#64 then none
                else some (x / 10#32 * 6#32)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬some ((x / 10#32) <<< 4 + x % 10#32) ⊑
            (if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 (x / 10#32) * 6#64) = true then none
                else some (x / 10#32 * 6#32)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:54:34: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:54:34: [bv] [0.025196] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬some (x.sdiv 10#32 <<< 4 + (x - x.sdiv 10#32 * 10#32)) ⊑
            (if
                    BitVec.signExtend 64 (x.sdiv 10#32) * 6#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 (x.sdiv 10#32) * 6#64 then
                  none
                else some (x.sdiv 10#32 * 6#32)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬some (x.sdiv 10#32 <<< 4 + (x + (~~~(x.sdiv 10#32 * 10#32) + 1#32))) ⊑
            (if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 (x.sdiv 10#32) * 6#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 (x.sdiv 10#32) * 6#64)) =
                      true then
                  none
                else some (x.sdiv 10#32 * 6#32)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:56:108: Bitwuzla proved the goal after 779.000000ms
LeanSAT proved the goal after 4027.000000ms: rewriting 0.000000ms, bitblasting 22.394583ms, SAT solving 2447.355041ms, LRAT processing 732.081958ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:61:25: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:61:25: [bv] [0.022566] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬some (x % 10#32 + (x / 10#32) <<< 4) ⊑
            (if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 (x / 10#32) * 6#64 then none
                else some (x / 10#32 * 6#32)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬some (x % 10#32 + (x / 10#32) <<< 4) ⊑
            (if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 (x / 10#32) * 6#64) = true then none
                else some (x / 10#32 * 6#32)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:66:25: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:66:25: [bv] [0.023320] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬some ((x / 10#32) <<< 4 ||| x % 10#32) ⊑
            (if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 (x / 10#32) * 6#64 then none
                else some (x / 10#32 * 6#32)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬some ((x / 10#32) <<< 4 ||| x % 10#32) ⊑
            (if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 (x / 10#32) * 6#64) = true then none
                else some (x / 10#32 * 6#32)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd4_proof.lean:68:135: Bitwuzla proved the goal after 148.000000ms
LeanSAT proved the goal after 872.000000ms: rewriting 10.427667ms, bitblasting 26.397875ms, SAT solving 497.914542ms, LRAT processing 134.391750ms
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gadd4_proof
