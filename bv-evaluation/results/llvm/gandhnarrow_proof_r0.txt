⚠ [871/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [877/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [884/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
Bitwuzla proved the goal after 872.759586ms, solving context: 0.000000ms
LeanSAT proved the goal after 185.190699ms: rewriting 103.567999ms, bitblasting 0.000000ms, SAT solving 70.467690ms, LRAT trimming 0.000000ms, LRAT checking 2.321710ms
Bitwuzla proved the goal after 811.511746ms, solving context: 0.000000ms
LeanSAT proved the goal after 475.312698ms: rewriting 212.216239ms, bitblasting 0.000000ms, SAT solving 258.841168ms, LRAT trimming 0.000000ms, LRAT checking 2.231800ms
Bitwuzla proved the goal after 132.789040ms, solving context: 2.000000ms
LeanSAT proved the goal after 130.131039ms: rewriting 12.704370ms, bitblasting 0.000000ms, SAT solving 107.905489ms, LRAT trimming 0.000000ms, LRAT checking 6.548320ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhnarrow_proof.lean:47:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhnarrow_proof.lean:41:8: error: (kernel) declaration has metavariables 'zext_lshr_thm'
[bv] [0.017318] Normalizing goal
  [Meta.synthInstance] [0.001366] ✅️ Decidable
        ((if 4#16 ≥ ↑16 then none else some (BitVec.zeroExtend 16 x✝ >>> 4#16 &&& BitVec.zeroExtend 16 x✝)) ⊑
          if 4#8 ≥ ↑8 then none else some (BitVec.zeroExtend 16 (x✝ >>> 4#8 &&& x✝)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if 4#16 ≥ ↑16 then none else some (BitVec.zeroExtend 16 x✝ >>> 4#16 &&& BitVec.zeroExtend 16 x✝)) ⊑
            if 4#8 ≥ ↑8 then none else some (BitVec.zeroExtend 16 (x✝ >>> 4#8 &&& x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some (BitVec.zeroExtend 16 x✝ >>> 4 &&& BitVec.zeroExtend 16 x✝) ⊑
            some (BitVec.zeroExtend 16 (x✝ >>> 4 &&& x✝))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhnarrow_proof.lean:57:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhnarrow_proof.lean:51:8: error: (kernel) declaration has metavariables 'zext_ashr_thm'
[bv] [0.014144] Normalizing goal
  [Meta.synthInstance] [0.001415] ✅️ Decidable
        ((if 2#16 ≥ ↑16 then none
          else some ((BitVec.zeroExtend 16 x✝).sshiftRight (2#16).toNat &&& BitVec.zeroExtend 16 x✝)) ⊑
          if 2#8 ≥ ↑8 then none else some (BitVec.zeroExtend 16 (x✝ >>> 2#8 &&& x✝)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if 2#16 ≥ ↑16 then none
            else some ((BitVec.zeroExtend 16 x✝).sshiftRight (2#16).toNat &&& BitVec.zeroExtend 16 x✝)) ⊑
            if 2#8 ≥ ↑8 then none else some (BitVec.zeroExtend 16 (x✝ >>> 2#8 &&& x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some ((BitVec.zeroExtend 16 x✝).sshiftRight 2 &&& BitVec.zeroExtend 16 x✝) ⊑
            some (BitVec.zeroExtend 16 (x✝ >>> 2 &&& x✝))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhnarrow_proof.lean:67:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhnarrow_proof.lean:61:8: error: (kernel) declaration has metavariables 'zext_shl_thm'
[bv] [0.017143] Normalizing goal
  [Meta.synthInstance] [0.001664] ✅️ Decidable
        ((if 3#16 ≥ ↑16 then none else some (BitVec.zeroExtend 16 x✝ <<< 3#16 &&& BitVec.zeroExtend 16 x✝)) ⊑
          if 3#8 ≥ ↑8 then none else some (BitVec.zeroExtend 16 (x✝ <<< 3#8 &&& x✝)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if 3#16 ≥ ↑16 then none else some (BitVec.zeroExtend 16 x✝ <<< 3#16 &&& BitVec.zeroExtend 16 x✝)) ⊑
            if 3#8 ≥ ↑8 then none else some (BitVec.zeroExtend 16 (x✝ <<< 3#8 &&& x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some (BitVec.zeroExtend 16 x✝ <<< 3 &&& BitVec.zeroExtend 16 x✝) ⊑
            some (BitVec.zeroExtend 16 (x✝ <<< 3 &&& x✝))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
