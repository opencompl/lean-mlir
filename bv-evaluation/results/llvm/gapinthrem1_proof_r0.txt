⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthrem1_proof.lean:16:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthrem1_proof.lean:11:8: error: (kernel) declaration has metavariables 'test1_thm'
[bv] [0.010137] Normalizing goal
  [Meta.synthInstance] [0.001315] ✅️ Decidable
        ((if 4096#33 = 0 then none else some (x✝ % 4096#33)) ⊑ some (x✝ &&& 4095#33))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 33
      x✝ : BitVec 33
      a✝ : ¬(if 4096#33 = 0 then none else some (x✝ % 4096#33)) ⊑ some (x✝ &&& 4095#33)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 33
      x✝ : BitVec 33
      a✝ : ¬some (x✝ % 4096#33) ⊑ some (x✝ &&& 4095#33)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthrem1_proof.lean:26:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthrem1_proof.lean:20:8: error: (kernel) declaration has metavariables 'test2_thm'
[bv] [0.013548] Normalizing goal
  [Meta.synthInstance] [0.001737] ✅️ Decidable
        ((if 11#49 ≥ ↑49 then none else if 4096#49 <<< 11#49 = 0 then none else some (x✝ % 4096#49 <<< 11#49)) ⊑
          some (x✝ &&& 8388607#49))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 49
      x✝ : BitVec 49
      a✝ :
        ¬(if 11#49 ≥ ↑49 then none else if 4096#49 <<< 11#49 = 0 then none else some (x✝ % 4096#49 <<< 11#49)) ⊑
            some (x✝ &&& 8388607#49)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 49
      x✝ : BitVec 49
      a✝ : ¬some (x✝ % 8388608#49) ⊑ some (x✝ &&& 8388607#49)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthrem1_proof.lean:37:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthrem1_proof.lean:30:8: error: (kernel) declaration has metavariables 'test3_thm'
[bv] [0.062578] Normalizing goal
  [Meta.synthInstance] [0.001582] ✅️ Decidable
        ((Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 70368744177664#59
            | some { toFin := ⟨0, ⋯⟩ } => some 4096#59)
            fun y' => if y' = 0 then none else some (x✝ % y')) ⊑
          Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 70368744177663#59
            | some { toFin := ⟨0, ⋯⟩ } => some 4095#59)
            fun y' => some (x✝ &&& y'))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 1
      e_1 : LLVM.IntW 59
      x✝¹ : BitVec 1
      x✝ : BitVec 59
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 70368744177664#59
              | some { toFin := ⟨0, ⋯⟩ } => some 4096#59)
              fun y' => if y' = 0 then none else some (x✝ % y')) ⊑
            Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 70368744177663#59
              | some { toFin := ⟨0, ⋯⟩ } => some 4095#59)
              fun y' => some (x✝ &&& y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 1
      e_1 : LLVM.IntW 59
      x✝¹ : BitVec 1
      x✝ : BitVec 59
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 70368744177664#59
              | some { toFin := ⟨0, ⋯⟩ } => some 4096#59)
              fun a => if (a == 0#59) = true then none else some (x✝ % a)) ⊑
            Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 70368744177663#59
              | some { toFin := ⟨0, ⋯⟩ } => some 4095#59)
              fun y' => some (x✝ &&& y')
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
