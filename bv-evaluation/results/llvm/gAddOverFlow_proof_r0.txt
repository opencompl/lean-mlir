⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:11:8: error: (kernel) declaration has metavariables 'oppositesign_thm'
[bv] [0.023445] Normalizing goal
  [Meta.synthInstance] [0.001232] ✅️ Decidable
        (some ((x✝ ||| 32768#16) + (x✝¹ &&& 32767#16)) ⊑
          if
              True ∧
                (x✝ ||| 32768#16).msb = (x✝¹ &&& 32767#16).msb ∧
                  ((x✝ ||| 32768#16) + (x✝¹ &&& 32767#16)).msb ≠ (x✝ ||| 32768#16).msb then
            none
          else some ((x✝ ||| 32768#16) + (x✝¹ &&& 32767#16)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ ||| 32768#16) + (x✝¹ &&& 32767#16)) ⊑
            if
                True ∧
                  (x✝ ||| 32768#16).msb = (x✝¹ &&& 32767#16).msb ∧
                    ((x✝ ||| 32768#16) + (x✝¹ &&& 32767#16)).msb ≠ (x✝ ||| 32768#16).msb then
              none
            else some ((x✝ ||| 32768#16) + (x✝¹ &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ ||| 32768#16) + (x✝¹ &&& 32767#16)) ⊑
            if
                ((x✝ ||| 32768#16).getLsbD 15 == (x✝¹ &&& 32767#16).getLsbD 15 &&
                    !((x✝ ||| 32768#16) + (x✝¹ &&& 32767#16)).getLsbD 15 == (x✝ ||| 32768#16).getLsbD 15) =
                  true then
              none
            else some ((x✝ ||| 32768#16) + (x✝¹ &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:29:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:22:8: error: (kernel) declaration has metavariables 'zero_sign_bit_thm'
[bv] [0.016758] Normalizing goal
  [Meta.synthInstance] [0.001097] ✅️ Decidable
        (some ((x✝ &&& 32767#16) + 512#16) ⊑
          if True ∧ ((x✝ &&& 32767#16) + 512#16 < x✝ &&& 32767#16 ∨ (x✝ &&& 32767#16) + 512#16 < 512#16) then none
          else some ((x✝ &&& 32767#16) + 512#16))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 32767#16) + 512#16) ⊑
            if True ∧ ((x✝ &&& 32767#16) + 512#16 < x✝ &&& 32767#16 ∨ (x✝ &&& 32767#16) + 512#16 < 512#16) then none
            else some ((x✝ &&& 32767#16) + 512#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 32767#16) + 512#16) ⊑
            if
                (!((!x✝ &&& 32767#16 >ᵤ (x✝ &&& 32767#16) + 512#16) && !512#16 >ᵤ (x✝ &&& 32767#16) + 512#16)) =
                  true then
              none
            else some ((x✝ &&& 32767#16) + 512#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:40:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:33:8: error: (kernel) declaration has metavariables 'zero_sign_bit2_thm'
[bv] [0.016922] Normalizing goal
  [Meta.synthInstance] [0.001039] ✅️ Decidable
        (some ((x✝ &&& 32767#16) + (x✝¹ &&& 32767#16)) ⊑
          if
              True ∧
                ((x✝ &&& 32767#16) + (x✝¹ &&& 32767#16) < x✝ &&& 32767#16 ∨
                  (x✝ &&& 32767#16) + (x✝¹ &&& 32767#16) < x✝¹ &&& 32767#16) then
            none
          else some ((x✝ &&& 32767#16) + (x✝¹ &&& 32767#16)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 32767#16) + (x✝¹ &&& 32767#16)) ⊑
            if
                True ∧
                  ((x✝ &&& 32767#16) + (x✝¹ &&& 32767#16) < x✝ &&& 32767#16 ∨
                    (x✝ &&& 32767#16) + (x✝¹ &&& 32767#16) < x✝¹ &&& 32767#16) then
              none
            else some ((x✝ &&& 32767#16) + (x✝¹ &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 32767#16) + (x✝¹ &&& 32767#16)) ⊑
            if
                (!((!x✝ &&& 32767#16 >ᵤ (x✝ &&& 32767#16) + (x✝¹ &&& 32767#16)) &&
                      !x✝¹ &&& 32767#16 >ᵤ (x✝ &&& 32767#16) + (x✝¹ &&& 32767#16))) =
                  true then
              none
            else some ((x✝ &&& 32767#16) + (x✝¹ &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:51:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:44:8: error: (kernel) declaration has metavariables 'ripple_nsw1_thm'
[bv] [0.030133] Normalizing goal
  [Meta.synthInstance] [0.001260] ✅️ Decidable
        (some ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16)) ⊑
          if
              True ∧
                (x✝ &&& 1#16).msb = (x✝¹ &&& 49151#16).msb ∧
                  ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16)).msb ≠ (x✝ &&& 1#16).msb then
            none
          else
            if
                True ∧
                  ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16) < x✝ &&& 1#16 ∨
                    (x✝ &&& 1#16) + (x✝¹ &&& 49151#16) < x✝¹ &&& 49151#16) then
              none
            else some ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16)) ⊑
            if
                True ∧
                  (x✝ &&& 1#16).msb = (x✝¹ &&& 49151#16).msb ∧
                    ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16)).msb ≠ (x✝ &&& 1#16).msb then
              none
            else
              if
                  True ∧
                    ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16) < x✝ &&& 1#16 ∨
                      (x✝ &&& 1#16) + (x✝¹ &&& 49151#16) < x✝¹ &&& 49151#16) then
                none
              else some ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16)) ⊑
            if
                ((x✝ &&& 1#16).getLsbD 15 == (x✝¹ &&& 49151#16).getLsbD 15 &&
                    !((x✝ &&& 1#16) + (x✝¹ &&& 49151#16)).getLsbD 15 == (x✝ &&& 1#16).getLsbD 15) =
                  true then
              none
            else
              if
                  (!((!x✝ &&& 1#16 >ᵤ (x✝ &&& 1#16) + (x✝¹ &&& 49151#16)) &&
                        !x✝¹ &&& 49151#16 >ᵤ (x✝ &&& 1#16) + (x✝¹ &&& 49151#16))) =
                    true then
                none
              else some ((x✝ &&& 1#16) + (x✝¹ &&& 49151#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:62:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:55:8: error: (kernel) declaration has metavariables 'ripple_nsw2_thm'
[bv] [0.030413] Normalizing goal
  [Meta.synthInstance] [0.001236] ✅️ Decidable
        (some ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16)) ⊑
          if
              True ∧
                (x✝ &&& 49151#16).msb = (x✝¹ &&& 1#16).msb ∧
                  ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16)).msb ≠ (x✝ &&& 49151#16).msb then
            none
          else
            if
                True ∧
                  ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16) < x✝ &&& 49151#16 ∨
                    (x✝ &&& 49151#16) + (x✝¹ &&& 1#16) < x✝¹ &&& 1#16) then
              none
            else some ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16)) ⊑
            if
                True ∧
                  (x✝ &&& 49151#16).msb = (x✝¹ &&& 1#16).msb ∧
                    ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16)).msb ≠ (x✝ &&& 49151#16).msb then
              none
            else
              if
                  True ∧
                    ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16) < x✝ &&& 49151#16 ∨
                      (x✝ &&& 49151#16) + (x✝¹ &&& 1#16) < x✝¹ &&& 1#16) then
                none
              else some ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16)) ⊑
            if
                ((x✝ &&& 49151#16).getLsbD 15 == (x✝¹ &&& 1#16).getLsbD 15 &&
                    !((x✝ &&& 49151#16) + (x✝¹ &&& 1#16)).getLsbD 15 == (x✝ &&& 49151#16).getLsbD 15) =
                  true then
              none
            else
              if
                  (!((!x✝ &&& 49151#16 >ᵤ (x✝ &&& 49151#16) + (x✝¹ &&& 1#16)) &&
                        !x✝¹ &&& 1#16 >ᵤ (x✝ &&& 49151#16) + (x✝¹ &&& 1#16))) =
                    true then
                none
              else some ((x✝ &&& 49151#16) + (x✝¹ &&& 1#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:73:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:66:8: error: (kernel) declaration has metavariables 'ripple_nsw3_thm'
[bv] [0.030080] Normalizing goal
  [Meta.synthInstance] [0.001206] ✅️ Decidable
        (some ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16)) ⊑
          if
              True ∧
                (x✝ &&& 43691#16).msb = (x✝¹ &&& 21843#16).msb ∧
                  ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16)).msb ≠ (x✝ &&& 43691#16).msb then
            none
          else
            if
                True ∧
                  ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16) < x✝ &&& 43691#16 ∨
                    (x✝ &&& 43691#16) + (x✝¹ &&& 21843#16) < x✝¹ &&& 21843#16) then
              none
            else some ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16)) ⊑
            if
                True ∧
                  (x✝ &&& 43691#16).msb = (x✝¹ &&& 21843#16).msb ∧
                    ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16)).msb ≠ (x✝ &&& 43691#16).msb then
              none
            else
              if
                  True ∧
                    ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16) < x✝ &&& 43691#16 ∨
                      (x✝ &&& 43691#16) + (x✝¹ &&& 21843#16) < x✝¹ &&& 21843#16) then
                none
              else some ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16)) ⊑
            if
                ((x✝ &&& 43691#16).getLsbD 15 == (x✝¹ &&& 21843#16).getLsbD 15 &&
                    !((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16)).getLsbD 15 == (x✝ &&& 43691#16).getLsbD 15) =
                  true then
              none
            else
              if
                  (!((!x✝ &&& 43691#16 >ᵤ (x✝ &&& 43691#16) + (x✝¹ &&& 21843#16)) &&
                        !x✝¹ &&& 21843#16 >ᵤ (x✝ &&& 43691#16) + (x✝¹ &&& 21843#16))) =
                    true then
                none
              else some ((x✝ &&& 43691#16) + (x✝¹ &&& 21843#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:84:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:77:8: error: (kernel) declaration has metavariables 'ripple_nsw4_thm'
[bv] [0.047854] Normalizing goal
  [Meta.synthInstance] [0.001942] ✅️ Decidable
        (some ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)) ⊑
          if
              True ∧
                (x✝ &&& 21843#16).msb = (x✝¹ &&& 43691#16).msb ∧
                  ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)).msb ≠ (x✝ &&& 21843#16).msb then
            none
          else
            if
                True ∧
                  ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16) < x✝ &&& 21843#16 ∨
                    (x✝ &&& 21843#16) + (x✝¹ &&& 43691#16) < x✝¹ &&& 43691#16) then
              none
            else some ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)))
    [Meta.check] [0.001004] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (some ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)))
          (if
              True ∧
                (x✝ &&& 21843#16).msb = (x✝¹ &&& 43691#16).msb ∧
                  ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)).msb ≠ (x✝ &&& 21843#16).msb then
            none
          else
            if
                True ∧
                  ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16) < x✝ &&& 21843#16 ∨
                    (x✝ &&& 21843#16) + (x✝¹ &&& 43691#16) < x✝¹ &&& 43691#16) then
              none
            else some ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)) ⊑
            if
                True ∧
                  (x✝ &&& 21843#16).msb = (x✝¹ &&& 43691#16).msb ∧
                    ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)).msb ≠ (x✝ &&& 21843#16).msb then
              none
            else
              if
                  True ∧
                    ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16) < x✝ &&& 21843#16 ∨
                      (x✝ &&& 21843#16) + (x✝¹ &&& 43691#16) < x✝¹ &&& 43691#16) then
                none
              else some ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)) ⊑
            if
                ((x✝ &&& 21843#16).getLsbD 15 == (x✝¹ &&& 43691#16).getLsbD 15 &&
                    !((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)).getLsbD 15 == (x✝ &&& 21843#16).getLsbD 15) =
                  true then
              none
            else
              if
                  (!((!x✝ &&& 21843#16 >ᵤ (x✝ &&& 21843#16) + (x✝¹ &&& 43691#16)) &&
                        !x✝¹ &&& 43691#16 >ᵤ (x✝ &&& 21843#16) + (x✝¹ &&& 43691#16))) =
                    true then
                none
              else some ((x✝ &&& 21843#16) + (x✝¹ &&& 43691#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:95:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:88:8: error: (kernel) declaration has metavariables 'ripple_nsw5_thm'
[bv] [0.027924] Normalizing goal
  [Meta.synthInstance] [0.001727] ✅️ Decidable
        (some ((x✝ ||| 43691#16) + (x✝¹ ||| 54613#16)) ⊑
          if
              True ∧
                (x✝ ||| 43691#16).msb = (x✝¹ ||| 54613#16).msb ∧
                  ((x✝ ||| 43691#16) + (x✝¹ ||| 54613#16)).msb ≠ (x✝ ||| 43691#16).msb then
            none
          else some ((x✝ ||| 43691#16) + (x✝¹ ||| 54613#16)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ ||| 43691#16) + (x✝¹ ||| 54613#16)) ⊑
            if
                True ∧
                  (x✝ ||| 43691#16).msb = (x✝¹ ||| 54613#16).msb ∧
                    ((x✝ ||| 43691#16) + (x✝¹ ||| 54613#16)).msb ≠ (x✝ ||| 43691#16).msb then
              none
            else some ((x✝ ||| 43691#16) + (x✝¹ ||| 54613#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ ||| 43691#16) + (x✝¹ ||| 54613#16)) ⊑
            if
                ((x✝ ||| 43691#16).getLsbD 15 == (x✝¹ ||| 54613#16).getLsbD 15 &&
                    !((x✝ ||| 43691#16) + (x✝¹ ||| 54613#16)).getLsbD 15 == (x✝ ||| 43691#16).getLsbD 15) =
                  true then
              none
            else some ((x✝ ||| 43691#16) + (x✝¹ ||| 54613#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:106:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:99:8: error: (kernel) declaration has metavariables 'ripple_nsw6_thm'
[bv] [0.021148] Normalizing goal
  [Meta.synthInstance] [0.001092] ✅️ Decidable
        (some ((x✝ ||| 54613#16) + (x✝¹ ||| 43691#16)) ⊑
          if
              True ∧
                (x✝ ||| 54613#16).msb = (x✝¹ ||| 43691#16).msb ∧
                  ((x✝ ||| 54613#16) + (x✝¹ ||| 43691#16)).msb ≠ (x✝ ||| 54613#16).msb then
            none
          else some ((x✝ ||| 54613#16) + (x✝¹ ||| 43691#16)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ ||| 54613#16) + (x✝¹ ||| 43691#16)) ⊑
            if
                True ∧
                  (x✝ ||| 54613#16).msb = (x✝¹ ||| 43691#16).msb ∧
                    ((x✝ ||| 54613#16) + (x✝¹ ||| 43691#16)).msb ≠ (x✝ ||| 54613#16).msb then
              none
            else some ((x✝ ||| 54613#16) + (x✝¹ ||| 43691#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ ||| 54613#16) + (x✝¹ ||| 43691#16)) ⊑
            if
                ((x✝ ||| 54613#16).getLsbD 15 == (x✝¹ ||| 43691#16).getLsbD 15 &&
                    !((x✝ ||| 54613#16) + (x✝¹ ||| 43691#16)).getLsbD 15 == (x✝ ||| 54613#16).getLsbD 15) =
                  true then
              none
            else some ((x✝ ||| 54613#16) + (x✝¹ ||| 43691#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:117:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:110:8: error: (kernel) declaration has metavariables 'ripple_no_nsw2_thm'
[bv] [0.016432] Normalizing goal
  [Meta.synthInstance] [0.001014] ✅️ Decidable
        (some ((x✝ &&& 1#16) + (x✝¹ &&& 32767#16)) ⊑
          if
              True ∧
                ((x✝ &&& 1#16) + (x✝¹ &&& 32767#16) < x✝ &&& 1#16 ∨
                  (x✝ &&& 1#16) + (x✝¹ &&& 32767#16) < x✝¹ &&& 32767#16) then
            none
          else some ((x✝ &&& 1#16) + (x✝¹ &&& 32767#16)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 1#16) + (x✝¹ &&& 32767#16)) ⊑
            if
                True ∧
                  ((x✝ &&& 1#16) + (x✝¹ &&& 32767#16) < x✝ &&& 1#16 ∨
                    (x✝ &&& 1#16) + (x✝¹ &&& 32767#16) < x✝¹ &&& 32767#16) then
              none
            else some ((x✝ &&& 1#16) + (x✝¹ &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 16
      x✝¹ x✝ : BitVec 16
      a✝ :
        ¬some ((x✝ &&& 1#16) + (x✝¹ &&& 32767#16)) ⊑
            if
                (!((!x✝ &&& 1#16 >ᵤ (x✝ &&& 1#16) + (x✝¹ &&& 32767#16)) &&
                      !x✝¹ &&& 32767#16 >ᵤ (x✝ &&& 1#16) + (x✝¹ &&& 32767#16))) =
                  true then
              none
            else some ((x✝ &&& 1#16) + (x✝¹ &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:128:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:121:8: error: (kernel) declaration has metavariables 'PR38021_thm'
[bv] [0.031211] Normalizing goal
  [Meta.synthInstance] [0.001322] ✅️ Decidable
        ((if 3#8 ≥ ↑8 then none else some (x✝ >>> 3#8 + 193#8)) ⊑
          if 3#8 ≥ ↑8 then none
          else
            if True ∧ (x✝ >>> 3#8).msb = (193#8).msb ∧ (x✝ >>> 3#8 + 193#8).msb ≠ (x✝ >>> 3#8).msb then none
            else
              if True ∧ (x✝ >>> 3#8 + 193#8 < x✝ >>> 3#8 ∨ x✝ >>> 3#8 + 193#8 < 193#8) then none
              else some (x✝ >>> 3#8 + 193#8))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if 3#8 ≥ ↑8 then none else some (x✝ >>> 3#8 + 193#8)) ⊑
            if 3#8 ≥ ↑8 then none
            else
              if True ∧ (x✝ >>> 3#8).msb = (193#8).msb ∧ (x✝ >>> 3#8 + 193#8).msb ≠ (x✝ >>> 3#8).msb then none
              else
                if True ∧ (x✝ >>> 3#8 + 193#8 < x✝ >>> 3#8 ∨ x✝ >>> 3#8 + 193#8 < 193#8) then none
                else some (x✝ >>> 3#8 + 193#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some (x✝ >>> 3 + 193#8) ⊑
            if ((x✝ >>> 3).getLsbD 7 && !(x✝ >>> 3 + 193#8).getLsbD 7 == (x✝ >>> 3).getLsbD 7) = true then none
            else
              if (!((!x✝ >>> 3 >ᵤ x✝ >>> 3 + 193#8) && !193#8 >ᵤ x✝ >>> 3 + 193#8)) = true then none
              else some (x✝ >>> 3 + 193#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
