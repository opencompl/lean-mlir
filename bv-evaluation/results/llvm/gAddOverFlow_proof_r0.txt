⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gAddOverFlow_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:13:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:13:60: [bv] [0.011290] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 ||| 32768#16) + (x &&& 32767#16)) ⊑
            if
                (x_1.msb || (32768#16).msb) = (x.msb && (32767#16).msb) ∧
                  ¬((x_1 ||| 32768#16) + (x &&& 32767#16)).msb = (x_1.msb || (32768#16).msb) then
              none
            else some ((x_1 ||| 32768#16) + (x &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ : ¬some ((x_1 ||| 32768#16) + (x &&& 32767#16)) ⊑ some ((x_1 ||| 32768#16) + (x &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:18:48: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:18:48: [bv] [0.010701] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬some ((x &&& 32767#16) + 512#16) ⊑
            if (x &&& 32767#16) + 512#16 < x &&& 32767#16 ∨ (x &&& 32767#16) + 512#16 < 512#16 then none
            else some ((x &&& 32767#16) + 512#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬some ((x &&& 32767#16) + 512#16) ⊑
            if (!((!x &&& 32767#16 >ᵤ (x &&& 32767#16) + 512#16) && !512#16 >ᵤ (x &&& 32767#16) + 512#16)) = true then
              none
            else some ((x &&& 32767#16) + 512#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:26:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:26:60: [bv] [0.011783] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 32767#16) + (x &&& 32767#16)) ⊑
            if
                (x_1 &&& 32767#16) + (x &&& 32767#16) < x_1 &&& 32767#16 ∨
                  (x_1 &&& 32767#16) + (x &&& 32767#16) < x &&& 32767#16 then
              none
            else some ((x_1 &&& 32767#16) + (x &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 32767#16) + (x &&& 32767#16)) ⊑
            if
                (!((!x_1 &&& 32767#16 >ᵤ (x_1 &&& 32767#16) + (x &&& 32767#16)) &&
                      !x &&& 32767#16 >ᵤ (x_1 &&& 32767#16) + (x &&& 32767#16))) =
                  true then
              none
            else some ((x_1 &&& 32767#16) + (x &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:33:58: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:33:58: [bv] [0.019329] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 1#16) + (x &&& 49151#16)) ⊑
            if (x.msb = true → (49151#16).msb = false) ∧ ((x_1 &&& 1#16) + (x &&& 49151#16)).msb = true then none
            else
              if
                  (x_1 &&& 1#16) + (x &&& 49151#16) < x_1 &&& 1#16 ∨
                    (x_1 &&& 1#16) + (x &&& 49151#16) < x &&& 49151#16 then
                none
              else some ((x_1 &&& 1#16) + (x &&& 49151#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 1#16) + (x &&& 49151#16)) ⊑
            if (!x.getLsbD 15 && ((x_1 &&& 1#16) + (x &&& 49151#16)).getLsbD 15) = true then none
            else
              if
                  (!((!x_1 &&& 1#16 >ᵤ (x_1 &&& 1#16) + (x &&& 49151#16)) &&
                        !x &&& 49151#16 >ᵤ (x_1 &&& 1#16) + (x &&& 49151#16))) =
                    true then
                none
              else some ((x_1 &&& 1#16) + (x &&& 49151#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:43:58: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:43:58: [bv] [0.024415] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 49151#16) + (x &&& 1#16)) ⊑
            if
                (x_1.msb = true → (49151#16).msb = false) ∧
                  ¬((x_1 &&& 49151#16) + (x &&& 1#16)).msb = (x_1.msb && (49151#16).msb) then
              none
            else
              if
                  (x_1 &&& 49151#16) + (x &&& 1#16) < x_1 &&& 49151#16 ∨
                    (x_1 &&& 49151#16) + (x &&& 1#16) < x &&& 1#16 then
                none
              else some ((x_1 &&& 49151#16) + (x &&& 1#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 49151#16) + (x &&& 1#16)) ⊑
            if (!x_1.getLsbD 15 && !((x_1 &&& 49151#16) + (x &&& 1#16)).getLsbD 15 == x_1.getLsbD 15) = true then none
            else
              if
                  (!((!x_1 &&& 49151#16 >ᵤ (x_1 &&& 49151#16) + (x &&& 1#16)) &&
                        !x &&& 1#16 >ᵤ (x_1 &&& 49151#16) + (x &&& 1#16))) =
                    true then
                none
              else some ((x_1 &&& 49151#16) + (x &&& 1#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:56:62: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:56:62: [bv] [0.022634] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 43691#16) + (x &&& 21843#16)) ⊑
            if
                (x_1.msb && (43691#16).msb) = (x.msb && (21843#16).msb) ∧
                  ¬((x_1 &&& 43691#16) + (x &&& 21843#16)).msb = (x_1.msb && (43691#16).msb) then
              none
            else
              if
                  (x_1 &&& 43691#16) + (x &&& 21843#16) < x_1 &&& 43691#16 ∨
                    (x_1 &&& 43691#16) + (x &&& 21843#16) < x &&& 21843#16 then
                none
              else some ((x_1 &&& 43691#16) + (x &&& 21843#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 43691#16) + (x &&& 21843#16)) ⊑
            if (!x_1.getLsbD 15 && !((x_1 &&& 43691#16) + (x &&& 21843#16)).getLsbD 15 == x_1.getLsbD 15) = true then
              none
            else
              if
                  (!((!x_1 &&& 43691#16 >ᵤ (x_1 &&& 43691#16) + (x &&& 21843#16)) &&
                        !x &&& 21843#16 >ᵤ (x_1 &&& 43691#16) + (x &&& 21843#16))) =
                    true then
                none
              else some ((x_1 &&& 43691#16) + (x &&& 21843#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:69:62: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:69:62: [bv] [0.022294] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 21843#16) + (x &&& 43691#16)) ⊑
            if
                (x_1.msb && (21843#16).msb) = (x.msb && (43691#16).msb) ∧
                  ¬((x_1 &&& 21843#16) + (x &&& 43691#16)).msb = (x_1.msb && (21843#16).msb) then
              none
            else
              if
                  (x_1 &&& 21843#16) + (x &&& 43691#16) < x_1 &&& 21843#16 ∨
                    (x_1 &&& 21843#16) + (x &&& 43691#16) < x &&& 43691#16 then
                none
              else some ((x_1 &&& 21843#16) + (x &&& 43691#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 21843#16) + (x &&& 43691#16)) ⊑
            if (!x.getLsbD 15 && ((x_1 &&& 21843#16) + (x &&& 43691#16)).getLsbD 15) = true then none
            else
              if
                  (!((!x_1 &&& 21843#16 >ᵤ (x_1 &&& 21843#16) + (x &&& 43691#16)) &&
                        !x &&& 43691#16 >ᵤ (x_1 &&& 21843#16) + (x &&& 43691#16))) =
                    true then
                none
              else some ((x_1 &&& 21843#16) + (x &&& 43691#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:77:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:77:60: [bv] [0.014059] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 ||| 43691#16) + (x ||| 54613#16)) ⊑
            if
                (x_1.msb || (43691#16).msb) = (x.msb || (54613#16).msb) ∧
                  ¬((x_1 ||| 43691#16) + (x ||| 54613#16)).msb = (x_1.msb || (43691#16).msb) then
              none
            else some ((x_1 ||| 43691#16) + (x ||| 54613#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 ||| 43691#16) + (x ||| 54613#16)) ⊑
            if (!((x_1 ||| 43691#16) + (x ||| 54613#16)).getLsbD 15) = true then none
            else some ((x_1 ||| 43691#16) + (x ||| 54613#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:85:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:85:60: [bv] [0.014227] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 ||| 54613#16) + (x ||| 43691#16)) ⊑
            if
                (x_1.msb || (54613#16).msb) = (x.msb || (43691#16).msb) ∧
                  ¬((x_1 ||| 54613#16) + (x ||| 43691#16)).msb = (x_1.msb || (54613#16).msb) then
              none
            else some ((x_1 ||| 54613#16) + (x ||| 43691#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 ||| 54613#16) + (x ||| 43691#16)) ⊑
            if (!((x_1 ||| 54613#16) + (x ||| 43691#16)).getLsbD 15) = true then none
            else some ((x_1 ||| 54613#16) + (x ||| 43691#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:90:56: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:90:56: [bv] [0.011110] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 1#16) + (x &&& 32767#16)) ⊑
            if
                (x_1 &&& 1#16) + (x &&& 32767#16) < x_1 &&& 1#16 ∨
                  (x_1 &&& 1#16) + (x &&& 32767#16) < x &&& 32767#16 then
              none
            else some ((x_1 &&& 1#16) + (x &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 &&& 1#16) + (x &&& 32767#16)) ⊑
            if
                (!((!x_1 &&& 1#16 >ᵤ (x_1 &&& 1#16) + (x &&& 32767#16)) &&
                      !x &&& 32767#16 >ᵤ (x_1 &&& 1#16) + (x &&& 32767#16))) =
                  true then
              none
            else some ((x_1 &&& 1#16) + (x &&& 32767#16))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:95:108: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gAddOverFlow_proof.lean:95:108: [bv] [0.015716] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (x >>> 3 + 193#8) ⊑
            if (193#8).msb = false ∧ (x >>> 3 + 193#8).msb = true then none
            else if x >>> 3 + 193#8 < x >>> 3 ∨ x >>> 3 + 193#8 < 193#8 then none else some (x >>> 3 + 193#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (x >>> 3 + 193#8) ⊑
            if (!((!x >>> 3 >ᵤ x >>> 3 + 193#8) && !193#8 >ᵤ x >>> 3 + 193#8)) = true then none
            else some (x >>> 3 + 193#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gAddOverFlow_proof
