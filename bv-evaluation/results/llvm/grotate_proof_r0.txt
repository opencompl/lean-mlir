⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.grotate_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/grotate_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/grotate_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/grotate_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/grotate_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/grotate_proof.lean:19:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grotate_proof.lean:19:60: [bv] [0.051346] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 33
      x_1 : BitVec 9
      a✝ :
        ¬((if 33#33 ≤ x &&& 8#33 then none else some (BitVec.setWidth 33 x_1 <<< (x.toNat &&& 8))).bind fun a =>
              (if 33#33 ≤ -x &&& 8#33 then none
                  else some (BitVec.setWidth 33 x_1 >>> ((8589934592 - x.toNat) % 8589934592 &&& 8))).bind
                fun x => some (BitVec.setWidth 9 a ||| BitVec.setWidth 9 x)) ⊑
            (if (BitVec.setWidth 33 x_1 <<< (x.toNat &&& 8)).sshiftRight (x.toNat &&& 8) = BitVec.setWidth 33 x_1 then
                  none
                else
                  if BitVec.setWidth 33 x_1 <<< (x.toNat &&& 8) >>> (x.toNat &&& 8) = BitVec.setWidth 33 x_1 then none
                  else if 33#33 ≤ x &&& 8#33 then none else some (BitVec.setWidth 33 x_1 <<< (x.toNat &&& 8))).bind
              fun a =>
              (if 33#33 ≤ -x &&& 8#33 then none
                  else some (BitVec.setWidth 33 x_1 >>> ((8589934592 - x.toNat) % 8589934592 &&& 8))).bind
                fun x => some (BitVec.setWidth 9 a ||| BitVec.setWidth 9 x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 33
      x_1 : BitVec 9
      a✝ :
        ¬((if (!33#33 >ᵤ x &&& 8#33) = true then none else some (BitVec.zeroExtend 33 x_1 <<< (x.toNat &&& 8))).bind
              fun a =>
              (if (!33#33 >ᵤ ~~~x + 1#33 &&& 8#33) = true then none
                  else some (BitVec.zeroExtend 33 x_1 >>> ((8589934592 - x.toNat) % 8589934592 &&& 8))).bind
                fun a_1 => some (BitVec.zeroExtend 9 a ||| BitVec.zeroExtend 9 a_1)) ⊑
            (if
                    ((BitVec.zeroExtend 33 x_1 <<< (x.toNat &&& 8)).sshiftRight (x.toNat &&& 8) ==
                        BitVec.zeroExtend 33 x_1) =
                      true then
                  none
                else
                  if
                      (BitVec.zeroExtend 33 x_1 <<< (x.toNat &&& 8) >>> (x.toNat &&& 8) == BitVec.zeroExtend 33 x_1) =
                        true then
                    none
                  else
                    if (!33#33 >ᵤ x &&& 8#33) = true then none
                    else some (BitVec.zeroExtend 33 x_1 <<< (x.toNat &&& 8))).bind
              fun a =>
              (if (!33#33 >ᵤ ~~~x + 1#33 &&& 8#33) = true then none
                  else some (BitVec.zeroExtend 33 x_1 >>> ((8589934592 - x.toNat) % 8589934592 &&& 8))).bind
                fun a_1 => some (BitVec.zeroExtend 9 a ||| BitVec.zeroExtend 9 a_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.grotate_proof
