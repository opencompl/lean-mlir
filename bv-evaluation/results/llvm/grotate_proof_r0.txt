⚠ [469/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [879/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [882/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/grotate_proof.lean:22:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/grotate_proof.lean:11:8: error: (kernel) declaration has metavariables 'rotateleft_9_neg_mask_wide_amount_commute_thm'
[bv] [0.070555] Normalizing goal
  [Meta.synthInstance] [0.002107] ✅️ Decidable
        ((if x✝¹ &&& 8#33 ≥ ↑33 then none
          else
            if 0#33 - x✝¹ &&& 8#33 ≥ ↑33 then none
            else
              some
                (BitVec.truncate 9
                  (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) ||| BitVec.zeroExtend 33 x✝ >>> (0#33 - x✝¹ &&& 8#33)))) ⊑
          if
              True ∧
                (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33)).sshiftRight (x✝¹ &&& 8#33).toNat =
                  BitVec.zeroExtend 33 x✝ then
            none
          else
            if True ∧ BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) >>> (x✝¹ &&& 8#33) = BitVec.zeroExtend 33 x✝ then none
            else
              if x✝¹ &&& 8#33 ≥ ↑33 then none
              else
                if 0#33 - x✝¹ &&& 8#33 ≥ ↑33 then none
                else
                  some
                    (BitVec.truncate 9
                      (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) |||
                        BitVec.zeroExtend 33 x✝ >>> (0#33 - x✝¹ &&& 8#33))))
    [Meta.check] [0.001163] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if x✝¹ &&& 8#33 ≥ ↑33 then none
          else
            if 0#33 - x✝¹ &&& 8#33 ≥ ↑33 then none
            else
              some
                (BitVec.truncate 9
                  (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) ||| BitVec.zeroExtend 33 x✝ >>> (0#33 - x✝¹ &&& 8#33))))
          (if
              True ∧
                (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33)).sshiftRight (x✝¹ &&& 8#33).toNat =
                  BitVec.zeroExtend 33 x✝ then
            none
          else
            if True ∧ BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) >>> (x✝¹ &&& 8#33) = BitVec.zeroExtend 33 x✝ then none
            else
              if x✝¹ &&& 8#33 ≥ ↑33 then none
              else
                if 0#33 - x✝¹ &&& 8#33 ≥ ↑33 then none
                else
                  some
                    (BitVec.truncate 9
                      (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) |||
                        BitVec.zeroExtend 33 x✝ >>> (0#33 - x✝¹ &&& 8#33))))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 33
      e_1 : LLVM.IntW 9
      x✝¹ : BitVec 33
      x✝ : BitVec 9
      a✝ :
        ¬(if x✝¹ &&& 8#33 ≥ ↑33 then none
            else
              if 0#33 - x✝¹ &&& 8#33 ≥ ↑33 then none
              else
                some
                  (BitVec.truncate 9
                    (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) |||
                      BitVec.zeroExtend 33 x✝ >>> (0#33 - x✝¹ &&& 8#33)))) ⊑
            if
                True ∧
                  (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33)).sshiftRight (x✝¹ &&& 8#33).toNat =
                    BitVec.zeroExtend 33 x✝ then
              none
            else
              if True ∧ BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) >>> (x✝¹ &&& 8#33) = BitVec.zeroExtend 33 x✝ then
                none
              else
                if x✝¹ &&& 8#33 ≥ ↑33 then none
                else
                  if 0#33 - x✝¹ &&& 8#33 ≥ ↑33 then none
                  else
                    some
                      (BitVec.truncate 9
                        (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) |||
                          BitVec.zeroExtend 33 x✝ >>> (0#33 - x✝¹ &&& 8#33)))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 33
      e_1 : LLVM.IntW 9
      x✝¹ : BitVec 33
      x✝ : BitVec 9
      a✝ :
        ¬(if (!33#33 >ᵤ x✝¹ &&& 8#33) = true then none
            else
              if (!33#33 >ᵤ ~~~x✝¹ + 1#33 &&& 8#33) = true then none
              else
                some
                  (BitVec.zeroExtend 9
                    (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) |||
                      BitVec.zeroExtend 33 x✝ >>> (~~~x✝¹ + 1#33 &&& 8#33)))) ⊑
            if
                ((BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33)).sshiftRight (x✝¹ &&& 8#33).toNat ==
                    BitVec.zeroExtend 33 x✝) =
                  true then
              none
            else
              if (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) >>> (x✝¹ &&& 8#33) == BitVec.zeroExtend 33 x✝) = true then
                none
              else
                if (!33#33 >ᵤ x✝¹ &&& 8#33) = true then none
                else
                  if (!33#33 >ᵤ ~~~x✝¹ + 1#33 &&& 8#33) = true then none
                  else
                    some
                      (BitVec.zeroExtend 9
                        (BitVec.zeroExtend 33 x✝ <<< (x✝¹ &&& 8#33) |||
                          BitVec.zeroExtend 33 x✝ >>> (~~~x✝¹ + 1#33 &&& 8#33)))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
