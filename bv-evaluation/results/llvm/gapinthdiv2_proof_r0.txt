⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gapinthdiv2_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.c --json
warning: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:8:115: exponent 333 exceeds the threshold 256, exponentiation operation was not evaluated, use `set_option exponentiation.threshold <num>` to set a new threshold
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:8:115: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:8:115: [bv] [0.044777] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 333
      a✝ : ¬some (x / 70368744177664#333) ⊑ if 333 % 2 ^ 333 ≤ 46 % 2 ^ 333 then none else some (x >>> (46 % 2 ^ 333))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 333
      a✝ :
        ¬some (x / 70368744177664#333) ⊑
            if 333 % 2 ^ 333 ≤ 46 % 2 ^ 333 then none else some (x >>> (46#333 % 2#333 ^ 333))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
warning: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:13:87: exponent 499 exceeds the threshold 256, exponentiation operation was not evaluated, use `set_option exponentiation.threshold <num>` to set a new threshold
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:13:87: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:13:87: [bv] [0.030886] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 499
      a✝ :
        ¬((if 499 % 2 ^ 499 ≤ 197 % 2 ^ 499 then none else some (4096#499 <<< (197 % 2 ^ 499))).bind fun y' =>
              if y' = 0#499 then none else some (x / y')) ⊑
            if 499 % 2 ^ 499 ≤ 209 % 2 ^ 499 then none else some (x >>> (209 % 2 ^ 499))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 499
      a✝ :
        ¬((if 499 % 2 ^ 499 ≤ 197 % 2 ^ 499 then none else some (4096#499 <<< (197#499 % 2#499 ^ 499))).bind fun a =>
              if (a == 0#499) = true then none else some (x / a)) ⊑
            if 499 % 2 ^ 499 ≤ 209 % 2 ^ 499 then none else some (x >>> (209#499 % 2#499 ^ 499))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:19:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:25:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:27:77: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:27:77: [bv] [0.024125] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 599
      a✝ :
        ¬(sorry.bind fun y' => if y' = 0#599 then none else some (x_1 / y')) ⊑
            sorry.bind fun y' => if 599#599 ≤ y' then none else some (x_1 >>> y'.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 599
      a✝ :
        ¬(sorry.bind fun a => if (a == 0#599) = true then none else some (x_1 / a)) ⊑
            sorry.bind fun a => if (!599#599 >ᵤ a) = true then none else some (x_1 >>> a.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gapinthdiv2_proof
