⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:16:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:11:8: error: (kernel) declaration has metavariables 'test1_thm'
[bv] [0.011425] Normalizing goal
  [Meta.synthInstance] [0.001227] ✅️ Decidable
        ((if 70368744177664#333 = 0 then none else some (x✝ / 70368744177664#333)) ⊑
          if 46#333 ≥ ↑333 then none else some (x✝ >>> 46#333))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 333
      x✝ : BitVec 333
      a✝ :
        ¬(if 70368744177664#333 = 0 then none else some (x✝ / 70368744177664#333)) ⊑
            if 46#333 ≥ ↑333 then none else some (x✝ >>> 46#333)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 333
      x✝ : BitVec 333
      a✝ : ¬some (x✝ / 70368744177664#333) ⊑ some (x✝ >>> 46)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:24:4: warning: exponent 499 exceeds the threshold 256, exponentiation operation was not evaluated, use `set_option exponentiation.threshold <num>` to set a new threshold
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:24:4: error: tactic 'simp' failed, nested error:
maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:24:4: error: tactic 'simp' failed, nested error:
maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:26:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:26:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:20:8: error: (kernel) declaration has metavariables 'test2_thm'
[bv] [0.029442] Normalizing goal
  [Meta.synthInstance] [0.001563] ✅️ Decidable
        ((do
            let x' ← some x✝
            if 197#499 ≥ ↑499 then none
              else do
                let y' ← some (4096#499 <<< 197#499)
                if y' = 0 then none else some (x' / y')) ⊑
          do
          let x' ← some x✝
          if 209#499 ≥ ↑499 then none else some (x' >>> 209#499))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 499
      x✝ : BitVec 499
      a✝ :
        ¬(do
              let x' ← some x✝
              if 197#499 ≥ ↑499 then none
                else do
                  let y' ← some (4096#499 <<< 197#499)
                  if y' = 0 then none else some (x' / y')) ⊑
            do
            let x' ← some x✝
            if 209#499 ≥ ↑499 then none else some (x' >>> 209#499)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 499
      x✝ : BitVec 499
      a✝ :
        ¬(do
              let x' ← some x✝
              let y' ← some 822752278660603021077484591278675252491367932816789931674304512#499
              if (y' == 0#499) = true then none else some (x' / y')) ⊑
            do
            let x' ← some x✝
            some (x' >>> 209)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:37:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv2_proof.lean:30:8: error: (kernel) declaration has metavariables 'test3_thm'
[bv] [0.070698] Normalizing goal
  [Meta.synthInstance] [0.001626] ✅️ Decidable
        ((Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 70368744177664#599
            | some { toFin := ⟨0, ⋯⟩ } => some 4096#599)
            fun y' => if y' = 0 then none else some (x✝ / y')) ⊑
          Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 46#599
            | some { toFin := ⟨0, ⋯⟩ } => some 12#599)
            fun y' => if y' ≥ ↑599 then none else some (x✝ >>> y'))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 1
      e_1 : LLVM.IntW 599
      x✝¹ : BitVec 1
      x✝ : BitVec 599
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 70368744177664#599
              | some { toFin := ⟨0, ⋯⟩ } => some 4096#599)
              fun y' => if y' = 0 then none else some (x✝ / y')) ⊑
            Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 46#599
              | some { toFin := ⟨0, ⋯⟩ } => some 12#599)
              fun y' => if y' ≥ ↑599 then none else some (x✝ >>> y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 1
      e_1 : LLVM.IntW 599
      x✝¹ : BitVec 1
      x✝ : BitVec 599
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 70368744177664#599
              | some { toFin := ⟨0, ⋯⟩ } => some 4096#599)
              fun a => if (a == 0#599) = true then none else some (x✝ / a)) ⊑
            Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 46#599
              | some { toFin := ⟨0, ⋯⟩ } => some 12#599)
              fun a => if (!599#599 >ᵤ a) = true then none else some (x✝ >>> a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
