⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
Bitwuzla proved the goal after 75.089589ms, solving context: 0.000000ms
LeanSAT proved the goal after 99.775740ms: rewriting 15.068230ms, bitblasting 0.000000ms, SAT solving 58.186380ms, LRAT trimming 0.000000ms, LRAT checking 25.237480ms
Bitwuzla proved the goal after 72.475679ms, solving context: 0.000000ms
LeanSAT proved the goal after 89.502111ms: rewriting 17.335060ms, bitblasting 0.000000ms, SAT solving 58.164491ms, LRAT trimming 0.000000ms, LRAT checking 7.305030ms
Bitwuzla proved the goal after 77.640800ms, solving context: 0.000000ms
LeanSAT proved the goal after 93.866880ms: rewriting 12.338320ms, bitblasting 0.000000ms, SAT solving 59.030320ms, LRAT trimming 0.000000ms, LRAT checking 14.060390ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:45:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:38:8: error: (kernel) declaration has metavariables 'test4_thm'
[bv] [0.030399] Normalizing goal
  [Meta.synthInstance] [0.001192] ✅️ Decidable
        (some (BitVec.truncate 9 (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹)) ⊑
          if
              True ∧
                (BitVec.zeroExtend 64 x✝).msb = (BitVec.zeroExtend 64 x✝¹).msb ∧
                  (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹).msb ≠ (BitVec.zeroExtend 64 x✝).msb then
            none
          else
            if
                True ∧
                  (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹ < BitVec.zeroExtend 64 x✝ ∨
                    BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹ < BitVec.zeroExtend 64 x✝¹) then
              none
            else some (BitVec.truncate 9 (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 9
      x✝¹ x✝ : BitVec 9
      a✝ :
        ¬some (BitVec.truncate 9 (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹)) ⊑
            if
                True ∧
                  (BitVec.zeroExtend 64 x✝).msb = (BitVec.zeroExtend 64 x✝¹).msb ∧
                    (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹).msb ≠ (BitVec.zeroExtend 64 x✝).msb then
              none
            else
              if
                  True ∧
                    (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹ < BitVec.zeroExtend 64 x✝ ∨
                      BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹ < BitVec.zeroExtend 64 x✝¹) then
                none
              else some (BitVec.truncate 9 (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 9
      x✝¹ x✝ : BitVec 9
      a✝ :
        ¬some (BitVec.zeroExtend 9 (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹)) ⊑
            if
                ((BitVec.zeroExtend 64 x✝).getLsbD 63 == (BitVec.zeroExtend 64 x✝¹).getLsbD 63 &&
                    !(BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹).getLsbD 63 ==
                        (BitVec.zeroExtend 64 x✝).getLsbD 63) =
                  true then
              none
            else
              if
                  (!((!BitVec.zeroExtend 64 x✝ >ᵤ BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹) &&
                        !BitVec.zeroExtend 64 x✝¹ >ᵤ BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹)) =
                    true then
                none
              else some (BitVec.zeroExtend 9 (BitVec.zeroExtend 64 x✝ + BitVec.zeroExtend 64 x✝¹))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
