⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gshouldhchangehtype_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:7:100: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.ZTvAuSLV:4:95: expected terms of same sort at indices 0 and 1 as argument to '='
info: ././././SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:7:100: [bv] [0.010503] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ : ¬BitVec.setWidth 8 (BitVec.setWidth 64 x_1 + BitVec.setWidth 64 x) = x_1 + x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ : (!BitVec.zeroExtend 8 (BitVec.zeroExtend 64 x_1 + BitVec.zeroExtend 64 x) == x_1 + x) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 8: x_1
[Meta.Tactic.bv] New atom of width 8: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 8 ((zext 64 var0) + (zext 64 var1))) == (var0 + var1))
[bv] [0.063519] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 8))
      (declare-const x_1 (_ BitVec 8))
      (assert (not (= ((_ zero_extend 0) (bvadd ((_ zero_extend 56) x_0) ((_ zero_extend 56) x_1))) (bvadd x_0 x_1))))
      (check-sat)
      (exit)
      
  [bv] [0.061326] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:9:102: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.fyPfGNqe:4:95: expected terms of same sort at indices 0 and 1 as argument to '='
info: ././././SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:9:102: [bv] [0.010343] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ : ¬BitVec.setWidth 16 (BitVec.setWidth 64 x_1 + BitVec.setWidth 64 x) = x_1 + x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ : (!BitVec.zeroExtend 16 (BitVec.zeroExtend 64 x_1 + BitVec.zeroExtend 64 x) == x_1 + x) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 16: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 16 ((zext 64 var0) + (zext 64 var1))) == (var0 + var1))
[bv] [0.062711] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 16))
      (assert (not (= ((_ zero_extend 0) (bvadd ((_ zero_extend 48) x_0) ((_ zero_extend 48) x_1))) (bvadd x_0 x_1))))
      (check-sat)
      (exit)
      
  [bv] [0.060249] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:11:102: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.UmS1c4Vl:4:95: expected terms of same sort at indices 0 and 1 as argument to '='
info: ././././SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:11:102: [bv] [0.010734] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ : ¬BitVec.setWidth 32 (BitVec.setWidth 64 x_1 + BitVec.setWidth 64 x) = x_1 + x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ : (!BitVec.zeroExtend 32 (BitVec.zeroExtend 64 x_1 + BitVec.zeroExtend 64 x) == x_1 + x) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 32 ((zext 64 var0) + (zext 64 var1))) == (var0 + var1))
[bv] [0.064616] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= ((_ zero_extend 0) (bvadd ((_ zero_extend 32) x_0) ((_ zero_extend 32) x_1))) (bvadd x_0 x_1))))
      (check-sat)
      (exit)
      
  [bv] [0.062302] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:23:43: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshouldhchangehtype_proof.lean:23:43: [bv] [0.028787] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 9
      a✝ :
        ¬some (BitVec.setWidth 9 (BitVec.setWidth 64 x_1 + BitVec.setWidth 64 x)) ⊑
            (if
                    (BitVec.setWidth 64 x_1).msb = (BitVec.setWidth 64 x).msb ∧
                      ¬(BitVec.setWidth 64 x_1 + BitVec.setWidth 64 x).msb = (BitVec.setWidth 64 x_1).msb then
                  none
                else
                  if
                      BitVec.setWidth 64 x_1 + BitVec.setWidth 64 x < BitVec.setWidth 64 x_1 ∨
                        BitVec.setWidth 64 x_1 + BitVec.setWidth 64 x < BitVec.setWidth 64 x then
                    none
                  else some (BitVec.setWidth 64 x_1 + BitVec.setWidth 64 x)).bind
              fun x' => some (BitVec.setWidth 9 x')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 9
      a✝ :
        ¬some (BitVec.zeroExtend 9 (BitVec.zeroExtend 64 x_1 + BitVec.zeroExtend 64 x)) ⊑
            (if
                    ((BitVec.zeroExtend 64 x_1).getLsbD 63 == (BitVec.zeroExtend 64 x).getLsbD 63 &&
                        !(BitVec.zeroExtend 64 x_1 + BitVec.zeroExtend 64 x).getLsbD 63 ==
                            (BitVec.zeroExtend 64 x_1).getLsbD 63) =
                      true then
                  none
                else
                  if
                      (!((!BitVec.zeroExtend 64 x_1 >ᵤ BitVec.zeroExtend 64 x_1 + BitVec.zeroExtend 64 x) &&
                            !BitVec.zeroExtend 64 x >ᵤ BitVec.zeroExtend 64 x_1 + BitVec.zeroExtend 64 x)) =
                        true then
                    none
                  else some (BitVec.zeroExtend 64 x_1 + BitVec.zeroExtend 64 x)).bind
              fun a => some (BitVec.zeroExtend 9 a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gshouldhchangehtype_proof
