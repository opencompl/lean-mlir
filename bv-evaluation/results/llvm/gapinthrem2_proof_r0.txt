⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gapinthrem2_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean:7:93: The SAT solver timed out while solving the problem.
Consider increasing the timeout with `set_option sat.timeout <sec>`.
If solving your problem relies inherently on using associativity or commutativity, consider enabling the `bv.ac_nf` option.
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean:7:93: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 333
    a✝ : ¬x % 70368744177664#333 = x &&& 70368744177663#333
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 333
    a✝ : (!x % 70368744177664#333 == x &&& 70368744177663#333) = true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 333: x
[Meta.Tactic.bv] Reflected bv logical expression: !((var0 %ᵤ 0x000000000000000000000000000000000000000000000000000000000000000000000000400000000000#333) == (var0 && 0x0000000000000000000000000000000000000000000000000000000000000000000000003fffffffffff#333))
[bv] [15.077717] Preparing LRAT reflection term
  [bv] [1.322429] Bitblasting BVLogicalExpr to AIG
  [Meta.Tactic.bv] AIG has 2000080 nodes.
  [sat] [0.979968] Converting AIG to CNF
  [sat] [12.775206] Obtaining external proof certificate
    [sat] [1.916713] Serializing SAT problem to DIMACS file
    [sat] [10.856100] Running SAT solver
warning: ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean:12:66: exponent 499 exceeds the threshold 256, exponentiation operation was not evaluated, use `set_option exponentiation.threshold <num>` to set a new threshold
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean:12:66: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean:12:66: [bv] [0.024770] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 499
      a✝ :
        ¬((if 499 % 2 ^ 499 ≤ 111 % 2 ^ 499 then none else some (4096#499 <<< (111 % 2 ^ 499))).bind fun y' =>
              if y' = 0#499 then none else some (x % y')) ⊑
            some (x &&& 10633823966279326983230456482242756607#499)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 499
      a✝ :
        ¬((if 499 % 2 ^ 499 ≤ 111 % 2 ^ 499 then none else some (4096#499 <<< (111#499 % 2#499 ^ 499))).bind fun a =>
              if (a == 0#499) = true then none else some (x % a)) ⊑
            some (x &&& 10633823966279326983230456482242756607#499)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean:18:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean:24:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean:26:40: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthrem2_proof.lean:26:40: [bv] [0.015539] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 599
      a✝ : ¬(sorry.bind fun y' => if y' = 0#599 then none else some (x_1 % y')) ⊑ sorry.bind fun y' => some (x_1 &&& y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 599
      a✝ :
        ¬(sorry.bind fun a => if (a == 0#599) = true then none else some (x_1 % a)) ⊑
            sorry.bind fun y' => some (x_1 &&& y')
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gapinthrem2_proof
