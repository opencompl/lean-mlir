⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gdivhshift_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:11:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:17:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:19:75: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:19:75: [bv] [0.022203] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 32
      a✝ :
        ¬(sorry.bind fun y' => if y' = 0#32 then none else some (x_1 / y')) ⊑
            sorry.bind fun y' => if 32#32 ≤ y' then none else some (x_1 >>> y'.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 32
      a✝ :
        ¬(sorry.bind fun a => if (a == 0#32) = true then none else some (x_1 / a)) ⊑
            sorry.bind fun a => if (!32#32 >ᵤ a) = true then none else some (x_1 >>> a.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:20:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:20:81: 't5_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:46:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:46:20: [bv] [0.028077] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (x <<< 2).sshiftRight 2 = x then none else some (x <<< 2)).bind fun a =>
              if x = 0#32 ∨ a = BitVec.intMin 32 ∧ x = 4294967295#32 then none else some (a.sdiv x)) ⊑
            some 4#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((x <<< 2).sshiftRight 2 == x) = true then none else some (x <<< 2)).bind fun a =>
              if (!(!x == 0#32 && !(a == BitVec.intMin 32 && x == 4294967295#32))) = true then none
              else some (a.sdiv x)) ⊑
            some 4#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:54:118: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:54:118: [bv] [0.035818] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat).sshiftRight x.toNat = x_1 then none
                else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a => if x_1 = 0#32 ∨ a = BitVec.intMin 32 ∧ x_1 = 4294967295#32 then none else some (a.sdiv x_1)) ⊑
            if (1#32 <<< x.toNat).sshiftRight x.toNat = 1#32 then none
            else
              if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if ((x_1 <<< x.toNat).sshiftRight x.toNat == x_1) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a =>
              if (!(!x_1 == 0#32 && !(a == BitVec.intMin 32 && x_1 == 4294967295#32))) = true then none
              else some (a.sdiv x_1)) ⊑
            if ((1#32 <<< x.toNat).sshiftRight x.toNat == 1#32) = true then none
            else
              if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
              else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:58:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:58:20: [bv] [0.017380] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if x <<< 2 >>> 2 = x then none else some (x <<< 2)).bind fun a => if x = 0#32 then none else some (a / x)) ⊑
            some 4#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (x <<< 2 >>> 2 == x) = true then none else some (x <<< 2)).bind fun a =>
              if (x == 0#32) = true then none else some (a / x)) ⊑
            some 4#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:63:116: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:63:116: [bv] [0.024210] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if x_1 <<< x.toNat >>> x.toNat = x_1 then none else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a => if x_1 = 0#32 then none else some (a / x_1)) ⊑
            if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a => if (x_1 == 0#32) = true then none else some (a / x_1)) ⊑
            if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
            else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:76:97: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:76:97: [bv] [0.078934] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if
                    BitVec.signExtend 10 x_2 * BitVec.signExtend 10 x_1 < BitVec.signExtend 10 (BitVec.twoPow 5 4) ∨
                      BitVec.twoPow 10 4 ≤ BitVec.signExtend 10 x_2 * BitVec.signExtend 10 x_1 then
                  none
                else some (x_2 * x_1)).bind
              fun a =>
              (if (x_2 <<< x.toNat).sshiftRight x.toNat = x_2 then none
                  else if 5#5 ≤ x then none else some (x_2 <<< x.toNat)).bind
                fun y' => if y' = 0#5 ∨ a = BitVec.intMin 5 ∧ y' = 31#5 then none else some (a.sdiv y')) ⊑
            (if 1#5 <<< x.toNat >>> x.toNat = 1#5 then none else if 5#5 ≤ x then none else some (1#5 <<< x.toNat)).bind
              fun y' => if y' = 0#5 ∨ x_1 = BitVec.intMin 5 ∧ y' = 31#5 then none else some (x_1.sdiv y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 10 (BitVec.twoPow 5 4) >ᵤ
                              BitVec.signExtend 10 x_2 * BitVec.signExtend 10 x_1) &&
                          BitVec.twoPow 10 4 >ᵤ BitVec.signExtend 10 x_2 * BitVec.signExtend 10 x_1)) =
                      true then
                  none
                else some (x_2 * x_1)).bind
              fun a =>
              (if ((x_2 <<< x.toNat).sshiftRight x.toNat == x_2) = true then none
                  else if (!5#5 >ᵤ x) = true then none else some (x_2 <<< x.toNat)).bind
                fun a_1 =>
                if (!(!a_1 == 0#5 && !(a == BitVec.intMin 5 && a_1 == 31#5))) = true then none else some (a.sdiv a_1)) ⊑
            (if (1#5 <<< x.toNat >>> x.toNat == 1#5) = true then none
                else if (!5#5 >ᵤ x) = true then none else some (1#5 <<< x.toNat)).bind
              fun a =>
              if (!(!a == 0#5 && !(x_1 == BitVec.intMin 5 && a == 31#5))) = true then none else some (x_1.sdiv a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:89:97: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:89:97: [bv] [0.081844] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if
                    BitVec.signExtend 10 x_2 * BitVec.signExtend 10 x_1 < BitVec.signExtend 10 (BitVec.twoPow 5 4) ∨
                      BitVec.twoPow 10 4 ≤ BitVec.signExtend 10 x_2 * BitVec.signExtend 10 x_1 then
                  none
                else some (x_2 * x_1)).bind
              fun a =>
              (if (x_1 <<< x.toNat).sshiftRight x.toNat = x_1 then none
                  else if 5#5 ≤ x then none else some (x_1 <<< x.toNat)).bind
                fun y' => if y' = 0#5 ∨ a = BitVec.intMin 5 ∧ y' = 31#5 then none else some (a.sdiv y')) ⊑
            (if 1#5 <<< x.toNat >>> x.toNat = 1#5 then none else if 5#5 ≤ x then none else some (1#5 <<< x.toNat)).bind
              fun y' => if y' = 0#5 ∨ x_2 = BitVec.intMin 5 ∧ y' = 31#5 then none else some (x_2.sdiv y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 10 (BitVec.twoPow 5 4) >ᵤ
                              BitVec.signExtend 10 x_2 * BitVec.signExtend 10 x_1) &&
                          BitVec.twoPow 10 4 >ᵤ BitVec.signExtend 10 x_2 * BitVec.signExtend 10 x_1)) =
                      true then
                  none
                else some (x_2 * x_1)).bind
              fun a =>
              (if ((x_1 <<< x.toNat).sshiftRight x.toNat == x_1) = true then none
                  else if (!5#5 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
                fun a_1 =>
                if (!(!a_1 == 0#5 && !(a == BitVec.intMin 5 && a_1 == 31#5))) = true then none else some (a.sdiv a_1)) ⊑
            (if (1#5 <<< x.toNat >>> x.toNat == 1#5) = true then none
                else if (!5#5 >ᵤ x) = true then none else some (1#5 <<< x.toNat)).bind
              fun a =>
              if (!(!a == 0#5 && !(x_2 == BitVec.intMin 5 && a == 31#5))) = true then none else some (x_2.sdiv a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:95:59: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:95:59: [bv] [0.043237] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if BitVec.twoPow 10 4 <<< 1 ≤ BitVec.setWidth 10 x_2 * BitVec.setWidth 10 x_1 then none
                else some (x_2 * x_1)).bind
              fun a =>
              (if x_2 <<< x.toNat >>> x.toNat = x_2 then none
                  else if 5#5 ≤ x then none else some (x_2 <<< x.toNat)).bind
                fun y' => if y' = 0#5 then none else some (a / y')) ⊑
            if 5#5 ≤ x then none else some (x_1 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if (!BitVec.twoPow 10 4 <<< 1 >ᵤ BitVec.zeroExtend 10 x_2 * BitVec.zeroExtend 10 x_1) = true then none
                else some (x_2 * x_1)).bind
              fun a =>
              (if (x_2 <<< x.toNat >>> x.toNat == x_2) = true then none
                  else if (!5#5 >ᵤ x) = true then none else some (x_2 <<< x.toNat)).bind
                fun a_1 => if (a_1 == 0#5) = true then none else some (a / a_1)) ⊑
            if (!5#5 >ᵤ x) = true then none else some (x_1 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:101:59: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:101:59: [bv] [0.042302] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if BitVec.twoPow 10 4 <<< 1 ≤ BitVec.setWidth 10 x_2 * BitVec.setWidth 10 x_1 then none
                else some (x_2 * x_1)).bind
              fun a =>
              (if x_1 <<< x.toNat >>> x.toNat = x_1 then none
                  else if 5#5 ≤ x then none else some (x_1 <<< x.toNat)).bind
                fun y' => if y' = 0#5 then none else some (a / y')) ⊑
            if 5#5 ≤ x then none else some (x_2 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if (!BitVec.twoPow 10 4 <<< 1 >ᵤ BitVec.zeroExtend 10 x_2 * BitVec.zeroExtend 10 x_1) = true then none
                else some (x_2 * x_1)).bind
              fun a =>
              (if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                  else if (!5#5 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
                fun a_1 => if (a_1 == 0#5) = true then none else some (a / a_1)) ⊑
            if (!5#5 >ᵤ x) = true then none else some (x_2 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:109:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:109:60: [bv] [0.052664] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 5#5 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if BitVec.twoPow 10 4 <<< 1 ≤ BitVec.setWidth 10 x_2 * BitVec.setWidth 10 x then none
                  else some (x_2 * x)).bind
                fun y' => if y' = 0#5 then none else some (a / y')) ⊑
            (if 1#5 <<< x_1.toNat >>> x_1.toNat = 1#5 then none
                else if 5#5 ≤ x_1 then none else some (1#5 <<< x_1.toNat)).bind
              fun a => if x = 0#5 then none else some (a / x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!5#5 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (!BitVec.twoPow 10 4 <<< 1 >ᵤ BitVec.zeroExtend 10 x_2 * BitVec.zeroExtend 10 x) = true then none
                  else some (x_2 * x)).bind
                fun a_1 => if (a_1 == 0#5) = true then none else some (a / a_1)) ⊑
            (if (1#5 <<< x_1.toNat >>> x_1.toNat == 1#5) = true then none
                else if (!5#5 >ᵤ x_1) = true then none else some (1#5 <<< x_1.toNat)).bind
              fun a => if (x == 0#5) = true then none else some (a / x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:117:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:117:60: [bv] [0.052720] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 5#5 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if BitVec.twoPow 10 4 <<< 1 ≤ BitVec.setWidth 10 x * BitVec.setWidth 10 x_2 then none
                  else some (x * x_2)).bind
                fun y' => if y' = 0#5 then none else some (a / y')) ⊑
            (if 1#5 <<< x_1.toNat >>> x_1.toNat = 1#5 then none
                else if 5#5 ≤ x_1 then none else some (1#5 <<< x_1.toNat)).bind
              fun a => if x = 0#5 then none else some (a / x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!5#5 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (!BitVec.twoPow 10 4 <<< 1 >ᵤ BitVec.zeroExtend 10 x * BitVec.zeroExtend 10 x_2) = true then none
                  else some (x * x_2)).bind
                fun a_1 => if (a_1 == 0#5) = true then none else some (a / a_1)) ⊑
            (if (1#5 <<< x_1.toNat >>> x_1.toNat == 1#5) = true then none
                else if (!5#5 >ᵤ x_1) = true then none else some (1#5 <<< x_1.toNat)).bind
              fun a => if (x == 0#5) = true then none else some (a / x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:125:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:125:60: [bv] [0.052651] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 5#5 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if BitVec.twoPow 10 4 <<< 1 ≤ BitVec.setWidth 10 x_2 * BitVec.setWidth 10 x then none
                  else some (x_2 * x)).bind
                fun y' => if y' = 0#5 then none else some (a / y')) ⊑
            (if 1#5 <<< x_1.toNat >>> x_1.toNat = 1#5 then none
                else if 5#5 ≤ x_1 then none else some (1#5 <<< x_1.toNat)).bind
              fun a => if x = 0#5 then none else some (a / x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 5
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!5#5 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (!BitVec.twoPow 10 4 <<< 1 >ᵤ BitVec.zeroExtend 10 x_2 * BitVec.zeroExtend 10 x) = true then none
                  else some (x_2 * x)).bind
                fun a_1 => if (a_1 == 0#5) = true then none else some (a / a_1)) ⊑
            (if (1#5 <<< x_1.toNat >>> x_1.toNat == 1#5) = true then none
                else if (!5#5 >ᵤ x_1) = true then none else some (1#5 <<< x_1.toNat)).bind
              fun a => if (x == 0#5) = true then none else some (a / x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:131:59: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:131:59: [bv] [0.034966] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if BitVec.twoPow 16 7 <<< 1 ≤ BitVec.setWidth 16 x_2 * BitVec.setWidth 16 x_1 then none
                else some (x_2 * x_1)).bind
              fun a =>
              (if 8#8 ≤ x then none else some (a >>> x.toNat)).bind fun a =>
                if x_2 = 0#8 then none else some (a / x_2)) ⊑
            if 8#8 ≤ x then none else some (x_1 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!BitVec.twoPow 16 7 <<< 1 >ᵤ BitVec.zeroExtend 16 x_2 * BitVec.zeroExtend 16 x_1) = true then none
                else some (x_2 * x_1)).bind
              fun a =>
              (if (!8#8 >ᵤ x) = true then none else some (a >>> x.toNat)).bind fun a =>
                if (x_2 == 0#8) = true then none else some (a / x_2)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (x_1 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:141:83: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:141:83: [bv] [0.065562] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (x_2 <<< x_1.toNat).sshiftRight x_1.toNat = x_2 then none
                else if 8#8 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x <<< x_1.toNat).sshiftRight x_1.toNat = x then none
                  else
                    if x <<< x_1.toNat >>> x_1.toNat = x then none
                    else if 8#8 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' => if y' = 0#8 ∨ a = BitVec.intMin 8 ∧ y' = 255#8 then none else some (a.sdiv y')) ⊑
            if x = 0#8 ∨ x_2 = BitVec.intMin 8 ∧ x = 255#8 then none else some (x_2.sdiv x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if ((x_2 <<< x_1.toNat).sshiftRight x_1.toNat == x_2) = true then none
                else if (!8#8 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if ((x <<< x_1.toNat).sshiftRight x_1.toNat == x) = true then none
                  else
                    if (x <<< x_1.toNat >>> x_1.toNat == x) = true then none
                    else if (!8#8 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 =>
                if (!(!a_1 == 0#8 && !(a == BitVec.intMin 8 && a_1 == 255#8))) = true then none
                else some (a.sdiv a_1)) ⊑
            if (!(!x == 0#8 && !(x_2 == BitVec.intMin 8 && x == 255#8))) = true then none else some (x_2.sdiv x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:152:51: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:152:51: [bv] [0.043792] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (x_2 <<< x_1.toNat).sshiftRight x_1.toNat = x_2 then none
                else
                  if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                  else if 8#8 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x <<< x_1.toNat).sshiftRight x_1.toNat = x then none
                  else if 8#8 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' => if y' = 0#8 then none else some (a / y')) ⊑
            if x = 0#8 then none else some (x_2 / x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if ((x_2 <<< x_1.toNat).sshiftRight x_1.toNat == x_2) = true then none
                else
                  if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                  else if (!8#8 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if ((x <<< x_1.toNat).sshiftRight x_1.toNat == x) = true then none
                  else if (!8#8 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 => if (a_1 == 0#8) = true then none else some (a / a_1)) ⊑
            if (x == 0#8) = true then none else some (x_2 / x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:158:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:158:20: [bv] [0.050999] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (x <<< 2).sshiftRight 2 = x then none else some (x <<< 2)).bind fun a =>
              (if (x <<< 1).sshiftRight 1 = x then none else some (x <<< 1)).bind fun y' =>
                if y' = 0#32 ∨ a = BitVec.intMin 32 ∧ y' = 4294967295#32 then none else some (a.sdiv y')) ⊑
            some 2#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((x <<< 2).sshiftRight 2 == x) = true then none else some (x <<< 2)).bind fun a =>
              (if ((x <<< 1).sshiftRight 1 == x) = true then none else some (x <<< 1)).bind fun a_1 =>
                if (!(!a_1 == 0#32 && !(a == BitVec.intMin 32 && a_1 == 4294967295#32))) = true then none
                else some (a.sdiv a_1)) ⊑
            some 2#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:163:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:163:20: [bv] [0.036217] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if x <<< 2 >>> 2 = x then none else some (x <<< 2)).bind fun a =>
              (if x <<< 1 >>> 1 = x then none else some (x <<< 1)).bind fun y' =>
                if y' = 0#32 then none else some (a / y')) ⊑
            some 2#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (x <<< 2 >>> 2 == x) = true then none else some (x <<< 2)).bind fun a =>
              (if (x <<< 1 >>> 1 == x) = true then none else some (x <<< 1)).bind fun a_1 =>
                if (a_1 == 0#32) = true then none else some (a / a_1)) ⊑
            some 2#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:177:70: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:177:70: [bv] [0.073843] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat).sshiftRight x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x_2 <<< x.toNat).sshiftRight x.toNat = x_2 then none
                  else
                    if x_2 <<< x.toNat >>> x.toNat = x_2 then none
                    else if 32#32 ≤ x then none else some (x_2 <<< x.toNat)).bind
                fun y' => if y' = 0#32 ∨ a = BitVec.intMin 32 ∧ y' = 4294967295#32 then none else some (a.sdiv y')) ⊑
            (if (1#32 <<< x_1.toNat).sshiftRight x_1.toNat = 1#32 then none
                else
                  if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                  else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if ((x_2 <<< x_1.toNat).sshiftRight x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if ((x_2 <<< x.toNat).sshiftRight x.toNat == x_2) = true then none
                  else
                    if (x_2 <<< x.toNat >>> x.toNat == x_2) = true then none
                    else if (!32#32 >ᵤ x) = true then none else some (x_2 <<< x.toNat)).bind
                fun a_1 =>
                if (!(!a_1 == 0#32 && !(a == BitVec.intMin 32 && a_1 == 4294967295#32))) = true then none
                else some (a.sdiv a_1)) ⊑
            (if ((1#32 <<< x_1.toNat).sshiftRight x_1.toNat == 1#32) = true then none
                else
                  if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:192:70: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:192:70: [bv] [0.073197] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat).sshiftRight x_1.toNat = x_2 then none
                else
                  if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                  else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x_2 <<< x.toNat).sshiftRight x.toNat = x_2 then none
                  else if 32#32 ≤ x then none else some (x_2 <<< x.toNat)).bind
                fun y' => if y' = 0#32 ∨ a = BitVec.intMin 32 ∧ y' = 4294967295#32 then none else some (a.sdiv y')) ⊑
            (if (1#32 <<< x_1.toNat).sshiftRight x_1.toNat = 1#32 then none
                else
                  if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                  else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if ((x_2 <<< x_1.toNat).sshiftRight x_1.toNat == x_2) = true then none
                else
                  if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                  else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if ((x_2 <<< x.toNat).sshiftRight x.toNat == x_2) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (x_2 <<< x.toNat)).bind
                fun a_1 =>
                if (!(!a_1 == 0#32 && !(a == BitVec.intMin 32 && a_1 == 4294967295#32))) = true then none
                else some (a.sdiv a_1)) ⊑
            (if ((1#32 <<< x_1.toNat).sshiftRight x_1.toNat == 1#32) = true then none
                else
                  if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:203:70: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:203:70: [bv] [0.066740] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat).sshiftRight x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x_2 <<< x.toNat).sshiftRight x.toNat = x_2 then none
                  else if 32#32 ≤ x then none else some (x_2 <<< x.toNat)).bind
                fun y' => if y' = 0#32 ∨ a = BitVec.intMin 32 ∧ y' = 4294967295#32 then none else some (a.sdiv y')) ⊑
            (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if ((x_2 <<< x_1.toNat).sshiftRight x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if ((x_2 <<< x.toNat).sshiftRight x.toNat == x_2) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (x_2 <<< x.toNat)).bind
                fun a_1 =>
                if (!(!a_1 == 0#32 && !(a == BitVec.intMin 32 && a_1 == 4294967295#32))) = true then none
                else some (a.sdiv a_1)) ⊑
            (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:212:70: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:212:70: [bv] [0.049842] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if x_2 <<< x.toNat >>> x.toNat = x_2 then none
                  else if 32#32 ≤ x then none else some (x_2 <<< x.toNat)).bind
                fun y' => if y' = 0#32 then none else some (a / y')) ⊑
            (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x_2 <<< x.toNat >>> x.toNat == x_2) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (x_2 <<< x.toNat)).bind
                fun a_1 => if (a_1 == 0#32) = true then none else some (a / a_1)) ⊑
            (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:226:70: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:226:70: [bv] [0.056320] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat).sshiftRight x_1.toNat = x_2 then none
                else
                  if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                  else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if x_2 <<< x.toNat >>> x.toNat = x_2 then none
                  else if 32#32 ≤ x then none else some (x_2 <<< x.toNat)).bind
                fun y' => if y' = 0#32 then none else some (a / y')) ⊑
            (if (1#32 <<< x_1.toNat).sshiftRight x_1.toNat = 1#32 then none
                else
                  if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                  else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if ((x_2 <<< x_1.toNat).sshiftRight x_1.toNat == x_2) = true then none
                else
                  if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                  else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x_2 <<< x.toNat >>> x.toNat == x_2) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (x_2 <<< x.toNat)).bind
                fun a_1 => if (a_1 == 0#32) = true then none else some (a / a_1)) ⊑
            (if ((1#32 <<< x_1.toNat).sshiftRight x_1.toNat == 1#32) = true then none
                else
                  if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:237:70: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gdivhshift_proof.lean:237:70: [bv] [0.053072] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x_2 <<< x.toNat).sshiftRight x.toNat = x_2 then none
                  else
                    if x_2 <<< x.toNat >>> x.toNat = x_2 then none
                    else if 32#32 ≤ x then none else some (x_2 <<< x.toNat)).bind
                fun y' => if y' = 0#32 then none else some (a / y')) ⊑
            (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if ((x_2 <<< x.toNat).sshiftRight x.toNat == x_2) = true then none
                  else
                    if (x_2 <<< x.toNat >>> x.toNat == x_2) = true then none
                    else if (!32#32 >ᵤ x) = true then none else some (x_2 <<< x.toNat)).bind
                fun a_1 => if (a_1 == 0#32) = true then none else some (a / a_1)) ⊑
            (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gdivhshift_proof
