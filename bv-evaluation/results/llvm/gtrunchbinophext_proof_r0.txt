⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gtrunchbinophext_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:8:82: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.YLmKRuzk:4:105: expected terms of same sort at indices 0 and 1 as argument to 'bvand'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:8:82: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ : ¬BitVec.setWidth 16 (BitVec.signExtend 32 x_1) &&& BitVec.setWidth 16 x = x_1 &&& BitVec.setWidth 16 x
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ :
      (!BitVec.zeroExtend 16 (BitVec.signExtend 32 x_1) &&& BitVec.zeroExtend 16 x == x_1 &&& BitVec.zeroExtend 16 x) =
        true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((zext 16 (sext 32 var0)) && (zext 16 var1)) == (var0 && (zext 16 var1)))
[bv] [0.064698] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= (bvand ((_ zero_extend 0) ((_ sign_extend 16) x_0)) ((_ zero_extend 0) x_1)) (bvand x_0 ((_ zero_extend 0) x_1)))))
      (check-sat)
      (exit)
      
  [bv] [0.062462] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:11:82: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.iqfXwLGg:4:103: expected terms of same sort at indices 0 and 1 as argument to 'bvor'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:11:82: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ : ¬BitVec.setWidth 16 (BitVec.signExtend 32 x_1) ||| BitVec.setWidth 16 x = x_1 ||| BitVec.setWidth 16 x
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ :
      (!BitVec.zeroExtend 16 (BitVec.signExtend 32 x_1) ||| BitVec.zeroExtend 16 x == x_1 ||| BitVec.zeroExtend 16 x) =
        true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((zext 16 (sext 32 var0)) || (zext 16 var1)) == (var0 || (zext 16 var1)))
[bv] [0.060373] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= (bvor ((_ zero_extend 0) ((_ sign_extend 16) x_0)) ((_ zero_extend 0) x_1)) (bvor x_0 ((_ zero_extend 0) x_1)))))
      (check-sat)
      (exit)
      
  [bv] [0.058057] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:14:82: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.bwGgrqSe:4:105: expected terms of same sort at indices 0 and 1 as argument to 'bvxor'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:14:82: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ : ¬BitVec.setWidth 16 (BitVec.signExtend 32 x_1) ^^^ BitVec.setWidth 16 x = x_1 ^^^ BitVec.setWidth 16 x
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ :
      (!BitVec.zeroExtend 16 (BitVec.signExtend 32 x_1) ^^^ BitVec.zeroExtend 16 x == x_1 ^^^ BitVec.zeroExtend 16 x) =
        true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((zext 16 (sext 32 var0)) ^ (zext 16 var1)) == (var0 ^ (zext 16 var1)))
[bv] [0.063763] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= (bvxor ((_ zero_extend 0) ((_ sign_extend 16) x_0)) ((_ zero_extend 0) x_1)) (bvxor x_0 ((_ zero_extend 0) x_1)))))
      (check-sat)
      (exit)
      
  [bv] [0.061419] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:17:66: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.TcmduWw3:4:85: expected terms of same sort at indices 0 and 1 as argument to 'bvadd'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:17:66: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ : ¬BitVec.setWidth 16 (BitVec.signExtend 32 x_1 + x) = x_1 + BitVec.setWidth 16 x
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ : (!BitVec.zeroExtend 16 (BitVec.signExtend 32 x_1 + x) == x_1 + BitVec.zeroExtend 16 x) = true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 16 ((sext 32 var0) + var1)) == (var0 + (zext 16 var1)))
[bv] [0.064148] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= ((_ zero_extend 0) (bvadd ((_ sign_extend 16) x_0) x_1)) (bvadd x_0 ((_ zero_extend 0) x_1)))))
      (check-sat)
      (exit)
      
  [bv] [0.061575] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:19:126: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.mSvNYxhJ:4:85: expected terms of same sort at indices 0 and 1 as argument to 'bvadd'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:19:126: [bv] [0.011148] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      x_1 : BitVec 16
      a✝ : ¬BitVec.setWidth 16 (BitVec.setWidth 32 x_1 + x) = x_1 + BitVec.setWidth 16 x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      x_1 : BitVec 16
      a✝ : (!BitVec.zeroExtend 16 (BitVec.zeroExtend 32 x_1 + x) == x_1 + BitVec.zeroExtend 16 x) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 16 ((zext 32 var0) + var1)) == (var0 + (zext 16 var1)))
[bv] [0.061302] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= ((_ zero_extend 0) (bvadd ((_ zero_extend 16) x_0) x_1)) (bvadd x_0 ((_ zero_extend 0) x_1)))))
      (check-sat)
      (exit)
      
  [bv] [0.058719] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:22:66: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.VElfQ2mR:4:175: expected terms of same sort at indices 0 and 1 as argument to 'bvadd'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:22:66: [bv] [0.017648] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      x_1 : BitVec 16
      a✝ : ¬BitVec.setWidth 16 (BitVec.signExtend 32 x_1 - x) = x_1 - BitVec.setWidth 16 x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      x_1 : BitVec 16
      a✝ :
        (!BitVec.zeroExtend 16 (BitVec.signExtend 32 x_1 + (~~~x + 1#32)) == x_1 + (~~~BitVec.zeroExtend 16 x + 1#16)) =
          true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 16 ((sext 32 var0) + ((~ var1) + 0x00000001#32))) == (var0 + ((~ (zext 16 var1)) + 0x0001#16)))
[bv] [0.064847] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= ((_ zero_extend 0) (bvadd ((_ sign_extend 16) x_0) (bvadd (bvnot x_1) #b00000000000000000000000000000001))) (bvadd x_0 (bvadd (bvnot ((_ zero_extend 0) x_1)) #b0000000000000001)))))
      (check-sat)
      (exit)
      
  [bv] [0.062254] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:24:126: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.eT9y7Xdf:4:175: expected terms of same sort at indices 0 and 1 as argument to 'bvadd'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:24:126: [bv] [0.018565] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      x_1 : BitVec 16
      a✝ : ¬BitVec.setWidth 16 (BitVec.setWidth 32 x_1 - x) = x_1 - BitVec.setWidth 16 x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      x_1 : BitVec 16
      a✝ :
        (!BitVec.zeroExtend 16 (BitVec.zeroExtend 32 x_1 + (~~~x + 1#32)) == x_1 + (~~~BitVec.zeroExtend 16 x + 1#16)) =
          true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 16 ((zext 32 var0) + ((~ var1) + 0x00000001#32))) == (var0 + ((~ (zext 16 var1)) + 0x0001#16)))
[bv] [0.060748] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= ((_ zero_extend 0) (bvadd ((_ zero_extend 16) x_0) (bvadd (bvnot x_1) #b00000000000000000000000000000001))) (bvadd x_0 (bvadd (bvnot ((_ zero_extend 0) x_1)) #b0000000000000001)))))
      (check-sat)
      (exit)
      
  [bv] [0.058155] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:27:66: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.8R2j8cSx:4:85: expected terms of same sort at indices 0 and 1 as argument to 'bvmul'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:27:66: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ : ¬BitVec.setWidth 16 (BitVec.signExtend 32 x_1 * x) = x_1 * BitVec.setWidth 16 x
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ : (!BitVec.zeroExtend 16 (BitVec.signExtend 32 x_1 * x) == x_1 * BitVec.zeroExtend 16 x) = true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 16 ((sext 32 var0) * var1)) == (var0 * (zext 16 var1)))
[bv] [0.064498] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= ((_ zero_extend 0) (bvmul ((_ sign_extend 16) x_0) x_1)) (bvmul x_0 ((_ zero_extend 0) x_1)))))
      (check-sat)
      (exit)
      
  [bv] [0.061900] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:29:126: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.vmIv3S8O:4:85: expected terms of same sort at indices 0 and 1 as argument to 'bvmul'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:29:126: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ : ¬BitVec.setWidth 16 (BitVec.setWidth 32 x_1 * x) = x_1 * BitVec.setWidth 16 x
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 32
    x_1 : BitVec 16
    a✝ : (!BitVec.zeroExtend 16 (BitVec.zeroExtend 32 x_1 * x) == x_1 * BitVec.zeroExtend 16 x) = true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 16: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 16 ((zext 32 var0) * var1)) == (var0 * (zext 16 var1)))
[bv] [0.064252] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 16))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= ((_ zero_extend 0) (bvmul ((_ zero_extend 16) x_0) x_1)) (bvmul x_0 ((_ zero_extend 0) x_1)))))
      (check-sat)
      (exit)
      
  [bv] [0.061923] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:37:49: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:37:49: [bv] [0.033362] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if x_1.msb = x.msb ∧ ¬(BitVec.signExtend 32 x_1 + BitVec.signExtend 32 x).msb = x_1.msb then none
                else some (BitVec.signExtend 32 x_1 + BitVec.signExtend 32 x)).bind
              fun x => some (BitVec.setWidth 8 (x.sshiftRight 1))) ⊑
            (if x_1.msb = x.msb ∧ ¬(BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x).msb = x_1.msb then none
                else some (BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x)).bind
              fun x => some (BitVec.setWidth 8 (x >>> 1))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if
                    (x_1.getLsbD 7 == x.getLsbD 7 &&
                        !(BitVec.signExtend 32 x_1 + BitVec.signExtend 32 x).getLsbD 31 == x_1.getLsbD 7) =
                      true then
                  none
                else some (BitVec.signExtend 32 x_1 + BitVec.signExtend 32 x)).bind
              fun a => some (BitVec.zeroExtend 8 (a.sshiftRight 1))) ⊑
            (if
                    (x_1.getLsbD 7 == x.getLsbD 7 &&
                        !(BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x).getLsbD 15 == x_1.getLsbD 7) =
                      true then
                  none
                else some (BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x)).bind
              fun a => some (BitVec.zeroExtend 8 (a >>> 1))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:51:49: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:51:49: [bv] [0.043240] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 9
      a✝ :
        ¬((if x_1.msb = x.msb ∧ ¬(BitVec.signExtend 64 x_1 + BitVec.signExtend 64 x).msb = x_1.msb then none
                else some (BitVec.signExtend 64 x_1 + BitVec.signExtend 64 x)).bind
              fun x => some (BitVec.setWidth 8 (x.sshiftRight 1))) ⊑
            (if
                    (BitVec.setWidth 16 x_1).msb = (BitVec.setWidth 16 x).msb ∧
                      ¬(BitVec.setWidth 16 x_1 + BitVec.setWidth 16 x).msb = (BitVec.setWidth 16 x_1).msb then
                  none
                else
                  if
                      BitVec.setWidth 16 x_1 + BitVec.setWidth 16 x < BitVec.setWidth 16 x_1 ∨
                        BitVec.setWidth 16 x_1 + BitVec.setWidth 16 x < BitVec.setWidth 16 x then
                    none
                  else some (BitVec.setWidth 16 x_1 + BitVec.setWidth 16 x)).bind
              fun x => some (BitVec.setWidth 8 (x >>> 1))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 9
      a✝ :
        ¬((if
                    (x_1.getLsbD 8 == x.getLsbD 8 &&
                        !(BitVec.signExtend 64 x_1 + BitVec.signExtend 64 x).getLsbD 63 == x_1.getLsbD 8) =
                      true then
                  none
                else some (BitVec.signExtend 64 x_1 + BitVec.signExtend 64 x)).bind
              fun a => some (BitVec.zeroExtend 8 (a.sshiftRight 1))) ⊑
            (if
                    ((BitVec.zeroExtend 16 x_1).getLsbD 15 == (BitVec.zeroExtend 16 x).getLsbD 15 &&
                        !(BitVec.zeroExtend 16 x_1 + BitVec.zeroExtend 16 x).getLsbD 15 ==
                            (BitVec.zeroExtend 16 x_1).getLsbD 15) =
                      true then
                  none
                else
                  if
                      (!((!BitVec.zeroExtend 16 x_1 >ᵤ BitVec.zeroExtend 16 x_1 + BitVec.zeroExtend 16 x) &&
                            !BitVec.zeroExtend 16 x >ᵤ BitVec.zeroExtend 16 x_1 + BitVec.zeroExtend 16 x)) =
                        true then
                    none
                  else some (BitVec.zeroExtend 16 x_1 + BitVec.zeroExtend 16 x)).bind
              fun a => some (BitVec.zeroExtend 8 (a >>> 1))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:65:49: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:65:49: [bv] [0.043642] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if x_1.msb = x.msb ∧ ¬(BitVec.signExtend 64 x_1 + BitVec.signExtend 64 x).msb = x_1.msb then none
                else some (BitVec.signExtend 64 x_1 + BitVec.signExtend 64 x)).bind
              fun x => some (BitVec.setWidth 7 (x.sshiftRight 1))) ⊑
            (if
                    (BitVec.setWidth 14 x_1).msb = (BitVec.setWidth 14 x).msb ∧
                      ¬(BitVec.setWidth 14 x_1 + BitVec.setWidth 14 x).msb = (BitVec.setWidth 14 x_1).msb then
                  none
                else
                  if
                      BitVec.setWidth 14 x_1 + BitVec.setWidth 14 x < BitVec.setWidth 14 x_1 ∨
                        BitVec.setWidth 14 x_1 + BitVec.setWidth 14 x < BitVec.setWidth 14 x then
                    none
                  else some (BitVec.setWidth 14 x_1 + BitVec.setWidth 14 x)).bind
              fun x => some (BitVec.setWidth 7 (x >>> 1))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if
                    (x_1.getLsbD 7 == x.getLsbD 7 &&
                        !(BitVec.signExtend 64 x_1 + BitVec.signExtend 64 x).getLsbD 63 == x_1.getLsbD 7) =
                      true then
                  none
                else some (BitVec.signExtend 64 x_1 + BitVec.signExtend 64 x)).bind
              fun a => some (BitVec.zeroExtend 7 (a.sshiftRight 1))) ⊑
            (if
                    ((BitVec.zeroExtend 14 x_1).getLsbD 13 == (BitVec.zeroExtend 14 x).getLsbD 13 &&
                        !(BitVec.zeroExtend 14 x_1 + BitVec.zeroExtend 14 x).getLsbD 13 ==
                            (BitVec.zeroExtend 14 x_1).getLsbD 13) =
                      true then
                  none
                else
                  if
                      (!((!BitVec.zeroExtend 14 x_1 >ᵤ BitVec.zeroExtend 14 x_1 + BitVec.zeroExtend 14 x) &&
                            !BitVec.zeroExtend 14 x >ᵤ BitVec.zeroExtend 14 x_1 + BitVec.zeroExtend 14 x)) =
                        true then
                    none
                  else some (BitVec.zeroExtend 14 x_1 + BitVec.zeroExtend 14 x)).bind
              fun a => some (BitVec.zeroExtend 7 (a >>> 1))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:73:49: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchbinophext_proof.lean:73:49: [bv] [0.025644] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if x_1.msb = x.msb ∧ ¬(BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x).msb = x_1.msb then none
                else some (BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x)).bind
              fun x => some (BitVec.setWidth 8 (x.sshiftRight 1))) ⊑
            (if x_1.msb = x.msb ∧ ¬(BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x).msb = x_1.msb then none
                else some (BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x)).bind
              fun x => some (BitVec.setWidth 8 (x >>> 1))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if
                    (x_1.getLsbD 7 == x.getLsbD 7 &&
                        !(BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x).getLsbD 15 == x_1.getLsbD 7) =
                      true then
                  none
                else some (BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x)).bind
              fun a => some (BitVec.zeroExtend 8 (a.sshiftRight 1))) ⊑
            (if
                    (x_1.getLsbD 7 == x.getLsbD 7 &&
                        !(BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x).getLsbD 15 == x_1.getLsbD 7) =
                      true then
                  none
                else some (BitVec.signExtend 16 x_1 + BitVec.signExtend 16 x)).bind
              fun a => some (BitVec.zeroExtend 8 (a >>> 1))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gtrunchbinophext_proof
