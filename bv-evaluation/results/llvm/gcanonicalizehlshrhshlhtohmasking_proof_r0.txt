⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gcanonicalizehlshrhshlhtohmasking_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:12:38: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:12:38: [bv] [0.023460] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (x_1 >>> x.toNat)).bind fun a =>
              if 8#8 ≤ x then none else some (a <<< x.toNat)) ⊑
            (if (255#8 <<< x.toNat).sshiftRight x.toNat = 255#8 then none
                else if 8#8 ≤ x then none else some (255#8 <<< x.toNat)).bind
              fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (x_1 >>> x.toNat)).bind fun a =>
              if (!8#8 >ᵤ x) = true then none else some (a <<< x.toNat)) ⊑
            (if ((255#8 <<< x.toNat).sshiftRight x.toNat == 255#8) = true then none
                else if (!8#8 >ᵤ x) = true then none else some (255#8 <<< x.toNat)).bind
              fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:14:88: Bitwuzla proved the goal after 74.000000ms
LeanSAT proved the goal after 73.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 60.932750ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:16:88: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 74.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 61.225084ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:23:38: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:23:38: [bv] [0.029499] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (x_1 >>> x.toNat)).bind fun a =>
              if a <<< x.toNat >>> x.toNat = a then none else if 8#8 ≤ x then none else some (a <<< x.toNat)) ⊑
            (if (255#8 <<< x.toNat).sshiftRight x.toNat = 255#8 then none
                else if 8#8 ≤ x then none else some (255#8 <<< x.toNat)).bind
              fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (x_1 >>> x.toNat)).bind fun a =>
              if (a <<< x.toNat >>> x.toNat == a) = true then none
              else if (!8#8 >ᵤ x) = true then none else some (a <<< x.toNat)) ⊑
            (if ((255#8 <<< x.toNat).sshiftRight x.toNat == 255#8) = true then none
                else if (!8#8 >ᵤ x) = true then none else some (255#8 <<< x.toNat)).bind
              fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:26:98: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:26:98: [bv] [0.010371] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if (x &&& 248#8) >>> 3 = x >>> 3 then none else some (x &&& 248#8)) ⊑ some (x &&& 248#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if ((x &&& 248#8) >>> 3 == x >>> 3) = true then none else some (x &&& 248#8)) ⊑ some (x &&& 248#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:29:105: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:29:105: [bv] [0.016359] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if x >>> 6 <<< 3 >>> 3 = x >>> 6 then none else some (x >>> 6 <<< 3)) ⊑ some (x >>> 3 &&& 24#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if (x >>> 6 <<< 3 >>> 3 == x >>> 6) = true then none else some (x >>> 6 <<< 3)) ⊑ some (x >>> 3 &&& 24#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:33:98: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:33:98: [bv] [0.021430] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if x >>> 3 <<< 6 >>> 6 = x >>> 3 then none else some (x >>> 3 <<< 6)) ⊑
            (if x <<< 3 >>> 3 = x then none else some (x <<< 3)).bind fun x' => some (x' &&& 192#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x >>> 3 <<< 6 >>> 6 == x >>> 3) = true then none else some (x >>> 3 <<< 6)) ⊑
            (if (x <<< 3 >>> 3 == x) = true then none else some (x <<< 3)).bind fun a => some (a &&& 192#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:40:38: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:40:38: [bv] [0.031276] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (x_1 >>> x.toNat)).bind fun a =>
              if (a <<< x.toNat).sshiftRight x.toNat = a then none
              else if 8#8 ≤ x then none else some (a <<< x.toNat)) ⊑
            (if (255#8 <<< x.toNat).sshiftRight x.toNat = 255#8 then none
                else if 8#8 ≤ x then none else some (255#8 <<< x.toNat)).bind
              fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (x_1 >>> x.toNat)).bind fun a =>
              if ((a <<< x.toNat).sshiftRight x.toNat == a) = true then none
              else if (!8#8 >ᵤ x) = true then none else some (a <<< x.toNat)) ⊑
            (if ((255#8 <<< x.toNat).sshiftRight x.toNat == 255#8) = true then none
                else if (!8#8 >ᵤ x) = true then none else some (255#8 <<< x.toNat)).bind
              fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:43:106: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:43:106: [bv] [0.011270] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if (x &&& 248#8).sshiftRight 3 = x >>> 3 then none else some (x &&& 248#8)) ⊑ some (x &&& 248#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if ((x &&& 248#8).sshiftRight 3 == x >>> 3) = true then none else some (x &&& 248#8)) ⊑ some (x &&& 248#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:46:115: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:46:115: [bv] [0.014449] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if (x >>> 6 <<< 3).sshiftRight 3 = x >>> 6 then none else some (x >>> 6 <<< 3)) ⊑ some (x >>> 3 &&& 24#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((x >>> 6 <<< 3).sshiftRight 3 == x >>> 6) = true then none else some (x >>> 6 <<< 3)) ⊑
            some (x >>> 3 &&& 24#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:51:31: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:51:31: [bv] [0.026241] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x >>> 3 <<< 6).sshiftRight 6 = x >>> 3 then none else some (x >>> 3 <<< 6)) ⊑
            (if (x <<< 3).sshiftRight 3 = x then none else if x <<< 3 >>> 3 = x then none else some (x <<< 3)).bind
              fun x' => some (x' &&& 64#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((x >>> 3 <<< 6).sshiftRight 6 == x >>> 3) = true then none else some (x >>> 3 <<< 6)) ⊑
            (if ((x <<< 3).sshiftRight 3 == x) = true then none
                else if (x <<< 3 >>> 3 == x) = true then none else some (x <<< 3)).bind
              fun a => some (a &&& 64#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:59:38: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:59:38: [bv] [0.036922] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (x_1 >>> x.toNat)).bind fun a =>
              if (a <<< x.toNat).sshiftRight x.toNat = a then none
              else if a <<< x.toNat >>> x.toNat = a then none else if 8#8 ≤ x then none else some (a <<< x.toNat)) ⊑
            (if (255#8 <<< x.toNat).sshiftRight x.toNat = 255#8 then none
                else if 8#8 ≤ x then none else some (255#8 <<< x.toNat)).bind
              fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (x_1 >>> x.toNat)).bind fun a =>
              if ((a <<< x.toNat).sshiftRight x.toNat == a) = true then none
              else
                if (a <<< x.toNat >>> x.toNat == a) = true then none
                else if (!8#8 >ᵤ x) = true then none else some (a <<< x.toNat)) ⊑
            (if ((255#8 <<< x.toNat).sshiftRight x.toNat == 255#8) = true then none
                else if (!8#8 >ᵤ x) = true then none else some (255#8 <<< x.toNat)).bind
              fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:64:29: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:64:29: [bv] [0.014019] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x &&& 248#8).sshiftRight 3 = x >>> 3 then none
            else if (x &&& 248#8) >>> 3 = x >>> 3 then none else some (x &&& 248#8)) ⊑
            some (x &&& 248#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((x &&& 248#8).sshiftRight 3 == x >>> 3) = true then none
            else if ((x &&& 248#8) >>> 3 == x >>> 3) = true then none else some (x &&& 248#8)) ⊑
            some (x &&& 248#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:69:34: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:69:34: [bv] [0.017652] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x >>> 6 <<< 3).sshiftRight 3 = x >>> 6 then none
            else if x >>> 6 <<< 3 >>> 3 = x >>> 6 then none else some (x >>> 6 <<< 3)) ⊑
            some (x >>> 3 &&& 24#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((x >>> 6 <<< 3).sshiftRight 3 == x >>> 6) = true then none
            else if (x >>> 6 <<< 3 >>> 3 == x >>> 6) = true then none else some (x >>> 6 <<< 3)) ⊑
            some (x >>> 3 &&& 24#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:75:31: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:75:31: [bv] [0.027435] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x >>> 3 <<< 6).sshiftRight 6 = x >>> 3 then none
            else if x >>> 3 <<< 6 >>> 6 = x >>> 3 then none else some (x >>> 3 <<< 6)) ⊑
            (if (x <<< 3).sshiftRight 3 = x then none else if x <<< 3 >>> 3 = x then none else some (x <<< 3)).bind
              fun x' => some (x' &&& 64#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((x >>> 3 <<< 6).sshiftRight 6 == x >>> 3) = true then none
            else if (x >>> 3 <<< 6 >>> 6 == x >>> 3) = true then none else some (x >>> 3 <<< 6)) ⊑
            (if ((x <<< 3).sshiftRight 3 == x) = true then none
                else if (x <<< 3 >>> 3 == x) = true then none else some (x <<< 3)).bind
              fun a => some (a &&& 64#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:80:19: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:80:19: [bv] [0.013591] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (x_1 >>> x.toNat)).bind fun a =>
              if 8#8 ≤ x then none else some (a <<< x.toNat)) ⊑
            some x_1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (x_1 >>> x.toNat)).bind fun a =>
              if (!8#8 >ᵤ x) = true then none else some (a <<< x.toNat)) ⊑
            some x_1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:82:80: Bitwuzla provided a counter example after 70.000000ms
LeanSAT provided a counter example after 68.000000ms: rewriting 0.000000 SAT solving 61.333958ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:82:8: (kernel) declaration has metavariables 'positive_sameconst_lshrexact_thm'
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:84:89: Bitwuzla provided a counter example after 70.000000ms
LeanSAT provided a counter example after 65.000000ms: rewriting 0.000000 SAT solving 56.221459ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:84:8: (kernel) declaration has metavariables 'positive_biggerlshr_lshrexact_thm'
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:86:88: Bitwuzla provided a counter example after 72.000000ms
LeanSAT provided a counter example after 70.000000ms: rewriting 0.000000 SAT solving 60.866791ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:86:8: (kernel) declaration has metavariables 'positive_biggershl_lshrexact_thm'
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:91:19: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:91:19: [bv] [0.021055] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (x_1 >>> x.toNat)).bind fun a =>
              if (a <<< x.toNat).sshiftRight x.toNat = a then none
              else if 8#8 ≤ x then none else some (a <<< x.toNat)) ⊑
            some x_1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (x_1 >>> x.toNat)).bind fun a =>
              if ((a <<< x.toNat).sshiftRight x.toNat == a) = true then none
              else if (!8#8 >ᵤ x) = true then none else some (a <<< x.toNat)) ⊑
            some x_1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:94:94: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:94:94: [bv] [0.011058] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if (x &&& 248#8).sshiftRight 3 = x >>> 3 then none else some (x &&& 248#8)) ⊑ some x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if ((x &&& 248#8).sshiftRight 3 == x >>> 3) = true then none else some (x &&& 248#8)) ⊑ some x
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:97:106: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:97:106: [bv] [0.012605] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if (x >>> 6 <<< 3).sshiftRight 3 = x >>> 6 then none else some (x >>> 6 <<< 3)) ⊑ some (x >>> 3)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if ((x >>> 6 <<< 3).sshiftRight 3 == x >>> 6) = true then none else some (x >>> 6 <<< 3)) ⊑ some (x >>> 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:101:107: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:101:107: [bv] [0.020198] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x >>> 3 <<< 6).sshiftRight 6 = x >>> 3 then none else some (x >>> 3 <<< 6)) ⊑
            if (x <<< 3).sshiftRight 3 = x then none else if x <<< 3 >>> 3 = x then none else some (x <<< 3)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((x >>> 3 <<< 6).sshiftRight 6 == x >>> 3) = true then none else some (x >>> 3 <<< 6)) ⊑
            if ((x <<< 3).sshiftRight 3 == x) = true then none
            else if (x <<< 3 >>> 3 == x) = true then none else some (x <<< 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:106:19: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:106:19: [bv] [0.021754] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (x_1 >>> x.toNat)).bind fun a =>
              if a <<< x.toNat >>> x.toNat = a then none else if 8#8 ≤ x then none else some (a <<< x.toNat)) ⊑
            some x_1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (x_1 >>> x.toNat)).bind fun a =>
              if (a <<< x.toNat >>> x.toNat == a) = true then none
              else if (!8#8 >ᵤ x) = true then none else some (a <<< x.toNat)) ⊑
            some x_1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:109:86: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:109:86: [bv] [0.010666] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if (x &&& 248#8) >>> 3 = x >>> 3 then none else some (x &&& 248#8)) ⊑ some x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if ((x &&& 248#8) >>> 3 == x >>> 3) = true then none else some (x &&& 248#8)) ⊑ some x
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:112:96: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:112:96: [bv] [0.012252] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if x >>> 6 <<< 3 >>> 3 = x >>> 6 then none else some (x >>> 6 <<< 3)) ⊑ some (x >>> 3)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if (x >>> 6 <<< 3 >>> 3 == x >>> 6) = true then none else some (x >>> 6 <<< 3)) ⊑ some (x >>> 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:116:61: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:116:61: [bv] [0.017195] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if x >>> 3 <<< 6 >>> 6 = x >>> 3 then none else some (x >>> 3 <<< 6)) ⊑
            if x <<< 3 >>> 3 = x then none else some (x <<< 3)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x >>> 3 <<< 6 >>> 6 == x >>> 3) = true then none else some (x >>> 3 <<< 6)) ⊑
            if (x <<< 3 >>> 3 == x) = true then none else some (x <<< 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:122:19: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:122:19: [bv] [0.027215] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (x_1 >>> x.toNat)).bind fun a =>
              if (a <<< x.toNat).sshiftRight x.toNat = a then none
              else if a <<< x.toNat >>> x.toNat = a then none else if 8#8 ≤ x then none else some (a <<< x.toNat)) ⊑
            some x_1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (x_1 >>> x.toNat)).bind fun a =>
              if ((a <<< x.toNat).sshiftRight x.toNat == a) = true then none
              else
                if (a <<< x.toNat >>> x.toNat == a) = true then none
                else if (!8#8 >ᵤ x) = true then none else some (a <<< x.toNat)) ⊑
            some x_1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:127:17: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:127:17: [bv] [0.014929] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x &&& 248#8).sshiftRight 3 = x >>> 3 then none
            else if (x &&& 248#8) >>> 3 = x >>> 3 then none else some (x &&& 248#8)) ⊑
            some x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((x &&& 248#8).sshiftRight 3 == x >>> 3) = true then none
            else if ((x &&& 248#8) >>> 3 == x >>> 3) = true then none else some (x &&& 248#8)) ⊑
            some x
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:132:25: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:132:25: [bv] [0.017201] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x >>> 6 <<< 3).sshiftRight 3 = x >>> 6 then none
            else if x >>> 6 <<< 3 >>> 3 = x >>> 6 then none else some (x >>> 6 <<< 3)) ⊑
            some (x >>> 3)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((x >>> 6 <<< 3).sshiftRight 3 == x >>> 6) = true then none
            else if (x >>> 6 <<< 3 >>> 3 == x >>> 6) = true then none else some (x >>> 6 <<< 3)) ⊑
            some (x >>> 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:137:107: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcanonicalizehlshrhshlhtohmasking_proof.lean:137:107: [bv] [0.024377] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (x >>> 3 <<< 6).sshiftRight 6 = x >>> 3 then none
            else if x >>> 3 <<< 6 >>> 6 = x >>> 3 then none else some (x >>> 3 <<< 6)) ⊑
            if (x <<< 3).sshiftRight 3 = x then none else if x <<< 3 >>> 3 = x then none else some (x <<< 3)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((x >>> 3 <<< 6).sshiftRight 6 == x >>> 3) = true then none
            else if (x >>> 3 <<< 6 >>> 6 == x >>> 3) = true then none else some (x >>> 3 <<< 6)) ⊑
            if ((x <<< 3).sshiftRight 3 == x) = true then none
            else if (x <<< 3 >>> 3 == x) = true then none else some (x <<< 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gcanonicalizehlshrhshlhtohmasking_proof
