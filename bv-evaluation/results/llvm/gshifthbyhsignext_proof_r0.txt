⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthbyhsignext_proof.lean:16:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthbyhsignext_proof.lean:11:8: error: (kernel) declaration has metavariables 't0_shl_thm'
[bv] [0.024546] Normalizing goal
  [Meta.synthInstance] [0.001117] ✅️ Decidable
        ((if BitVec.signExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ <<< BitVec.signExtend 32 x✝¹)) ⊑
          if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ <<< BitVec.zeroExtend 32 x✝¹))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 8
      x✝ : BitVec 32
      a✝ :
        ¬(if BitVec.signExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ <<< BitVec.signExtend 32 x✝¹)) ⊑
            if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ <<< BitVec.zeroExtend 32 x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 8
      x✝ : BitVec 32
      a✝ :
        ¬(if (!32#32 >ᵤ BitVec.signExtend 32 x✝¹) = true then none else some (x✝ <<< BitVec.signExtend 32 x✝¹)) ⊑
            if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝¹) = true then none else some (x✝ <<< BitVec.zeroExtend 32 x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthbyhsignext_proof.lean:25:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthbyhsignext_proof.lean:20:8: error: (kernel) declaration has metavariables 't1_lshr_thm'
[bv] [0.023540] Normalizing goal
  [Meta.synthInstance] [0.001150] ✅️ Decidable
        ((if BitVec.signExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ >>> BitVec.signExtend 32 x✝¹)) ⊑
          if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ >>> BitVec.zeroExtend 32 x✝¹))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 8
      x✝ : BitVec 32
      a✝ :
        ¬(if BitVec.signExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ >>> BitVec.signExtend 32 x✝¹)) ⊑
            if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ >>> BitVec.zeroExtend 32 x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 8
      x✝ : BitVec 32
      a✝ :
        ¬(if (!32#32 >ᵤ BitVec.signExtend 32 x✝¹) = true then none else some (x✝ >>> BitVec.signExtend 32 x✝¹)) ⊑
            if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝¹) = true then none else some (x✝ >>> BitVec.zeroExtend 32 x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthbyhsignext_proof.lean:34:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthbyhsignext_proof.lean:29:8: error: (kernel) declaration has metavariables 't2_ashr_thm'
[bv] [0.037028] Normalizing goal
  [Meta.synthInstance] [0.001750] ✅️ Decidable
        ((if BitVec.signExtend 32 x✝¹ ≥ ↑32 then none else some (x✝.sshiftRight (BitVec.signExtend 32 x✝¹).toNat)) ⊑
          if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none else some (x✝.sshiftRight (BitVec.zeroExtend 32 x✝¹).toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 8
      x✝ : BitVec 32
      a✝ :
        ¬(if BitVec.signExtend 32 x✝¹ ≥ ↑32 then none else some (x✝.sshiftRight (BitVec.signExtend 32 x✝¹).toNat)) ⊑
            if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none else some (x✝.sshiftRight (BitVec.zeroExtend 32 x✝¹).toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 8
      x✝ : BitVec 32
      a✝ :
        ¬(if (!32#32 >ᵤ BitVec.signExtend 32 x✝¹) = true then none
            else some (x✝.sshiftRight (BitVec.signExtend 32 x✝¹).toNat)) ⊑
            if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝¹) = true then none
            else some (x✝.sshiftRight (BitVec.zeroExtend 32 x✝¹).toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
