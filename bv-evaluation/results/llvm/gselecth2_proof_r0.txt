⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gselecth2_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:11:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:16:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:13:22: invalid field notation, type is not of the form (C ...) where C is a constant
  x'
has type
  ?m.37
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:17:49: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:17:49: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun x' => some ?m.50) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun x' => some ?m.50) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:18:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:18:80: 'ashr_exact_poison_constant_fold_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:35:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:40:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:37:22: invalid field notation, type is not of the form (C ...) where C is a constant
  x'
has type
  ?m.332
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:41:49: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:41:49: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun x' => some ?m.345) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun x' => some ?m.345) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:42:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:42:80: 'ashr_exact_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:59:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:67:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:68:45: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:68:45: [bv] [0.030861] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun y' =>
              if (16#8 <<< ↑y'.toNat).sshiftRight y'.toNat = 16#8 then none
              else
                if 16#8 <<< ↑y'.toNat >>> ↑y'.toNat = 16#8 then none
                else if 8#8 ≤ y' then none else some (16#8 <<< y'.toNat)) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              if ((16#8 <<< BitVec.ofNat 8 a.toNat).sshiftRight a.toNat == 16#8) = true then none
              else
                if (16#8 <<< BitVec.ofNat 8 a.toNat >>> BitVec.ofNat 8 a.toNat == 16#8) = true then none
                else if (!8#8 >ᵤ a) = true then none else some (16#8 <<< a.toNat)) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:69:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:69:81: 'shl_nsw_nuw_poison_constant_fold_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:93:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:100:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:101:45: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:101:45: [bv] [0.030657] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun y' =>
              if (7#8 <<< ↑y'.toNat).sshiftRight y'.toNat = 7#8 then none
              else
                if 7#8 <<< ↑y'.toNat >>> ↑y'.toNat = 7#8 then none
                else if 8#8 ≤ y' then none else some (7#8 <<< y'.toNat)) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              if ((7#8 <<< BitVec.ofNat 8 a.toNat).sshiftRight a.toNat == 7#8) = true then none
              else
                if (7#8 <<< BitVec.ofNat 8 a.toNat >>> BitVec.ofNat 8 a.toNat == 7#8) = true then none
                else if (!8#8 >ᵤ a) = true then none else some (7#8 <<< a.toNat)) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:102:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:102:81: 'shl_nsw_nuw_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:124:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:129:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:130:51: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:130:51: [bv] [0.024151] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun x' => if x'.msb = (64#8).msb ∧ ¬(x' + 64#8).msb = x'.msb then none else some (x' + 64#8)) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              if (!a.getLsbD 7 && !(a + 64#8).getLsbD 7 == a.getLsbD 7) = true then none else some (a + 64#8)) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:131:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:131:81: 'add_nsw_poison_constant_fold_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:148:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:153:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:154:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:154:50: [bv] [0.022661] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun x' => if x'.msb = (64#8).msb ∧ ¬(x' + 64#8).msb = x'.msb then none else some (x' + 64#8)) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              if (!a.getLsbD 7 && !(a + 64#8).getLsbD 7 == a.getLsbD 7) = true then none else some (a + 64#8)) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:155:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gselecth2_proof.lean:155:81: 'add_nsw_thm' has already been declared
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gselecth2_proof
