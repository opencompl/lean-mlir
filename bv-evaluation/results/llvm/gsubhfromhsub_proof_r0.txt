⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gsubhfromhsub_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:7:78: Bitwuzla proved the goal after 89.000000ms
LeanSAT proved the goal after 137.000000ms: rewriting 20.861916ms, bitblasting 0.000000ms, SAT solving 59.244125ms, LRAT processing 21.109750ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:22:22: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:22:22: [bv] [0.101952] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if
                    (BitVec.signExtend 9 x_2 - BitVec.signExtend 9 x_1).msb =
                      (BitVec.signExtend 9 x_2 - BitVec.signExtend 9 x_1).getMsbD 1 then
                  if x_2 < x_1 then none else some (x_2 - x_1)
                else none).bind
              fun a =>
              if
                  (BitVec.signExtend 9 a - BitVec.signExtend 9 x).msb =
                    (BitVec.signExtend 9 a - BitVec.signExtend 9 x).getMsbD 1 then
                if a < x then none else some (a - x)
              else none) ⊑
            (if x_1.msb = x.msb ∧ ¬(x_1 + x).msb = x_1.msb then none
                else if x_1 + x < x_1 ∨ x_1 + x < x then none else some (x_1 + x)).bind
              fun y' =>
              if
                  (BitVec.signExtend 9 x_2 - BitVec.signExtend 9 y').msb =
                    (BitVec.signExtend 9 x_2 - BitVec.signExtend 9 y').getMsbD 1 then
                if x_2 < y' then none else some (x_2 - y')
              else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if
                    ((BitVec.signExtend 9 x_2 + (~~~BitVec.signExtend 9 x_1 + 1#9)).getLsbD 8 ==
                        (BitVec.signExtend 9 x_2 + (~~~BitVec.signExtend 9 x_1 + 1#9)).getMsbD 1) =
                      true then
                  if (x_1 >ᵤ x_2) = true then none else some (x_2 + (~~~x_1 + 1#8))
                else none).bind
              fun a =>
              if
                  ((BitVec.signExtend 9 a + (~~~BitVec.signExtend 9 x + 1#9)).getLsbD 8 ==
                      (BitVec.signExtend 9 a + (~~~BitVec.signExtend 9 x + 1#9)).getMsbD 1) =
                    true then
                if (x >ᵤ a) = true then none else some (a + (~~~x + 1#8))
              else none) ⊑
            (if (x_1.getLsbD 7 == x.getLsbD 7 && !(x_1 + x).getLsbD 7 == x_1.getLsbD 7) = true then none
                else if (!((!x_1 >ᵤ x_1 + x) && !x >ᵤ x_1 + x)) = true then none else some (x_1 + x)).bind
              fun a =>
              if
                  ((BitVec.signExtend 9 x_2 + (~~~BitVec.signExtend 9 a + 1#9)).getLsbD 8 ==
                      (BitVec.signExtend 9 x_2 + (~~~BitVec.signExtend 9 a + 1#9)).getMsbD 1) =
                    true then
                if (a >ᵤ x_2) = true then none else some (x_2 + (~~~a + 1#8))
              else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:27:55: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:27:55: [bv] [0.046916] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if x_2 < x_1 then none else some (x_2 - x_1)).bind fun a => if a < x then none else some (a - x)) ⊑
            (if x_1 + x < x_1 ∨ x_1 + x < x then none else some (x_1 + x)).bind fun y' =>
              if x_2 < y' then none else some (x_2 - y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (x_1 >ᵤ x_2) = true then none else some (x_2 + (~~~x_1 + 1#8))).bind fun a =>
              if (x >ᵤ a) = true then none else some (a + (~~~x + 1#8))) ⊑
            (if (!((!x_1 >ᵤ x_1 + x) && !x >ᵤ x_1 + x)) = true then none else some (x_1 + x)).bind fun a =>
              if (a >ᵤ x_2) = true then none else some (x_2 + (~~~a + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:33:33: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:33:33: [bv] [0.032541] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if
                    (BitVec.signExtend 9 x_2 - BitVec.signExtend 9 x_1).msb =
                      (BitVec.signExtend 9 x_2 - BitVec.signExtend 9 x_1).getMsbD 1 then
                  some (x_2 - x_1)
                else none).bind
              fun a => some (a - x)) ⊑
            some (x_2 - (x_1 + x))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if
                    ((BitVec.signExtend 9 x_2 + (~~~BitVec.signExtend 9 x_1 + 1#9)).getLsbD 8 ==
                        (BitVec.signExtend 9 x_2 + (~~~BitVec.signExtend 9 x_1 + 1#9)).getMsbD 1) =
                      true then
                  some (x_2 + (~~~x_1 + 1#8))
                else none).bind
              fun a => some (a + (~~~x + 1#8))) ⊑
            some (x_2 + (~~~(x_1 + x) + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:36:109: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:36:109: [bv] [0.024273] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ : ¬((if x_2 < x_1 then none else some (x_2 - x_1)).bind fun a => some (a - x)) ⊑ some (x_2 - (x_1 + x))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (x_1 >ᵤ x_2) = true then none else some (x_2 + (~~~x_1 + 1#8))).bind fun a => some (a + (~~~x + 1#8))) ⊑
            some (x_2 + (~~~(x_1 + x) + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:39:88: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:39:88: [bv] [0.021020] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ : ¬(if x_2 - x_1 < x then none else some (x_2 - x_1 - x)) ⊑ some (x_2 - (x_1 + x))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬(if (x >ᵤ x_2 + (~~~x_1 + 1#8)) = true then none else some (x_2 + (~~~x_1 + 1#8) + (~~~x + 1#8))) ⊑
            some (x_2 + (~~~(x_1 + x) + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:46:33: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:46:33: [bv] [0.035222] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if
                    (BitVec.signExtend 9 x_2 - BitVec.signExtend 9 x_1).msb =
                      (BitVec.signExtend 9 x_2 - BitVec.signExtend 9 x_1).getMsbD 1 then
                  if x_2 < x_1 then none else some (x_2 - x_1)
                else none).bind
              fun a => some (a - x)) ⊑
            some (x_2 - (x_1 + x))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if
                    ((BitVec.signExtend 9 x_2 + (~~~BitVec.signExtend 9 x_1 + 1#9)).getLsbD 8 ==
                        (BitVec.signExtend 9 x_2 + (~~~BitVec.signExtend 9 x_1 + 1#9)).getMsbD 1) =
                      true then
                  if (x_1 >ᵤ x_2) = true then none else some (x_2 + (~~~x_1 + 1#8))
                else none).bind
              fun a => some (a + (~~~x + 1#8))) ⊑
            some (x_2 + (~~~(x_1 + x) + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:52:33: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:52:33: [bv] [0.033185] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬(if
                (BitVec.signExtend 9 (x_2 - x_1) - BitVec.signExtend 9 x).msb =
                  (BitVec.signExtend 9 (x_2 - x_1) - BitVec.signExtend 9 x).getMsbD 1 then
              if x_2 - x_1 < x then none else some (x_2 - x_1 - x)
            else none) ⊑
            some (x_2 - (x_1 + x))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬(if
                ((BitVec.signExtend 9 (x_2 + (~~~x_1 + 1#8)) + (~~~BitVec.signExtend 9 x + 1#9)).getLsbD 8 ==
                    (BitVec.signExtend 9 (x_2 + (~~~x_1 + 1#8)) + (~~~BitVec.signExtend 9 x + 1#9)).getMsbD 1) =
                  true then
              if (x >ᵤ x_2 + (~~~x_1 + 1#8)) = true then none else some (x_2 + (~~~x_1 + 1#8) + (~~~x + 1#8))
            else none) ⊑
            some (x_2 + (~~~(x_1 + x) + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:54:79: Bitwuzla proved the goal after 86.000000ms
LeanSAT proved the goal after 106.000000ms: rewriting 22.515167ms, bitblasting 0.000000ms, SAT solving 61.512667ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:56:62: Bitwuzla proved the goal after 0.000000ms
LeanSAT proved the goal after 3.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:58:78: Bitwuzla proved the goal after 0.000000ms
LeanSAT proved the goal after 7.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:60:71: Bitwuzla proved the goal after 0.000000ms
LeanSAT proved the goal after 10.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhfromhsub_proof.lean:62:73: Bitwuzla proved the goal after 74.000000ms
LeanSAT proved the goal after 73.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 59.449583ms, LRAT processing 0.000000ms
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gsubhfromhsub_proof
