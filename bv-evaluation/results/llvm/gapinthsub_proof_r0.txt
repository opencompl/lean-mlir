⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gapinthsub_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:7:82: Bitwuzla proved the goal after 87.000000ms
LeanSAT proved the goal after 284.000000ms: rewriting 19.696250ms, bitblasting 0.000000ms, SAT solving 170.492375ms, LRAT trimming 42.486833ms, LRAT checking 44.874333ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:9:104: Bitwuzla proved the goal after 78.000000ms
LeanSAT proved the goal after 96.000000ms: rewriting 11.711166ms, bitblasting 0.000000ms, SAT solving 60.933250ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:11:110: Bitwuzla proved the goal after 76.000000ms
LeanSAT proved the goal after 74.000000ms: rewriting 10.058500ms, bitblasting 0.000000ms, SAT solving 58.114666ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:13:65: Bitwuzla proved the goal after 79.000000ms
LeanSAT proved the goal after 238.000000ms: rewriting 11.849167ms, bitblasting 0.000000ms, SAT solving 116.004375ms, LRAT trimming 43.778042ms, LRAT checking 57.175750ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:15:78: The SAT solver timed out while solving the problem.
Consider increasing the timeout with `set_option sat.timeout <sec>`.
If solving your problem relies inherently on using associativity or commutativity, consider enabling the `bv.ac_nf` option.
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:15:78: [bv] [0.010899] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 42
      a✝ : ¬x - 3#42 * x = x * 4398046511102#42
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 42
      a✝ : (!x + (~~~(3#42 * x) + 1#42) == x * 4398046511102#42) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 42: x
[Meta.Tactic.bv] Reflected bv logical expression: !((var0 + ((~ (0x00000000003#42 * var0)) + 0x00000000001#42)) == (var0 * 0x3fffffffffe#42))
[bv] [10.777868] Preparing LRAT reflection term
  [bv] [0.011760] Bitblasting BVLogicalExpr to AIG
  [Meta.Tactic.bv] AIG has 32578 nodes.
  [sat] [10.758070] Obtaining external proof certificate
    [sat] [0.019709] Serializing SAT problem to DIMACS file
    [sat] [10.737456] Running SAT solver
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:17:72: Bitwuzla proved the goal after 71.000000ms
LeanSAT proved the goal after 73.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 58.163167ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:19:72: Bitwuzla proved the goal after 71.000000ms
LeanSAT proved the goal after 79.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 60.213708ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:21:88: The SAT solver timed out while solving the problem.
Consider increasing the timeout with `set_option sat.timeout <sec>`.
If solving your problem relies inherently on using associativity or commutativity, consider enabling the `bv.ac_nf` option.
info: ././././SSA/Projects/InstCombine/tests/proofs/gapinthsub_proof.lean:21:88: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 51
    a✝ : ¬-x.sdiv 1123#51 = x.sdiv 2251799813684125#51
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 51
    a✝ : (!~~~x.sdiv 1123#51 + 1#51 == x.sdiv 2251799813684125#51) = true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 51: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((~ (var0 /ₛ 0x0000000000463#51)) + 0x0000000000001#51) == (var0 /ₛ 0x7fffffffffb9d#51))
[bv] [11.253795] Preparing LRAT reflection term
  [bv] [0.256200] Bitblasting BVLogicalExpr to AIG
  [Meta.Tactic.bv] AIG has 403713 nodes.
  [sat] [0.107222] Converting AIG to CNF
  [sat] [10.890254] Obtaining external proof certificate
    [sat] [0.207676] Serializing SAT problem to DIMACS file
    [sat] [10.681959] Running SAT solver
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gapinthsub_proof
