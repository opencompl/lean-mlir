⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [884/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
Bitwuzla proved the goal after 263.152578ms, solving context: 0.000000ms
LeanSAT proved the goal after 103.192990ms: rewriting 17.252900ms, bitblasting 0.000000ms, SAT solving 67.061970ms, LRAT trimming 0.000000ms, LRAT checking 15.559940ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthandhorhand_proof.lean:28:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthandhorhand_proof.lean:22:8: error: (kernel) declaration has metavariables 'test3_thm'
[bv] [0.012605] Normalizing goal
  [Meta.synthInstance] [0.001369] ✅️ Decidable
        ((if 1#49 ≥ ↑49 then none else some ((x✝ ||| x✝¹ <<< 1#49) &&& 1#49)) ⊑ some (x✝ &&& 1#49))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 49
      x✝¹ x✝ : BitVec 49
      a✝ : ¬(if 1#49 ≥ ↑49 then none else some ((x✝ ||| x✝¹ <<< 1#49) &&& 1#49)) ⊑ some (x✝ &&& 1#49)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 49
      x✝¹ x✝ : BitVec 49
      a✝ : ¬some ((x✝ ||| x✝¹ <<< 1) &&& 1#49) ⊑ some (x✝ &&& 1#49)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthandhorhand_proof.lean:38:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthandhorhand_proof.lean:32:8: error: (kernel) declaration has metavariables 'test4_thm'
[bv] [0.013730] Normalizing goal
  [Meta.synthInstance] [0.001472] ✅️ Decidable
        ((if 66#67 ≥ ↑67 then none else some ((x✝ ||| x✝¹ >>> 66#67) &&& 2#67)) ⊑ some (x✝ &&& 2#67))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 67
      x✝¹ x✝ : BitVec 67
      a✝ : ¬(if 66#67 ≥ ↑67 then none else some ((x✝ ||| x✝¹ >>> 66#67) &&& 2#67)) ⊑ some (x✝ &&& 2#67)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 67
      x✝¹ x✝ : BitVec 67
      a✝ : ¬some ((x✝ ||| x✝¹ >>> 66) &&& 2#67) ⊑ some (x✝ &&& 2#67)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 72.181500ms, solving context: 0.000000ms
LeanSAT proved the goal after 71.279610ms: rewriting 11.856830ms, bitblasting 0.000000ms, SAT solving 54.407720ms, LRAT trimming 0.000000ms, LRAT checking 2.735920ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthandhorhand_proof.lean:56:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthandhorhand_proof.lean:51:8: error: (kernel) declaration has metavariables 'or_test2_thm'
[bv] [0.008481] Normalizing goal
  [Meta.synthInstance] [0.001064] ✅️ Decidable ((if 6#7 ≥ ↑7 then none else some (x✝ <<< 6#7 ||| 64#7)) ⊑ some 64#7)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 7
      x✝ : BitVec 7
      a✝ : ¬(if 6#7 ≥ ↑7 then none else some (x✝ <<< 6#7 ||| 64#7)) ⊑ some 64#7
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 7
      x✝ : BitVec 7
      a✝ : ¬some (x✝ <<< 6 ||| 64#7) ⊑ some 64#7
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
