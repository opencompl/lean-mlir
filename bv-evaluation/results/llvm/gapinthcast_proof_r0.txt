⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [882/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [885/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthcast_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthcast_proof.lean:11:8: error: (kernel) declaration has metavariables 'test1_thm'
[bv] [0.049724] Normalizing goal
  [Meta.synthInstance] [0.001430] ✅️ Decidable
        ((if 8#37 ≥ ↑37 then none
          else
            if 8#37 ≥ ↑37 then none
            else some (BitVec.truncate 17 (BitVec.zeroExtend 37 x✝ >>> 8#37 ||| BitVec.zeroExtend 37 x✝ <<< 8#37))) ⊑
          if 8#17 ≥ ↑17 then none else if 8#17 ≥ ↑17 then none else some (x✝ >>> 8#17 ||| x✝ <<< 8#17))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 17
      x✝ : BitVec 17
      a✝ :
        ¬(if 8#37 ≥ ↑37 then none
            else
              if 8#37 ≥ ↑37 then none
              else some (BitVec.truncate 17 (BitVec.zeroExtend 37 x✝ >>> 8#37 ||| BitVec.zeroExtend 37 x✝ <<< 8#37))) ⊑
            if 8#17 ≥ ↑17 then none else if 8#17 ≥ ↑17 then none else some (x✝ >>> 8#17 ||| x✝ <<< 8#17)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 17
      x✝ : BitVec 17
      a✝ :
        ¬some (BitVec.zeroExtend 17 (BitVec.zeroExtend 37 x✝ >>> 8 ||| BitVec.zeroExtend 37 x✝ <<< 8)) ⊑
            some (x✝ >>> 8 ||| x✝ <<< 8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthcast_proof.lean:27:4: warning: exponent 577 exceeds the threshold 256, exponentiation operation was not evaluated, use `set_option exponentiation.threshold <num>` to set a new threshold
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthcast_proof.lean:27:4: error: tactic 'simp' failed, nested error:
maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthcast_proof.lean:29:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthcast_proof.lean:22:8: error: (kernel) declaration has metavariables 'test2_thm'
[bv] [0.038458] Normalizing goal
  [Meta.synthInstance] [0.001798] ✅️ Decidable
        ((do
            let x ← some x✝
            let x ← some (BitVec.zeroExtend 577 x)
            if 9#577 ≥ ↑577 then none
              else do
                let x ← some (x >>> 9#577)
                let x_1 ← some x✝
                let x_2 ← some (BitVec.zeroExtend 577 x_1)
                if 8#577 ≥ ↑577 then none
                  else do
                    let x_3 ← some (x_2 <<< 8#577)
                    some (BitVec.truncate 167 (x ||| x_3))) ⊑
          do
          let x ← some x✝
          if 9#167 ≥ ↑167 then none
            else do
              let x' ← some (x >>> 9#167)
              let x ← some x✝
              if 8#167 ≥ ↑167 then none
                else do
                  let y' ← some (x <<< 8#167)
                  some (x' ||| y'))
    [Meta.check] [0.001152] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (do
            let x ← some x✝
            let x ← some (BitVec.zeroExtend 577 x)
            if 9#577 ≥ ↑577 then none
              else do
                let x ← some (x >>> 9#577)
                let x_1 ← some x✝
                let x_2 ← some (BitVec.zeroExtend 577 x_1)
                if 8#577 ≥ ↑577 then none
                  else do
                    let x_3 ← some (x_2 <<< 8#577)
                    some (BitVec.truncate 167 (x ||| x_3)))
          do
          let x ← some x✝
          if 9#167 ≥ ↑167 then none
            else do
              let x' ← some (x >>> 9#167)
              let x ← some x✝
              if 8#167 ≥ ↑167 then none
                else do
                  let y' ← some (x <<< 8#167)
                  some (x' ||| y')
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 167
      x✝ : BitVec 167
      a✝ :
        ¬(do
              let x ← some x✝
              let x ← some (BitVec.zeroExtend 577 x)
              if 9#577 ≥ ↑577 then none
                else do
                  let x ← some (x >>> 9#577)
                  let x_1 ← some x✝
                  let x_2 ← some (BitVec.zeroExtend 577 x_1)
                  if 8#577 ≥ ↑577 then none
                    else do
                      let x_3 ← some (x_2 <<< 8#577)
                      some (BitVec.truncate 167 (x ||| x_3))) ⊑
            do
            let x ← some x✝
            if 9#167 ≥ ↑167 then none
              else do
                let x' ← some (x >>> 9#167)
                let x ← some x✝
                if 8#167 ≥ ↑167 then none
                  else do
                    let y' ← some (x <<< 8#167)
                    some (x' ||| y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 167
      x✝ : BitVec 167
      a✝ :
        ¬(do
              let x ← some x✝
              let x ← some (BitVec.zeroExtend 577 x)
              let x ← some (x >>> 9)
              let x_1 ← some x✝
              let x_2 ← some (BitVec.zeroExtend 577 x_1)
              let x_3 ← some (x_2 <<< 8)
              some (BitVec.zeroExtend 167 (x ||| x_3))) ⊑
            do
            let x ← some x✝
            let x' ← some (x >>> 9)
            let x ← some x✝
            let y' ← some (x <<< 8)
            some (x' ||| y')
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
