⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gtrunchdemand_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.lean:7:106: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.QSnKEd0m:3:68: expected terms of same sort at indices 0 and 1 as argument to 'bvand'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.lean:7:106: [bv] [0.012257] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬BitVec.setWidth 6 (x >>> 2) &&& 14#6 = BitVec.setWidth 6 x >>> 2 &&& 14#6
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : (!BitVec.zeroExtend 6 (x >>> 2) &&& 14#6 == BitVec.zeroExtend 6 x >>> 2 &&& 14#6) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 8: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((zext 6 (>> 2 var0)) && 0x0e#6) == ((>> 2 (zext 6 var0)) && 0x0e#6))
[bv] [0.062799] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 8))
      (assert (not (= (bvand ((_ zero_extend 0) (bvlshr x_0 #b00000010)) #b001110) (bvand (bvlshr ((_ zero_extend 0) x_0) #b000010) #b001110))))
      (check-sat)
      (exit)
      
  [bv] [0.060090] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.lean:9:108: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.OpjrQC53:3:68: expected terms of same sort at indices 0 and 1 as argument to 'bvand'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.lean:9:108: [bv] [0.011480] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬BitVec.setWidth 6 (x >>> 2) &&& 15#6 = BitVec.setWidth 6 x >>> 2
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : (!BitVec.zeroExtend 6 (x >>> 2) &&& 15#6 == BitVec.zeroExtend 6 x >>> 2) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 8: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((zext 6 (>> 2 var0)) && 0x0f#6) == (>> 2 (zext 6 var0)))
[bv] [0.064190] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 8))
      (assert (not (= (bvand ((_ zero_extend 0) (bvlshr x_0 #b00000010)) #b001111) (bvlshr ((_ zero_extend 0) x_0) #b000010))))
      (check-sat)
      (exit)
      
  [bv] [0.061298] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.lean:11:109: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.S5YbXv31:3:67: expected terms of same sort at indices 0 and 1 as argument to 'bvor'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.lean:11:109: [bv] [0.011501] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬BitVec.setWidth 6 (x >>> 1) ||| 32#6 = BitVec.setWidth 6 x >>> 1 ||| 32#6
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : (!BitVec.zeroExtend 6 (x >>> 1) ||| 32#6 == BitVec.zeroExtend 6 x >>> 1 ||| 32#6) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 8: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((zext 6 (>> 1 var0)) || 0x20#6) == ((>> 1 (zext 6 var0)) || 0x20#6))
[bv] [0.061081] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 8))
      (assert (not (= (bvor ((_ zero_extend 0) (bvlshr x_0 #b00000001)) #b100000) (bvor (bvlshr ((_ zero_extend 0) x_0) #b000001) #b100000))))
      (check-sat)
      (exit)
      
  [bv] [0.058124] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.lean:13:114: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.kNYZGokF:3:67: expected terms of same sort at indices 0 and 1 as argument to 'bvor'
info: ././././SSA/Projects/InstCombine/tests/proofs/gtrunchdemand_proof.lean:13:114: [bv] [0.012107] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬BitVec.setWidth 6 (x >>> 4) ||| 60#6 = BitVec.setWidth 6 x >>> 4 ||| 60#6
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : (!BitVec.zeroExtend 6 (x >>> 4) ||| 60#6 == BitVec.zeroExtend 6 x >>> 4 ||| 60#6) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 8: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((zext 6 (>> 4 var0)) || 0x3c#6) == ((>> 4 (zext 6 var0)) || 0x3c#6))
[bv] [0.063655] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 8))
      (assert (not (= (bvor ((_ zero_extend 0) (bvlshr x_0 #b00000100)) #b111100) (bvor (bvlshr ((_ zero_extend 0) x_0) #b000100) #b111100))))
      (check-sat)
      (exit)
      
  [bv] [0.061223] Proving with bitwuzla
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gtrunchdemand_proof
