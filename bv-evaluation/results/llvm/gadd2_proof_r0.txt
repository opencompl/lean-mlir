⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gadd2_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gadd2_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gadd2_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gadd2_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:7:85: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 76.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 61.424042ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:9:96: Bitwuzla proved the goal after 77.000000ms
LeanSAT proved the goal after 77.000000ms: rewriting 10.708958ms, bitblasting 0.000000ms, SAT solving 61.475291ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:12:104: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:12:104: [bv] [0.014988] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ : ¬(if x + x < x then none else some (x + x)) ⊑ if x <<< 1 >>> 1 = x then none else some (x <<< 1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬(if (x >ᵤ x * 2#32) = true then none else some (x * 2#32)) ⊑
            if (x <<< 1 >>> 1 == x) = true then none else some (x <<< 1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:14:81: Bitwuzla proved the goal after 74.000000ms
LeanSAT proved the goal after 9692.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 3440.164375ms, LRAT processing 2987.684666ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:18:52: Bitwuzla proved the goal after 83.000000ms
LeanSAT proved the goal after 120.000000ms: rewriting 14.025459ms, bitblasting 0.000000ms, SAT solving 62.159333ms, LRAT processing 16.133959ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:21:93: Bitwuzla proved the goal after 81.000000ms
LeanSAT proved the goal after 119.000000ms: rewriting 13.773000ms, bitblasting 0.000000ms, SAT solving 60.023583ms, LRAT processing 18.253708ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:30:45: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:30:45: [bv] [0.039947] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if x_1.msb = false ∧ ¬(x_1 + 1#32).msb = x_1.msb then none else some (x_1 + 1#32)).bind fun a =>
              if
                  a.msb = ((x.msb || (2863311530#32).msb) ^^ (1431655765#32).msb) ∧
                    ¬(a + ((x ||| 2863311530#32) ^^^ 1431655765#32)).msb = a.msb then
                none
              else some (a + ((x ||| 2863311530#32) ^^^ 1431655765#32))) ⊑
            some (x_1 - (x &&& 1431655765#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!x_1.getLsbD 31 && !(x_1 + 1#32).getLsbD 31 == x_1.getLsbD 31) = true then none
                else some (x_1 + 1#32)).bind
              fun a =>
              if
                  (a.getLsbD 31 && !(a + ((x ||| 2863311530#32) ^^^ 1431655765#32)).getLsbD 31 == a.getLsbD 31) =
                    true then
                none
              else some (a + ((x ||| 2863311530#32) ^^^ 1431655765#32))) ⊑
            some (x_1 + (~~~(x &&& 1431655765#32) + 1#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:33:93: Bitwuzla proved the goal after 82.000000ms
LeanSAT proved the goal after 126.000000ms: rewriting 13.999166ms, bitblasting 0.000000ms, SAT solving 63.141125ms, LRAT processing 18.849916ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:42:45: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:42:45: [bv] [0.039790] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if x_1.msb = false ∧ ¬(x_1 + 1#32).msb = x_1.msb then none else some (x_1 + 1#32)).bind fun a =>
              if
                  a.msb = ((x.msb || (2863311529#32).msb) ^^ (1431655766#32).msb) ∧
                    ¬(a + ((x ||| 2863311529#32) ^^^ 1431655766#32)).msb = a.msb then
                none
              else some (a + ((x ||| 2863311529#32) ^^^ 1431655766#32))) ⊑
            some (x_1 - (x &&& 1431655766#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!x_1.getLsbD 31 && !(x_1 + 1#32).getLsbD 31 == x_1.getLsbD 31) = true then none
                else some (x_1 + 1#32)).bind
              fun a =>
              if
                  (a.getLsbD 31 && !(a + ((x ||| 2863311529#32) ^^^ 1431655766#32)).getLsbD 31 == a.getLsbD 31) =
                    true then
                none
              else some (a + ((x ||| 2863311529#32) ^^^ 1431655766#32))) ⊑
            some (x_1 + (~~~(x &&& 1431655766#32) + 1#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:45:91: Bitwuzla proved the goal after 82.000000ms
LeanSAT proved the goal after 95.000000ms: rewriting 13.953167ms, bitblasting 0.000000ms, SAT solving 59.812458ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:54:45: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:54:45: [bv] [0.043146] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if x_1.msb = false ∧ ¬(x_1 + 1#32).msb = x_1.msb then none else some (x_1 + 1#32)).bind fun a =>
              if
                  a.msb = (x.msb && (2863311529#32).msb ^^ (2863311529#32).msb) ∧
                    ¬(a + (x &&& 2863311529#32 ^^^ 2863311529#32)).msb = a.msb then
                none
              else some (a + (x &&& 2863311529#32 ^^^ 2863311529#32))) ⊑
            some (x_1 - (x ||| 1431655766#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!x_1.getLsbD 31 && !(x_1 + 1#32).getLsbD 31 == x_1.getLsbD 31) = true then none
                else some (x_1 + 1#32)).bind
              fun a =>
              if
                  (a.getLsbD 31 == !x.getLsbD 31 &&
                      !(a + (x &&& 2863311529#32 ^^^ 2863311529#32)).getLsbD 31 == a.getLsbD 31) =
                    true then
                none
              else some (a + (x &&& 2863311529#32 ^^^ 2863311529#32))) ⊑
            some (x_1 + (~~~(x ||| 1431655766#32) + 1#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:63:45: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:63:45: [bv] [0.024887] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if
                (x_1.msb && (2863311530#32).msb ^^ (2863311531#32).msb) = x.msb ∧
                  ¬((x_1 &&& 2863311530#32 ^^^ 2863311531#32) + x).msb =
                      (x_1.msb && (2863311530#32).msb ^^ (2863311531#32).msb) then
              none
            else some ((x_1 &&& 2863311530#32 ^^^ 2863311531#32) + x)) ⊑
            some (x - (x_1 ||| 1431655765#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if
                ((!x_1.getLsbD 31) == x.getLsbD 31 &&
                    !((x_1 &&& 2863311530#32 ^^^ 2863311531#32) + x).getLsbD 31 == !x_1.getLsbD 31) =
                  true then
              none
            else some ((x_1 &&& 2863311530#32 ^^^ 2863311531#32) + x)) ⊑
            some (x + (~~~(x_1 ||| 1431655765#32) + 1#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:72:45: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:72:45: [bv] [0.042973] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if x_1.msb = false ∧ ¬(x_1 + 1#32).msb = x_1.msb then none else some (x_1 + 1#32)).bind fun a =>
              if
                  a.msb = (x.msb && (2863311530#32).msb ^^ (2863311530#32).msb) ∧
                    ¬(a + (x &&& 2863311530#32 ^^^ 2863311530#32)).msb = a.msb then
                none
              else some (a + (x &&& 2863311530#32 ^^^ 2863311530#32))) ⊑
            some (x_1 - (x ||| 1431655765#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!x_1.getLsbD 31 && !(x_1 + 1#32).getLsbD 31 == x_1.getLsbD 31) = true then none
                else some (x_1 + 1#32)).bind
              fun a =>
              if
                  (a.getLsbD 31 == !x.getLsbD 31 &&
                      !(a + (x &&& 2863311530#32 ^^^ 2863311530#32)).getLsbD 31 == a.getLsbD 31) =
                    true then
                none
              else some (a + (x &&& 2863311530#32 ^^^ 2863311530#32))) ⊑
            some (x_1 + (~~~(x ||| 1431655765#32) + 1#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:78:31: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:78:31: [bv] [0.036986] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if (x + x).msb = x.msb then some (x + x) else none).bind fun a =>
              if a.msb = x.msb ∧ ¬(a + x).msb = a.msb then none else some (a + x)) ⊑
            if
                BitVec.signExtend 32 x * 3#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                  BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 3#32 then
              none
            else some (x * 3#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if ((x * 2#16).getLsbD 15 == x.getLsbD 15) = true then some (x * 2#16) else none).bind fun a =>
              if (a.getLsbD 15 == x.getLsbD 15 && !(a + x).getLsbD 15 == a.getLsbD 15) = true then none
              else some (a + x)) ⊑
            if
                (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 3#32) &&
                      BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 3#32)) =
                  true then
              none
            else some (x * 3#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:85:31: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:85:31: [bv] [0.038981] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    BitVec.signExtend 32 x * 8#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                      BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 8#32 then
                  none
                else some (x * 8#16)).bind
              fun y' => if x.msb = y'.msb ∧ ¬(x + y').msb = x.msb then none else some (x + y')) ⊑
            if
                BitVec.signExtend 32 x * 9#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                  BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 9#32 then
              none
            else some (x * 9#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 8#32) &&
                          BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 8#32)) =
                      true then
                  none
                else some (x * 8#16)).bind
              fun a =>
              if (x.getLsbD 15 == a.getLsbD 15 && !(x + a).getLsbD 15 == x.getLsbD 15) = true then none
              else some (x + a)) ⊑
            if
                (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 9#32) &&
                      BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 9#32)) =
                  true then
              none
            else some (x * 9#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:92:31: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:92:31: [bv] [0.039131] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    BitVec.signExtend 32 x * 8#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                      BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 8#32 then
                  none
                else some (x * 8#16)).bind
              fun a => if a.msb = x.msb ∧ ¬(a + x).msb = a.msb then none else some (a + x)) ⊑
            if
                BitVec.signExtend 32 x * 9#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                  BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 9#32 then
              none
            else some (x * 9#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 8#32) &&
                          BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 8#32)) =
                      true then
                  none
                else some (x * 8#16)).bind
              fun a =>
              if (a.getLsbD 15 == x.getLsbD 15 && !(a + x).getLsbD 15 == a.getLsbD 15) = true then none
              else some (a + x)) ⊑
            if
                (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 9#32) &&
                      BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 9#32)) =
                  true then
              none
            else some (x * 9#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:97:26: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:97:26: [bv] [0.018044] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬(if (x * 2#16).msb = (x * 3#16).msb ∧ ¬(x * 2#16 + x * 3#16).msb = (x * 2#16).msb then none
            else some (x * 2#16 + x * 3#16)) ⊑
            some (x * 5#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬(if
                ((x * 2#16).getLsbD 15 == (x * 3#16).getLsbD 15 &&
                    !(x * 2#16 + x * 3#16).getLsbD 15 == (x * 2#16).getLsbD 15) =
                  true then
              none
            else some (x * 2#16 + x * 3#16)) ⊑
            some (x * 5#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:107:31: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:107:31: [bv] [0.066826] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    BitVec.signExtend 32 x * 2#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                      BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 2#32 then
                  none
                else some (x * 2#16)).bind
              fun a =>
              (if
                      BitVec.signExtend 32 x * 7#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                        BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 7#32 then
                    none
                  else some (x * 7#16)).bind
                fun y' => if a.msb = y'.msb ∧ ¬(a + y').msb = a.msb then none else some (a + y')) ⊑
            if
                BitVec.signExtend 32 x * 9#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                  BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 9#32 then
              none
            else some (x * 9#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 2#32) &&
                          BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 2#32)) =
                      true then
                  none
                else some (x * 2#16)).bind
              fun a =>
              (if
                      (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 7#32) &&
                            BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 7#32)) =
                        true then
                    none
                  else some (x * 7#16)).bind
                fun a_1 =>
                if (a.getLsbD 15 == a_1.getLsbD 15 && !(a + a_1).getLsbD 15 == a.getLsbD 15) = true then none
                else some (a + a_1)) ⊑
            if
                (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 9#32) &&
                      BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 9#32)) =
                  true then
              none
            else some (x * 9#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:117:32: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:117:32: [bv] [0.067434] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    BitVec.signExtend 32 x * 3#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                      BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 3#32 then
                  none
                else some (x * 3#16)).bind
              fun a =>
              (if
                      BitVec.signExtend 32 x * 7#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                        BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 7#32 then
                    none
                  else some (x * 7#16)).bind
                fun y' => if a.msb = y'.msb ∧ ¬(a + y').msb = a.msb then none else some (a + y')) ⊑
            if
                BitVec.signExtend 32 x * 10#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                  BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 10#32 then
              none
            else some (x * 10#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 3#32) &&
                          BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 3#32)) =
                      true then
                  none
                else some (x * 3#16)).bind
              fun a =>
              (if
                      (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 7#32) &&
                            BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 7#32)) =
                        true then
                    none
                  else some (x * 7#16)).bind
                fun a_1 =>
                if (a.getLsbD 15 == a_1.getLsbD 15 && !(a + a_1).getLsbD 15 == a.getLsbD 15) = true then none
                else some (a + a_1)) ⊑
            if
                (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 10#32) &&
                      BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 10#32)) =
                  true then
              none
            else some (x * 10#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:142:34: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:142:34: [bv] [0.110160] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x then
                  none
                else some (x_1 * x)).bind
              fun a =>
              (if
                      BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                        BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x then
                    none
                  else some (x_1 * x)).bind
                fun x =>
                (if
                        BitVec.signExtend 64 x * 5#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                          BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 5#64 then
                      none
                    else some (x * 5#32)).bind
                  fun y' => if a.msb = y'.msb ∧ ¬(a + y').msb = a.msb then none else some (a + y')) ⊑
            (if
                    BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x then
                  none
                else some (x_1 * x)).bind
              fun x' =>
              if
                  BitVec.signExtend 64 x' * 6#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                    BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x' * 6#64 then
                none
              else some (x' * 6#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ
                              BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x)) =
                      true then
                  none
                else some (x_1 * x)).bind
              fun a =>
              (if
                      (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ
                                BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x) &&
                            BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x)) =
                        true then
                    none
                  else some (x_1 * x)).bind
                fun a_1 =>
                (if
                        (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 a_1 * 5#64) &&
                              BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 a_1 * 5#64)) =
                          true then
                      none
                    else some (a_1 * 5#32)).bind
                  fun a_2 =>
                  if (a.getLsbD 31 == a_2.getLsbD 31 && !(a + a_2).getLsbD 31 == a.getLsbD 31) = true then none
                  else some (a + a_2)) ⊑
            (if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ
                              BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x_1 * BitVec.signExtend 64 x)) =
                      true then
                  none
                else some (x_1 * x)).bind
              fun a =>
              if
                  (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 a * 6#64) &&
                        BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 a * 6#64)) =
                    true then
                none
              else some (a * 6#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:148:26: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:148:26: [bv] [0.034472] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    BitVec.signExtend 32 x * 32767#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                      BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 32767#32 then
                  none
                else some (x * 32767#16)).bind
              fun y' => if x.msb = y'.msb ∧ ¬(x + y').msb = x.msb then none else some (x + y')) ⊑
            some (x <<< 15)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 32767#32) &&
                          BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 32767#32)) =
                      true then
                  none
                else some (x * 32767#16)).bind
              fun a =>
              if (x.getLsbD 15 == a.getLsbD 15 && !(x + a).getLsbD 15 == x.getLsbD 15) = true then none
              else some (x + a)) ⊑
            some (x <<< 15)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:159:35: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:159:35: [bv] [0.066669] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    BitVec.signExtend 32 x * 16383#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                      BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 16383#32 then
                  none
                else some (x * 16383#16)).bind
              fun a =>
              (if
                      BitVec.signExtend 32 x * 16384#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                        BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 16384#32 then
                    none
                  else some (x * 16384#16)).bind
                fun y' => if a.msb = y'.msb ∧ ¬(a + y').msb = a.msb then none else some (a + y')) ⊑
            if
                BitVec.signExtend 32 x * 32767#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                  BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 32767#32 then
              none
            else some (x * 32767#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 16383#32) &&
                          BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 16383#32)) =
                      true then
                  none
                else some (x * 16383#16)).bind
              fun a =>
              (if
                      (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 16384#32) &&
                            BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 16384#32)) =
                        true then
                    none
                  else some (x * 16384#16)).bind
                fun a_1 =>
                if (a.getLsbD 15 == a_1.getLsbD 15 && !(a + a_1).getLsbD 15 == a.getLsbD 15) = true then none
                else some (a + a_1)) ⊑
            if
                (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 32767#32) &&
                      BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 32767#32)) =
                  true then
              none
            else some (x * 32767#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:169:26: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:169:26: [bv] [0.055144] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    BitVec.signExtend 32 x * 16384#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                      BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 16384#32 then
                  none
                else some (x * 16384#16)).bind
              fun a =>
              (if
                      BitVec.signExtend 32 x * 16384#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                        BitVec.twoPow 32 15 ≤ BitVec.signExtend 32 x * 16384#32 then
                    none
                  else some (x * 16384#16)).bind
                fun y' => if a.msb = y'.msb ∧ ¬(a + y').msb = a.msb then none else some (a + y')) ⊑
            some (x <<< 15)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 16
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 16384#32) &&
                          BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 16384#32)) =
                      true then
                  none
                else some (x * 16384#16)).bind
              fun a =>
              (if
                      (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 x * 16384#32) &&
                            BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 x * 16384#32)) =
                        true then
                    none
                  else some (x * 16384#16)).bind
                fun a_1 =>
                if (a.getLsbD 15 == a_1.getLsbD 15 && !(a + a_1).getLsbD 15 == a.getLsbD 15) = true then none
                else some (a + a_1)) ⊑
            some (x <<< 15)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:171:87: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 84.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 62.631000ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:173:99: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 83.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 62.053459ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:175:99: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 87.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 63.330333ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:180:86: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:180:86: [bv] [0.026263] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if (x_1.msb || x.msb) = (x_1.msb && x.msb) ∧ ¬((x_1 ||| x) + (x_1 &&& x)).msb = (x_1.msb || x.msb) then none
            else some ((x_1 ||| x) + (x_1 &&& x))) ⊑
            if x_1.msb = x.msb ∧ ¬(x_1 + x).msb = x_1.msb then none else some (x_1 + x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if
                ((!(!x_1.getLsbD 31 && !x.getLsbD 31)) == (x_1.getLsbD 31 && x.getLsbD 31) &&
                    !((x_1 ||| x) + (x_1 &&& x)).getLsbD 31 == !(!x_1.getLsbD 31 && !x.getLsbD 31)) =
                  true then
              none
            else some ((x_1 ||| x) + (x_1 &&& x))) ⊑
            if (x_1.getLsbD 31 == x.getLsbD 31 && !(x_1 + x).getLsbD 31 == x_1.getLsbD 31) = true then none
            else some (x_1 + x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:185:71: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:185:71: [bv] [0.015532] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if (x_1 ||| x) + (x_1 &&& x) < x_1 ||| x ∨ (x_1 ||| x) + (x_1 &&& x) < x_1 &&& x then none
            else some ((x_1 ||| x) + (x_1 &&& x))) ⊑
            if x_1 + x < x_1 ∨ x_1 + x < x then none else some (x_1 + x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if (!((!x_1 ||| x >ᵤ (x_1 ||| x) + (x_1 &&& x)) && !x_1 &&& x >ᵤ (x_1 ||| x) + (x_1 &&& x))) = true then none
            else some ((x_1 ||| x) + (x_1 &&& x))) ⊑
            if (!((!x_1 >ᵤ x_1 + x) && !x >ᵤ x_1 + x)) = true then none else some (x_1 + x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:193:76: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:193:76: [bv] [0.035578] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if (x_1.msb || x.msb) = (x_1.msb && x.msb) ∧ ¬((x_1 ||| x) + (x_1 &&& x)).msb = (x_1.msb || x.msb) then none
            else
              if (x_1 ||| x) + (x_1 &&& x) < x_1 ||| x ∨ (x_1 ||| x) + (x_1 &&& x) < x_1 &&& x then none
              else some ((x_1 ||| x) + (x_1 &&& x))) ⊑
            if x_1.msb = x.msb ∧ ¬(x_1 + x).msb = x_1.msb then none
            else if x_1 + x < x_1 ∨ x_1 + x < x then none else some (x_1 + x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if
                ((!(!x_1.getLsbD 31 && !x.getLsbD 31)) == (x_1.getLsbD 31 && x.getLsbD 31) &&
                    !((x_1 ||| x) + (x_1 &&& x)).getLsbD 31 == !(!x_1.getLsbD 31 && !x.getLsbD 31)) =
                  true then
              none
            else
              if (!((!x_1 ||| x >ᵤ (x_1 ||| x) + (x_1 &&& x)) && !x_1 &&& x >ᵤ (x_1 ||| x) + (x_1 &&& x))) = true then
                none
              else some ((x_1 ||| x) + (x_1 &&& x))) ⊑
            if (x_1.getLsbD 31 == x.getLsbD 31 && !(x_1 + x).getLsbD 31 == x_1.getLsbD 31) = true then none
            else if (!((!x_1 >ᵤ x_1 + x) && !x >ᵤ x_1 + x)) = true then none else some (x_1 + x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:208:33: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:208:33: [bv] [0.061003] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if
                    BitVec.signExtend 16 x_2 * BitVec.signExtend 16 x_1 < BitVec.signExtend 16 (BitVec.twoPow 8 7) ∨
                      BitVec.twoPow 16 7 ≤ BitVec.signExtend 16 x_2 * BitVec.signExtend 16 x_1 then
                  none
                else some (x_2 * x_1)).bind
              fun a =>
              (if
                      BitVec.signExtend 16 x_2 * BitVec.signExtend 16 x < BitVec.signExtend 16 (BitVec.twoPow 8 7) ∨
                        BitVec.twoPow 16 7 ≤ BitVec.signExtend 16 x_2 * BitVec.signExtend 16 x then
                    none
                  else some (x_2 * x)).bind
                fun y' => if a.msb = y'.msb ∧ ¬(a + y').msb = a.msb then none else some (a + y')) ⊑
            some (x_2 * (x_1 + x))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 16 (BitVec.twoPow 8 7) >ᵤ
                              BitVec.signExtend 16 x_2 * BitVec.signExtend 16 x_1) &&
                          BitVec.twoPow 16 7 >ᵤ BitVec.signExtend 16 x_2 * BitVec.signExtend 16 x_1)) =
                      true then
                  none
                else some (x_2 * x_1)).bind
              fun a =>
              (if
                      (!((!BitVec.signExtend 16 (BitVec.twoPow 8 7) >ᵤ
                                BitVec.signExtend 16 x_2 * BitVec.signExtend 16 x) &&
                            BitVec.twoPow 16 7 >ᵤ BitVec.signExtend 16 x_2 * BitVec.signExtend 16 x)) =
                        true then
                    none
                  else some (x_2 * x)).bind
                fun a_1 =>
                if (a.getLsbD 7 == a_1.getLsbD 7 && !(a + a_1).getLsbD 7 == a.getLsbD 7) = true then none
                else some (a + a_1)) ⊑
            some (x_2 * (x_1 + x))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:214:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:220:30: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:225:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:226:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:226:50: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun x' => sorry.bind fun y' => some (x' + y')) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun x' => sorry.bind fun y' => some (x' + y')) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:227:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:227:78: 'add_of_selects_thm' has already been declared
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:246:114: Bitwuzla proved the goal after 77.000000ms
LeanSAT proved the goal after 82.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 62.290917ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd2_proof.lean:248:120: Bitwuzla proved the goal after 80.000000ms
LeanSAT proved the goal after 84.000000ms: rewriting 11.041958ms, bitblasting 0.000000ms, SAT solving 63.240958ms, LRAT processing 0.000000ms
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gadd2_proof
