⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gshifthlogic_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:7:95: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 74.000000ms: rewriting 12.446875ms, bitblasting 0.000000ms, SAT solving 57.870792ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:13:45: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:13:45: [bv] [0.026051] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 - x_1.sdiv 42#16 * 42#16 ||| x <<< 5) <<< 7) ⊑
            (if ((x_1 - x_1.sdiv 42#16 * 42#16) <<< 7).sshiftRight 7 = x_1 - x_1.sdiv 42#16 * 42#16 then none
                else some ((x_1 - x_1.sdiv 42#16 * 42#16) <<< 7)).bind
              fun y' => some (x <<< 12 ||| y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 16
      a✝ :
        ¬some ((x_1 + (~~~(x_1.sdiv 42#16 * 42#16) + 1#16) ||| x <<< 5) <<< 7) ⊑
            (if
                    (((x_1 + (~~~(x_1.sdiv 42#16 * 42#16) + 1#16)) <<< 7).sshiftRight 7 ==
                        x_1 + (~~~(x_1.sdiv 42#16 * 42#16) + 1#16)) =
                      true then
                  none
                else some ((x_1 + (~~~(x_1.sdiv 42#16 * 42#16) + 1#16)) <<< 7)).bind
              fun a => some (x <<< 12 ||| a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:15:97: Bitwuzla proved the goal after 77.000000ms
LeanSAT proved the goal after 76.000000ms: rewriting 11.246583ms, bitblasting 0.000000ms, SAT solving 61.072583ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:18:109: Bitwuzla proved the goal after 87.000000ms
LeanSAT proved the goal after 860.000000ms: rewriting 18.986292ms, bitblasting 341.340375ms, SAT solving 59.828125ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:22:76: Bitwuzla proved the goal after 82.000000ms
LeanSAT proved the goal after 238.000000ms: rewriting 13.461542ms, bitblasting 73.301250ms, SAT solving 62.319250ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:27:96: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:27:96: [bv] [0.031650] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬((if BitVec.twoPow 128 63 <<< 1 ≤ BitVec.setWidth 128 x * 52#128 then none else some (x * 52#64)).bind
              fun x' => some (x' >>> 2)) ⊑
            if
                BitVec.signExtend 128 x * 13#128 < BitVec.signExtend 128 (BitVec.twoPow 64 63) ∨
                  BitVec.twoPow 128 63 ≤ BitVec.signExtend 128 x * 13#128 then
              none
            else if BitVec.twoPow 128 63 <<< 1 ≤ BitVec.setWidth 128 x * 13#128 then none else some (x * 13#64)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬((if (!BitVec.twoPow 128 63 <<< 1 >ᵤ BitVec.zeroExtend 128 x * 52#128) = true then none
                else some (x * 52#64)).bind
              fun a => some (a >>> 2)) ⊑
            if
                (!((!BitVec.signExtend 128 (BitVec.twoPow 64 63) >ᵤ BitVec.signExtend 128 x * 13#128) &&
                      BitVec.twoPow 128 63 >ᵤ BitVec.signExtend 128 x * 13#128)) =
                  true then
              none
            else
              if (!BitVec.twoPow 128 63 <<< 1 >ᵤ BitVec.zeroExtend 128 x * 13#128) = true then none
              else some (x * 13#64)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:34:96: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:34:96: [bv] [0.038303] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬((if
                    BitVec.signExtend 128 x * 52#128 < BitVec.signExtend 128 (BitVec.twoPow 64 63) ∨
                      BitVec.twoPow 128 63 ≤ BitVec.signExtend 128 x * 52#128 then
                  none
                else
                  if BitVec.twoPow 128 63 <<< 1 ≤ BitVec.setWidth 128 x * 52#128 then none else some (x * 52#64)).bind
              fun x' => some (x' >>> 2)) ⊑
            if
                BitVec.signExtend 128 x * 13#128 < BitVec.signExtend 128 (BitVec.twoPow 64 63) ∨
                  BitVec.twoPow 128 63 ≤ BitVec.signExtend 128 x * 13#128 then
              none
            else if BitVec.twoPow 128 63 <<< 1 ≤ BitVec.setWidth 128 x * 13#128 then none else some (x * 13#64)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 128 (BitVec.twoPow 64 63) >ᵤ BitVec.signExtend 128 x * 52#128) &&
                          BitVec.twoPow 128 63 >ᵤ BitVec.signExtend 128 x * 52#128)) =
                      true then
                  none
                else
                  if (!BitVec.twoPow 128 63 <<< 1 >ᵤ BitVec.zeroExtend 128 x * 52#128) = true then none
                  else some (x * 52#64)).bind
              fun a => some (a >>> 2)) ⊑
            if
                (!((!BitVec.signExtend 128 (BitVec.twoPow 64 63) >ᵤ BitVec.signExtend 128 x * 13#128) &&
                      BitVec.twoPow 128 63 >ᵤ BitVec.signExtend 128 x * 13#128)) =
                  true then
              none
            else
              if (!BitVec.twoPow 128 63 <<< 1 >ᵤ BitVec.zeroExtend 128 x * 13#128) = true then none
              else some (x * 13#64)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:36:91: Bitwuzla proved the goal after 87.000000ms
LeanSAT proved the goal after 92.000000ms: rewriting 20.718750ms, bitblasting 0.000000ms, SAT solving 62.984542ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthlogic_proof.lean:38:102: Bitwuzla proved the goal after 88.000000ms
LeanSAT proved the goal after 92.000000ms: rewriting 22.901583ms, bitblasting 0.000000ms, SAT solving 62.760500ms, LRAT processing 0.000000ms
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gshifthlogic_proof
