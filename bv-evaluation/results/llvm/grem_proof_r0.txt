⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.grem_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/grem_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/grem_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/grem_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:7:64: Bitwuzla proved the goal after 67.000000ms
LeanSAT proved the goal after 325.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 171.823666ms, LRAT trimming 37.296709ms, LRAT checking 74.745208ms
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:13:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:19:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:21:40: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:21:40: [bv] [0.016316] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 32
      a✝ : ¬(sorry.bind fun y' => if y' = 0#32 then none else some (x_1 % y')) ⊑ sorry.bind fun y' => some (x_1 &&& y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 32
      a✝ :
        ¬(sorry.bind fun a => if (a == 0#32) = true then none else some (x_1 % a)) ⊑
            sorry.bind fun y' => some (x_1 &&& y')
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:28:54: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:28:54: [bv] [0.029355] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ BitVec.setWidth 32 x then none else some (32#32 <<< (x.toNat % 4294967296))).bind fun y' =>
              if y' = 0#32 then none else some (x_1 % y')) ⊑
            (if 32#32 <<< (x.toNat % 4294967296) >>> (x.toNat % 4294967296) = 32#32 then none
                else if 32#32 ≤ BitVec.setWidth 32 x then none else some (32#32 <<< (x.toNat % 4294967296))).bind
              fun x => some (x_1 &&& x + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ BitVec.zeroExtend 32 x) = true then none else some (32#32 <<< (x.toNat % 4294967296))).bind
              fun a => if (a == 0#32) = true then none else some (x_1 % a)) ⊑
            (if (32#32 <<< (x.toNat % 4294967296) >>> (x.toNat % 4294967296) == 32#32) = true then none
                else
                  if (!32#32 >ᵤ BitVec.zeroExtend 32 x) = true then none
                  else some (32#32 <<< (x.toNat % 4294967296))).bind
              fun a => some (x_1 &&& a + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:30:88: Bitwuzla proved the goal after 79.000000ms
LeanSAT proved the goal after 1825.000000ms: rewriting 11.633750ms, bitblasting 44.313791ms, SAT solving 1025.962000ms, LRAT trimming 293.891375ms, LRAT checking 383.103625ms
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:32:86: Bitwuzla proved the goal after 83.000000ms
LeanSAT proved the goal after 1731.000000ms: rewriting 13.275042ms, bitblasting 39.445792ms, SAT solving 960.973125ms, LRAT trimming 290.383167ms, LRAT checking 361.828000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:34:67: Bitwuzla proved the goal after 70.000000ms
LeanSAT proved the goal after 284.000000ms: rewriting 0.000000ms, bitblasting 11.649042ms, SAT solving 118.463458ms, LRAT trimming 32.648625ms, LRAT checking 87.306291ms
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:36:107: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.r2xI2DLc:3:413: expected terms of same sort at indices 0 and 1 as argument to '='
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:36:107: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 8
    a✝ : ¬BitVec.setWidth 32 (BitVec.signExtend 64 (BitVec.setWidth 32 x * 4#32) % 4#64) = 0#32
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 8
    a✝ : (!BitVec.zeroExtend 32 (BitVec.signExtend 64 (BitVec.zeroExtend 32 x * 4#32) % 4#64) == 0#32) = true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 8: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 32 ((sext 64 ((zext 32 var0) * 0x00000004#32)) %ᵤ 0x0000000000000004#64)) == 0x00000000#32)
[bv] [0.066765] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 8))
      (assert (not (= ((_ zero_extend 0) (ite (= #b0000000000000000000000000000000000000000000000000000000000000000 #b0000000000000000000000000000000000000000000000000000000000000100) #b0000000000000000000000000000000000000000000000000000000000000000 (bvurem ((_ sign_extend 32) (bvmul ((_ zero_extend 24) x_0) #b00000000000000000000000000000100)) #b0000000000000000000000000000000000000000000000000000000000000100))) #b00000000000000000000000000000000)))
      (check-sat)
      (exit)
      
  [bv] [0.063741] Proving with bitwuzla
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:38:86: Bitwuzla proved the goal after 72.000000ms
LeanSAT proved the goal after 634.000000ms: rewriting 0.000000ms, bitblasting 13.226542ms, SAT solving 383.050208ms, LRAT trimming 87.432916ms, LRAT checking 112.177958ms
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:40:113: Bitwuzla proved the goal after 80.000000ms
LeanSAT proved the goal after 1714.000000ms: rewriting 12.365750ms, bitblasting 42.206375ms, SAT solving 923.741541ms, LRAT trimming 289.654083ms, LRAT checking 375.229583ms
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:45:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:45:20: [bv] [0.025316] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬Option.map (fun div => x - div * x)
              (if x = 0#32 ∨ x = BitVec.intMin 32 ∧ x = 4294967295#32 then none
              else some (if x = 0#32 then 0#32 else 1#32)) ⊑
            some 0#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬Option.map (fun div => x + (~~~(div * x) + 1#32))
              (if (!(!x == 0#32 && !(x == BitVec.intMin 32 && x == 4294967295#32))) = true then none
              else some (if (x == 0#32) = true then 0#32 else 1#32)) ⊑
            some 0#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:57:42: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:57:42: [bv] [0.057737] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      x_1 : BitVec 64
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x =>
              if BitVec.setWidth 64 x = 0#64 then none else some (x_1 % BitVec.setWidth 64 x)) ⊑
            (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x =>
              (if
                      (BitVec.setWidth 64 x).msb = (18446744073709551615#64).msb ∧
                        ¬(BitVec.setWidth 64 x + 18446744073709551615#64).msb = (BitVec.setWidth 64 x).msb then
                    none
                  else some (BitVec.setWidth 64 x + 18446744073709551615#64)).bind
                fun y' => some (x_1 &&& y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      x_1 : BitVec 64
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              if (BitVec.zeroExtend 64 a == 0#64) = true then none else some (x_1 % BitVec.zeroExtend 64 a)) ⊑
            (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if
                      ((BitVec.zeroExtend 64 a).getLsbD 63 &&
                          !(BitVec.zeroExtend 64 a + 18446744073709551615#64).getLsbD 63 ==
                              (BitVec.zeroExtend 64 a).getLsbD 63) =
                        true then
                    none
                  else some (BitVec.zeroExtend 64 a + 18446744073709551615#64)).bind
                fun a => some (x_1 &&& a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:64:82: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:64:82: [bv] [0.036955] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x =>
              if BitVec.setWidth 64 x = 0#64 then none else some (BitVec.setWidth 64 x_1 % BitVec.setWidth 64 x)) ⊑
            (if (4294967295#32 <<< x.toNat).sshiftRight x.toNat = 4294967295#32 then none
                else if 32#32 ≤ x then none else some (4294967295#32 <<< x.toNat)).bind
              fun x => some (BitVec.setWidth 64 x_1 &&& (BitVec.setWidth 64 x ^^^ 4294967295#64))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              if (BitVec.zeroExtend 64 a == 0#64) = true then none
              else some (BitVec.zeroExtend 64 x_1 % BitVec.zeroExtend 64 a)) ⊑
            (if ((4294967295#32 <<< x.toNat).sshiftRight x.toNat == 4294967295#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (4294967295#32 <<< x.toNat)).bind
              fun a => some (BitVec.zeroExtend 64 x_1 &&& (BitVec.zeroExtend 64 a ^^^ 4294967295#64))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:68:54: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:68:54: [bv] [0.018356] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if (x >>> 11 &&& 4#32) + 4#32 = 0#32 then none else some (x_1 % ((x >>> 11 &&& 4#32) + 4#32))) ⊑
            some (x_1 &&& (x >>> 11 &&& 4#32 ||| 3#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if ((x >>> 11 &&& 4#32) + 4#32 == 0#32) = true then none else some (x_1 % ((x >>> 11 &&& 4#32) + 4#32))) ⊑
            some (x_1 &&& (x >>> 11 &&& 4#32 ||| 3#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:81:72: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:81:72: [bv] [0.128588] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind fun a_1 =>
                (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x =>
                  if (a &&& a_1) + x = 0#32 then none else some (x_1 % ((a &&& a_1) + x))) ⊑
            (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                  else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
                fun a_1 =>
                (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                    else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                  fun x => some (x_1 &&& (a &&& a_1) + x + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind fun a_1 =>
                (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_2 =>
                  if ((a &&& a_1) + a_2 == 0#32) = true then none else some (x_1 % ((a &&& a_1) + a_2))) ⊑
            (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
                fun a_1 =>
                (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                    else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                  fun a_2 => some (x_1 &&& (a &&& a_1) + a_2 + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:94:72: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:94:72: [bv] [0.128360] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind fun a =>
              (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a_1 =>
                (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x =>
                  if (a &&& a_1) + x = 0#32 then none else some (x_1 % ((a &&& a_1) + x))) ⊑
            (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
              fun a =>
              (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                  else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                fun a_1 =>
                (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                    else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                  fun x => some (x_1 &&& (a &&& a_1) + x + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind fun a =>
              (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_1 =>
                (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_2 =>
                  if ((a &&& a_1) + a_2 == 0#32) = true then none else some (x_1 % ((a &&& a_1) + a_2))) ⊑
            (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
              fun a =>
              (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                fun a_1 =>
                (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                    else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                  fun a_2 => some (x_1 &&& (a &&& a_1) + a_2 + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:107:72: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:107:72: [bv] [0.131752] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a_1 =>
                (if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind fun x =>
                  if a + (a_1 &&& x) = 0#32 then none else some (x_1 % (a + (a_1 &&& x)))) ⊑
            (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                  else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                fun a_1 =>
                (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                    else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
                  fun x => some (x_1 &&& a + (a_1 &&& x) + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_1 =>
                (if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind fun a_2 =>
                  if (a + (a_1 &&& a_2) == 0#32) = true then none else some (x_1 % (a + (a_1 &&& a_2)))) ⊑
            (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                fun a_1 =>
                (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                    else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
                  fun a_2 => some (x_1 &&& a + (a_1 &&& a_2) + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:120:72: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:120:72: [bv] [0.132335] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind fun a_1 =>
                (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x =>
                  if a + (a_1 &&& x) = 0#32 then none else some (x_1 % (a + (a_1 &&& x)))) ⊑
            (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                  else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
                fun a_1 =>
                (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                    else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                  fun x => some (x_1 &&& a + (a_1 &&& x) + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind fun a_1 =>
                (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_2 =>
                  if (a + (a_1 &&& a_2) == 0#32) = true then none else some (x_1 % (a + (a_1 &&& a_2)))) ⊑
            (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
                fun a_1 =>
                (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                    else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                  fun a_2 => some (x_1 &&& a + (a_1 &&& a_2) + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:124:48: Bitwuzla proved the goal after 80.000000ms
LeanSAT proved the goal after 486.000000ms: rewriting 13.561125ms, bitblasting 49.277834ms, SAT solving 114.273042ms, LRAT trimming 66.736417ms, LRAT checking 188.610667ms
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:130:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:137:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:138:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:138:50: [bv] [0.038086] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun y' =>
              Option.map (fun div => 42#32 - div * y')
                (if y' = 0#32 ∨ 42#32 = BitVec.intMin 32 ∧ y' = 4294967295#32 then none else some ((42#32).sdiv y'))) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              Option.map (fun div => 43#32 + ~~~(div * a))
                (if (!(!a == 0#32 && !(42#32 == BitVec.intMin 32 && a == 4294967295#32))) = true then none
                else some ((42#32).sdiv a))) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:144:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:149:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:149:20: [bv] [0.037108] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun y' =>
              Option.map (fun div => 42#32 - div * y')
                (if y' = 0#32 ∨ 42#32 = BitVec.intMin 32 ∧ y' = 4294967295#32 then none else some ((42#32).sdiv y'))) ⊑
            some 6#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              Option.map (fun div => 43#32 + ~~~(div * a))
                (if (!(!a == 0#32 && !(42#32 == BitVec.intMin 32 && a == 4294967295#32))) = true then none
                else some ((42#32).sdiv a))) ⊑
            some 6#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:155:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:160:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:161:51: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:161:51: [bv] [0.013784] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ : ¬(sorry.bind fun y' => if y' = 0#32 then none else some (42#32 % y')) ⊑ sorry
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ : ¬(sorry.bind fun a => if (a == 0#32) = true then none else some (42#32 % a)) ⊑ sorry
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:167:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:170:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:170:20: [bv] [0.013892] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ : ¬(sorry.bind fun y' => if y' = 0#32 then none else some (42#32 % y')) ⊑ some 6#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ : ¬(sorry.bind fun a => if (a == 0#32) = true then none else some (42#32 % a)) ⊑ some 6#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.grem_proof
