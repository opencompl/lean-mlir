⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.grem_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/grem_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/grem_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/grem_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:7:64: Bitwuzla proved the goal after 71.000000ms
LeanSAT proved the goal after 318.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 168.094250ms, LRAT processing 39.317584ms
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:13:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:19:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:21:40: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:21:40: [bv] [0.015787] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 32
      a✝ : ¬(sorry.bind fun y' => if y' = 0#32 then none else some (x_1 % y')) ⊑ sorry.bind fun y' => some (x_1 &&& y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 32
      a✝ :
        ¬(sorry.bind fun a => if (a == 0#32) = true then none else some (x_1 % a)) ⊑
            sorry.bind fun y' => some (x_1 &&& y')
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:23:88: Bitwuzla proved the goal after 77.000000ms
LeanSAT proved the goal after 1718.000000ms: rewriting 11.403958ms, bitblasting 43.036125ms, SAT solving 942.615416ms, LRAT processing 287.897417ms
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:25:86: Bitwuzla proved the goal after 81.000000ms
LeanSAT proved the goal after 1674.000000ms: rewriting 13.185792ms, bitblasting 39.411083ms, SAT solving 941.508458ms, LRAT processing 276.068375ms
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:27:67: Bitwuzla proved the goal after 72.000000ms
LeanSAT proved the goal after 273.000000ms: rewriting 0.000000ms, bitblasting 11.533875ms, SAT solving 118.106875ms, LRAT processing 32.349250ms
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:29:86: Bitwuzla proved the goal after 73.000000ms
LeanSAT proved the goal after 625.000000ms: rewriting 0.000000ms, bitblasting 11.485333ms, SAT solving 390.612167ms, LRAT processing 82.135041ms
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:31:113: Bitwuzla proved the goal after 81.000000ms
LeanSAT proved the goal after 1619.000000ms: rewriting 11.975750ms, bitblasting 38.213375ms, SAT solving 883.773917ms, LRAT processing 271.945250ms
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:36:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:36:20: [bv] [0.022267] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬Option.map (fun div => x - div * x)
              (if x = 0#32 ∨ x = BitVec.intMin 32 ∧ x = 4294967295#32 then none
              else some (if x = 0#32 then 0#32 else 1#32)) ⊑
            some 0#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬Option.map (fun div => x + (~~~(div * x) + 1#32))
              (if (!(!x == 0#32 && !(x == BitVec.intMin 32 && x == 4294967295#32))) = true then none
              else some (if (x == 0#32) = true then 0#32 else 1#32)) ⊑
            some 0#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:40:54: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:40:54: [bv] [0.016337] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if (x >>> 11 &&& 4#32) + 4#32 = 0#32 then none else some (x_1 % ((x >>> 11 &&& 4#32) + 4#32))) ⊑
            some (x_1 &&& (x >>> 11 &&& 4#32 ||| 3#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬(if ((x >>> 11 &&& 4#32) + 4#32 == 0#32) = true then none else some (x_1 % ((x >>> 11 &&& 4#32) + 4#32))) ⊑
            some (x_1 &&& (x >>> 11 &&& 4#32 ||| 3#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:53:72: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:53:72: [bv] [0.120290] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind fun a_1 =>
                (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x =>
                  if (a &&& a_1) + x = 0#32 then none else some (x_1 % ((a &&& a_1) + x))) ⊑
            (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                  else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
                fun a_1 =>
                (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                    else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                  fun x => some (x_1 &&& (a &&& a_1) + x + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind fun a_1 =>
                (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_2 =>
                  if ((a &&& a_1) + a_2 == 0#32) = true then none else some (x_1 % ((a &&& a_1) + a_2))) ⊑
            (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
                fun a_1 =>
                (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                    else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                  fun a_2 => some (x_1 &&& (a &&& a_1) + a_2 + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:66:72: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:66:72: [bv] [0.119253] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind fun a =>
              (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a_1 =>
                (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x =>
                  if (a &&& a_1) + x = 0#32 then none else some (x_1 % ((a &&& a_1) + x))) ⊑
            (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
              fun a =>
              (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                  else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                fun a_1 =>
                (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                    else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                  fun x => some (x_1 &&& (a &&& a_1) + x + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind fun a =>
              (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_1 =>
                (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_2 =>
                  if ((a &&& a_1) + a_2 == 0#32) = true then none else some (x_1 % ((a &&& a_1) + a_2))) ⊑
            (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
              fun a =>
              (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                fun a_1 =>
                (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                    else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                  fun a_2 => some (x_1 &&& (a &&& a_1) + a_2 + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:79:72: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:79:72: [bv] [0.126159] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a_1 =>
                (if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind fun x =>
                  if a + (a_1 &&& x) = 0#32 then none else some (x_1 % (a + (a_1 &&& x)))) ⊑
            (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                  else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                fun a_1 =>
                (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                    else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
                  fun x => some (x_1 &&& a + (a_1 &&& x) + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_1 =>
                (if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind fun a_2 =>
                  if (a + (a_1 &&& a_2) == 0#32) = true then none else some (x_1 % (a + (a_1 &&& a_2)))) ⊑
            (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                fun a_1 =>
                (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                    else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
                  fun a_2 => some (x_1 &&& a + (a_1 &&& a_2) + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:92:72: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:92:72: [bv] [0.124796] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind fun a_1 =>
                (if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x =>
                  if a + (a_1 &&& x) = 0#32 then none else some (x_1 % (a + (a_1 &&& x)))) ⊑
            (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                  else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
                fun a_1 =>
                (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                    else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
                  fun x => some (x_1 &&& a + (a_1 &&& x) + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              (if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind fun a_1 =>
                (if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a_2 =>
                  if (a + (a_1 &&& a_2) == 0#32) = true then none else some (x_1 % (a + (a_1 &&& a_2)))) ⊑
            (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
                fun a_1 =>
                (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                    else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
                  fun a_2 => some (x_1 &&& a + (a_1 &&& a_2) + 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:96:48: Bitwuzla proved the goal after 81.000000ms
LeanSAT proved the goal after 463.000000ms: rewriting 12.191166ms, bitblasting 47.987916ms, SAT solving 118.524709ms, LRAT processing 63.166000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:102:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:109:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:110:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:110:50: [bv] [0.034389] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun y' =>
              Option.map (fun div => 42#32 - div * y')
                (if y' = 0#32 ∨ 42#32 = BitVec.intMin 32 ∧ y' = 4294967295#32 then none else some ((42#32).sdiv y'))) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              Option.map (fun div => 43#32 + ~~~(div * a))
                (if (!(!a == 0#32 && !(42#32 == BitVec.intMin 32 && a == 4294967295#32))) = true then none
                else some ((42#32).sdiv a))) ⊑
            sorry
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:116:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:121:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:121:20: [bv] [0.033473] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun y' =>
              Option.map (fun div => 42#32 - div * y')
                (if y' = 0#32 ∨ 42#32 = BitVec.intMin 32 ∧ y' = 4294967295#32 then none else some ((42#32).sdiv y'))) ⊑
            some 6#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              Option.map (fun div => 43#32 + ~~~(div * a))
                (if (!(!a == 0#32 && !(42#32 == BitVec.intMin 32 && a == 4294967295#32))) = true then none
                else some ((42#32).sdiv a))) ⊑
            some 6#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:127:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:132:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:133:51: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:133:51: [bv] [0.012986] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ : ¬(sorry.bind fun y' => if y' = 0#32 then none else some (42#32 % y')) ⊑ sorry
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ : ¬(sorry.bind fun a => if (a == 0#32) = true then none else some (42#32 % a)) ⊑ sorry
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:139:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:142:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/grem_proof.lean:142:20: [bv] [0.013100] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ : ¬(sorry.bind fun y' => if y' = 0#32 then none else some (42#32 % y')) ⊑ some 6#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ : ¬(sorry.bind fun a => if (a == 0#32) = true then none else some (42#32 % a)) ⊑ some 6#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.grem_proof
