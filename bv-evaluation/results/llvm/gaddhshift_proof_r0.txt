⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gaddhshift_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gaddhshift_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gaddhshift_proof.lean:11:8: error: (kernel) declaration has metavariables 'flip_add_of_shift_neg_thm'
[bv] [0.073631] Normalizing goal
  [Meta.synthInstance] [0.001829] ✅️ Decidable
        ((if True ∧ ((0#8 - x✝) <<< x✝¹).sshiftRight x✝¹.toNat = 0#8 - x✝ then none
          else
            if True ∧ (0#8 - x✝) <<< x✝¹ >>> x✝¹ = 0#8 - x✝ then none
            else if x✝¹ ≥ ↑8 then none else some ((0#8 - x✝) <<< x✝¹ + x✝²)) ⊑
          if x✝¹ ≥ ↑8 then none else some (x✝² - x✝ <<< x✝¹))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 8
      x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if True ∧ ((0#8 - x✝) <<< x✝¹).sshiftRight x✝¹.toNat = 0#8 - x✝ then none
            else
              if True ∧ (0#8 - x✝) <<< x✝¹ >>> x✝¹ = 0#8 - x✝ then none
              else if x✝¹ ≥ ↑8 then none else some ((0#8 - x✝) <<< x✝¹ + x✝²)) ⊑
            if x✝¹ ≥ ↑8 then none else some (x✝² - x✝ <<< x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 8
      x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (((~~~x✝ + 1#8) <<< x✝¹).sshiftRight x✝¹.toNat == ~~~x✝ + 1#8) = true then none
            else
              if ((~~~x✝ + 1#8) <<< x✝¹ >>> x✝¹ == ~~~x✝ + 1#8) = true then none
              else if (!8#8 >ᵤ x✝¹) = true then none else some ((~~~x✝ + 1#8) <<< x✝¹ + x✝²)) ⊑
            if (!8#8 >ᵤ x✝¹) = true then none else some (x✝² + (~~~(x✝ <<< x✝¹) + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
