⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
Bitwuzla proved the goal after 68.763119ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.249040ms: rewriting 9.933650ms, bitblasting 0.000000ms, SAT solving 61.722950ms, LRAT trimming 0.000000ms, LRAT checking 3.411730ms
Bitwuzla proved the goal after 78.498669ms, solving context: 7.000000ms
LeanSAT proved the goal after 864.008027ms: rewriting 20.686330ms, bitblasting 17.807590ms, SAT solving 358.626749ms, LRAT trimming 273.139978ms, LRAT checking 163.980880ms
Bitwuzla proved the goal after 76.687810ms, solving context: 2.000000ms
LeanSAT proved the goal after 100.142590ms: rewriting 25.868290ms, bitblasting 0.000000ms, SAT solving 60.015520ms, LRAT trimming 2.549960ms, LRAT checking 9.129810ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gdistribute_proof.lean:44:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gdistribute_proof.lean:44:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gdistribute_proof.lean:39:8: error: (kernel) declaration has metavariables 'factorize4_thm'
[bv] [0.025428] Normalizing goal
  [Meta.synthInstance] [0.001455] ✅️ Decidable
        ((if 1#32 ≥ ↑32 then none else some (x✝ <<< 1#32 * x✝¹ - x✝¹ * x✝)) ⊑ some (x✝ * x✝¹))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ : ¬(if 1#32 ≥ ↑32 then none else some (x✝ <<< 1#32 * x✝¹ - x✝¹ * x✝)) ⊑ some (x✝ * x✝¹)
      ⊢ False
  [Meta.appBuilder] [0.001009] ✅️ f: HAdd.hAdd, xs: [~~~(x✝¹ * x✝), 1#32]
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ : ¬some (x✝ <<< 1 * x✝¹ + (~~~(x✝¹ * x✝) + 1#32)) ⊑ some (x✝ * x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gdistribute_proof.lean:53:4: error: The SAT solver timed out while solving the problem.
Consider increasing the timeout with `set_option sat.timeout <sec>`.
If solving your problem relies inherently on using associativity or commutativity, consider enabling the `bv.ac_nf` option.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gdistribute_proof.lean:48:8: error: (kernel) declaration has metavariables 'factorize5_thm'
[bv] [0.017887] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ : ¬x✝ * 2#32 * x✝¹ - x✝¹ * x✝ = x✝ * x✝¹
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ : (!x✝ * 2#32 * x✝¹ + (~~~(x✝¹ * x✝) + 1#32) == x✝ * x✝¹) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x✝
[Meta.Tactic.bv] New atom of width 32: x✝¹
[Meta.Tactic.bv] Reflected bv logical expression: !((((var0 * 0x00000002#32) * var1) + ((~ (var1 * var0)) + 0x00000001#32)) == (var0 * var1))
[bv] [0.061500] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= (bvadd (bvmul (bvmul x_0 #b00000000000000000000000000000010) x_1) (bvadd (bvnot (bvmul x_1 x_0)) #b00000000000000000000000000000001)) (bvmul x_0 x_1))))
      (check-sat)
      (exit)
      
  [bv] [0.060477] Proving with bitwuzla
    [Meta.Tactic.bv] solving_context::time_solve: 11ms
[bv] [0.020394] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case some.some.h
      x✝¹ x✝ : BitVec 32
      a✝ : ¬x✝ * 2#32 * x✝¹ - x✝¹ * x✝ = x✝ * x✝¹
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case some.some.h
      x✝¹ x✝ : BitVec 32
      a✝ : (!x✝ * 2#32 * x✝¹ + (~~~(x✝¹ * x✝) + 1#32) == x✝ * x✝¹) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x✝
[Meta.Tactic.bv] New atom of width 32: x✝¹
[Meta.Tactic.bv] Reflected bv logical expression: !((((var0 * 0x00000002#32) * var1) + ((~ (var1 * var0)) + 0x00000001#32)) == (var0 * var1))
[bv] [10.642002] Preparing LRAT reflection term
  [bv] [0.050929] Bitblasting BVLogicalExpr to AIG
  [Meta.Tactic.bv] AIG has 43862 nodes.
  [sat] [0.145113] Converting AIG to CNF
  [sat] [10.445832] Obtaining external proof certificate
    [sat] [0.104141] Serializing SAT problem to DIMACS file
    [sat] [10.341119] Running SAT solver
Bitwuzla proved the goal after 66.369780ms, solving context: 0.000000ms
LeanSAT proved the goal after 67.016030ms: rewriting 9.771250ms, bitblasting 0.000000ms, SAT solving 54.285350ms, LRAT trimming 0.000000ms, LRAT checking 1.481320ms
