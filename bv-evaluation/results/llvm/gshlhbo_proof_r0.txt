⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gshlhbo_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:8:106: Bitwuzla proved the goal after 85.000000ms
LeanSAT proved the goal after 107.000000ms: rewriting 19.275167ms, bitblasting 0.000000ms, SAT solving 57.824959ms, LRAT trimming 0.000000ms, LRAT checking 10.574250ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:17:38: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:17:38: [bv] [0.036959] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some ((x_1 - x_1.sdiv 42#8 * 42#8 - x >>> 3) <<< 3) ⊑
            (if
                    (BitVec.signExtend 9 (x_1 - x_1.sdiv 42#8 * 42#8) - BitVec.signExtend 9 (x >>> 3)).msb =
                      (BitVec.signExtend 9 (x_1 - x_1.sdiv 42#8 * 42#8) - BitVec.signExtend 9 (x >>> 3)).getMsbD 1 then
                  some (x_1 - x_1.sdiv 42#8 * 42#8 - x >>> 3)
                else none).bind
              fun x' => some (x' <<< 3)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some ((x_1 + (~~~(x_1.sdiv 42#8 * 42#8) + 1#8) + (~~~(x >>> 3) + 1#8)) <<< 3) ⊑
            (if
                    ((BitVec.signExtend 9 (x_1 + (~~~(x_1.sdiv 42#8 * 42#8) + 1#8)) +
                              (~~~BitVec.signExtend 9 (x >>> 3) + 1#9)).getLsbD
                          8 ==
                        (BitVec.signExtend 9 (x_1 + (~~~(x_1.sdiv 42#8 * 42#8) + 1#8)) +
                              (~~~BitVec.signExtend 9 (x >>> 3) + 1#9)).getMsbD
                          1) =
                      true then
                  some (x_1 + (~~~(x_1.sdiv 42#8 * 42#8) + 1#8) + (~~~(x >>> 3) + 1#8))
                else none).bind
              fun a => some (a <<< 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:20:94: Bitwuzla proved the goal after 84.000000ms
LeanSAT proved the goal after 95.000000ms: rewriting 17.693083ms, bitblasting 0.000000ms, SAT solving 61.917792ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:23:108: Bitwuzla proved the goal after 89.000000ms
LeanSAT proved the goal after 94.000000ms: rewriting 17.473667ms, bitblasting 0.000000ms, SAT solving 60.522583ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:26:104: Bitwuzla proved the goal after 82.000000ms
LeanSAT proved the goal after 96.000000ms: rewriting 18.634167ms, bitblasting 0.000000ms, SAT solving 58.248833ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:30:60: Bitwuzla proved the goal after 87.000000ms
LeanSAT proved the goal after 96.000000ms: rewriting 20.242959ms, bitblasting 0.000000ms, SAT solving 60.749458ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:39:38: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:39:38: [bv] [0.036514] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some ((x_1 - x_1.sdiv 42#8 * 42#8 - (x >>> 2 &&& 13#8)) <<< 2) ⊑
            (if
                    (BitVec.signExtend 9 (x_1 - x_1.sdiv 42#8 * 42#8) - BitVec.signExtend 9 (x >>> 2 &&& 13#8)).msb =
                      (BitVec.signExtend 9 (x_1 - x_1.sdiv 42#8 * 42#8) -
                            BitVec.signExtend 9 (x >>> 2 &&& 13#8)).getMsbD
                        1 then
                  some (x_1 - x_1.sdiv 42#8 * 42#8 - (x >>> 2 &&& 13#8))
                else none).bind
              fun x' => some (x' <<< 2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some ((x_1 + (~~~(x_1.sdiv 42#8 * 42#8) + 1#8) + (~~~(x >>> 2 &&& 13#8) + 1#8)) <<< 2) ⊑
            (if
                    ((BitVec.signExtend 9 (x_1 + (~~~(x_1.sdiv 42#8 * 42#8) + 1#8)) +
                              (~~~BitVec.signExtend 9 (x >>> 2 &&& 13#8) + 1#9)).getLsbD
                          8 ==
                        (BitVec.signExtend 9 (x_1 + (~~~(x_1.sdiv 42#8 * 42#8) + 1#8)) +
                              (~~~BitVec.signExtend 9 (x >>> 2 &&& 13#8) + 1#9)).getMsbD
                          1) =
                      true then
                  some (x_1 + (~~~(x_1.sdiv 42#8 * 42#8) + 1#8) + (~~~(x >>> 2 &&& 13#8) + 1#8))
                else none).bind
              fun a => some (a <<< 2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:42:112: Bitwuzla proved the goal after 87.000000ms
LeanSAT proved the goal after 96.000000ms: rewriting 18.944833ms, bitblasting 0.000000ms, SAT solving 61.541583ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:45:116: Bitwuzla proved the goal after 88.000000ms
LeanSAT proved the goal after 96.000000ms: rewriting 18.527666ms, bitblasting 0.000000ms, SAT solving 61.700000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:48:116: Bitwuzla proved the goal after 81.000000ms
LeanSAT proved the goal after 94.000000ms: rewriting 18.849541ms, bitblasting 0.000000ms, SAT solving 61.191417ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:52:60: Bitwuzla proved the goal after 86.000000ms
LeanSAT proved the goal after 90.000000ms: rewriting 16.104375ms, bitblasting 0.000000ms, SAT solving 59.151541ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:55:112: Bitwuzla proved the goal after 86.000000ms
LeanSAT proved the goal after 97.000000ms: rewriting 18.500625ms, bitblasting 0.000000ms, SAT solving 61.482792ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:57:126: Bitwuzla proved the goal after 83.000000ms
LeanSAT proved the goal after 83.000000ms: rewriting 15.793291ms, bitblasting 0.000000ms, SAT solving 61.878958ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhbo_proof.lean:59:93: Bitwuzla proved the goal after 72.000000ms
LeanSAT proved the goal after 76.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 62.453958ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gshlhbo_proof
