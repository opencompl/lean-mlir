⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gexact_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gexact_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gexact_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gexact_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:7:72: Bitwuzla provided a counter example after 71.000000ms
LeanSAT provided a counter example after 215.000000ms: rewriting 0.000000 SAT solving 121.136917ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:7:8: (kernel) declaration has metavariables 'sdiv2_thm'
info: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:9:65: Bitwuzla provided a counter example after 71.000000ms
LeanSAT provided a counter example after 220.000000ms: rewriting 0.000000 SAT solving 123.568750ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:9:8: (kernel) declaration has metavariables 'sdiv4_thm'
info: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:11:75: Bitwuzla provided a counter example after 76.000000ms
LeanSAT provided a counter example after 235.000000ms: rewriting 0.000000 SAT solving 122.914000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:11:8: (kernel) declaration has metavariables 'sdiv6_thm'
error: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:14:99: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:14:99: [bv] [0.010634] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ : ¬((if x = 0#32 then none else some (x_1 / x)).bind fun a => some (a * x)) ⊑ some x_1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ : ¬((if (x == 0#32) = true then none else some (x_1 / x)).bind fun a => some (a * x)) ⊑ some x_1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:19:61: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:19:61: [bv] [0.019561] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun y' =>
              if y' = 0#32 then none else some (x_1 / y')) ⊑
            if 32#32 ≤ x then none else some (x_1 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              if (a == 0#32) = true then none else some (x_1 / a)) ⊑
            if (!32#32 >ᵤ x) = true then none else some (x_1 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:21:72: Bitwuzla provided a counter example after 73.000000ms
LeanSAT provided a counter example after 67.000000ms: rewriting 0.000000 SAT solving 57.737375ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:21:8: (kernel) declaration has metavariables 'mul_of_udiv_thm'
error: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:26:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:26:20: [bv] [0.016171] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (x.sdiv 12#8 * 250#8) ⊑
            if (-BitVec.signExtend 9 (x.sshiftRight 1)).msb = (-BitVec.signExtend 9 (x.sshiftRight 1)).getMsbD 1 then
              some (-x.sshiftRight 1)
            else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (x.sdiv 12#8 * 250#8) ⊑
            if
                ((~~~BitVec.signExtend 9 (x.sshiftRight 1) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x.sshiftRight 1) + 1#9).getMsbD 1) =
                  true then
              some (~~~x.sshiftRight 1 + 1#8)
            else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:30:100: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:30:100: [bv] [0.012907] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (x / 11#8 * 6#8) ⊑
            if BitVec.twoPow 16 7 <<< 1 ≤ BitVec.setWidth 16 (x / 11#8) * 6#16 then none else some (x / 11#8 * 6#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (x / 11#8 * 6#8) ⊑
            if (!BitVec.twoPow 16 7 <<< 1 >ᵤ BitVec.zeroExtend 16 (x / 11#8) * 6#16) = true then none
            else some (x / 11#8 * 6#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:32:79: Bitwuzla provided a counter example after 74.000000ms
LeanSAT provided a counter example after 78.000000ms: rewriting 0.000000 SAT solving 62.425000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gexact_proof.lean:32:8: (kernel) declaration has metavariables 'mul_of_sdiv_fail_ub_thm'
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gexact_proof
