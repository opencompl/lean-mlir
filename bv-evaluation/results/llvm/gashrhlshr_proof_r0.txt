⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gashrhlshr_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:9:71: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:9:71: [bv] [0.011123] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬(if 8#8 ≤ x then none else some ((x_1 &&& 127#8).sshiftRight x.toNat)) ⊑
            if 8#8 ≤ x then none else some ((x_1 &&& 127#8) >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x) = true then none else some ((x_1 &&& 127#8).sshiftRight x.toNat)) ⊑
            if (!8#8 >ᵤ x) = true then none else some ((x_1 &&& 127#8) >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:16:92: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:16:92: [bv] [0.041757] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 3#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 3#64 then
                  none
                else if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 x * 3#64 then none else some (x * 3#32)).bind
              fun x' => some (x' >>> 1)) ⊑
            if x.msb = false ∧ ¬(x + x >>> 1).msb = x.msb then none
            else if x + x >>> 1 < x ∨ x + x >>> 1 < x >>> 1 then none else some (x + x >>> 1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 3#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 3#64)) =
                      true then
                  none
                else
                  if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 x * 3#64) = true then none
                  else some (x * 3#32)).bind
              fun a => some (a >>> 1)) ⊑
            if (!x.getLsbD 31 && !(x + x >>> 1).getLsbD 31 == x.getLsbD 31) = true then none
            else if (!((!x >ᵤ x + x >>> 1) && !x >>> 1 >ᵤ x + x >>> 1)) = true then none else some (x + x >>> 1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:22:90: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:22:90: [bv] [0.027434] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 3#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 3#64 then
                  none
                else some (x * 3#32)).bind
              fun x' => some (x' >>> 1)) ⊑
            if x.msb = false ∧ ¬(x + x >>> 1).msb = x.msb then none else some (x + x >>> 1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 3#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 3#64)) =
                      true then
                  none
                else some (x * 3#32)).bind
              fun a => some (a >>> 1)) ⊑
            if (!x.getLsbD 31 && !(x + x >>> 1).getLsbD 31 == x.getLsbD 31) = true then none else some (x + x >>> 1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:26:87: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:26:87: [bv] [0.023811] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 x * 3#64 then none else some (x * 3#32)).bind fun x' =>
              some (x' >>> 1)) ⊑
            if x + x >>> 1 < x ∨ x + x >>> 1 < x >>> 1 then none else some (x + x >>> 1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 x * 3#64) = true then none else some (x * 3#32)).bind
              fun a => some (a >>> 1)) ⊑
            if (!((!x >ᵤ x + x >>> 1) && !x >>> 1 >ᵤ x + x >>> 1)) = true then none else some (x + x >>> 1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:33:92: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:33:92: [bv] [0.039032] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 5#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 5#64 then
                  none
                else if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 x * 5#64 then none else some (x * 5#32)).bind
              fun x' => some (x' >>> 2)) ⊑
            if x.msb = false ∧ ¬(x + x >>> 2).msb = x.msb then none
            else if x + x >>> 2 < x ∨ x + x >>> 2 < x >>> 2 then none else some (x + x >>> 2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 5#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 5#64)) =
                      true then
                  none
                else
                  if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 x * 5#64) = true then none
                  else some (x * 5#32)).bind
              fun a => some (a >>> 2)) ⊑
            if (!x.getLsbD 31 && !(x + x >>> 2).getLsbD 31 == x.getLsbD 31) = true then none
            else if (!((!x >ᵤ x + x >>> 2) && !x >>> 2 >ᵤ x + x >>> 2)) = true then none else some (x + x >>> 2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:39:90: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:39:90: [bv] [0.027140] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 5#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 5#64 then
                  none
                else some (x * 5#32)).bind
              fun x' => some (x' >>> 2)) ⊑
            if x.msb = false ∧ ¬(x + x >>> 2).msb = x.msb then none else some (x + x >>> 2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 5#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 5#64)) =
                      true then
                  none
                else some (x * 5#32)).bind
              fun a => some (a >>> 2)) ⊑
            if (!x.getLsbD 31 && !(x + x >>> 2).getLsbD 31 == x.getLsbD 31) = true then none else some (x + x >>> 2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:43:87: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:43:87: [bv] [0.023772] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 x * 5#64 then none else some (x * 5#32)).bind fun x' =>
              some (x' >>> 2)) ⊑
            if x + x >>> 2 < x ∨ x + x >>> 2 < x >>> 2 then none else some (x + x >>> 2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 x * 5#64) = true then none else some (x * 5#32)).bind
              fun a => some (a >>> 2)) ⊑
            if (!((!x >ᵤ x + x >>> 2) && !x >>> 2 >ᵤ x + x >>> 2)) = true then none else some (x + x >>> 2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:50:92: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:50:92: [bv] [0.037818] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 3#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 3#64 then
                  none
                else if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 x * 3#64 then none else some (x * 3#32)).bind
              fun x' => some (x'.sshiftRight 1)) ⊑
            if x.msb = false ∧ ¬(x + x >>> 1).msb = x.msb then none
            else if x + x >>> 1 < x ∨ x + x >>> 1 < x >>> 1 then none else some (x + x >>> 1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 3#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 3#64)) =
                      true then
                  none
                else
                  if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 x * 3#64) = true then none
                  else some (x * 3#32)).bind
              fun a => some (a.sshiftRight 1)) ⊑
            if (!x.getLsbD 31 && !(x + x >>> 1).getLsbD 31 == x.getLsbD 31) = true then none
            else if (!((!x >ᵤ x + x >>> 1) && !x >>> 1 >ᵤ x + x >>> 1)) = true then none else some (x + x >>> 1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:56:89: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:56:89: [bv] [0.020235] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 3#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 3#64 then
                  none
                else some (x * 3#32)).bind
              fun x' => some (x'.sshiftRight 1)) ⊑
            if (x + x.sshiftRight 1).msb = x.msb then some (x + x.sshiftRight 1) else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 3#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 3#64)) =
                      true then
                  none
                else some (x * 3#32)).bind
              fun a => some (a.sshiftRight 1)) ⊑
            if ((x + x.sshiftRight 1).getLsbD 31 == x.getLsbD 31) = true then some (x + x.sshiftRight 1) else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:62:89: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:62:89: [bv] [0.020309] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 3#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 3#64 then
                  none
                else some (x * 3#32)).bind
              fun x' => some (x'.sshiftRight 1)) ⊑
            if (x + x.sshiftRight 1).msb = x.msb then some (x + x.sshiftRight 1) else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 3#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 3#64)) =
                      true then
                  none
                else some (x * 3#32)).bind
              fun a => some (a.sshiftRight 1)) ⊑
            if ((x + x.sshiftRight 1).getLsbD 31 == x.getLsbD 31) = true then some (x + x.sshiftRight 1) else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:69:92: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:69:92: [bv] [0.038003] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 5#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 5#64 then
                  none
                else if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 x * 5#64 then none else some (x * 5#32)).bind
              fun x' => some (x'.sshiftRight 2)) ⊑
            if x.msb = false ∧ ¬(x + x >>> 2).msb = x.msb then none
            else if x + x >>> 2 < x ∨ x + x >>> 2 < x >>> 2 then none else some (x + x >>> 2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 5#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 5#64)) =
                      true then
                  none
                else
                  if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 x * 5#64) = true then none
                  else some (x * 5#32)).bind
              fun a => some (a.sshiftRight 2)) ⊑
            if (!x.getLsbD 31 && !(x + x >>> 2).getLsbD 31 == x.getLsbD 31) = true then none
            else if (!((!x >ᵤ x + x >>> 2) && !x >>> 2 >ᵤ x + x >>> 2)) = true then none else some (x + x >>> 2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:75:89: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:75:89: [bv] [0.020261] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 5#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 5#64 then
                  none
                else some (x * 5#32)).bind
              fun x' => some (x'.sshiftRight 2)) ⊑
            if (x + x.sshiftRight 2).msb = x.msb then some (x + x.sshiftRight 2) else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 5#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 5#64)) =
                      true then
                  none
                else some (x * 5#32)).bind
              fun a => some (a.sshiftRight 2)) ⊑
            if ((x + x.sshiftRight 2).getLsbD 31 == x.getLsbD 31) = true then some (x + x.sshiftRight 2) else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:81:89: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:81:89: [bv] [0.020288] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 5#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 5#64 then
                  none
                else some (x * 5#32)).bind
              fun x' => some (x'.sshiftRight 2)) ⊑
            if (x + x.sshiftRight 2).msb = x.msb then some (x + x.sshiftRight 2) else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 5#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 5#64)) =
                      true then
                  none
                else some (x * 5#32)).bind
              fun a => some (a.sshiftRight 2)) ⊑
            if ((x + x.sshiftRight 2).getLsbD 31 == x.getLsbD 31) = true then some (x + x.sshiftRight 2) else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:84:87: Bitwuzla proved the goal after 76.000000ms
LeanSAT proved the goal after 78.000000ms: rewriting 11.017833ms, bitblasting 0.000000ms, SAT solving 61.040667ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gashrhlshr_proof.lean:87:103: Bitwuzla proved the goal after 74.000000ms
LeanSAT proved the goal after 74.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 61.387042ms, LRAT processing 0.000000ms
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gashrhlshr_proof
