⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gnegatedhbitmask_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:7:95: Bitwuzla proved the goal after 81.000000ms
LeanSAT proved the goal after 76.000000ms: rewriting 12.562375ms, bitblasting 0.000000ms, SAT solving 58.238208ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:12:53: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:12:53: [bv] [0.027058] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (10#8 - (x >>> 1 &&& 1#8)) ⊑
            if x.getMsbD 6 = (10#8).msb ∧ ¬((x <<< 6).sshiftRight 7 + 10#8).msb = x.getMsbD 6 then none
            else some ((x <<< 6).sshiftRight 7 + 10#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (11#8 + ~~~(x >>> 1 &&& 1#8)) ⊑
            if (!x.getMsbD 6 && !((x <<< 6).sshiftRight 7 + 10#8).getLsbD 7 == x.getMsbD 6) = true then none
            else some ((x <<< 6).sshiftRight 7 + 10#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:20:68: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:20:68: [bv] [0.030594] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (10#8 - (BitVec.setWidth 8 (x >>> 15) &&& 1#8)) ⊑
            if
                (BitVec.setWidth 8 ((x <<< 48).sshiftRight 63)).msb = (10#8).msb ∧
                  ¬(BitVec.setWidth 8 ((x <<< 48).sshiftRight 63) + 10#8).msb =
                      (BitVec.setWidth 8 ((x <<< 48).sshiftRight 63)).msb then
              none
            else some (BitVec.setWidth 8 ((x <<< 48).sshiftRight 63) + 10#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (11#8 + ~~~(BitVec.zeroExtend 8 (x >>> 15) &&& 1#8)) ⊑
            if
                (!(BitVec.zeroExtend 8 ((x <<< 48).sshiftRight 63)).getLsbD 7 &&
                    !(BitVec.zeroExtend 8 ((x <<< 48).sshiftRight 63) + 10#8).getLsbD 7 ==
                        (BitVec.zeroExtend 8 ((x <<< 48).sshiftRight 63)).getLsbD 7) =
                  true then
              none
            else some (BitVec.zeroExtend 8 ((x <<< 48).sshiftRight 63) + 10#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:29:44: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:29:44: [bv] [0.032437] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (10#32 - BitVec.signExtend 32 (BitVec.setWidth 8 (x >>> 15) &&& 1#8)) ⊑
            (if
                    (BitVec.setWidth 8 ((x <<< 48).sshiftRight 63)).msb = (10#8).msb ∧
                      ¬(BitVec.setWidth 8 ((x <<< 48).sshiftRight 63) + 10#8).msb =
                          (BitVec.setWidth 8 ((x <<< 48).sshiftRight 63)).msb then
                  none
                else some (BitVec.setWidth 8 ((x <<< 48).sshiftRight 63) + 10#8)).bind
              fun x' => some (BitVec.setWidth 32 x')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (11#32 + ~~~BitVec.signExtend 32 (BitVec.zeroExtend 8 (x >>> 15) &&& 1#8)) ⊑
            (if
                    (!(BitVec.zeroExtend 8 ((x <<< 48).sshiftRight 63)).getLsbD 7 &&
                        !(BitVec.zeroExtend 8 ((x <<< 48).sshiftRight 63) + 10#8).getLsbD 7 ==
                            (BitVec.zeroExtend 8 ((x <<< 48).sshiftRight 63)).getLsbD 7) =
                      true then
                  none
                else some (BitVec.zeroExtend 8 ((x <<< 48).sshiftRight 63) + 10#8)).bind
              fun a => some (BitVec.zeroExtend 32 a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:37:68: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:37:68: [bv] [0.025748] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (10#32 - BitVec.setWidth 32 (BitVec.setWidth 1 (x >>> 15))) ⊑
            if
                (BitVec.setWidth 32 x).getMsbD 16 = (10#32).msb ∧
                  ¬((BitVec.setWidth 32 x <<< 16).sshiftRight 31 + 10#32).msb = (BitVec.setWidth 32 x).getMsbD 16 then
              none
            else some ((BitVec.setWidth 32 x <<< 16).sshiftRight 31 + 10#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (11#32 + ~~~BitVec.zeroExtend 32 (BitVec.zeroExtend 1 (x >>> 15))) ⊑
            if
                (!(BitVec.zeroExtend 32 x).getMsbD 16 &&
                    !((BitVec.zeroExtend 32 x <<< 16).sshiftRight 31 + 10#32).getLsbD 31 ==
                        (BitVec.zeroExtend 32 x).getMsbD 16) =
                  true then
              none
            else some ((BitVec.zeroExtend 32 x <<< 16).sshiftRight 31 + 10#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:43:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:43:20: [bv] [0.018331] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (-(x >>> 3 &&& 2#8)) ⊑
            if (-BitVec.signExtend 9 (x >>> 3 &&& 2#8)).msb = (-BitVec.signExtend 9 (x >>> 3 &&& 2#8)).getMsbD 1 then
              some (-(x >>> 3 &&& 2#8))
            else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (~~~(x >>> 3 &&& 2#8) + 1#8) ⊑
            if
                ((~~~BitVec.signExtend 9 (x >>> 3 &&& 2#8) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x >>> 3 &&& 2#8) + 1#9).getMsbD 1) =
                  true then
              some (~~~(x >>> 3 &&& 2#8) + 1#8)
            else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:45:104: Bitwuzla proved the goal after 78.000000ms
LeanSAT proved the goal after 78.000000ms: rewriting 10.581291ms, bitblasting 0.000000ms, SAT solving 61.319083ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:51:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:51:20: [bv] [0.018267] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (-BitVec.setWidth 32 (x >>> 6)) ⊑
            if
                (-BitVec.signExtend 33 (BitVec.setWidth 32 (x >>> 6))).msb =
                  (-BitVec.signExtend 33 (BitVec.setWidth 32 (x >>> 6))).getMsbD 1 then
              some (-BitVec.setWidth 32 (x >>> 6))
            else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (~~~BitVec.zeroExtend 32 (x >>> 6) + 1#32) ⊑
            if
                ((~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x >>> 6)) + 1#33).getLsbD 32 ==
                    (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x >>> 6)) + 1#33).getMsbD 1) =
                  true then
              some (~~~BitVec.zeroExtend 32 (x >>> 6) + 1#32)
            else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:59:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnegatedhbitmask_proof.lean:59:20: [bv] [0.015773] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (-BitVec.setWidth 32 (x.sshiftRight 7)) ⊑
            if
                (-BitVec.signExtend 33 (BitVec.setWidth 32 (x.sshiftRight 7))).msb =
                  (-BitVec.signExtend 33 (BitVec.setWidth 32 (x.sshiftRight 7))).getMsbD 1 then
              some (-BitVec.setWidth 32 (x.sshiftRight 7))
            else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some (~~~BitVec.zeroExtend 32 (x.sshiftRight 7) + 1#32) ⊑
            if
                ((~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x.sshiftRight 7)) + 1#33).getLsbD 32 ==
                    (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x.sshiftRight 7)) + 1#33).getMsbD 1) =
                  true then
              some (~~~BitVec.zeroExtend 32 (x.sshiftRight 7) + 1#32)
            else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gnegatedhbitmask_proof
