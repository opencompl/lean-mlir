‚ö† [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
‚ö† [884/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
‚ö† [885/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
‚ö† [887/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
‚ö† [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhnegativehpowerhofhtwo_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhnegativehpowerhofhtwo_proof.lean:11:8: error: (kernel) declaration has metavariables 't0_thm'
[bv] [0.081780] Normalizing goal
  [Meta.synthInstance] [0.001570] ‚úÖÔ∏è Decidable
        ((if (224#8 == 0 || 8 != 1 && x‚úù == BitVec.intMin 8 && 224#8 == -1) = true then none
          else some (x‚úù.sdiv 224#8)) ‚äë
          if 5#8 ‚â• ‚Üë8 then none
          else
            if
                True ‚àß
                  (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                    (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                      1 then
              none
            else some (0#8 - x‚úù.sshiftRight (5#8).toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x‚úù : BitVec 8
      a‚úù :
        ¬¨(if (224#8 == 0 || 8 != 1 && x‚úù == BitVec.intMin 8 && 224#8 == -1) = true then none
            else some (x‚úù.sdiv 224#8)) ‚äë
            if 5#8 ‚â• ‚Üë8 then none
            else
              if
                  True ‚àß
                    (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                      (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                        1 then
                none
              else some (0#8 - x‚úù.sshiftRight (5#8).toNat)
      ‚ä¢ False
  [Meta.isDefEq] [0.006054] ‚ùåÔ∏è ?a == ?a =?= 224#8 == 0#8
    [Meta.isDefEq.onFailure] [0.005787] ‚ùåÔ∏è ?a == ?a =?= 224#8 == 0#8
      [Meta.synthInstance] [0.005765] üí•Ô∏è BEq ?Œ±
        [Meta.synthInstance] [0.005682] new goal BEq ?Œ±
  [Meta.appBuilder] [0.002258] ‚úÖÔ∏è f: HAdd.hAdd, xs: [~~~x‚úù, 1#8]
    [Meta.synthInstance] [0.002203] ‚úÖÔ∏è HAdd (BitVec 8) (BitVec 8) (BitVec 8)
      [Meta.synthInstance] [0.001745] ‚úÖÔ∏è apply @BitVec.instAdd to Add (BitVec 8)
  [Meta.isDefEq] [0.001968] ‚úÖÔ∏è ?x > ?y =?= 5#8 < 8#8
  [Meta.isDefEq] [0.003415] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg Ne
                (Eq.trans
                  (congrArg BitVec.msb
                    (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                      (Eq.trans
                        (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                        (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9)))))
                  (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))
              (congrArg (fun x => x.getMsbD 1)
                (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                  (Eq.trans (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                    (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))))
            (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8)
              ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1))))
        (true_and
          ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
            true))
    [Meta.isDefEq.assign] [0.003411] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg Ne
                  (Eq.trans
                    (congrArg BitVec.msb
                      (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                        (Eq.trans
                          (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                          (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9)))))
                    (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))
                (congrArg (fun x => x.getMsbD 1)
                  (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                    (Eq.trans
                      (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                      (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))))
              (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8)
                ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1))))
          (true_and
            ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                  (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.003388] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD 1) =
            ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                  (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg Ne
                    (Eq.trans
                      (congrArg BitVec.msb
                        (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                          (Eq.trans
                            (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                            (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9)))))
                      (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))
                  (congrArg (fun x => x.getMsbD 1)
                    (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                      (Eq.trans
                        (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                        (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                  ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8)
                  ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1))))
            (true_and
              ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
                true)) : (True ‚àß
              (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1) =
            ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                  (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
              true))
        [Meta.isDefEq] [0.003384] ‚úÖÔ∏è (True ‚àß
                (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                  (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD 1) =
              ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
                true) =?= (True ‚àß
                (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                  (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1) =
              ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
                true)
          [Meta.isDefEq] [0.003352] ‚úÖÔ∏è True ‚àß
                (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                  (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                    1 =?= True ‚àß
                (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                  (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1
            [Meta.isDefEq] [0.003335] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                      BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                  (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                    1 =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                  (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1
              [Meta.isDefEq.delta] [0.003320] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                    (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                      1 =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                    (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1
                [Meta.isDefEq] [0.003261] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1)
                          (x‚úù.sshiftRight (5#8).toNat)).msb =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb
                  [Meta.isDefEq.delta] [0.003252] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1)
                            (x‚úù.sshiftRight (5#8).toNat)).msb =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb
                    [Meta.isDefEq] [0.003232] ‚úÖÔ∏è BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1)
                            (x‚úù.sshiftRight (5#8).toNat) =?= 0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)
                      [Meta.isDefEq] [0.003208] ‚úÖÔ∏è instHSub.1 (BitVec.signExtend (8 + 1) 0#8)
                            (BitVec.signExtend (8 + 1)
                              (x‚úù.sshiftRight
                                (5#8).toNat)) =?= instHSub.1 (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                        [Meta.isDefEq] [0.003153] ‚úÖÔ∏è Sub.sub (BitVec.signExtend (8 + 1) 0#8)
                              (BitVec.signExtend (8 + 1)
                                (x‚úù.sshiftRight (5#8).toNat)) =?= Sub.sub (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                          [Meta.isDefEq] [0.003132] ‚úÖÔ∏è BitVec.instSub.1 (BitVec.signExtend (8 + 1) 0#8)
                                (BitVec.signExtend (8 + 1)
                                  (x‚úù.sshiftRight
                                    (5#8).toNat)) =?= BitVec.instSub.1 (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                            [Meta.isDefEq] [0.003096] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8).sub
                                  (BitVec.signExtend (8 + 1)
                                    (x‚úù.sshiftRight (5#8).toNat)) =?= (0#9).sub (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                              [Meta.isDefEq.delta] [0.003085] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8).sub
                                    (BitVec.signExtend (8 + 1)
                                      (x‚úù.sshiftRight
                                        (5#8).toNat)) =?= (0#9).sub (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                                [Meta.isDefEq] [0.002881] ‚úÖÔ∏è BitVec.signExtend (8 + 1) 0#8 =?= 0#9
                                  [Meta.isDefEq] [0.002867] ‚úÖÔ∏è BitVec.ofInt (8 + 1) (0#8).toInt =?= 0#9
                                    [Meta.isDefEq] [0.002851] ‚úÖÔ∏è ((0#8).toInt %
                                              Int.ofNat (2 ^ (8 + 1))).toNat#'‚ãØ =?= 0#9
                                      [Meta.isDefEq] [0.002833] ‚úÖÔ∏è ((0#8).toInt %
                                                Int.ofNat (2 ^ (8 + 1))).toNat#'‚ãØ =?= { toFin := Fin.ofNat' (2 ^ 9) 0 }
                                        [Meta.isDefEq] [0.002821] ‚úÖÔ∏è {
                                              toFin :=
                                                ‚ü®((0#8).toInt % Int.ofNat (2 ^ (8 + 1))).toNat,
                                                  ‚ãØ‚ü© } =?= { toFin := Fin.ofNat' (2 ^ 9) 0 }
                                          [Meta.isDefEq] [0.002775] ‚úÖÔ∏è ‚ü®((0#8).toInt % Int.ofNat (2 ^ (8 + 1))).toNat,
                                                ‚ãØ‚ü© =?= Fin.ofNat' (2 ^ 9) 0
                                            [Meta.isDefEq] [0.002759] ‚úÖÔ∏è ‚ü®((0#8).toInt % Int.ofNat (2 ^ (8 + 1))).toNat,
                                                  ‚ãØ‚ü© =?= ‚ü®0 % 2 ^ 9, ‚ãØ‚ü©
                                              [Meta.isDefEq] [0.002668] ‚úÖÔ∏è ((0#8).toInt %
                                                      Int.ofNat (2 ^ (8 + 1))).toNat =?= 0 % 2 ^ 9
                                                [Meta.isDefEq] [0.002599] ‚úÖÔ∏è match
                                                      (0#8).toInt % Int.ofNat (2 ^ (8 + 1)) with
                                                    | Int.ofNat n => n
                                                    | Int.negSucc a => 0 =?= 0 % 2 ^ 9
                                                  [Meta.whnf] [0.002217] Non-easy whnf: (fun motive x h_1 h_2 =>
                                                          Int.casesOn x (fun a => h_1 a) fun a => h_2 a)
                                                        (fun x => ‚Ñï) ((0#8).toInt % Int.ofNat (2 ^ (8 + 1))) h_1 h_2
                                                    [Meta.whnf] [0.002199] Non-easy whnf: (0#8).toInt %
                                                          Int.ofNat (2 ^ (8 + 1))
                                                      [Meta.whnf] [0.002194] Non-easy whnf: instHMod.1 (0#8).toInt
                                                            (Int.ofNat (2 ^ (8 + 1)))
                                                        [Meta.whnf] [0.002179] Non-easy whnf: Int.instMod.1 (0#8).toInt
                                                              (Int.ofNat (2 ^ (8 + 1)))
                                                          [Meta.whnf] [0.002163] Non-easy whnf: match (0#8).toInt,
                                                                Int.ofNat (2 ^ (8 + 1)) with
                                                              | Int.ofNat m, n => Int.ofNat (m % n.natAbs)
                                                              | Int.negSucc m, n =>
                                                                Int.subNatNat n.natAbs (m % n.natAbs).succ
                                                            [Meta.whnf] [0.002123] Non-easy whnf: (fun motive x x_1 h_1
                                                                      h_2 =>
                                                                    Int.casesOn x (fun a => h_1 a x_1) fun a =>
                                                                      h_2 a x_1)
                                                                  (fun x x => ‚Ñ§) (0#8).toInt (Int.ofNat (2 ^ (8 + 1)))
                                                                  h_1 h_2
                                                              [Meta.whnf] [0.002109] Non-easy whnf: (0#8).toInt
                                                                [Meta.whnf] [0.002093] Non-easy whnf: if
                                                                        2 * (0#8).toNat < 2 ^ 8 then ‚Üë(0#8).toNat
                                                                    else ‚Üë(0#8).toNat - ‚Üë(2 ^ 8)
                                                                  [Meta.whnf] [0.002082] Non-easy whnf: Decidable.casesOn
                                                                        ((2 * (0#8).toNat).decLt (2 ^ 8))
                                                                        (fun x => ‚Üë(0#8).toNat - ‚Üë(2 ^ 8)) fun x =>
                                                                        ‚Üë(0#8).toNat
                                                                    [Meta.whnf] [0.002036] Non-easy whnf: (2 *
                                                                              (0#8).toNat).decLt
                                                                          (2 ^ 8)
                                                                      [Meta.whnf] [0.002029] Non-easy whnf: (2 *
                                                                                  (0#8).toNat).succ.decLe
                                                                            (2 ^ 8)
                                                                        [Meta.whnf] [0.002015] Non-easy whnf: if h :
                                                                                (2 * (0#8).toNat).succ.ble (2 ^ 8) =
                                                                                  true then
                                                                              isTrue ‚ãØ
                                                                            else isFalse ‚ãØ
                                                                          [Meta.whnf] [0.002005] Non-easy whnf: Decidable.casesOn
                                                                                (instDecidableEqBool
                                                                                  ((2 * (0#8).toNat).succ.ble (2 ^ 8))
                                                                                  true)
                                                                                (fun h => isFalse ‚ãØ) fun h => isTrue ‚ãØ
                                                                            [Meta.whnf] [0.001991] Non-easy whnf: instDecidableEqBool
                                                                                  ((2 * (0#8).toNat).succ.ble (2 ^ 8))
                                                                                  true
                                                                              [Meta.whnf] [0.001986] Non-easy whnf: ((2 *
                                                                                              (0#8).toNat).succ.ble
                                                                                        (2 ^ 8)).decEq
                                                                                    true
                                                                                [Meta.whnf] [0.001979] Non-easy whnf: match
                                                                                      (2 * (0#8).toNat).succ.ble
                                                                                        (2 ^ 8),
                                                                                      true with
                                                                                    | false, false => isTrue ‚ãØ
                                                                                    | false, true => isFalse ‚ãØ
                                                                                    | true, false => isFalse ‚ãØ
                                                                                    | true, true => isTrue ‚ãØ
                                                                                  [Meta.whnf] [0.001927] Non-easy whnf: (fun
                                                                                            motive a b h_1 h_2 h_3
                                                                                            h_4 =>
                                                                                          Bool.casesOn a
                                                                                            (Bool.casesOn b (h_1 ())
                                                                                              (h_2 ()))
                                                                                            (Bool.casesOn b (h_3 ())
                                                                                              (h_4 ())))
                                                                                        (fun a b => Decidable (a = b))
                                                                                        ((2 * (0#8).toNat).succ.ble
                                                                                          (2 ^ 8))
                                                                                        true h_1 h_2 h_3 h_4
                                                                                    [Meta.whnf] [0.001903] Non-easy whnf: (2 *
                                                                                                (0#8).toNat).succ.ble
                                                                                          (2 ^ 8)
                                                                                      [Meta.whnf] [0.001895] Non-easy whnf: (2 *
                                                                                              (0#8).toNat).succ
                                                                                        [Meta.whnf] [0.001890] Non-easy whnf: 2 *
                                                                                              (0#8).toNat
                                                                                          [Meta.whnf] [0.001875] Non-easy whnf: instHMul.1
                                                                                                2 (0#8).toNat
                                                                                            [Meta.whnf] [0.001848] Non-easy whnf: instMulNat.1
                                                                                                  2 (0#8).toNat
                                                                                              [Meta.whnf] [0.001661] Non-easy whnf: instMulNat
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x‚úù : BitVec 8
      a‚úù :
        ¬¨some (if x‚úù.getLsbD 7 = true then (~~~x‚úù + 1#8) / 32#8 else ~~~(x‚úù / 32#8) + 1#8) ‚äë
            if
                (!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                      (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
                  true then
              none
            else some (~~~x‚úù.sshiftRight 5 + 1#8)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhnegativehpowerhofhtwo_proof.lean:28:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhnegativehpowerhofhtwo_proof.lean:21:8: error: (kernel) declaration has metavariables 'prove_exact_with_high_mask_thm'
[bv] [0.053465] Normalizing goal
  [Meta.synthInstance] [0.001690] ‚úÖÔ∏è Decidable
        ((if (252#8 == 0 || 8 != 1 && x‚úù &&& 224#8 == BitVec.intMin 8 && 252#8 == -1) = true then none
          else some ((x‚úù &&& 224#8).sdiv 252#8)) ‚äë
          if 2#8 ‚â• ‚Üë8 then none
          else
            if
                True ‚àß
                  (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).msb ‚â†
                    (BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).getMsbD
                      1 then
              none
            else some (0#8 - (x‚úù.sshiftRight (2#8).toNat &&& 248#8)))
    [Meta.check] [0.001079] ‚úÖÔ∏è BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if (252#8 == 0 || 8 != 1 && x‚úù &&& 224#8 == BitVec.intMin 8 && 252#8 == -1) = true then none
          else some ((x‚úù &&& 224#8).sdiv 252#8))
          (if 2#8 ‚â• ‚Üë8 then none
          else
            if
                True ‚àß
                  (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).msb ‚â†
                    (BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).getMsbD
                      1 then
              none
            else some (0#8 - (x‚úù.sshiftRight (2#8).toNat &&& 248#8)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x‚úù : BitVec 8
      a‚úù :
        ¬¨(if (252#8 == 0 || 8 != 1 && x‚úù &&& 224#8 == BitVec.intMin 8 && 252#8 == -1) = true then none
            else some ((x‚úù &&& 224#8).sdiv 252#8)) ‚äë
            if 2#8 ‚â• ‚Üë8 then none
            else
              if
                  True ‚àß
                    (BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).msb ‚â†
                      (BitVec.signExtend (8 + 1) 0#8 -
                            BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).getMsbD
                        1 then
                none
              else some (0#8 - (x‚úù.sshiftRight (2#8).toNat &&& 248#8))
      ‚ä¢ False
  [Meta.isDefEq] [0.002065] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg Ne
                (Eq.trans
                  (congrArg BitVec.msb
                    (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)))
                      (Eq.trans
                        (congrArg (HAdd.hAdd 0#9)
                          (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))))
                        (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9)))))
                  (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9))))
              (congrArg (fun x => x.getMsbD 1)
                (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)))
                  (Eq.trans
                    (congrArg (HAdd.hAdd 0#9)
                      (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))))
                    (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9))))))
            (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
              ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8)
              ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1))))
        (true_and
          ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8 ==
                (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1) =
            true))
    [Meta.isDefEq.assign] [0.002063] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg Ne
                  (Eq.trans
                    (congrArg BitVec.msb
                      (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)))
                        (Eq.trans
                          (congrArg (HAdd.hAdd 0#9)
                            (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))))
                          (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9)))))
                    (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9))))
                (congrArg (fun x => x.getMsbD 1)
                  (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)))
                    (Eq.trans
                      (congrArg (HAdd.hAdd 0#9)
                        (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))))
                      (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9))))))
              (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8)
                ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1))))
          (true_and
            ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8 ==
                  (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.002042] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).msb ‚â†
                (BitVec.signExtend (8 + 1) 0#8 -
                      BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).getMsbD
                  1) =
            ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8 ==
                  (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg Ne
                    (Eq.trans
                      (congrArg BitVec.msb
                        (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)))
                          (Eq.trans
                            (congrArg (HAdd.hAdd 0#9)
                              (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))))
                            (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9)))))
                      (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9))))
                  (congrArg (fun x => x.getMsbD 1)
                    (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)))
                      (Eq.trans
                        (congrArg (HAdd.hAdd 0#9)
                          (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))))
                        (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9))))))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                  ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8)
                  ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1))))
            (true_and
              ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1) =
                true)) : (True ‚àß
              (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).msb ‚â†
                (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).getMsbD 1) =
            ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8 ==
                  (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1) =
              true))
        [Meta.isDefEq] [0.002038] ‚úÖÔ∏è (True ‚àß
                (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).msb ‚â†
                  (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).getMsbD
                    1) =
              ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1) =
                true) =?= (True ‚àß
                (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).msb ‚â†
                  (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).getMsbD 1) =
              ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1) =
                true)
          [Meta.isDefEq] [0.002018] ‚úÖÔ∏è True ‚àß
                (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).msb ‚â†
                  (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).getMsbD
                    1 =?= True ‚àß
                (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).msb ‚â†
                  (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).getMsbD 1
            [Meta.isDefEq] [0.002002] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                      BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).msb ‚â†
                  (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).getMsbD
                    1 =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).msb ‚â†
                  (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).getMsbD 1
              [Meta.isDefEq.delta] [0.001988] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).msb ‚â†
                    (BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (2#8).toNat &&& 248#8)).getMsbD
                      1 =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).msb ‚â†
                    (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).getMsbD 1
                [Meta.isDefEq] [0.001931] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1)
                          (x‚úù.sshiftRight (2#8).toNat &&&
                            248#8)).msb =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).msb
                  [Meta.isDefEq.delta] [0.001920] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1)
                            (x‚úù.sshiftRight (2#8).toNat &&&
                              248#8)).msb =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)).msb
                    [Meta.isDefEq] [0.001898] ‚úÖÔ∏è BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1)
                            (x‚úù.sshiftRight (2#8).toNat &&&
                              248#8) =?= 0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8)
                      [Meta.isDefEq] [0.001871] ‚úÖÔ∏è instHSub.1 (BitVec.signExtend (8 + 1) 0#8)
                            (BitVec.signExtend (8 + 1)
                              (x‚úù.sshiftRight (2#8).toNat &&&
                                248#8)) =?= instHSub.1 (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))
                        [Meta.isDefEq] [0.001811] ‚úÖÔ∏è Sub.sub (BitVec.signExtend (8 + 1) 0#8)
                              (BitVec.signExtend (8 + 1)
                                (x‚úù.sshiftRight (2#8).toNat &&&
                                  248#8)) =?= Sub.sub (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))
                          [Meta.isDefEq] [0.001788] ‚úÖÔ∏è BitVec.instSub.1 (BitVec.signExtend (8 + 1) 0#8)
                                (BitVec.signExtend (8 + 1)
                                  (x‚úù.sshiftRight (2#8).toNat &&&
                                    248#8)) =?= BitVec.instSub.1 (0#9)
                                (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))
                            [Meta.isDefEq] [0.001747] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8).sub
                                  (BitVec.signExtend (8 + 1)
                                    (x‚úù.sshiftRight (2#8).toNat &&&
                                      248#8)) =?= (0#9).sub (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))
                              [Meta.isDefEq.delta] [0.001737] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8).sub
                                    (BitVec.signExtend (8 + 1)
                                      (x‚úù.sshiftRight (2#8).toNat &&&
                                        248#8)) =?= (0#9).sub (BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8))
                                [Meta.isDefEq] [0.001324] ‚úÖÔ∏è BitVec.signExtend (8 + 1) 0#8 =?= 0#9
                                  [Meta.isDefEq] [0.001309] ‚úÖÔ∏è BitVec.ofInt (8 + 1) (0#8).toInt =?= 0#9
                                    [Meta.isDefEq] [0.001294] ‚úÖÔ∏è ((0#8).toInt %
                                              Int.ofNat (2 ^ (8 + 1))).toNat#'‚ãØ =?= 0#9
                                      [Meta.isDefEq] [0.001273] ‚úÖÔ∏è ((0#8).toInt %
                                                Int.ofNat (2 ^ (8 + 1))).toNat#'‚ãØ =?= { toFin := Fin.ofNat' (2 ^ 9) 0 }
                                        [Meta.isDefEq] [0.001259] ‚úÖÔ∏è {
                                              toFin :=
                                                ‚ü®((0#8).toInt % Int.ofNat (2 ^ (8 + 1))).toNat,
                                                  ‚ãØ‚ü© } =?= { toFin := Fin.ofNat' (2 ^ 9) 0 }
                                          [Meta.isDefEq] [0.001207] ‚úÖÔ∏è ‚ü®((0#8).toInt % Int.ofNat (2 ^ (8 + 1))).toNat,
                                                ‚ãØ‚ü© =?= Fin.ofNat' (2 ^ 9) 0
                                            [Meta.isDefEq] [0.001189] ‚úÖÔ∏è ‚ü®((0#8).toInt % Int.ofNat (2 ^ (8 + 1))).toNat,
                                                  ‚ãØ‚ü© =?= ‚ü®0 % 2 ^ 9, ‚ãØ‚ü©
                                              [Meta.isDefEq] [0.001090] ‚úÖÔ∏è ((0#8).toInt %
                                                      Int.ofNat (2 ^ (8 + 1))).toNat =?= 0 % 2 ^ 9
                                                [Meta.isDefEq] [0.001000] ‚úÖÔ∏è match
                                                      (0#8).toInt % Int.ofNat (2 ^ (8 + 1)) with
                                                    | Int.ofNat n => n
                                                    | Int.negSucc a => 0 =?= 0 % 2 ^ 9
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x‚úù : BitVec 8
      a‚úù :
        ¬¨some
              (if (x‚úù &&& 224#8).getLsbD 7 = true then (~~~(x‚úù &&& 224#8) + 1#8) / 4#8
              else ~~~((x‚úù &&& 224#8) / 4#8) + 1#8) ‚äë
            if
                (!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getLsbD 8 ==
                      (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 2 &&& 248#8) + 1#9).getMsbD 1) =
                  true then
              none
            else some (~~~(x‚úù.sshiftRight 2 &&& 248#8) + 1#8)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhnegativehpowerhofhtwo_proof.lean:39:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhnegativehpowerhofhtwo_proof.lean:32:8: error: (kernel) declaration has metavariables 'prove_exact_with_high_mask_limit_thm'
[bv] [0.051624] Normalizing goal
  [Meta.synthInstance] [0.001687] ‚úÖÔ∏è Decidable
        ((if (224#8 == 0 || 8 != 1 && x‚úù &&& 224#8 == BitVec.intMin 8 && 224#8 == -1) = true then none
          else some ((x‚úù &&& 224#8).sdiv 224#8)) ‚äë
          if 5#8 ‚â• ‚Üë8 then none
          else
            if
                True ‚àß
                  (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                    (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                      1 then
              none
            else some (0#8 - x‚úù.sshiftRight (5#8).toNat))
    [Meta.check] [0.001053] ‚úÖÔ∏è BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if (224#8 == 0 || 8 != 1 && x‚úù &&& 224#8 == BitVec.intMin 8 && 224#8 == -1) = true then none
          else some ((x‚úù &&& 224#8).sdiv 224#8))
          (if 5#8 ‚â• ‚Üë8 then none
          else
            if
                True ‚àß
                  (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                    (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                      1 then
              none
            else some (0#8 - x‚úù.sshiftRight (5#8).toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x‚úù : BitVec 8
      a‚úù :
        ¬¨(if (224#8 == 0 || 8 != 1 && x‚úù &&& 224#8 == BitVec.intMin 8 && 224#8 == -1) = true then none
            else some ((x‚úù &&& 224#8).sdiv 224#8)) ‚äë
            if 5#8 ‚â• ‚Üë8 then none
            else
              if
                  True ‚àß
                    (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                      (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                        1 then
                none
              else some (0#8 - x‚úù.sshiftRight (5#8).toNat)
      ‚ä¢ False
  [Meta.isDefEq] [0.001868] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg Ne
                (Eq.trans
                  (congrArg BitVec.msb
                    (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                      (Eq.trans
                        (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                        (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9)))))
                  (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))
              (congrArg (fun x => x.getMsbD 1)
                (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                  (Eq.trans (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                    (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))))
            (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8)
              ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1))))
        (true_and
          ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
            true))
    [Meta.isDefEq.assign] [0.001866] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg Ne
                  (Eq.trans
                    (congrArg BitVec.msb
                      (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                        (Eq.trans
                          (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                          (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9)))))
                    (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))
                (congrArg (fun x => x.getMsbD 1)
                  (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                    (Eq.trans
                      (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                      (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))))
              (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8)
                ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1))))
          (true_and
            ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                  (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001846] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD 1) =
            ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                  (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg Ne
                    (Eq.trans
                      (congrArg BitVec.msb
                        (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                          (Eq.trans
                            (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                            (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9)))))
                      (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))
                  (congrArg (fun x => x.getMsbD 1)
                    (Eq.trans (BitVec.sub_toAdd (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5)))
                      (Eq.trans
                        (congrArg (HAdd.hAdd 0#9) (BitVec.neg_eq_not_add (BitVec.signExtend 9 (x‚úù.sshiftRight 5))))
                        (BitVec.zero_add (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9))))))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                  ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8)
                  ((~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1))))
            (true_and
              ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
                true)) : (True ‚àß
              (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1) =
            ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                  (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
              true))
        [Meta.isDefEq] [0.001843] ‚úÖÔ∏è (True ‚àß
                (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                  (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD 1) =
              ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
                true) =?= (True ‚àß
                (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                  (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1) =
              ((!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                    (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
                true)
          [Meta.isDefEq] [0.001823] ‚úÖÔ∏è True ‚àß
                (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                  (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                    1 =?= True ‚àß
                (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                  (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1
            [Meta.isDefEq] [0.001807] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                      BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                  (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                    1 =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                  (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1
              [Meta.isDefEq.delta] [0.001793] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).msb ‚â†
                    (BitVec.signExtend (8 + 1) 0#8 - BitVec.signExtend (8 + 1) (x‚úù.sshiftRight (5#8).toNat)).getMsbD
                      1 =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb ‚â†
                    (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).getMsbD 1
                [Meta.isDefEq] [0.001736] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                        BitVec.signExtend (8 + 1)
                          (x‚úù.sshiftRight (5#8).toNat)).msb =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb
                  [Meta.isDefEq.delta] [0.001727] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1)
                            (x‚úù.sshiftRight (5#8).toNat)).msb =?= (0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)).msb
                    [Meta.isDefEq] [0.001706] ‚úÖÔ∏è BitVec.signExtend (8 + 1) 0#8 -
                          BitVec.signExtend (8 + 1)
                            (x‚úù.sshiftRight (5#8).toNat) =?= 0#9 - BitVec.signExtend 9 (x‚úù.sshiftRight 5)
                      [Meta.isDefEq] [0.001681] ‚úÖÔ∏è instHSub.1 (BitVec.signExtend (8 + 1) 0#8)
                            (BitVec.signExtend (8 + 1)
                              (x‚úù.sshiftRight
                                (5#8).toNat)) =?= instHSub.1 (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                        [Meta.isDefEq] [0.001623] ‚úÖÔ∏è Sub.sub (BitVec.signExtend (8 + 1) 0#8)
                              (BitVec.signExtend (8 + 1)
                                (x‚úù.sshiftRight (5#8).toNat)) =?= Sub.sub (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                          [Meta.isDefEq] [0.001602] ‚úÖÔ∏è BitVec.instSub.1 (BitVec.signExtend (8 + 1) 0#8)
                                (BitVec.signExtend (8 + 1)
                                  (x‚úù.sshiftRight
                                    (5#8).toNat)) =?= BitVec.instSub.1 (0#9) (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                            [Meta.isDefEq] [0.001561] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8).sub
                                  (BitVec.signExtend (8 + 1)
                                    (x‚úù.sshiftRight (5#8).toNat)) =?= (0#9).sub (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                              [Meta.isDefEq.delta] [0.001551] ‚úÖÔ∏è (BitVec.signExtend (8 + 1) 0#8).sub
                                    (BitVec.signExtend (8 + 1)
                                      (x‚úù.sshiftRight
                                        (5#8).toNat)) =?= (0#9).sub (BitVec.signExtend 9 (x‚úù.sshiftRight 5))
                                [Meta.isDefEq] [0.001309] ‚úÖÔ∏è BitVec.signExtend (8 + 1) 0#8 =?= 0#9
                                  [Meta.isDefEq] [0.001288] ‚úÖÔ∏è BitVec.ofInt (8 + 1) (0#8).toInt =?= 0#9
                                    [Meta.isDefEq] [0.001270] ‚úÖÔ∏è ((0#8).toInt %
                                              Int.ofNat (2 ^ (8 + 1))).toNat#'‚ãØ =?= 0#9
                                      [Meta.isDefEq] [0.001253] ‚úÖÔ∏è ((0#8).toInt %
                                                Int.ofNat (2 ^ (8 + 1))).toNat#'‚ãØ =?= { toFin := Fin.ofNat' (2 ^ 9) 0 }
                                        [Meta.isDefEq] [0.001240] ‚úÖÔ∏è {
                                              toFin :=
                                                ‚ü®((0#8).toInt % Int.ofNat (2 ^ (8 + 1))).toNat,
                                                  ‚ãØ‚ü© } =?= { toFin := Fin.ofNat' (2 ^ 9) 0 }
                                          [Meta.isDefEq] [0.001191] ‚úÖÔ∏è ‚ü®((0#8).toInt % Int.ofNat (2 ^ (8 + 1))).toNat,
                                                ‚ãØ‚ü© =?= Fin.ofNat' (2 ^ 9) 0
                                            [Meta.isDefEq] [0.001173] ‚úÖÔ∏è ‚ü®((0#8).toInt % Int.ofNat (2 ^ (8 + 1))).toNat,
                                                  ‚ãØ‚ü© =?= ‚ü®0 % 2 ^ 9, ‚ãØ‚ü©
                                              [Meta.isDefEq] [0.001066] ‚úÖÔ∏è ((0#8).toInt %
                                                      Int.ofNat (2 ^ (8 + 1))).toNat =?= 0 % 2 ^ 9
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x‚úù : BitVec 8
      a‚úù :
        ¬¨some
              (if (x‚úù &&& 224#8).getLsbD 7 = true then (~~~(x‚úù &&& 224#8) + 1#8) / 32#8
              else ~~~((x‚úù &&& 224#8) / 32#8) + 1#8) ‚äë
            if
                (!(~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getLsbD 8 ==
                      (~~~BitVec.signExtend 9 (x‚úù.sshiftRight 5) + 1#9).getMsbD 1) =
                  true then
              none
            else some (~~~x‚úù.sshiftRight 5 + 1#8)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
