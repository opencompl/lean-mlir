⚠ [60/892] Replayed Mathlib.Algebra.Group.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Defs.lean:802:33: `pow_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Defs.lean:807:6: `pow_mul_comm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Defs.lean:816:6: `pow_three'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Defs.lean:839:6: `pow_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [72/892] Replayed Mathlib.Logic.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:155:8: `dec_em'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:159:8: `em'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:304:8: `or_congr_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:307:8: `or_congr_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:320:8: `imp_or'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:359:8: `xor_iff_not_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:418:8: `eqRec_heq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:515:8: `forall_true_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:536:8: `exists_apply_eq_apply'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:543:6: `exists_apply_eq_apply2'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:552:6: `exists_apply_eq_apply3'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:579:8: `forall_apply_eq_imp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:582:8: `forall_eq_apply_imp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:642:8: `forall_prop_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:715:6: `Classical.choose_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:851:8: `dite_eq_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:855:8: `ite_eq_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [73/892] Replayed Mathlib.Logic.ExistsUnique
warning: ././.lake/packages/mathlib/././Mathlib/Logic/ExistsUnique.lean:109:16: `exists_unique_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [76/892] Replayed Mathlib.Logic.Function.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:83:8: `Function.Injective.eq_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:92:8: `Function.Injective.ne_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:122:8: `Function.Injective.of_comp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:168:8: `Function.Surjective.of_comp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:242:8: `Function.Bijective.of_comp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:546:8: `Function.update_comp_eq_of_forall_ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:557:8: `Function.update_comp_eq_of_injective'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:654:8: `Function.extend_apply'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:686:8: `Function.Injective.surjective_comp_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [78/892] Replayed Mathlib.Algebra.GroupWithZero.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Defs.lean:110:8: `mul_left_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Defs.lean:113:8: `mul_right_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [82/892] Replayed Mathlib.Algebra.Ring.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Defs.lean:233:6: `add_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [86/892] Replayed Mathlib.Algebra.Field.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Defs.lean:201:6: `Rat.cast_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [233/892] Replayed Mathlib.Data.Nat.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:89:6: `Nat.succ_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:280:16: `Nat.sub_eq_of_eq_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:282:16: `Nat.eq_sub_of_add_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:285:16: `Nat.lt_sub_iff_add_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:287:16: `Nat.sub_lt_iff_lt_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:370:6: `Nat.mul_lt_mul''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:415:6: `Nat.le_div_iff_mul_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:417:6: `Nat.div_lt_iff_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:451:16: `Nat.mul_div_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:503:16: `Nat.div_le_of_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:517:16: `Nat.div_le_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:628:6: `Nat.one_le_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:634:6: `Nat.one_lt_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:643:6: `Nat.one_lt_two_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:726:6: `Nat.leRec_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:770:6: `Nat.leRecOn_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:877:6: `Nat.decreasingInduction_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:1066:6: `Nat.mod_add_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:1068:6: `Nat.div_add_mod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:1158:6: `Nat.mul_add_mod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:1175:6: `Nat.dvd_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [234/892] Replayed Mathlib.Logic.IsEmpty
warning: ././.lake/packages/mathlib/././Mathlib/Logic/IsEmpty.lean:36:9: `Fin.isEmpty'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [238/892] Replayed Mathlib.Tactic.Lift
warning: ././.lake/packages/mathlib/././Mathlib/Tactic/Lift.lean:49:9: `PiSubtype.canLift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [239/892] Replayed Mathlib.Data.Int.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Defs.lean:191:16: `Int.add_le_zero_iff_le_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Defs.lean:193:16: `Int.add_nonnneg_iff_neg_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Defs.lean:324:14: `Int.natAbs_ofNat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Defs.lean:577:6: `Int.toNat_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [241/892] Replayed Mathlib.Algebra.Group.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:165:8: `mul_rotate'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:331:8: `mul_div_assoc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:445:6: `inv_zpow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:490:6: `zpow_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:516:8: `inv_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:527:8: `inv_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:707:8: `div_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:721:8: `eq_div_of_mul_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:724:8: `div_eq_of_eq_mul''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:767:8: `eq_div_iff_mul_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:869:8: `zpow_eq_zpow_emod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:915:8: `div_eq_of_eq_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:924:8: `eq_div_of_mul_eq''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:927:8: `eq_mul_of_div_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:930:8: `mul_eq_of_eq_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:934:8: `div_div_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:947:8: `eq_div_iff_mul_eq''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:950:8: `div_eq_iff_eq_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:978:8: `div_mul_div_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [242/892] Replayed Mathlib.Algebra.Group.Units.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Defs.lean:438:8: `isUnit_iff_exists_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Defs.lean:547:21: `IsUnit.val_inv_unit'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [244/892] Replayed Mathlib.Logic.Unique
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Unique.lean:131:18: `Unique.subsingleton_unique'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Unique.lean:259:9: `Unique.subtypeEq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [253/892] Replayed Mathlib.Logic.Function.Iterate
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Iterate.lean:160:8: `Function.iterate_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Iterate.lean:163:8: `Function.iterate_succ_apply'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [254/892] Replayed Mathlib.Data.Prod.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:31:8: `Prod.forall'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:34:8: `Prod.exists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:51:8: `Prod.map_apply'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:54:8: `Prod.map_fst'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:57:8: `Prod.map_snd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [260/892] Replayed Mathlib.Algebra.Group.Units.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Basic.lean:210:8: `eq_one_of_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Basic.lean:213:8: `eq_one_of_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Basic.lean:216:8: `mul_eq_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Basic.lean:219:8: `mul_ne_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [261/892] Replayed Mathlib.Algebra.Group.Semiconj.Units
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Semiconj/Units.lean:100:6: `Units.conj_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [263/892] Replayed Mathlib.Algebra.Group.Invertible.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:97:8: `invOf_mul_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:103:8: `mul_invOf_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:109:8: `invOf_mul_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:120:8: `mul_invOf_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:131:8: `invOf_mul_cancel_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:142:8: `mul_invOf_cancel_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:198:8: `invOf_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [272/892] Replayed Mathlib.Data.FunLike.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/FunLike/Basic.lean:187:8: `DFunLike.ext'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [273/892] Replayed Mathlib.Algebra.Group.Hom.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:407:8: `map_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:412:6: `map_comp_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:460:8: `map_zpow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:466:6: `map_comp_zpow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:842:18: `MonoidHom.map_zpow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [278/892] Replayed Mathlib.Logic.Relation
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:351:8: `Relation.TransGen.head'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:354:8: `Relation.TransGen.tail'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:444:8: `Relation.TransGen.lift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:453:6: `Relation.TransGen.closed'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:523:8: `Relation.ReflTransGen.lift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [285/892] Replayed Mathlib.Data.Quot
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:563:18: `Quotient.liftOn'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:567:14: `Quotient.surjective_liftOn'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:578:18: `Quotient.liftOn₂'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:644:8: `Quotient.hrecOn'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:657:8: `Quotient.hrecOn₂'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:669:8: `Quotient.map'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:679:8: `Quotient.map₂'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:684:8: `Quotient.exact'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:688:8: `Quotient.sound'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:692:18: `Quotient.eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:696:18: `Quotient.eq''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:705:8: `Quotient.out_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:708:8: `Quotient.mk_out'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [286/892] Replayed Mathlib.Data.Bool.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Bool/Basic.lean:156:8: `Bool.eq_true_of_not_eq_false'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Bool/Basic.lean:159:8: `Bool.eq_false_of_not_eq_true'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [288/892] Replayed Mathlib.Logic.Equiv.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:138:9: `Equiv.inhabited'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:153:8: `Equiv.left_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:154:8: `Equiv.right_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:725:16: `Equiv.forall_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:737:16: `Equiv.exists_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:757:16: `Equiv.existsUnique_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:772:18: `Equiv.forall₂_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:782:18: `Equiv.forall₃_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [290/892] Replayed Mathlib.Algebra.NeZero
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:44:6: `zero_ne_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:46:6: `one_ne_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:48:6: `two_ne_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:50:6: `three_ne_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:52:6: `four_ne_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [292/892] Replayed Mathlib.Algebra.GroupWithZero.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Basic.lean:185:14: `pow_eq_zero_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Basic.lean:350:8: `div_self_mul_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Basic.lean:417:6: `zpow_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [295/892] Replayed Mathlib.Algebra.GroupWithZero.Units.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:183:8: `Units.mul_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:187:8: `Units.inv_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:300:6: `div_left_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:395:8: `Ring.inverse_eq_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:435:6: `mul_div_cancel_of_imp'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:457:6: `div_div_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:459:6: `div_div_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:464:6: `div_div_div_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:467:14: `div_mul_div_cancel₀'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [297/892] Replayed Mathlib.Data.Sigma.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sigma/Basic.lean:90:6: `Sigma.exists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sigma/Basic.lean:93:6: `Sigma.forall'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [313/892] Replayed Mathlib.Logic.Equiv.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Basic.lean:1706:8: `Equiv.coe_piCongr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [314/892] Replayed Mathlib.Algebra.Group.Equiv.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Equiv/Basic.lean:330:8: `MulEquiv.mk_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [320/892] Replayed Mathlib.Algebra.Group.TypeTags
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/TypeTags.lean:494:6: `AddMonoidHom.coe_toMultiplicative'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/TypeTags.lean:504:6: `MonoidHom.coe_toAdditive'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/TypeTags.lean:525:6: `AddMonoidHom.coe_toMultiplicative''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/TypeTags.lean:535:6: `MonoidHom.coe_toAdditive''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [323/892] Replayed Mathlib.Data.Nat.Sqrt
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:114:6: `Nat.sqrt_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:118:6: `Nat.lt_succ_sqrt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:127:6: `Nat.le_sqrt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:131:6: `Nat.sqrt_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:150:6: `Nat.eq_sqrt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:170:6: `Nat.sqrt_add_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:175:6: `Nat.sqrt_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:185:6: `Nat.exists_mul_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:191:6: `Nat.sqrt_mul_sqrt_lt_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:197:6: `Nat.succ_le_succ_sqrt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:207:6: `Nat.not_exists_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [324/892] Replayed Mathlib.Algebra.Group.Nat
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Nat.lean:128:6: `Nat.even_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [336/892] Replayed Mathlib.Algebra.GroupWithZero.Commute
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Commute.lean:22:8: `Ring.mul_inverse_rev'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [342/892] Replayed Mathlib.Algebra.Ring.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Basic.lean:92:8: `inv_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [346/892] Replayed Mathlib.Algebra.Ring.Commute
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Commute.lean:47:8: `Commute.mul_self_sub_mul_self_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Commute.lean:131:6: `neg_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Commute.lean:193:6: `sub_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [439/892] Replayed Mathlib.Algebra.Group.Int
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Int.lean:115:6: `Int.eq_one_or_neg_one_of_mul_eq_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Int.lean:128:6: `Int.eq_one_or_neg_one_of_mul_eq_neg_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Int.lean:210:6: `Int.even_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [441/892] Replayed Mathlib.Data.Nat.Cast.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:67:6: `nsmul_eq_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:98:8: `ext_nat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:113:8: `eq_natCast'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:117:8: `map_natCast'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:124:8: `map_ofNat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [446/892] Replayed Mathlib.Algebra.Ring.Parity
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:119:14: `odd_add_self_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:121:14: `odd_add_one_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:223:6: `Nat.even_or_odd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:226:6: `Nat.even_xor_odd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:244:6: `Nat.even_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:253:6: `Nat.even_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:276:6: `Nat.odd_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:286:6: `Nat.odd_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [447/892] Replayed Mathlib.Algebra.Ring.Int
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:113:6: `Int.even_or_odd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:121:6: `Int.even_xor'_odd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:130:6: `Int.even_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:136:6: `Int.even_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:148:6: `Int.odd_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:153:6: `Int.odd_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:160:6: `Int.odd_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [449/892] Replayed Mathlib.Control.Combinators
warning: ././.lake/packages/mathlib/././Mathlib/Control/Combinators.lean:35:4: `Monad.mapM'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Control/Combinators.lean:57:4: `Monad.sequence'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [450/892] Replayed Mathlib.Data.Option.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:80:8: `Option.none_bind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:84:8: `Option.some_bind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:87:8: `Option.bind_eq_some'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:96:8: `Option.bind_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:103:8: `Option.bind_eq_bind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:110:8: `Option.map_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:140:8: `Option.map_bind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:207:8: `Option.some_orElse'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:211:8: `Option.none_orElse'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:214:8: `Option.orElse_none'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:229:8: `Option.guard_eq_some'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:276:8: `Option.orElse_eq_some'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:287:8: `Option.orElse_eq_none'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [451/892] Replayed Mathlib.Data.Prod.PProd
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/PProd.lean:35:8: `PProd.forall'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/PProd.lean:38:8: `PProd.exists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [455/892] Replayed Mathlib.Algebra.Group.Action.Faithful
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Action/Faithful.lean:51:6: `smul_left_injective'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [457/892] Replayed Mathlib.Algebra.GroupWithZero.Action.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:237:9: `AddMonoid.nat_smulCommClass'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:250:9: `AddGroup.int_smulCommClass'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:278:8: `smul_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:318:14: `smul_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:328:8: `smul_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:331:8: `smul_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [461/892] Replayed Mathlib.Order.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:69:8: `le_trans'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:72:8: `lt_trans'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:75:8: `lt_of_le_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:78:8: `lt_of_lt_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:90:8: `lt_of_le_of_ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:95:8: `Ne.lt_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:155:8: `le_of_le_of_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:158:8: `le_of_eq_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:161:8: `lt_of_lt_of_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:164:8: `lt_of_eq_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:264:8: `LT.lt.ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:349:8: `min_def'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:358:8: `max_def'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:401:8: `lt_iff_lt_of_le_iff_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:419:8: `le_of_forall_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:428:8: `le_of_forall_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:431:8: `forall_lt_iff_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:850:8: `update_le_update_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:909:8: `min_rec'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:912:8: `max_rec'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [463/892] Replayed Mathlib.Algebra.Field.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:56:8: `add_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:60:8: `div_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:103:8: `neg_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:199:8: `sub_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:203:8: `div_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [466/892] Replayed Mathlib.Order.Compare
warning: ././.lake/packages/mathlib/././Mathlib/Order/Compare.lean:220:8: `Eq.cmp_eq_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [469/892] Replayed Mathlib.Order.RelClasses
warning: ././.lake/packages/mathlib/././Mathlib/Order/RelClasses.lean:35:8: `antisymm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/RelClasses.lean:112:8: `ne_of_irrefl'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [470/892] Replayed Mathlib.Order.Monotone.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Monotone/Basic.lean:457:8: `Subsingleton.monotone'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Monotone/Basic.lean:460:8: `Subsingleton.antitone'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Monotone/Basic.lean:549:18: `StrictMono.ite'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Monotone/Basic.lean:567:18: `StrictAnti.ite'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [477/892] Replayed Mathlib.Algebra.Order.Monoid.Unbundled.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:63:8: `mul_le_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:68:8: `le_of_mul_le_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:76:8: `mul_le_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:82:8: `le_of_mul_le_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:118:8: `mul_lt_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:123:8: `lt_of_mul_lt_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:129:8: `mul_lt_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:135:8: `lt_of_mul_lt_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:184:8: `mul_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:251:8: `mul_left_cancel''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:256:8: `mul_right_cancel''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:310:8: `max_mul_mul_le_max_mul_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:315:8: `min_mul_min_le_min_mul_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:332:8: `le_mul_of_one_le_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:339:8: `mul_le_of_le_one_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:346:8: `le_mul_of_one_le_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:353:8: `mul_le_of_le_one_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:382:8: `le_mul_iff_one_le_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:388:8: `le_mul_iff_one_le_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:394:8: `mul_le_iff_le_one_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:400:8: `mul_le_iff_le_one_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:412:8: `lt_mul_of_one_lt_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:419:8: `mul_lt_of_lt_one_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:426:8: `lt_mul_of_one_lt_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:434:8: `mul_lt_of_lt_one_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:464:8: `lt_mul_iff_one_lt_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:470:8: `lt_mul_iff_one_lt_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:475:8: `mul_lt_iff_lt_one_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:481:8: `mul_lt_iff_lt_one_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:532:8: `mul_lt_of_lt_of_lt_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:622:8: `lt_mul_of_lt_of_one_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:712:8: `mul_lt_of_lt_one_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:805:8: `lt_mul_of_one_lt_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1058:8: `Monotone.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1062:8: `MonotoneOn.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1066:8: `Antitone.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1070:8: `AntitoneOn.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1074:8: `Monotone.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1078:8: `MonotoneOn.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1083:8: `Antitone.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1087:8: `AntitoneOn.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1122:8: `StrictMono.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1126:8: `StrictMonoOn.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1131:8: `StrictAnti.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1135:8: `StrictAntiOn.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1146:8: `StrictMono.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1150:8: `StrictMonoOn.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1155:8: `StrictAnti.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1159:8: `StrictAntiOn.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1259:8: `cmp_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1265:8: `cmp_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [478/892] Replayed Mathlib.Algebra.Order.Sub.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Sub/Defs.lean:200:8: `le_add_tsub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [479/892] Replayed Mathlib.Algebra.Order.Group.Unbundled.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:60:8: `inv_le_iff_one_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:102:8: `inv_lt_iff_one_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:106:8: `lt_inv_iff_mul_lt_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:257:8: `inv_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:260:8: `lt_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:354:8: `inv_mul_le_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:358:8: `mul_inv_le_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:362:8: `mul_inv_le_mul_inv_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:372:8: `inv_mul_lt_iff_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:376:8: `mul_inv_lt_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:380:8: `mul_inv_lt_mul_inv_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:477:8: `div_le_div_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:481:8: `one_le_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:487:8: `div_le_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:525:8: `div_le_div_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:541:8: `div_le_div_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:545:8: `le_div_iff_mul_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:550:8: `div_le_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:559:8: `inv_le_div_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:576:8: `div_le_div''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:599:8: `div_lt_div_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:603:8: `one_lt_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:609:8: `div_lt_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:645:8: `div_lt_div_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:661:8: `div_lt_div_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:665:8: `lt_div_iff_mul_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:670:8: `div_lt_iff_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:675:8: `inv_lt_div_iff_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:693:8: `div_lt_div''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:713:8: `cmp_div_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [484/892] Replayed Mathlib.Order.BoundedOrder
warning: ././.lake/packages/mathlib/././Mathlib/Order/BoundedOrder.lean:146:8: `Ne.lt_top'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BoundedOrder.lean:323:8: `Ne.bot_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [485/892] Replayed Mathlib.Order.Disjoint
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:139:8: `Disjoint.inf_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:145:8: `Disjoint.inf_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:153:8: `Disjoint.of_disjoint_inf_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:267:6: `Codisjoint.ne_bot_of_ne_top'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:302:8: `Codisjoint.sup_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:308:8: `Codisjoint.sup_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:317:8: `Codisjoint.of_codisjoint_sup_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [488/892] Replayed Mathlib.Order.WithBot
warning: ././.lake/packages/mathlib/././Mathlib/Order/WithBot.lean:361:8: `WithBot.le_coe_unbot'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [490/892] Replayed Mathlib.Order.Hom.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Basic.lean:1079:8: `OrderIso.map_bot'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Basic.lean:1088:8: `OrderIso.map_top'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [491/892] Replayed Mathlib.Algebra.Order.Group.OrderIso
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/OrderIso.lean:42:8: `inv_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/OrderIso.lean:50:8: `le_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [493/892] Replayed Mathlib.Algebra.Order.Group.Unbundled.Abs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Abs.lean:60:21: `mabs_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Abs.lean:249:21: `max_div_min_eq_mabs'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [498/892] Replayed Mathlib.Algebra.Order.GroupWithZero.Unbundled
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:258:8: `mul_le_mul_of_nonneg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:299:8: `mul_lt_mul_of_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:561:8: `mul_eq_mul_iff_eq_and_eq_of_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:741:8: `mul_le_of_le_of_le_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:745:8: `mul_lt_of_lt_of_le_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:749:8: `mul_lt_of_le_of_lt_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:787:8: `le_mul_of_le_of_one_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:791:8: `lt_mul_of_le_of_one_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:795:8: `lt_mul_of_lt_of_one_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:837:8: `mul_le_of_le_one_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:841:8: `mul_lt_of_lt_one_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:845:8: `mul_lt_of_le_one_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:928:8: `exists_square_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:1064:16: `Decidable.mul_lt_mul''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:1497:14: `inv_neg''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [499/892] Replayed Mathlib.Algebra.Order.Group.Synonym
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Synonym.lean:39:9: `OrderDual.instPow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Synonym.lean:156:9: `Lex.instPow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [501/892] Replayed Mathlib.Algebra.Order.Monoid.Unbundled.Pow
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:68:8: `pow_le_pow_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:72:8: `pow_le_pow_right_of_le_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:76:8: `one_lt_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:86:8: `pow_right_strictMono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:90:8: `pow_lt_pow_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:140:6: `pow_lt_pow_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:150:8: `pow_le_pow_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:207:8: `pow_le_pow_iff_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:211:8: `pow_lt_pow_iff_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:221:8: `lt_of_pow_lt_pow_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:239:8: `le_of_pow_le_pow_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:253:8: `Left.pow_lt_one_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [506/892] Replayed Mathlib.Order.Heyting.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Heyting/Basic.lean:380:8: `sdiff_le_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Heyting/Basic.lean:431:8: `sup_sdiff_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Heyting/Basic.lean:766:8: `top_sdiff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [507/892] Replayed Mathlib.Order.BooleanAlgebra
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:287:8: `sdiff_eq_self_iff_disjoint'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:337:8: `sdiff_sdiff_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:367:8: `sdiff_sdiff_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:379:8: `sdiff_sdiff_sup_sdiff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:524:8: `inf_compl_eq_bot'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [509/892] Replayed Mathlib.Data.Set.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:127:9: `Set.PiSetCoe.canLift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:153:8: `SetCoe.exists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:157:8: `SetCoe.forall'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:391:8: `Set.nonempty_of_ssubset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:1030:8: `Set.setOf_eq_eq_singleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:1209:8: `Set.eq_of_nonempty_of_subsingleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:1453:8: `Set.union_diff_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:2135:8: `Disjoint.inter_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:2141:8: `Disjoint.inter_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [512/892] Replayed Mathlib.Order.SymmDiff
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:80:8: `symmDiff_eq_Xor'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:286:8: `symmDiff_top'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:289:8: `top_symmDiff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:349:8: `sdiff_symmDiff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:418:8: `symmDiff_symmDiff_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:588:8: `symmDiff_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:591:8: `bihimp_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:634:8: `symmDiff_symmDiff_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [514/892] Replayed Mathlib.Data.Set.Image
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:107:8: `Set.preimage_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:625:8: `Set.Nonempty.preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:718:8: `Set.preimage_eq_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:745:8: `Set.range_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:837:8: `Set.range_quotient_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:840:6: `Set.Quotient.range_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:844:8: `Set.range_quotient_lift_on'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:910:8: `Set.range_ite_subset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:1255:8: `Subtype.preimage_coe_compl'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:1404:6: `sigma_mk_preimage_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [515/892] Replayed Mathlib.Order.Directed
warning: ././.lake/packages/mathlib/././Mathlib/Order/Directed.lean:68:8: `DirectedOn.mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Directed.lean:208:8: `directedOn_pair'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Directed.lean:277:18: `IsMin.not_isMax'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Directed.lean:283:18: `IsMax.not_isMin'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [516/892] Replayed Mathlib.Order.Interval.Set.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1003:8: `Set.Ioo_union_Ioi'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1031:8: `Set.Ico_union_Ici'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1051:8: `Set.Ioc_union_Ioi'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1086:8: `Set.Icc_union_Ici'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1121:8: `Set.Iio_union_Ico'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1142:8: `Set.Iic_union_Ioc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1164:8: `Set.Iio_union_Ioo'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1186:8: `Set.Iic_union_Icc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1231:8: `Set.Ico_union_Ico'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1305:8: `Set.Ioc_union_Ioc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1353:8: `Set.Icc_union_Icc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1384:8: `Set.Ioo_union_Ioo'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [517/892] Replayed Mathlib.Order.Bounds.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/Basic.lean:894:8: `IsLUB.exists_between'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/Basic.lean:902:8: `IsGLB.exists_between'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [518/892] Replayed Mathlib.Data.Set.Prod
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Prod.lean:681:8: `Set.pi_eq_empty_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Prod.lean:700:8: `Set.singleton_pi'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Prod.lean:846:8: `Set.eval_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [519/892] Replayed Mathlib.Data.Set.Function
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:278:8: `Set.mapsTo'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:331:6: `Set.mapsTo_of_subsingleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:767:6: `Set.surjOn_of_subsingleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:914:6: `Set.bijOn_of_subsingleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1020:8: `Set.LeftInvOn.image_inter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1036:8: `Set.LeftInvOn.image_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1400:8: `Set.EqOn.piecewise_ite'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1542:8: `Function.update_comp_eq_of_not_mem_range'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1636:6: `Equiv.bijOn'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [529/892] Replayed Mathlib.Order.Hom.Set
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Set.lean:141:9: `OrderIso.subsingleton_of_wellFoundedLT'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Set.lean:155:9: `OrderIso.subsingleton_of_wellFoundedGT'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [531/892] Replayed Mathlib.Order.CompleteLattice
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:438:6: `sSup_eq_bot'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:508:8: `sSup_eq_iSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:517:8: `biSup_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:553:8: `iSup_range'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:557:8: `sSup_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:569:8: `sInf_eq_iInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:579:8: `biInf_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:610:8: `iInf_range'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:613:8: `sInf_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:628:8: `le_iSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:631:8: `iInf_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:700:8: `iSup_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:703:8: `iInf_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:706:8: `iSup₂_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:712:8: `iInf₂_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:993:8: `iSup_subtype'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:997:8: `iInf_subtype'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1001:8: `iSup_subtype''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1004:8: `iInf_subtype''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1287:8: `iSup_of_empty'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1325:6: `iSup_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1328:6: `iInf_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1339:6: `iSup_psigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1342:6: `iInf_psigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1351:6: `iSup_prod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1354:6: `iInf_prod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [532/892] Replayed Mathlib.Order.CompleteBooleanAlgebra
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteBooleanAlgebra.lean:231:6: `CompletelyDistribLattice.MinimalAxioms.iInf_iSup_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteBooleanAlgebra.lean:596:8: `compl_sInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteBooleanAlgebra.lean:599:8: `compl_sSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [534/892] Replayed Mathlib.Order.GaloisConnection
warning: ././.lake/packages/mathlib/././Mathlib/Order/GaloisConnection.lean:157:8: `GaloisConnection.u_l_u_eq_u'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/GaloisConnection.lean:184:8: `GaloisConnection.l_u_l_eq_l'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [535/892] Replayed Mathlib.Data.Set.Lattice
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:288:8: `Set.iUnion_mono''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:301:8: `Set.iInter_mono''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:310:8: `Set.iUnion_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:316:8: `Set.iUnion₂_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:320:8: `Set.iInter_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:328:8: `Set.iInter₂_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:628:8: `Set.iUnion_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:635:8: `Set.iInter_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:658:8: `Set.biUnion_and'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:670:8: `Set.biInter_and'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:1443:8: `Set.iUnion_iUnion_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:1451:8: `Set.iInter_iInter_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [536/892] Replayed Mathlib.Order.ConditionallyCompleteLattice.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:84:8: `WithTop.coe_sInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:96:8: `WithTop.coe_sSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:111:8: `WithBot.coe_sSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:116:8: `WithBot.coe_sInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:757:8: `le_csInf_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:792:8: `isLUB_csSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:802:8: `csSup_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:810:8: `le_csSup_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:814:8: `le_csInf_iff''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:818:8: `csInf_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:820:8: `exists_lt_of_lt_csSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:824:8: `not_mem_of_lt_csInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:827:8: `csInf_le_csInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:830:8: `csSup_le_csSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [539/892] Replayed Mathlib.Order.Interval.Set.UnorderedInterval
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:82:6: `Set.Icc_subset_uIcc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:103:6: `Set.uIcc_subset_uIcc_iff_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:140:6: `Set.eq_of_mem_uIcc_of_mem_uIcc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:271:6: `Set.Ioc_subset_uIoc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:279:6: `Set.eq_of_mem_uIoc_of_mem_uIoc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [541/892] Replayed Mathlib.Data.Set.Pairwise.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Pairwise/Basic.lean:73:8: `Set.Pairwise.mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Pairwise/Basic.lean:311:8: `Set.PairwiseDisjoint.elim'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [542/892] Replayed Mathlib.Order.Antichain
warning: ././.lake/packages/mathlib/././Mathlib/Order/Antichain.lean:56:18: `IsAntichain.eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [543/892] Replayed Mathlib.Order.Interval.Set.OrdConnected
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/OrdConnected.lean:130:9: `Set.OrdConnected.inter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/OrdConnected.lean:149:9: `Set.ordConnected_iInter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/OrdConnected.lean:162:9: `Set.ordConnected_pi'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [547/892] Replayed Mathlib.Data.Rat.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:111:8: `Rat.normalize_eq_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:125:14: `Rat.divInt_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:172:8: `Rat.add_def''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:186:6: `Rat.sub_def''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:190:6: `Rat.divInt_mul_divInt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:199:6: `Rat.mk'_mul_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:238:14: `Rat.inv_divInt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:243:6: `Rat.inv_def'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:249:6: `Rat.div_def'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [550/892] Replayed Mathlib.Data.NNRat.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/NNRat/Defs.lean:265:8: `Rat.toNNRat_lt_toNNRat_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/NNRat/Defs.lean:287:8: `Rat.le_toNNRat_iff_coe_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [555/892] Replayed Mathlib.Data.Int.Cast.Lemmas
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Cast/Lemmas.lean:107:6: `zsmul_eq_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Cast/Lemmas.lean:217:8: `eq_intCast'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Cast/Lemmas.lean:354:8: `RingHom.eq_intCast'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [557/892] Replayed Mathlib.Algebra.GroupWithZero.Divisibility
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Divisibility.lean:142:8: `dvd_antisymm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Divisibility.lean:152:8: `eq_of_forall_dvd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [558/892] Replayed Mathlib.Data.PNat.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/PNat/Defs.lean:131:8: `PNat.coe_toPNat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [559/892] Replayed Mathlib.Data.Rat.Lemmas
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Lemmas.lean:132:8: `Rat.mul_num_den'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Lemmas.lean:146:8: `Rat.add_num_den'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Lemmas.lean:165:8: `Rat.substr_num_den'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [566/892] Replayed Mathlib.Tactic.Ring.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Tactic/Ring/Basic.lean:942:8: `Mathlib.Tactic.Ring.atom_pf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [571/892] Replayed Mathlib.Algebra.Order.Monoid.Unbundled.ExistsOfLE
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/ExistsOfLE.lean:51:21: `exists_one_lt_mul_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/ExistsOfLE.lean:77:8: `le_of_forall_one_lt_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/ExistsOfLE.lean:81:8: `le_iff_forall_one_lt_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [572/892] Replayed Mathlib.Algebra.Order.Monoid.Canonical.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Canonical/Defs.lean:103:8: `le_iff_exists_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Canonical/Defs.lean:189:26: `NeZero.of_gt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Canonical/Defs.lean:226:8: `min_mul_distrib'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [576/892] Replayed Mathlib.Algebra.GroupWithZero.WithZero
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/WithZero.lean:132:6: `WithZero.map'_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [577/892] Replayed Mathlib.Algebra.Order.Group.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:115:8: `LinearOrderedCommGroup.mul_lt_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:119:8: `eq_one_of_inv_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:130:8: `exists_one_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:177:8: `inv_le_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:181:8: `inv_lt_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [578/892] Replayed Mathlib.Algebra.Order.Monoid.Unbundled.WithTop
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/WithTop.lean:53:8: `WithTop.untop_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/WithTop.lean:418:8: `WithBot.unbot_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [588/892] Replayed Mathlib.Algebra.Order.GroupWithZero.Canonical
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Canonical.lean:69:14: `zero_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Canonical.lean:73:8: `not_lt_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [589/892] Replayed Mathlib.Algebra.Order.Monoid.NatCast
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/NatCast.lean:49:6: `one_le_two'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [591/892] Replayed Mathlib.Algebra.Order.Ring.Unbundled.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Unbundled/Basic.lean:177:8: `mul_le_mul_of_nonneg_of_nonpos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Unbundled/Basic.lean:187:8: `mul_le_mul_of_nonpos_of_nonneg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Unbundled/Basic.lean:197:8: `mul_le_mul_of_nonpos_of_nonpos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Unbundled/Basic.lean:484:8: `add_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [598/892] Replayed Mathlib.Data.PNat.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/PNat/Basic.lean:293:8: `PNat.mod_add_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/PNat/Basic.lean:297:8: `PNat.div_add_mod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/PNat/Basic.lean:329:8: `PNat.dvd_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [605/892] Replayed Mathlib.Data.List.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Defs.lean:241:9: `List.decidableChain'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [606/892] Replayed Mathlib.Data.Nat.Bits
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Bits.lean:225:8: `Nat.bit_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [607/892] Replayed Mathlib.Data.Nat.Size
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Size.lean:57:8: `Nat.size_shiftLeft'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [612/892] Replayed Mathlib.Data.Fin.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:102:6: `Fin.size_positive'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:326:8: `Fin.last_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:393:8: `Fin.val_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:397:8: `Fin.val_one''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:524:8: `Fin.succ_zero_eq_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:529:8: `Fin.one_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:530:8: `Fin.zero_ne_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:701:8: `Fin.forall_fin_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:709:8: `Fin.exists_fin_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:796:8: `Fin.pred_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:903:8: `Fin.castPred_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:1526:18: `Fin.mul_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:1533:18: `Fin.one_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:1536:18: `Fin.mul_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:1538:18: `Fin.zero_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [615/892] Replayed Mathlib.Data.Int.GCD
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/GCD.lean:278:8: `Int.exists_gcd_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [616/892] Replayed Mathlib.Data.Nat.ModEq
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:95:18: `Nat.ModEq.mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:102:18: `Nat.ModEq.mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:141:18: `Nat.ModEq.add_left_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:149:18: `Nat.ModEq.add_right_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:160:18: `Nat.ModEq.mul_left_cancel_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:172:18: `Nat.ModEq.mul_right_cancel_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:254:6: `Nat.ModEq.cancel_left_div_gcd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:258:6: `Nat.ModEq.cancel_right_div_gcd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [621/892] Replayed Mathlib.Data.List.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:218:8: `List.replicate_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:234:8: `List.replicate_right_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:261:8: `List.reverse_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:264:8: `List.reverse_concat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:301:8: `List.getLast_append'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:307:8: `List.getLast_concat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:311:8: `List.getLast_singleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:623:6: `List.cons_sublist_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:766:8: `List.ext_get?'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:785:8: `List.ext_get?_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:827:8: `List.get_reverse'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1045:8: `List.takeI_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1069:8: `List.takeD_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1100:8: `List.foldl_fixed'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1104:8: `List.foldr_fixed'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1284:8: `List.foldl_eq_of_comm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1288:8: `List.foldl_eq_foldr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1298:8: `List.foldr_eq_of_comm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1611:8: `List.lookmap_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1688:8: `List.filter_subset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1722:6: `List.map_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1727:6: `List.filter_attach'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:2032:8: `List.map₂Left_eq_map₂Left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:2071:8: `List.map₂Right_eq_map₂Right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:2105:8: `List.zipLeft_eq_zipLeft'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:2141:8: `List.zipRight_eq_zipRight'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [622/892] Replayed Mathlib.Data.List.Forall2
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Forall2.lean:108:8: `List.left_unique_forall₂'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Forall2.lean:116:8: `List.right_unique_forall₂'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [624/892] Replayed Mathlib.Data.List.Lattice
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Lattice.lean:111:8: `List.inter_nil'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [627/892] Replayed Mathlib.Data.List.Dedup
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Dedup.lean:33:8: `List.dedup_cons_of_mem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Dedup.lean:36:8: `List.dedup_cons_of_not_mem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [633/892] Replayed Mathlib.Data.Multiset.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:51:8: `Multiset.quot_mk_to_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:55:8: `Multiset.quot_mk_to_coe''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:398:8: `Multiset.induction_on'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1151:8: `Multiset.map_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1159:16: `Multiset.map_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1289:8: `Multiset.foldr_induction'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1303:8: `Multiset.foldl_induction'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1376:8: `Multiset.attach_map_val'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1871:6: `Multiset.map_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:2252:8: `Multiset.ext'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:2303:8: `Multiset.filter_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:2578:6: `Multiset.filter_attach'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [635/892] Replayed Mathlib.Data.List.Pairwise
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Pairwise.lean:53:46: `List.pairwise_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [637/892] Replayed Mathlib.Data.Multiset.Dedup
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Dedup.lean:56:8: `Multiset.dedup_subset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Dedup.lean:60:8: `Multiset.subset_dedup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [640/892] Replayed Mathlib.Data.Finset.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:185:14: `Finset.forall_mem_not_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:213:9: `Finset.decidableMem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:247:9: `Finset.PiFinsetCoe.canLift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:679:8: `Finset.subset_singleton_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:977:8: `Finset.insert_val'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:1799:8: `Finset.erase_injOn'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:1953:6: `Finset.insert_sdiff_insert'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:2049:8: `Finset.sdiff_sdiff_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:2400:8: `Finset.disjoint_filter_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:2549:8: `Finset.filter_ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:2567:6: `Finset.filter_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:3051:8: `Finset.pairwise_subtype_iff_pairwise_finset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:3059:8: `Finset.pairwise_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [642/892] Replayed Mathlib.Data.List.Lex
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Lex.lean:158:9: `List.LT'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Lex.lean:168:9: `List.LE'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [643/892] Replayed Mathlib.Data.List.Chain
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Chain.lean:204:8: `List.chain'_map_of_chain'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Chain.lean:208:8: `List.Pairwise.chain'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Chain.lean:235:8: `List.Chain'.cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Chain.lean:239:8: `List.chain'_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [645/892] Replayed Mathlib.Data.List.Rotate
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:52:8: `List.length_rotate'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:68:8: `List.rotate'_rotate'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:96:8: `List.rotate_eq_rotate'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:408:8: `List.isRotated_nil_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:416:8: `List.isRotated_singleton_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [646/892] Replayed Mathlib.Data.List.Join
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Join.lean:137:8: `List.drop_take_succ_join_eq_get'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [647/892] Replayed Mathlib.Algebra.BigOperators.Group.List
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/List.lean:539:8: `List.alternatingProd_cons_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/List.lean:553:8: `List.alternatingProd_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [649/892] Replayed Mathlib.Algebra.BigOperators.Group.Multiset
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Multiset.lean:137:8: `Multiset.prod_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Multiset.lean:261:8: `Multiset.prod_map_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [652/892] Replayed Mathlib.Data.Finset.Image
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:83:8: `Finset.mem_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:186:6: `Finset.map_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:191:6: `Finset.filter_attach'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:283:8: `Finset.range_add_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:379:8: `Finset.image_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:498:8: `Finset.mem_range_iff_mem_finset_range_of_mod_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [656/892] Replayed Mathlib.Data.Nat.Find
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Find.lean:71:18: `Nat.find_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [657/892] Replayed Mathlib.Data.Fin.Tuple.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Tuple/Basic.lean:853:8: `Fin.insertNth_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Tuple/Basic.lean:869:8: `Fin.insertNth_last'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Tuple/Basic.lean:1013:8: `Fin.find_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [658/892] Replayed Mathlib.Data.List.OfFn
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/OfFn.lean:74:8: `List.ofFn_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [660/892] Replayed Mathlib.Data.Fintype.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Basic.lean:293:8: `Finset.insert_inj_on'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Basic.lean:827:16: `Fin.univ_image_getElem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Basic.lean:831:8: `Fin.univ_image_get'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [666/892] Replayed Mathlib.Data.Fintype.Card
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Card.lean:128:8: `Fintype.card_of_finset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Card.lean:142:8: `Fintype.card_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Card.lean:310:8: `Fintype.card_subtype_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [677/892] Replayed Mathlib.Data.Finset.Piecewise
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Piecewise.lean:157:6: `Finset.piecewise_le_piecewise'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Piecewise.lean:170:6: `Finset.piecewise_mem_Icc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [681/892] Replayed Mathlib.Control.Applicative
warning: ././.lake/packages/mathlib/././Mathlib/Control/Applicative.lean:34:8: `Applicative.pure_seq_eq_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [682/892] Replayed Mathlib.Control.Traversable.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Control/Traversable/Basic.lean:139:8: `ApplicativeTransformation.preserves_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [683/892] Replayed Mathlib.Data.Vector.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Vector/Basic.lean:581:8: `Mathlib.Vector.prod_set'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [784/892] Replayed Mathlib.Algebra.Order.Ring.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Basic.lean:81:6: `pow_add_pow_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [787/892] Replayed Mathlib.Order.Cover
warning: ././.lake/packages/mathlib/././Mathlib/Order/Cover.lean:97:6: `WCovBy.of_le_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Cover.lean:253:8: `CovBy.ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [788/892] Replayed Mathlib.Algebra.Group.Support
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:52:8: `Function.mulSupport_subset_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:135:8: `Function.mulSupport_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:183:8: `Function.mulSupport_prod_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:198:8: `Function.mulSupport_curry'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:226:8: `Function.mulSupport_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [791/892] Replayed Mathlib.Data.Nat.Factorial.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Factorial/Basic.lean:114:8: `Nat.factorial_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Factorial/Basic.lean:252:8: `Nat.pow_lt_ascFactorial'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Factorial/Basic.lean:338:8: `Nat.add_descFactorial_eq_ascFactorial'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Factorial/Basic.lean:391:8: `Nat.pow_sub_lt_descFactorial'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [793/892] Replayed Mathlib.Algebra.Order.Group.Abs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Abs.lean:72:8: `le_abs'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Abs.lean:81:8: `apply_abs_le_mul_of_one_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Abs.lean:100:8: `abs_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [796/892] Replayed Mathlib.Tactic.Positivity.Core
warning: ././.lake/packages/mathlib/././Mathlib/Tactic/Positivity/Core.lean:28:6: `ne_of_ne_of_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Tactic/Positivity/Core.lean:122:6: `Mathlib.Meta.Positivity.lt_of_le_of_ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [806/892] Replayed Mathlib.Algebra.CharZero.Lemmas
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/CharZero/Lemmas.lean:100:8: `nat_mul_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [809/892] Replayed Mathlib.Algebra.Order.Ring.Abs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Abs.lean:100:6: `sq_lt_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Abs.lean:107:6: `sq_le_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Abs.lean:113:6: `abs_lt_of_sq_lt_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Abs.lean:119:6: `abs_le_of_sq_le_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [810/892] Replayed Mathlib.Order.Bounds.OrderIso
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/OrderIso.lean:34:8: `OrderIso.isLUB_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/OrderIso.lean:41:8: `OrderIso.isGLB_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/OrderIso.lean:48:8: `OrderIso.isLUB_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/OrderIso.lean:55:8: `OrderIso.isGLB_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [811/892] Replayed Mathlib.Algebra.Order.Field.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:34:8: `lt_div_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:40:8: `div_lt_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:46:8: `inv_mul_le_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:52:8: `mul_inv_le_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:58:8: `inv_mul_lt_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:64:8: `mul_inv_lt_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:70:8: `inv_pos_le_iff_one_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:76:8: `inv_pos_lt_iff_one_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:226:8: `div_lt_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:495:8: `div_le_iff_of_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:501:8: `le_div_iff_of_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:507:8: `div_lt_iff_of_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:513:8: `lt_div_iff_of_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [828/892] Replayed Mathlib.Order.Hom.Lattice
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1050:8: `LatticeHom.coe_comp_sup_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1060:8: `LatticeHom.coe_comp_inf_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1233:8: `BoundedLatticeHom.coe_comp_lattice_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1244:8: `BoundedLatticeHom.coe_comp_sup_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1254:8: `BoundedLatticeHom.coe_comp_inf_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [829/892] Replayed Mathlib.Data.Finset.Lattice
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:706:8: `Finset.coe_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:731:8: `Finset.le_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:817:8: `map_finset_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:822:6: `Finset.nsmul_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:879:8: `Finset.coe_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:900:8: `Finset.le_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:972:8: `map_finset_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:977:6: `Finset.nsmul_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1066:8: `Finset.toDual_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1071:8: `Finset.toDual_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1076:8: `Finset.ofDual_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1081:8: `Finset.ofDual_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1099:8: `Finset.sup'_inf_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1109:8: `Finset.inf'_sup_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1146:8: `Finset.exists_mem_eq_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1156:8: `Finset.exists_mem_eq_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1212:8: `Finset.sup_singleton''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1219:8: `Finset.sup_singleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [830/892] Replayed Mathlib.Data.Set.Sigma
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Sigma.lean:124:8: `biSup_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Sigma.lean:132:8: `biInf_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Sigma.lean:142:8: `Set.biUnion_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Sigma.lean:150:8: `Set.biInter_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [833/892] Replayed Mathlib.Data.Finset.Sigma
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Sigma.lean:107:8: `biSup_finsetSigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Sigma.lean:115:8: `biInf_finsetSigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Sigma.lean:123:8: `Set.biUnion_finsetSigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Sigma.lean:131:8: `Set.biInter_finsetSigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [834/892] Replayed Mathlib.Data.Fintype.Sigma
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Sigma.lean:27:6: `Set.biUnion_finsetSigma_univ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [838/892] Replayed Mathlib.Data.Setoid.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:61:8: `Setoid.ext'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:81:8: `Setoid.refl'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:84:8: `Setoid.symm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:87:8: `Setoid.trans'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:89:8: `Setoid.comm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:104:8: `Setoid.ker_apply_mk_out'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [840/892] Replayed Mathlib.Data.Sym.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Basic.lean:307:9: `Sym.inhabitedSym'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [844/892] Replayed Mathlib.Algebra.Group.Indicator
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:103:8: `Set.mulIndicator_eq_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:157:8: `Set.mulIndicator_empty'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:167:8: `Set.mulIndicator_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:305:8: `Set.mulIndicator_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:367:8: `Set.mulIndicator_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:381:8: `Set.mulIndicator_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:391:8: `Set.mulIndicator_compl'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:403:8: `Set.mulIndicator_diff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [845/892] Replayed Mathlib.Data.Finset.Max
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:190:8: `Finset.le_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:193:8: `Finset.isLeast_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:207:8: `Finset.le_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:213:8: `Finset.isGreatest_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:228:8: `Finset.max'_eq_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:230:8: `Finset.min'_eq_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:236:8: `Finset.min'_lt_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:266:8: `Finset.ofDual_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:273:8: `Finset.ofDual_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:280:8: `Finset.toDual_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:287:8: `Finset.toDual_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:314:8: `Finset.lt_max'_of_mem_erase_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:318:8: `Finset.min'_lt_of_mem_erase_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:348:8: `Finset.coe_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:351:8: `Finset.coe_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [847/892] Replayed Mathlib.Data.Nat.Choose.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Choose/Basic.lean:60:8: `Nat.choose_succ_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Choose/Basic.lean:228:8: `Nat.ascFactorial_eq_factorial_mul_choose'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Choose/Basic.lean:247:8: `Nat.choose_eq_asc_factorial_div_factorial'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [848/892] Replayed Mathlib.Data.List.Sublists
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:71:8: `List.mem_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:85:8: `List.length_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:161:8: `List.sublists_eq_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:251:8: `List.sublistsLen_sublist_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:308:8: `List.Pairwise.sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:330:8: `List.nodup_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:356:8: `List.sublists_perm_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:390:8: `List.revzip_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [849/892] Replayed Mathlib.Data.List.Zip
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Zip.lean:122:8: `List.get?_zipWith'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [850/892] Replayed Mathlib.Data.Multiset.Powerset
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:40:8: `Multiset.powersetAux_perm_powersetAux'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:81:8: `Multiset.powerset_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:113:8: `Multiset.revzip_powersetAux'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:133:8: `Multiset.revzip_powersetAux_perm_aux'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:205:8: `Multiset.powersetCard_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [852/892] Replayed Mathlib.Data.Fintype.Powerset
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Powerset.lean:59:9: `Set.finite'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [857/892] Replayed Mathlib.Data.Set.Finite
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:341:9: `Set.fintypeBiUnion'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:361:9: `Set.fintypeBind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:455:9: `Set.fintypeSeq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:568:9: `Finite.Set.finite_biUnion'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:772:8: `Set.Finite.preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:780:6: `Set.Infinite.preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:861:8: `Set.Finite.seq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:960:8: `Set.Finite.toFinset_insert'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:1092:8: `Set.empty_card'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:1546:6: `Set.finite_diff_iUnion_Ioo'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [861/892] Replayed Mathlib.Data.SetLike.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/SetLike/Basic.lean:154:8: `SetLike.ext'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [862/892] Replayed Mathlib.Data.Sym.Sym2
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:80:8: `Sym2.rel_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:284:8: `Sym2.mem_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:587:9: `Sym2.instDecidableRel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:624:8: `Sym2.other_spec'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:630:8: `Sym2.other_eq_other'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:633:8: `Sym2.other_mem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:637:8: `Sym2.other_invol'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [867/892] Replayed Mathlib.Algebra.BigOperators.Group.Finset
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:438:8: `Equiv.Perm.prod_comp'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:683:6: `Finset.prod_fiberwise_eq_prod_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:696:6: `Finset.prod_fiberwise_of_maps_to'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:711:6: `Finset.prod_fiberwise'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:743:8: `Finset.prod_finset_product'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:756:8: `Finset.prod_finset_product_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:762:8: `Finset.prod_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:985:6: `Finset.prod_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1125:8: `Finset.prod_dite_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1173:8: `Finset.prod_pi_mulSingle'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1310:8: `Finset.prod_range_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1451:8: `Finset.prod_range_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1459:8: `Finset.eq_prod_range_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1967:6: `Fintype.prod_fiberwise'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:2131:8: `Multiset.count_sum'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [874/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [879/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [885/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [886/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:13:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044566] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 0#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (!a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 1#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:22:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038817] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 1#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 3#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 1#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 3#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:31:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038111] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 2#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 5#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 2#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 5#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:40:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.043611] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 3#4))) ⊑
            some (BitVec.ofBool (0#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 3#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (0#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:49:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037639] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 4#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 9#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 4#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 9#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:58:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037968] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 5#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 11#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 5#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 11#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:67:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037983] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 6#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 13#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 6#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 13#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:75:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033252] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 7#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:83:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033213] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 8#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 8#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:91:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033194] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 9#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 9#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:99:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033209] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 10#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 10#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:107:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033977] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 11#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 11#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:115:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033228] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 12#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 12#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:123:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033668] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 13#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 13#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:131:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033311] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 14#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 14#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:139:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.019222] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ -1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some 0#1) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:148:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044538] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 0#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 3#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (!a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 3#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:157:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046168] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 1#4))) ⊑
            some (BitVec.ofBool (0#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 1#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (0#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:166:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038662] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 2#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 11#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 2#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 11#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:174:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033211] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 3#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:182:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033320] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 4#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:190:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033632] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 5#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:198:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034056] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 6#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:206:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033357] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 7#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:214:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034249] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 8#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 8#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:222:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033493] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 9#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 9#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:230:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033176] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 10#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 10#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:238:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032951] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 11#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 11#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:246:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033040] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 12#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 12#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:254:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033611] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 13#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 13#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:262:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033395] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 14#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 14#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:270:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.019380] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ -1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some 0#1) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:279:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.052429] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 0#4))) ⊑
            some (BitVec.ofBool (0#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 3)).bind fun a => some (if (!a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (0#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:287:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034024] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 1#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:295:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033999] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 2#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 2#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:303:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033864] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 3#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:311:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033691] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 4#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:319:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034327] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 5#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:327:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034704] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 6#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:335:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034779] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 7#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:343:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033804] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 8#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 8#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:351:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034416] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 9#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 9#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:359:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033593] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 10#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 10#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:367:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033656] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 11#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 11#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:375:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033703] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 12#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 12#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:383:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033908] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 13#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 13#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:391:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033885] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 14#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 14#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:399:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.019473] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ -1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some 0#1) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:407:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034577] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (0#4 >ᵤ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (0#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:416:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038948] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (1#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (2#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (1#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (2#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:425:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.039086] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (2#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (4#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (2#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (4#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:434:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038535] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (3#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (6#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (3#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (6#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:443:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046855] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (4#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (4#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:452:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.039118] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (5#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (10#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (5#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (10#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:461:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038894] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (6#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (12#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (6#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (12#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:470:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038842] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (7#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (14#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (7#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (14#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:478:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033599] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (8#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (8#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:486:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033498] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (9#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (9#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:494:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033836] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (10#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (10#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:502:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033458] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (11#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (11#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:510:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033401] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (12#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (12#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:518:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034252] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (13#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (13#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:526:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034059] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (14#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (14#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:534:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.035698] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (15#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:542:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034002] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (0#4 >ᵤ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (0#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:551:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038313] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (1#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (4#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (1#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (4#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:560:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046879] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (2#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (2#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:569:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038936] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (3#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (12#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (3#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (12#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:577:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033902] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (4#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (4#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:585:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034042] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (5#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (5#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:593:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033494] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (6#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (6#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:601:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033640] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (7#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (7#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:609:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033512] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (8#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (8#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:617:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033569] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (9#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (9#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:625:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033831] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (10#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (10#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:633:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033311] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (11#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (11#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:641:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033313] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (12#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (12#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:649:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033367] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (13#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (13#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:657:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033359] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (14#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (14#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:665:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034863] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (15#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:673:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033226] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (0#4 >ᵤ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (0#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:682:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046333] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (1#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 3)).bind fun a => some (if (1#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:690:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033350] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (2#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (2#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:698:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033197] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (3#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (3#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:706:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033173] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (4#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (4#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:714:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033200] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (5#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (5#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:722:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033216] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (6#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (6#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:730:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033150] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (7#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (7#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:738:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032909] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (8#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (8#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:746:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032818] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (9#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (9#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:754:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033197] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (10#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (10#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:762:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032877] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (11#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (11#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:770:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033153] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (12#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (12#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:778:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033263] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (13#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (13#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:786:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033330] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (14#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (14#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:794:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034804] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (15#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:803:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.063065] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 0#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == !a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (x✝ >ᵤ 1#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:812:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055787] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 1#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 3#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 1#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (x✝ >ᵤ 3#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:821:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.056389] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 2#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 5#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 2#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (x✝ >ᵤ 5#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:829:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044838] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 3#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:837:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044751] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 4#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:845:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044863] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 5#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:853:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044931] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 6#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:861:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045264] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 7#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:869:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.048192] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 8#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 8#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:877:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046837] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 9#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 9#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:885:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046793] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 10#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 10#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:893:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046776] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 11#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 11#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:902:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.058563] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 12#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 9#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 12#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (x✝ >ᵤ 9#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:911:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.059502] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 13#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 11#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 13#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (x✝ >ᵤ 11#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:920:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.058976] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 14#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 13#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 14#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (x✝ >ᵤ 13#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:929:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.053008] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ -1#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:938:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.064265] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 0#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 3#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == !a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (x✝ >ᵤ 3#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:946:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045813] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 1#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:954:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046190] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 2#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 2#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:962:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045501] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 3#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:970:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045981] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 4#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:978:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045320] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 5#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:986:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044865] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 6#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:994:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044923] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 7#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1002:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046432] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 8#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 8#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1010:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046208] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 9#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 9#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1018:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046502] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 10#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 10#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1026:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046488] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 11#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 11#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1034:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046374] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 12#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 12#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1042:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046152] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 13#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 13#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1051:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.058006] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 14#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 11#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 14#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (x✝ >ᵤ 11#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1060:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.051736] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ -1#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1068:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.051669] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 0#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == !a == 0#4) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1076:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044685] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 1#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1084:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045542] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 2#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 2#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1092:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.043561] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 3#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1100:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.043473] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 4#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1108:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044869] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 5#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1116:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044891] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 6#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1124:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044909] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 7#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1132:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046073] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 8#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 8#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1140:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046294] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 9#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 9#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1148:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044709] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 10#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 10#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1156:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044463] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 11#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 11#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1164:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045886] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 12#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 12#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1172:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046821] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 13#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 13#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1180:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046035] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 14#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 14#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1189:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.051650] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ -1#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1198:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055330] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (0#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (0#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (0#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (0#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1207:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055116] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (1#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (2#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (1#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (2#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1216:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055639] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (2#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (4#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (2#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (4#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1225:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055254] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (3#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (6#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (3#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (6#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1233:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.043966] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (4#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (4#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1241:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044982] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (5#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (5#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1249:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044794] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (6#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (6#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1257:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044998] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (7#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (7#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1265:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046201] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (8#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (8#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1273:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046361] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (9#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (9#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1281:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046066] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (10#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (10#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1289:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046077] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (11#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (11#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1297:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046079] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (12#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (12#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1306:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.059238] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (13#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (10#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (13#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (10#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1315:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.057777] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (14#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (12#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (14#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (12#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1324:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.059020] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (14#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (15#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (14#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1333:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055488] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (0#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (0#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (0#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (0#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1342:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055614] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (1#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (4#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (1#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (4#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1350:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044673] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (2#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (2#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1358:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044460] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (3#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (3#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1366:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044797] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (4#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (4#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1374:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045321] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (5#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (5#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1382:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045069] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (6#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (6#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1390:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045006] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (7#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (7#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1398:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046560] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (8#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (8#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1406:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046428] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (9#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (9#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1414:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046497] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (10#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (10#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1422:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046370] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (11#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (11#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1430:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046493] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (12#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (12#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1438:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046470] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (13#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (13#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1446:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046448] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (14#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (14#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1455:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.059361] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (12#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (15#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (12#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1464:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055366] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (0#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (0#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (0#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (0#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1472:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044781] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (1#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (1#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1480:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045718] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (2#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (2#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1488:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044823] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (3#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (3#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1496:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044776] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (4#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (4#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1504:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045002] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (5#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (5#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1512:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045102] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (6#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (6#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1520:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044931] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (7#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (7#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1528:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046360] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (8#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (8#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1536:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046269] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (9#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (9#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1544:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046346] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (10#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (10#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1552:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046111] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (11#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (11#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1560:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046306] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (12#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (12#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1568:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046878] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (13#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (13#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1576:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046399] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (14#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (14#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1584:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.047487] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (15#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1593:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046358] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 0#4))) ⊑
            some (BitVec.ofBool (x✝ != 0#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (!a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝ == 0#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1602:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037973] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 1#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 2#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 1#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 2#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1611:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037907] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 2#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 4#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 2#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 4#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1620:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038012] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 3#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 6#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 3#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 6#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1629:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037671] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 4#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 8#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 4#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 8#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1638:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038054] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 5#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 10#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 5#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 10#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1647:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.040810] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 6#4))) ⊑
            some (BitVec.ofBool (x✝ == 14#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 6#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ == 14#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1655:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033610] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 7#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1663:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033564] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 8#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 8#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1671:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033234] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 9#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 9#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1679:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033066] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 10#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 10#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1687:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033186] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 11#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 11#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1695:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032258] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 12#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 12#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1703:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.031871] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 13#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 13#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1711:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.031413] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 14#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (a >ᵤ 14#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1719:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.018515] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ -1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some 0#1) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1728:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045603] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 0#4))) ⊑
            some (BitVec.ofBool (x✝ != 0#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (!a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝ == 0#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1737:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037342] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 1#4))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 4#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 1#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 4#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1746:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.039494] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 2#4))) ⊑
            some (BitVec.ofBool (x✝ == 12#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 2#4) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ == 12#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1754:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032533] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 3#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1762:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032791] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 4#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1770:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.031522] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 5#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1778:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032405] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 6#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1786:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033166] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 7#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1794:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033492] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 8#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 8#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1802:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033277] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 9#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 9#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1810:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033281] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 10#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 10#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1818:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033239] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 11#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 11#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1826:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033206] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 12#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 12#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1834:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033235] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 13#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 13#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1842:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033194] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 14#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (a >ᵤ 14#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1850:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.019110] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ -1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some 0#1) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1859:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045584] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 0#4))) ⊑
            some (BitVec.ofBool (x✝ != 0#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 3)).bind fun a => some (if (!a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝ == 0#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1867:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032684] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 1#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1875:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033586] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 2#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 2#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1883:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033354] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 3#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1891:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033455] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 4#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1899:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032829] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 5#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1907:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033120] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 6#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1915:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034074] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 7#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1923:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034222] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 8#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 8#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1931:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033476] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 9#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 9#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1939:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033399] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 10#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 10#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1947:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033348] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 11#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 11#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1955:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033506] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 12#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 12#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1963:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033324] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 13#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 13#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1971:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033471] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 14#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (a >ᵤ 14#4) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1979:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.019411] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ -1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some 0#1) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1988:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044721] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' == 10#8))) ⊑
            some (BitVec.ofBool (x✝ == 80#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (a == 10#8) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ == 80#8) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:1997:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044976] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' != 10#8))) ⊑
            some (BitVec.ofBool (x✝ != 80#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a == 10#8) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝ == 80#8) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2006:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.036947] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 10#8))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 80#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (a >ᵤ 10#8) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 80#8) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2015:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.039216] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' ≥ᵤ 10#8))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 72#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!10#8 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 72#8) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2024:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038039] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (10#8 >ᵤ x'))) ⊑
            some (BitVec.ofBool (80#8 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (10#8 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (80#8 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2033:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038927] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (10#8 ≥ᵤ x'))) ⊑
            some (BitVec.ofBool (88#8 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a >ᵤ 10#8) = true then 1#1 else 0#1)) ⊑
            some (if (88#8 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2042:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.056966] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 10#8))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 80#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 7 == (a >ᵤ 10#8)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (x✝ >ᵤ 80#8)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2051:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055871] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' ≥ₛ 10#8))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 72#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (a.getLsbD 7 == (10#8 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (x✝ >ᵤ 72#8)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2060:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.057175] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (10#8 >ₛ x'))) ⊑
            some (BitVec.ofBool (80#8 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 7 == (10#8 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (80#8 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2069:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.056356] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (10#8 ≥ₛ x'))) ⊑
            some (BitVec.ofBool (88#8 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (a.getLsbD 7 == (a >ᵤ 10#8)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (88#8 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2079:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.049581] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' == 10#8))) ⊑
            some (BitVec.ofBool (x✝.and 248#8 == 80#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (a == 10#8) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ &&& 248#8 == 80#8) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2089:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.049955] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' != 10#8))) ⊑
            some (BitVec.ofBool (x✝.and 248#8 != 80#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a == 10#8) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝ &&& 248#8 == 80#8) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2098:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038475] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ᵤ 10#8))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 87#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (a >ᵤ 10#8) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 87#8) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2107:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.039410] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' ≥ᵤ 10#8))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 79#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!10#8 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ >ᵤ 79#8) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2116:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038590] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (10#8 >ᵤ x'))) ⊑
            some (BitVec.ofBool (80#8 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (10#8 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (80#8 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2125:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.038756] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (10#8 ≥ᵤ x'))) ⊑
            some (BitVec.ofBool (88#8 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a >ᵤ 10#8) = true then 1#1 else 0#1)) ⊑
            some (if (88#8 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2134:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.056722] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 10#8))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 87#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 7 == (a >ᵤ 10#8)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (x✝ >ᵤ 87#8)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2143:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.058825] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' ≥ₛ 10#8))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 79#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (a.getLsbD 7 == (10#8 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (x✝ >ᵤ 79#8)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2152:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.056672] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (10#8 >ₛ x'))) ⊑
            some (BitVec.ofBool (80#8 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 7 == (10#8 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (80#8 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2161:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.057206] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#8 <<< 3#8 ≠ x✝ then none
                else if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)).bind
              fun x' => some (BitVec.ofBool (10#8 ≥ₛ x'))) ⊑
            some (BitVec.ofBool (88#8 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (a.getLsbD 7 == (a >ᵤ 10#8)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (88#8 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2169:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044631] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#8 <<< 1#8 ≠ x✝ then none
                else if 1#8 ≥ ↑8 then none else some (x✝.sshiftRight (1#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 63#8))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 7 == (a >ᵤ 63#8)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2177:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032809] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (0#4 >ᵤ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (0#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2186:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.039596] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (1#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ == 0#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (1#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ == 0#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2195:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037493] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (2#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (4#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (2#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (4#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2204:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037389] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (3#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (6#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (3#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (6#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2213:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045325] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (4#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (4#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2222:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037492] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (5#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (10#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (5#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (10#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2231:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037834] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (6#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (12#4 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (6#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (12#4 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2240:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.040176] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (7#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ != 14#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 1)).bind fun a => some (if (7#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝ == 14#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2248:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032975] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (8#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (8#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2256:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032883] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (9#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (9#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2264:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033395] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (10#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (10#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2272:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033869] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (11#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (11#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2280:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033062] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (12#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (12#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2288:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032579] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (13#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (13#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2296:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034040] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (14#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (14#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2304:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.035199] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none else if 1#4 ≥ ↑4 then none else some (x✝ >>> 1#4)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 1)).bind fun a => some (if (15#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2312:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033755] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (0#4 >ᵤ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (0#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2321:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.040034] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (1#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ == 0#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (1#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ == 0#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2330:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046493] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (2#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (2#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2339:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.042073] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (3#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ != 12#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 2)).bind fun a => some (if (3#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝ == 12#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2347:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033849] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (4#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (4#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2355:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032727] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (5#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (5#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2363:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.031707] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (6#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (6#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2371:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033083] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (7#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (7#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2379:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032983] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (8#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (8#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2387:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033206] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (9#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (9#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2395:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032622] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (10#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (10#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2403:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033205] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (11#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (11#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2411:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032807] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (12#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (12#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2419:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032248] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (13#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (13#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2427:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032606] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (14#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (14#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2435:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034446] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none else if 2#4 ≥ ↑4 then none else some (x✝ >>> 2#4)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 2)).bind fun a => some (if (15#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2443:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032777] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (0#4 >ᵤ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (0#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2452:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.039659] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (1#4 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ == 0#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝ >>> 3)).bind fun a => some (if (1#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ == 0#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2460:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032840] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (2#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (2#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2468:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033022] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (3#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (3#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2476:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032999] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (4#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (4#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2484:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033216] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (5#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (5#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2492:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032790] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (6#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (6#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2500:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033282] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (7#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (7#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2508:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033343] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (8#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (8#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2516:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032633] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (9#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (9#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2524:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033095] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (10#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (10#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2532:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.033017] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (11#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (11#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2540:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032680] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (12#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (12#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2548:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032861] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (13#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (13#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2556:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.032680] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (14#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (14#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2564:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.034240] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none else if 3#4 ≥ ↑4 then none else some (x✝ >>> 3#4)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ᵤ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ : ¬((some (x✝ >>> 3)).bind fun a => some (if (15#4 >ᵤ a) = true then 1#1 else 0#1)) ⊑ some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2573:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.064423] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 0#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 0#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == !a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == !x✝ == 0#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2582:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055335] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 1#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 2#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 1#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (x✝ >ᵤ 2#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2591:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055197] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 2#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 4#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 2#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (x✝ >ᵤ 4#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2599:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044124] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 3#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2607:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044089] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 4#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2615:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.042607] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 5#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2623:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.043078] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 6#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2631:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044213] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 7#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2639:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045359] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 8#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 8#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2647:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045781] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 9#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 9#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2655:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.047158] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 10#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 10#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2663:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046248] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 11#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 11#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2672:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.053679] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 12#4))) ⊑
            some (BitVec.ofBool (x✝ != 8#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 12#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝ == 8#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2681:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.057751] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 13#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 10#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 13#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (x✝ >ᵤ 10#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2690:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.058454] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 14#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 12#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 14#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (x✝ >ᵤ 12#4)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2699:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.052046] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ -1#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2708:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.065055] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 0#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ 0#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == !a == 0#4) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == !x✝ == 0#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2716:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044919] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 1#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2724:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044601] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 2#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 2#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2732:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044710] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 3#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2740:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044618] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 4#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2748:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044729] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 5#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2756:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044538] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 6#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2764:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044625] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 7#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2772:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046127] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 8#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 8#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2780:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046148] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 9#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 9#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2788:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046252] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 10#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 10#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2796:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046259] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 11#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 11#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2804:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046307] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 12#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 12#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2812:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046348] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 13#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 13#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2821:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.053670] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 14#4))) ⊑
            some (BitVec.ofBool (x✝ != 8#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 14#4)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝ == 8#4) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2830:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.052096] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ -1#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2838:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.051688] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 0#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == !a == 0#4) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2846:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044729] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 1#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 1#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2854:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045229] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 2#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 2#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2862:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044827] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 3#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 3#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2870:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044902] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 4#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 4#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2878:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044968] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 5#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 5#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2886:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044899] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 6#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 6#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2894:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044649] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 7#4))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (a >ᵤ 7#4)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2902:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046120] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 8#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 8#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2910:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046742] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 9#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 9#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2918:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045923] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 10#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 10#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2926:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046223] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 11#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 11#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2934:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046109] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 12#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 12#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2942:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046023] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 13#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 13#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2950:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046338] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ 14#4))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (a >ᵤ 14#4)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2959:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.053221] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (x' >ₛ -1#4))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#4))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2968:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055621] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (0#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (0#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (0#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (0#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2977:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055509] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (1#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (2#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (1#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (2#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2986:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.054118] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (2#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (3#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (2#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (3#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:2995:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055428] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (3#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (5#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (3#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (5#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3003:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044108] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (4#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (4#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3011:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044068] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (5#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (5#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3019:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044483] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (6#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (6#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3027:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044719] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (7#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 3 == (7#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3035:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045511] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (8#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (8#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3043:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044606] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (9#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (9#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3051:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044600] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (10#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (10#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3059:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046104] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (11#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (11#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3067:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045377] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (12#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (12#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3076:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.057971] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (13#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (10#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (13#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (10#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3085:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.058112] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (14#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (12#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (14#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (12#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3094:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.058488] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#4 <<< 1#4 ≠ x✝ then none
                else if 1#4 ≥ ↑4 then none else some (x✝.sshiftRight (1#4).toNat)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (14#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!(!a.getLsbD 3) == (15#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (14#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3103:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.054939] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (0#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (0#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (0#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (0#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3112:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.053459] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (1#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (4#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (1#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (4#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3120:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.042828] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (2#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (2#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3128:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044513] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (3#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (3#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3136:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045881] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (4#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (4#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3144:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045416] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (5#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (5#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3152:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045202] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (6#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (6#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3160:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045047] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (7#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!a.getLsbD 3 == (7#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3168:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045204] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (8#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (8#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3176:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046588] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (9#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (9#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3184:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045609] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (10#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (10#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3192:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.047851] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (11#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (11#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3200:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.047526] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (12#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (12#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3208:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.047873] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (13#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (13#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3216:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.048028] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (14#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (14#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3225:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.060306] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#4 <<< 2#4 ≠ x✝ then none
                else if 2#4 ≥ ↑4 then none else some (x✝.sshiftRight (2#4).toNat)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (12#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (!(!a.getLsbD 3) == (15#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!(!x✝.getLsbD 3) == (12#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3234:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.056244] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (0#4 >ₛ x'))) ⊑
            some (BitVec.ofBool (0#4 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (0#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 3 == (0#4 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3242:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045605] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (1#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (1#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3250:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046256] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (2#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (2#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3258:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046082] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (3#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (3#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3266:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045633] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (4#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (4#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3274:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045568] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (5#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (5#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3282:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.043932] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (6#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (6#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3290:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.044413] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (7#4 >ₛ x'))) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!a.getLsbD 3 == (7#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 1#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3298:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046218] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (8#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (8#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3306:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045932] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (9#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (9#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3314:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045749] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (10#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (10#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3322:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046010] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (11#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (11#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3330:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045729] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (12#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (12#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3338:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.046432] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (13#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (13#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3346:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.047291] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (14#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (14#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3354:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.047808] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((if false = true ∧ x✝ >>> 3#4 <<< 3#4 ≠ x✝ then none
                else if 3#4 ≥ ↑4 then none else some (x✝.sshiftRight (3#4).toNat)).bind
              fun x' => some (BitVec.ofBool (-1#4 >ₛ x'))) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 4
      x✝ : BitVec 4
      a✝ :
        ¬((some (x✝.sshiftRight 3)).bind fun a => some (if (!(!a.getLsbD 3) == (15#4 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3363:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.056146] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#8 <<< 1#8 ≠ x✝ then none
                else if 1#8 ≥ ↑8 then none else some (x✝.sshiftRight (1#8).toNat)).bind
              fun x' => some (BitVec.ofBool (5#8 >ₛ x'))) ⊑
            some (BitVec.ofBool (9#8 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 7 == (5#8 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (9#8 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3372:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.037777] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#8 <<< 1#8 ≠ x✝ then none
                else if 1#8 ≥ ↑8 then none else some (x✝.sshiftRight (1#8).toNat)).bind
              fun x' => some (BitVec.ofBool (5#8 >ᵤ x'))) ⊑
            some (BitVec.ofBool (9#8 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (5#8 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (9#8 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3381:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.056183] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#8 <<< 1#8 ≠ x✝ then none
                else if 1#8 ≥ ↑8 then none else some (x✝.sshiftRight (1#8).toNat)).bind
              fun x' => some (BitVec.ofBool (5#8 >ₛ x'))) ⊑
            some (BitVec.ofBool (10#8 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 7 == (5#8 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (10#8 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3390:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045321] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#8 <<< 1#8 ≠ x✝ then none
                else if 1#8 ≥ ↑8 then none else some (x✝.sshiftRight (1#8).toNat)).bind
              fun x' => some (BitVec.ofBool (x' == 5#8))) ⊑
            some (BitVec.ofBool (x✝ == 10#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (a == 5#8) = true then 1#1 else 0#1)) ⊑
            some (if (x✝ == 10#8) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3399:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.055924] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 1#8 <<< 1#8 ≠ x✝ then none
                else if 1#8 ≥ ↑8 then none else some (x✝.sshiftRight (1#8).toNat)).bind
              fun x' => some (BitVec.ofBool (6#8 >ₛ x'))) ⊑
            some (BitVec.ofBool (12#8 >ₛ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 1)).bind fun a => some (if (!a.getLsbD 7 == (6#8 >ᵤ a)) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7 == (12#8 >ᵤ x✝)) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/lc985/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gicmphshrhlthgt_proof.lean:3408:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.045357] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((if false = true ∧ x✝ >>> 2#8 <<< 2#8 ≠ x✝ then none
                else if 2#8 ≥ ↑8 then none else some (x✝.sshiftRight (2#8).toNat)).bind
              fun x' => some (BitVec.ofBool (33#8 >ᵤ x'))) ⊑
            some (BitVec.ofBool (x✝ >ₛ -1#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬((some (x✝.sshiftRight 2)).bind fun a => some (if (33#8 >ᵤ a) = true then 1#1 else 0#1)) ⊑
            some (if (!x✝.getLsbD 7) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
