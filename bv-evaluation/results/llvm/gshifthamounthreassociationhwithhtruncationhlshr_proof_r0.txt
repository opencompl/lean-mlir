⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthamounthreassociationhwithhtruncationhlshr_proof.lean:16:4: error: tactic 'simp' failed, nested error:
maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthamounthreassociationhwithhtruncationhlshr_proof.lean:16:4: error: tactic 'simp' failed, nested error:
maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthamounthreassociationhwithhtruncationhlshr_proof.lean:16:4: error: tactic 'simp' failed, nested error:
maximum recursion depth has been reached
use `set_option maxRecDepth <num>` to increase limit
use `set_option diagnostics true` to get diagnostic information
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthamounthreassociationhwithhtruncationhlshr_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthamounthreassociationhwithhtruncationhlshr_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthamounthreassociationhwithhtruncationhlshr_proof.lean:11:8: error: (kernel) declaration has metavariables 't0_thm'
[bv] [0.082891] Normalizing goal
  [Meta.synthInstance] [0.001591] ✅️ Decidable
        ((do
            let x ← some x✝
            let x_1 ← some x✝¹
            let x_2 ← some (BitVec.zeroExtend 32 (32#16 - x_1))
            if x_2 ≥ ↑32 then none
              else do
                let x ← some (x >>> x_2)
                let x' ← some (BitVec.truncate 16 x)
                let x ← some x✝¹
                if x + -1#16 ≥ ↑16 then none else some (x' >>> (x + -1#16))) ⊑
          do
          let x ← some x✝
          if 31#32 ≥ ↑32 then none
            else do
              let x' ← some (x >>> 31#32)
              some (BitVec.truncate 16 x'))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 16
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 16
      x✝ : BitVec 32
      a✝ :
        ¬(do
              let x ← some x✝
              let x_1 ← some x✝¹
              let x_2 ← some (BitVec.zeroExtend 32 (32#16 - x_1))
              if x_2 ≥ ↑32 then none
                else do
                  let x ← some (x >>> x_2)
                  let x' ← some (BitVec.truncate 16 x)
                  let x ← some x✝¹
                  if x + -1#16 ≥ ↑16 then none else some (x' >>> (x + -1#16))) ⊑
            do
            let x ← some x✝
            if 31#32 ≥ ↑32 then none
              else do
                let x' ← some (x >>> 31#32)
                some (BitVec.truncate 16 x')
      ⊢ False
  [Meta.isDefEq] [0.001649] ✅️ ?h₁ =?= Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
        (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (16#16) (x + 65535#16))
          (Eq.trans
            (Eq.trans (congrArg Not (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (x + 65535#16) 16#16))
              (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq (16#16 >ᵤ x + 65535#16) true))
            (congrArg (fun x => (!x) = true) (beq_true (16#16 >ᵤ x + 65535#16)))))
    [Meta.isDefEq.assign] [0.001646] ✅️ ?h₁ := Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
          (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (16#16) (x + 65535#16))
            (Eq.trans
              (Eq.trans (congrArg Not (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (x + 65535#16) 16#16))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq (16#16 >ᵤ x + 65535#16) true))
              (congrArg (fun x => (!x) = true) (beq_true (16#16 >ᵤ x + 65535#16)))))
      [Meta.isDefEq.assign.checkTypes] [0.001632] ✅️ (?h₁ : (x + -1#16 ≥ ↑16) =
            ((!16#16 >ᵤ x + 65535#16) =
              true)) := (Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
            (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (16#16) (x + 65535#16))
              (Eq.trans
                (Eq.trans (congrArg Not (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (x + 65535#16) 16#16))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq (16#16 >ᵤ x + 65535#16) true))
                (congrArg (fun x => (!x) = true)
                  (beq_true (16#16 >ᵤ x + 65535#16))))) : (x + 65535#16 ≥ 16#16) = ((!16#16 >ᵤ x + 65535#16) = true))
        [Meta.isDefEq] [0.001627] ✅️ (x + -1#16 ≥ ↑16) =
              ((!16#16 >ᵤ x + 65535#16) = true) =?= (x + 65535#16 ≥ 16#16) = ((!16#16 >ᵤ x + 65535#16) = true)
          [Meta.isDefEq] [0.001599] ✅️ x + -1#16 ≥ ↑16 =?= x + 65535#16 ≥ 16#16
            [Meta.isDefEq.delta] [0.001581] ✅️ x + -1#16 ≥ ↑16 =?= x + 65535#16 ≥ 16#16
  [Meta.isDefEq] [0.001283] ✅️ if ?b then ?x
      else ?y =?= if (!16#16 >ᵤ x + 65535#16) = true then none else some (x' >>> (x + 65535#16))
    [Meta.isDefEq] [0.001091] ✅️ ?s =?= instDecidableEqBool (!16#16 >ᵤ x + 65535#16) true
      [Meta.isDefEq.assign] [0.001087] ✅️ ?s := instDecidableEqBool (!16#16 >ᵤ x + 65535#16) true
        [Meta.isDefEq.assign.checkTypes] [0.001075] ✅️ (?s : Decidable
              ((!16#16 >ᵤ x + 65535#16) =
                true)) := (instDecidableEqBool (!16#16 >ᵤ x + 65535#16)
              true : Decidable ((!16#16 >ᵤ x + 65535#16) = true))
          [Meta.isDefEq] [0.001066] ✅️ Decidable
                ((!16#16 >ᵤ x + 65535#16) = true) =?= Decidable ((!16#16 >ᵤ x + 65535#16) = true)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 16
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 16
      x✝ : BitVec 32
      a✝ :
        ¬(do
              let x ← some x✝
              let x_1 ← some x✝¹
              let x_2 ← some (BitVec.zeroExtend 32 (33#16 + ~~~x_1))
              if (!32#32 >ᵤ x_2) = true then none
                else do
                  let x ← some (x >>> x_2)
                  let x' ← some (BitVec.zeroExtend 16 x)
                  let x ← some x✝¹
                  if (!16#16 >ᵤ x + 65535#16) = true then none else some (x' >>> (x + 65535#16))) ⊑
            do
            let x ← some x✝
            let x' ← some (x >>> 31)
            some (BitVec.zeroExtend 16 x')
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
