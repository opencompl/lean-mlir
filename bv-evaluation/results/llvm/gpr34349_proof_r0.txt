⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gpr34349_proof.lean:27:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gpr34349_proof.lean:11:8: error: (kernel) declaration has metavariables 'fast_div_201_thm'
[bv] [0.171122] Normalizing goal
  [Meta.synthInstance] [0.007986] ✅️ Decidable
        ((if 8#16 ≥ ↑16 then none
          else
            if 8#16 ≥ ↑16 then none
            else
              if 1#8 ≥ ↑8 then none
              else
                if 7#8 ≥ ↑8 then none
                else
                  some
                    ((BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) +
                        (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8) >>>
                      7#8)) ⊑
          if
              True ∧
                (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                    BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                  BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                    BitVec.twoPow (2 * 16) (16 - 1)) then
            none
          else
            if
                True ∧
                  BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                    BitVec.twoPow (2 * 16) (16 - 1) <<< 1 then
              none
            else
              if 8#16 ≥ ↑16 then none
              else
                if 1#8 ≥ ↑8 then none
                else
                  if
                      True ∧
                        (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                            BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                          BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                            BitVec.twoPow (2 * 16) (16 - 1)) then
                    none
                  else
                    if
                        True ∧
                          BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                            BitVec.twoPow (2 * 16) (16 - 1) <<< 1 then
                      none
                    else
                      if 8#16 ≥ ↑16 then none
                      else
                        if
                            True ∧
                              ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                                  (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 ∨
                                (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                                  BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) then
                          none
                        else
                          if 7#8 ≥ ↑8 then none
                          else
                            some
                              (((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                  BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                7#8))
    [Meta.synthInstance] [0.005721] ✅️ apply @BitVec.Refinement.instDecidableRelOptionOfDecidableEq to Decidable
          ((if 8#16 ≥ ↑16 then none
            else
              if 8#16 ≥ ↑16 then none
              else
                if 1#8 ≥ ↑8 then none
                else
                  if 7#8 ≥ ↑8 then none
                  else
                    some
                      ((BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) +
                          (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8) >>>
                        7#8)) ⊑
            if
                True ∧
                  (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                      BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                    BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                      BitVec.twoPow (2 * 16) (16 - 1)) then
              none
            else
              if
                  True ∧
                    BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                      BitVec.twoPow (2 * 16) (16 - 1) <<< 1 then
                none
              else
                if 8#16 ≥ ↑16 then none
                else
                  if 1#8 ≥ ↑8 then none
                  else
                    if
                        True ∧
                          (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                              BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                            BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                              BitVec.twoPow (2 * 16) (16 - 1)) then
                      none
                    else
                      if
                          True ∧
                            BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                              BitVec.twoPow (2 * 16) (16 - 1) <<< 1 then
                        none
                      else
                        if 8#16 ≥ ↑16 then none
                        else
                          if
                              True ∧
                                ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                                    (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 ∨
                                  (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) then
                            none
                          else
                            if 7#8 ≥ ↑8 then none
                            else
                              some
                                (((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                  7#8))
      [Meta.whnf] [0.001734] Non-easy whnf: DecidableRel BitVec.Refinement
      [Meta.synthInstance] [0.003704] new goal DecidableEq (BitVec 8)
        [Meta.whnf] [0.003621] Non-easy whnf: DecidableEq (BitVec 8)
    [Meta.check] [0.001826] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if 8#16 ≥ ↑16 then none
          else
            if 8#16 ≥ ↑16 then none
            else
              if 1#8 ≥ ↑8 then none
              else
                if 7#8 ≥ ↑8 then none
                else
                  some
                    ((BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) +
                        (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8) >>>
                      7#8))
          (if
              True ∧
                (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                    BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                  BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                    BitVec.twoPow (2 * 16) (16 - 1)) then
            none
          else
            if
                True ∧
                  BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                    BitVec.twoPow (2 * 16) (16 - 1) <<< 1 then
              none
            else
              if 8#16 ≥ ↑16 then none
              else
                if 1#8 ≥ ↑8 then none
                else
                  if
                      True ∧
                        (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                            BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                          BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                            BitVec.twoPow (2 * 16) (16 - 1)) then
                    none
                  else
                    if
                        True ∧
                          BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                            BitVec.twoPow (2 * 16) (16 - 1) <<< 1 then
                      none
                    else
                      if 8#16 ≥ ↑16 then none
                      else
                        if
                            True ∧
                              ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                                  (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 ∨
                                (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                                  BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) then
                          none
                        else
                          if 7#8 ≥ ↑8 then none
                          else
                            some
                              (((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                  BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                7#8))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if 8#16 ≥ ↑16 then none
            else
              if 8#16 ≥ ↑16 then none
              else
                if 1#8 ≥ ↑8 then none
                else
                  if 7#8 ≥ ↑8 then none
                  else
                    some
                      ((BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) +
                          (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8) >>>
                        7#8)) ⊑
            if
                True ∧
                  (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                      BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                    BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                      BitVec.twoPow (2 * 16) (16 - 1)) then
              none
            else
              if
                  True ∧
                    BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                      BitVec.twoPow (2 * 16) (16 - 1) <<< 1 then
                none
              else
                if 8#16 ≥ ↑16 then none
                else
                  if 1#8 ≥ ↑8 then none
                  else
                    if
                        True ∧
                          (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                              BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                            BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                              BitVec.twoPow (2 * 16) (16 - 1)) then
                      none
                    else
                      if
                          True ∧
                            BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                              BitVec.twoPow (2 * 16) (16 - 1) <<< 1 then
                        none
                      else
                        if 8#16 ≥ ↑16 then none
                        else
                          if
                              True ∧
                                ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                                    (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 ∨
                                  (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) then
                            none
                          else
                            if 7#8 ≥ ↑8 then none
                            else
                              some
                                (((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                  7#8)
      ⊢ False
  [Meta.isDefEq] [0.003800] ✅️ ?x > ?y =?= 8#16 < 16#16
  [Meta.appBuilder] [0.002170] ✅️ f: Complement.complement, xs: [BitVec.zeroExtend 8
         ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)]
    [Meta.synthInstance] [0.002114] ✅️ Complement (BitVec 8)
      [Meta.whnf] [0.001924] Non-easy whnf: Complement (BitVec 8)
  [Meta.isDefEq] [0.004925] ❌️ ?a ==
        ?a =?= (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) == true
    [Meta.isDefEq.onFailure] [0.004672] ❌️ ?a ==
          ?a =?= (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) == true
      [Meta.synthInstance] [0.004640] 💥️ BEq ?α
        [Meta.synthInstance] [0.004541] new goal BEq ?α
  [Meta.isDefEq] [0.008130] ✅️ ?h₁ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (Eq.trans
              (congr
                (congrArg Or
                  (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                    (BitVec.signExtend 32 (BitVec.twoPow 16 15))))
                (Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
                  (Eq.trans
                    (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (BitVec.twoPow 32 15)
                      (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32))
                    (Eq.trans
                      (Eq.trans
                        (congrArg Not
                          (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                            (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) (BitVec.twoPow 32 15)))
                        (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                          (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) true))
                      (congrArg (fun x => (!x) = true)
                        (beq_true (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)))))))
              (Std.Tactic.BVDecide.Normalize.Bool.or_to_or
                (BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                !BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32))
            (congrArg (fun x => x = true)
              (Eq.trans
                (Std.Tactic.BVDecide.Normalize.Bool.or_elim
                  (BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                  !BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                (congrArg
                  (fun x =>
                    !((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                            BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                        x))
                  (Bool.not_not (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)))))))
        (true_and
          ((!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)) =
            true))
    [Meta.isDefEq.assign] [0.008128] ✅️ ?h₁ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (Eq.trans
                (congr
                  (congrArg Or
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                      (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                      (BitVec.signExtend 32 (BitVec.twoPow 16 15))))
                  (Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
                    (Eq.trans
                      (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (BitVec.twoPow 32 15)
                        (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32))
                      (Eq.trans
                        (Eq.trans
                          (congrArg Not
                            (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                              (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) (BitVec.twoPow 32 15)))
                          (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                            (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) true))
                        (congrArg (fun x => (!x) = true)
                          (beq_true
                            (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)))))))
                (Std.Tactic.BVDecide.Normalize.Bool.or_to_or
                  (BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                  !BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32))
              (congrArg (fun x => x = true)
                (Eq.trans
                  (Std.Tactic.BVDecide.Normalize.Bool.or_elim
                    (BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                      BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                    !BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                  (congrArg
                    (fun x =>
                      !((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                              BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                          x))
                    (Bool.not_not (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)))))))
          (true_and
            ((!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                      BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                  BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.008103] ✅️ (?h₁ : (True ∧
              (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                  BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                  BitVec.twoPow (2 * 16) (16 - 1))) =
            ((!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                      BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                  BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (Eq.trans
                  (congr
                    (congrArg Or
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                        (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                        (BitVec.signExtend 32 (BitVec.twoPow 16 15))))
                    (Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
                      (Eq.trans
                        (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (BitVec.twoPow 32 15)
                          (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32))
                        (Eq.trans
                          (Eq.trans
                            (congrArg Not
                              (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                                (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) (BitVec.twoPow 32 15)))
                            (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                              (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) true))
                          (congrArg (fun x => (!x) = true)
                            (beq_true
                              (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)))))))
                  (Std.Tactic.BVDecide.Normalize.Bool.or_to_or
                    (BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                      BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                    !BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32))
                (congrArg (fun x => x = true)
                  (Eq.trans
                    (Std.Tactic.BVDecide.Normalize.Bool.or_elim
                      (BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                        BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                      !BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                    (congrArg
                      (fun x =>
                        !((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                                BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                            x))
                      (Bool.not_not
                        (BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)))))))
            (true_and
              ((!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                        BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                    BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)) =
                true)) : (True ∧
              (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 ≥ BitVec.twoPow 32 15)) =
            ((!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                      BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                  BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)) =
              true))
        [Meta.isDefEq] [0.008099] ✅️ (True ∧
                (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                    BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                  BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                    BitVec.twoPow (2 * 16) (16 - 1))) =
              ((!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                        BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                    BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)) =
                true) =?= (True ∧
                (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                  BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 ≥ BitVec.twoPow 32 15)) =
              ((!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                        BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                    BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)) =
                true)
          [Meta.isDefEq] [0.008079] ✅️ True ∧
                (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 <
                    BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                  BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                    BitVec.twoPow (2 * 16)
                      (16 -
                        1)) =?= True ∧
                (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 < BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                  BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 ≥ BitVec.twoPow 32 15)
            [Meta.isDefEq] [0.008065] ✅️ BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                      BitVec.signExtend (2 * 16) 71#16 <
                    BitVec.signExtend (2 * 16) (BitVec.twoPow 16 (16 - 1)) ∨
                  BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16 ≥
                    BitVec.twoPow (2 * 16)
                      (16 -
                        1) =?= BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 <
                    BitVec.signExtend 32 (BitVec.twoPow 16 15) ∨
                  BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 ≥ BitVec.twoPow 32 15
              [Meta.isDefEq] [0.007944] ✅️ BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                      BitVec.signExtend (2 * 16) 71#16 <
                    BitVec.signExtend (2 * 16)
                      (BitVec.twoPow 16
                        (16 -
                          1)) =?= BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 <
                    BitVec.signExtend 32 (BitVec.twoPow 16 15)
                [Meta.isDefEq] [0.007920] ✅️ instLTBitVec.1
                      (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.signExtend (2 * 16) 71#16)
                      (BitVec.signExtend (2 * 16)
                        (BitVec.twoPow 16
                          (16 -
                            1))) =?= instLTBitVec.1 (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)
                      (BitVec.signExtend 32 (BitVec.twoPow 16 15))
                  [Meta.whnf] [0.001947] Non-easy whnf: instLTBitVec
                    [Meta.whnf] [0.001930] Non-easy whnf: { lt := fun x1 x2 => x1.toNat < x2.toNat }
                  [Meta.isDefEq] [0.005925] ✅️ (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                            BitVec.signExtend (2 * 16) 71#16).toNat <
                        (BitVec.signExtend (2 * 16)
                            (BitVec.twoPow 16
                              (16 -
                                1))).toNat =?= (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32).toNat <
                        (BitVec.signExtend 32 (BitVec.twoPow 16 15)).toNat
                    [Meta.isDefEq] [0.005909] ✅️ instLTNat.1
                          (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                              BitVec.signExtend (2 * 16) 71#16).toNat
                          (BitVec.signExtend (2 * 16)
                              (BitVec.twoPow 16
                                (16 -
                                  1))).toNat =?= instLTNat.1
                          (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32).toNat
                          (BitVec.signExtend 32 (BitVec.twoPow 16 15)).toNat
                      [Meta.isDefEq] [0.005855] ✅️ (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                                  BitVec.signExtend (2 * 16) 71#16).toNat.lt
                            (BitVec.signExtend (2 * 16)
                                (BitVec.twoPow 16
                                  (16 -
                                    1))).toNat =?= (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32).toNat.lt
                            (BitVec.signExtend 32 (BitVec.twoPow 16 15)).toNat
                        [Meta.isDefEq.delta] [0.005844] ✅️ (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                                    BitVec.signExtend (2 * 16) 71#16).toNat.lt
                              (BitVec.signExtend (2 * 16)
                                  (BitVec.twoPow 16
                                    (16 -
                                      1))).toNat =?= (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32).toNat.lt
                              (BitVec.signExtend 32 (BitVec.twoPow 16 15)).toNat
                          [Meta.isDefEq] [0.005743] ✅️ (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                                  BitVec.signExtend (2 * 16)
                                    71#16).toNat =?= (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32).toNat
                            [Meta.isDefEq.delta] [0.005724] ✅️ (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                                    BitVec.signExtend (2 * 16)
                                      71#16).toNat =?= (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32).toNat
                              [Meta.isDefEq] [0.005701] ✅️ BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                                    BitVec.signExtend (2 * 16)
                                      71#16 =?= BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32
                                [Meta.isDefEq] [0.005675] ✅️ instHMul.1
                                      (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝))
                                      (BitVec.signExtend (2 * 16)
                                        71#16) =?= instHMul.1 (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝)) 71#32
                                  [Meta.isDefEq] [0.005592] ✅️ Mul.mul
                                        (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝))
                                        (BitVec.signExtend (2 * 16)
                                          71#16) =?= Mul.mul (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝)) 71#32
                                    [Meta.isDefEq] [0.005567] ✅️ BitVec.instMul.1
                                          (BitVec.signExtend (2 * 16) (BitVec.zeroExtend 16 x✝))
                                          (BitVec.signExtend (2 * 16)
                                            71#16) =?= BitVec.instMul.1 (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝))
                                          71#32
                                      [Meta.isDefEq] [0.005503] ✅️ (BitVec.signExtend (2 * 16)
                                                (BitVec.zeroExtend 16 x✝)).mul
                                            (BitVec.signExtend (2 * 16)
                                              71#16) =?= (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝)).mul 71#32
                                        [Meta.isDefEq.delta] [0.005492] ✅️ (BitVec.signExtend (2 * 16)
                                                  (BitVec.zeroExtend 16 x✝)).mul
                                              (BitVec.signExtend (2 * 16)
                                                71#16) =?= (BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝)).mul 71#32
                                          [Meta.isDefEq] [0.005414] ✅️ BitVec.signExtend (2 * 16) 71#16 =?= 71#32
                                            [Meta.isDefEq] [0.005398] ✅️ BitVec.ofInt (2 * 16) (71#16).toInt =?= 71#32
                                              [Meta.isDefEq] [0.005375] ✅️ ((71#16).toInt %
                                                        Int.ofNat (2 ^ (2 * 16))).toNat#'⋯ =?= 71#32
                                                [Meta.isDefEq] [0.005355] ✅️ ((71#16).toInt %
                                                          Int.ofNat
                                                            (2 ^
                                                              (2 *
                                                                16))).toNat#'⋯ =?= { toFin := Fin.ofNat' (2 ^ 32) 71 }
                                                  [Meta.isDefEq] [0.005338] ✅️ {
                                                        toFin :=
                                                          ⟨((71#16).toInt % Int.ofNat (2 ^ (2 * 16))).toNat,
                                                            ⋯⟩ } =?= { toFin := Fin.ofNat' (2 ^ 32) 71 }
                                                    [Meta.isDefEq] [0.005302] ✅️ ⟨((71#16).toInt %
                                                              Int.ofNat (2 ^ (2 * 16))).toNat,
                                                          ⋯⟩ =?= Fin.ofNat' (2 ^ 32) 71
                                                      [Meta.isDefEq] [0.005273] ✅️ ⟨((71#16).toInt %
                                                                Int.ofNat (2 ^ (2 * 16))).toNat,
                                                            ⋯⟩ =?= ⟨71 % 2 ^ 32, ⋯⟩
                                                        [Meta.whnf] [0.002088] Non-easy whnf: val < n
                                                          [Meta.whnf] [0.002082] Non-easy whnf: instLTNat.1 val n
                                                        [Meta.isDefEq] [0.003123] ✅️ ((71#16).toInt %
                                                                Int.ofNat (2 ^ (2 * 16))).toNat =?= 71 % 2 ^ 32
                                                          [Meta.isDefEq] [0.002988] ✅️ match
                                                                (71#16).toInt % Int.ofNat (2 ^ (2 * 16)) with
                                                              | Int.ofNat n => n
                                                              | Int.negSucc a => 0 =?= 71 % 2 ^ 32
                                                            [Meta.isDefEq] [0.002150] ✅️ (71#16).toNat %
                                                                  (Int.ofNat (2 ^ (2 * 16))).natAbs =?= 71 % 2 ^ 32
                                                              [Meta.isDefEq] [0.002120] ✅️ instHMod.1 (71#16).toNat
                                                                    (Int.ofNat
                                                                        (2 ^
                                                                          (2 * 16))).natAbs =?= instHMod.1 71 (2 ^ 32)
                                                                [Meta.whnf] [0.001850] Non-easy whnf: HMod ℕ ℕ ℕ
  [Meta.isDefEq] [0.001105] ✅️ ?h₁ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
            (Eq.trans
              (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (BitVec.twoPow 32 15 <<< 1)
                (BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32))
              (Eq.trans
                (Eq.trans
                  (congrArg Not
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                      (BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) (BitVec.twoPow 32 15 <<< 1)))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                    (BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) true))
                (congrArg (fun x => (!x) = true)
                  (beq_true (BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)))))))
        (true_and ((!BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) = true))
    [Meta.isDefEq.assign] [0.001102] ✅️ ?h₁ := Eq.trans
          (congrArg (And True)
            (Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
              (Eq.trans
                (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (BitVec.twoPow 32 15 <<< 1)
                  (BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32))
                (Eq.trans
                  (Eq.trans
                    (congrArg Not
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                        (BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) (BitVec.twoPow 32 15 <<< 1)))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                      (BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) true))
                  (congrArg (fun x => (!x) = true)
                    (beq_true
                      (BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)))))))
          (true_and ((!BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) = true))
      [Meta.isDefEq.assign.checkTypes] [0.001089] ✅️ (?h₁ : (True ∧
              BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                BitVec.twoPow (2 * 16) (16 - 1) <<< 1) =
            ((!BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
                (Eq.trans
                  (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (BitVec.twoPow 32 15 <<< 1)
                    (BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32))
                  (Eq.trans
                    (Eq.trans
                      (congrArg Not
                        (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                          (BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) (BitVec.twoPow 32 15 <<< 1)))
                      (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                        (BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) true))
                    (congrArg (fun x => (!x) = true)
                      (beq_true
                        (BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)))))))
            (true_and
              ((!BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) =
                true)) : (True ∧ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 ≥ BitVec.twoPow 32 15 <<< 1) =
            ((!BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) = true))
        [Meta.isDefEq] [0.001085] ✅️ (True ∧
                BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                  BitVec.twoPow (2 * 16) (16 - 1) <<< 1) =
              ((!BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) =
                true) =?= (True ∧ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 ≥ BitVec.twoPow 32 15 <<< 1) =
              ((!BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) = true)
          [Meta.isDefEq] [0.001066] ✅️ True ∧
                BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) * BitVec.zeroExtend (2 * 16) 71#16 ≥
                  BitVec.twoPow (2 * 16) (16 - 1) <<<
                    1 =?= True ∧ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 ≥ BitVec.twoPow 32 15 <<< 1
            [Meta.isDefEq] [0.001055] ✅️ BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                    BitVec.zeroExtend (2 * 16) 71#16 ≥
                  BitVec.twoPow (2 * 16) (16 - 1) <<<
                    1 =?= BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 ≥ BitVec.twoPow 32 15 <<< 1
              [Meta.isDefEq.delta] [0.001030] ✅️ BitVec.zeroExtend (2 * 16) (BitVec.zeroExtend 16 x✝) *
                      BitVec.zeroExtend (2 * 16) 71#16 ≥
                    BitVec.twoPow (2 * 16) (16 - 1) <<<
                      1 =?= BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32 ≥ BitVec.twoPow 32 15 <<< 1
  [Meta.isDefEq] [0.006879] ✅️ ?h₁ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (Eq.trans
              (congr
                (congrArg Or
                  (Eq.trans
                    (congr
                      (congrArg
                        (fun x => LT.lt (x >>> 1#8 + BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                        (Eq.trans (BitVec.sub_toAdd x✝ (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                          (congrArg (HAdd.hAdd x✝)
                            (BitVec.neg_eq_not_add (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))))
                      (congrArg (fun x => x >>> 1#8)
                        (Eq.trans (BitVec.sub_toAdd x✝ (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                          (congrArg (HAdd.hAdd x✝)
                            (BitVec.neg_eq_not_add (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))))))
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                      ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                      ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1))))
                (Eq.trans
                  (congrArg
                    (fun x =>
                      x >>> 1#8 + BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                    (Eq.trans (BitVec.sub_toAdd x✝ (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                      (congrArg (HAdd.hAdd x✝)
                        (BitVec.neg_eq_not_add (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))))
                  (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                    ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                    (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))))
              (Std.Tactic.BVDecide.Normalize.Bool.or_to_or
                ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                  (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                  (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))
            (congrArg (fun x => x = true)
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim
                ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                  (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                  (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))))
        (true_and
          ((!((!(x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                    (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) &&
                !BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                    (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
            true))
    [Meta.isDefEq.assign] [0.006876] ✅️ ?h₁ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (Eq.trans
                (congr
                  (congrArg Or
                    (Eq.trans
                      (congr
                        (congrArg
                          (fun x => LT.lt (x >>> 1#8 + BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                          (Eq.trans
                            (BitVec.sub_toAdd x✝ (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                            (congrArg (HAdd.hAdd x✝)
                              (BitVec.neg_eq_not_add (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))))
                        (congrArg (fun x => x >>> 1#8)
                          (Eq.trans
                            (BitVec.sub_toAdd x✝ (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                            (congrArg (HAdd.hAdd x✝)
                              (BitVec.neg_eq_not_add
                                (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))))))
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                        ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                          BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                        ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1))))
                  (Eq.trans
                    (congrArg
                      (fun x =>
                        x >>> 1#8 + BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                          BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                      (Eq.trans (BitVec.sub_toAdd x✝ (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                        (congrArg (HAdd.hAdd x✝)
                          (BitVec.neg_eq_not_add (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))))
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                      ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                      (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))))
                (Std.Tactic.BVDecide.Normalize.Bool.or_to_or
                  ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                    (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                  (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                    (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))
              (congrArg (fun x => x = true)
                (Std.Tactic.BVDecide.Normalize.Bool.or_elim
                  ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                    (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                  (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                    (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))))
          (true_and
            ((!((!(x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) &&
                  !BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.006846] ✅️ (?h₁ : (True ∧
              ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                  (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 ∨
                (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                  BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16))) =
            ((!((!(x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) &&
                  !BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (Eq.trans
                  (congr
                    (congrArg Or
                      (Eq.trans
                        (congr
                          (congrArg
                            (fun x => LT.lt (x >>> 1#8 + BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                            (Eq.trans
                              (BitVec.sub_toAdd x✝ (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                              (congrArg (HAdd.hAdd x✝)
                                (BitVec.neg_eq_not_add
                                  (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))))
                          (congrArg (fun x => x >>> 1#8)
                            (Eq.trans
                              (BitVec.sub_toAdd x✝ (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                              (congrArg (HAdd.hAdd x✝)
                                (BitVec.neg_eq_not_add
                                  (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))))))
                        (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                          ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                            BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                          ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1))))
                    (Eq.trans
                      (congrArg
                        (fun x =>
                          x >>> 1#8 + BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                            BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                        (Eq.trans (BitVec.sub_toAdd x✝ (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))
                          (congrArg (HAdd.hAdd x✝)
                            (BitVec.neg_eq_not_add (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))))
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult
                        ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                          BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                        (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)))))
                  (Std.Tactic.BVDecide.Normalize.Bool.or_to_or
                    ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                    (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))
                (congrArg (fun x => x = true)
                  (Std.Tactic.BVDecide.Normalize.Bool.or_elim
                    ((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                    (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))))))
            (true_and
              ((!((!(x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                        (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                          BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) &&
                    !BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                        (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                          BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
                true)) : (True ∧
              ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                  (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 ∨
                (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                  BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
            ((!((!(x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) &&
                  !BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                      (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
              true))
        [Meta.isDefEq] [0.006840] ✅️ (True ∧
                ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                    (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 ∨
                  (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16))) =
              ((!((!(x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                        (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                          BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) &&
                    !BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                        (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                          BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
                true) =?= (True ∧
                ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                    (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 ∨
                  (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
              ((!((!(x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                        (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                          BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) &&
                    !BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                        (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                          BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
                true)
          [Meta.isDefEq] [0.006805] ✅️ True ∧
                ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                    (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 ∨
                  (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                    BitVec.truncate 8
                      ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                        8#16)) =?= True ∧
                ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                    (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 ∨
                  (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
            [Meta.isDefEq] [0.006788] ✅️ (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                    (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 ∨
                  (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                    BitVec.truncate 8
                      ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                        8#16) =?= (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                    (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 ∨
                  (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)
              [Meta.isDefEq] [0.006648] ✅️ (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                        1#8 +
                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16) <
                    (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                      1#8 =?= (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) <
                    (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8
                [Meta.isDefEq] [0.006631] ✅️ instLTBitVec.1
                      ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                        BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16))
                      ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                        1#8) =?= instLTBitVec.1
                      ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                      ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8)
                  [Meta.isDefEq] [0.006591] ✅️ ((x✝ -
                                BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                              1#8 +
                            BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)).toNat <
                        ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                            1#8).toNat =?= ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                              1#8 +
                            BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)).toNat <
                        ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8).toNat
                    [Meta.isDefEq] [0.006579] ✅️ instLTNat.1
                          ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8 +
                              BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)).toNat
                          ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                              1#8).toNat =?= instLTNat.1
                          ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8 +
                              BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)).toNat
                          ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8).toNat
                      [Meta.isDefEq] [0.006560] ✅️ ((x✝ -
                                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                    1#8 +
                                  BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)).toNat.lt
                            ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                1#8).toNat =?= ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                                    1#8 +
                                  BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)).toNat.lt
                            ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8).toNat
                        [Meta.isDefEq.delta] [0.006550] ✅️ ((x✝ -
                                        BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                      1#8 +
                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)).toNat.lt
                              ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                  1#8).toNat =?= ((x✝ -
                                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                                      1#8 +
                                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)).toNat.lt
                              ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8).toNat
                          [Meta.isDefEq] [0.006519] ✅️ ((x✝ -
                                      BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                    1#8 +
                                  BitVec.truncate 8
                                    ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                                      8#16)).toNat =?= ((x✝ -
                                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                                    1#8 +
                                  BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)).toNat
                            [Meta.isDefEq.delta] [0.006509] ✅️ ((x✝ -
                                        BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                      1#8 +
                                    BitVec.truncate 8
                                      ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                                        8#16)).toNat =?= ((x✝ -
                                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                                      1#8 +
                                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)).toNat
                              [Meta.isDefEq] [0.006503] ✅️ (x✝ -
                                        BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                      1#8 +
                                    BitVec.truncate 8
                                      ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                                        8#16) =?= (x✝ -
                                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                                      1#8 +
                                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)
                                [Meta.isDefEq] [0.006382] ✅️ instHAdd.1
                                      ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8)
                                      (BitVec.truncate 8
                                        ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                                          8#16)) =?= instHAdd.1
                                      ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8)
                                      (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                                  [Meta.isDefEq] [0.006336] ✅️ Add.add
                                        ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>> 1#8)
                                        (BitVec.truncate 8
                                          ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                                            8#16)) =?= Add.add
                                        ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8)
                                        (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                                    [Meta.isDefEq] [0.006158] ✅️ BitVec.instAdd.1
                                          ((x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                            1#8)
                                          (BitVec.truncate 8
                                            ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                                              8#16)) =?= BitVec.instAdd.1
                                          ((x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>> 1#8)
                                          (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                                      [Meta.isDefEq] [0.006127] ✅️ ((x✝ -
                                                  BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                                1#8).add
                                            (BitVec.truncate 8
                                              ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                                                8#16)) =?= ((x✝ -
                                                  BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                                                1#8).add
                                            (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                                        [Meta.isDefEq.delta] [0.006117] ✅️ ((x✝ -
                                                    BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                                  1#8).add
                                              (BitVec.truncate 8
                                                ((BitVec.zeroExtend 16 x✝ * 71#16) >>>
                                                  8#16)) =?= ((x✝ -
                                                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                                                  1#8).add
                                              (BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                                          [Meta.isDefEq] [0.006086] ✅️ (x✝ -
                                                  BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                                1#8 =?= (x✝ -
                                                  BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                                                1#8
                                            [Meta.isDefEq] [0.006060] ✅️ BitVec.instHShiftRight.1
                                                  (x✝ - BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16))
                                                  1#8 =?= BitVec.instHShiftRight.1
                                                  (x✝ - BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                                                  1#8
                                              [Meta.isDefEq] [0.004157] ✅️ (x✝ -
                                                      BitVec.truncate 8
                                                        ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16)) >>>
                                                    (1#8).toNat =?= (x✝ -
                                                      BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                                                    (1#8).toNat
                                                [Meta.isDefEq] [0.004132] ✅️ BitVec.instHShiftRightNat.1
                                                      (x✝ -
                                                        BitVec.truncate 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8#16))
                                                      (1#8).toNat =?= BitVec.instHShiftRightNat.1
                                                      (x✝ -
                                                        BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))
                                                      (1#8).toNat
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some
              ((BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) +
                  (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1) >>>
                7) ⊑
            if
                (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                          BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                      BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)) =
                  true then
              none
            else
              if (!BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) = true then none
              else
                if
                    (!((!BitVec.signExtend 32 (BitVec.twoPow 16 15) >ᵤ
                              BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) &&
                          BitVec.twoPow 32 15 >ᵤ BitVec.signExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32)) =
                      true then
                  none
                else
                  if (!BitVec.twoPow 32 15 <<< 1 >ᵤ BitVec.zeroExtend 32 (BitVec.zeroExtend 16 x✝) * 71#32) = true then
                    none
                  else
                    if
                        (!((!(x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 >ᵤ
                                  (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>>
                                      1 +
                                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) &&
                              !BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) >ᵤ
                                  (x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>>
                                      1 +
                                    BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8))) =
                          true then
                      none
                    else
                      some
                        (((x✝ + (~~~BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8) + 1#8)) >>> 1 +
                            BitVec.zeroExtend 8 ((BitVec.zeroExtend 16 x✝ * 71#16) >>> 8)) >>>
                          7)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
