⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [874/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [883/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [886/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsubtracthfromhonehhandhofhselect_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsubtracthfromhonehhandhofhselect_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsubtracthfromhonehhandhofhselect_proof.lean:11:8: error: (kernel) declaration has metavariables 't0_sub_from_trueval_thm'
[bv] [0.079643] Normalizing goal
  [Meta.synthInstance] [0.002018] ✅️ Decidable
        ((Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some x✝
            | some { toFin := ⟨0, ⋯⟩ } => some x✝²)
            fun y' => some (x✝ - y')) ⊑
          match some x✝¹ with
          | none => none
          | some { toFin := ⟨1, ⋯⟩ } => some 0#8
          | some { toFin := ⟨0, ⋯⟩ } => some (x✝ - x✝²))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 1
      e_2 : LLVM.IntW 8
      x✝² : BitVec 8
      x✝¹ : BitVec 1
      x✝ : BitVec 8
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some x✝
              | some { toFin := ⟨0, ⋯⟩ } => some x✝²)
              fun y' => some (x✝ - y')) ⊑
            match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 0#8
            | some { toFin := ⟨0, ⋯⟩ } => some (x✝ - x✝²)
      ⊢ False
  [Meta.isDefEq] [0.001006] ❌️ match none with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some x✝
      | some { toFin := ⟨0, ⋯⟩ } => some x✝²
  [Meta.isDefEq] [0.001063] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some x✝
      | some { toFin := ⟨0, ⋯⟩ } => some x✝²
  [Meta.isDefEq] [0.001030] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some x✝
      | some { toFin := ⟨0, ⋯⟩ } => some x✝²
  [Meta.isDefEq] [0.001066] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ - x✝²)
  [Meta.isDefEq] [0.001038] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ - x✝²)
  [Meta.isDefEq] [0.001050] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
  [Meta.isDefEq] [0.001036] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
  [Meta.isDefEq] [0.001037] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some x✝
      | some { toFin := ⟨0, ⋯⟩ } => some x✝²
  [Meta.isDefEq] [0.001041] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some x✝
      | some { toFin := ⟨0, ⋯⟩ } => some x✝²
  [Meta.isDefEq] [0.001075] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
  [Meta.isDefEq] [0.001043] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 1
      e_2 : LLVM.IntW 8
      x✝² : BitVec 8
      x✝¹ : BitVec 1
      x✝ : BitVec 8
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some x✝
              | some { toFin := ⟨0, ⋯⟩ } => some x✝²)
              fun a => some (x✝ + (~~~a + 1#8))) ⊑
            match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 0#8
            | some { toFin := ⟨0, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
      ⊢ False
  [Meta.isDefEq] [0.001051] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some x✝
      | some { toFin := ⟨0, ⋯⟩ } => some x✝²
  [Meta.isDefEq] [0.001015] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some x✝
      | some { toFin := ⟨0, ⋯⟩ } => some x✝²
  [Meta.isDefEq] [0.001046] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
  [Meta.isDefEq] [0.001023] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
  [Meta.isDefEq] [0.001057] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some x✝
      | some { toFin := ⟨0, ⋯⟩ } => some x✝²
  [Meta.isDefEq] [0.001034] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some x✝
      | some { toFin := ⟨0, ⋯⟩ } => some x✝²
  [Meta.isDefEq] [0.001044] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
  [Meta.isDefEq] [0.001028] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 0#8
      | some { toFin := ⟨0, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsubtracthfromhonehhandhofhselect_proof.lean:27:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsubtracthfromhonehhandhofhselect_proof.lean:27:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsubtracthfromhonehhandhofhselect_proof.lean:21:8: error: (kernel) declaration has metavariables 't1_sub_from_falseval_thm'
[bv] [0.066473] Normalizing goal
  [Meta.synthInstance] [0.001743] ✅️ Decidable
        ((Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some x✝²
            | some { toFin := ⟨0, ⋯⟩ } => some x✝)
            fun y' => some (x✝ - y')) ⊑
          match some x✝¹ with
          | none => none
          | some { toFin := ⟨1, ⋯⟩ } => some (x✝ - x✝²)
          | some { toFin := ⟨0, ⋯⟩ } => some 0#8)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 1
      e_2 : LLVM.IntW 8
      x✝² : BitVec 8
      x✝¹ : BitVec 1
      x✝ : BitVec 8
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some x✝²
              | some { toFin := ⟨0, ⋯⟩ } => some x✝)
              fun y' => some (x✝ - y')) ⊑
            match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some (x✝ - x✝²)
            | some { toFin := ⟨0, ⋯⟩ } => some 0#8
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 1
      e_2 : LLVM.IntW 8
      x✝² : BitVec 8
      x✝¹ : BitVec 1
      x✝ : BitVec 8
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some x✝²
              | some { toFin := ⟨0, ⋯⟩ } => some x✝)
              fun a => some (x✝ + (~~~a + 1#8))) ⊑
            match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some (x✝ + (~~~x✝² + 1#8))
            | some { toFin := ⟨0, ⋯⟩ } => some 0#8
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
