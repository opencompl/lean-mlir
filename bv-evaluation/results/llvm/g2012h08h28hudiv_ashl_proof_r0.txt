⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2012h08h28hudiv_ashl_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2012h08h28hudiv_ashl_proof.lean:11:8: error: (kernel) declaration has metavariables 'udiv400_thm'
[bv] [0.019714] Normalizing goal
  [Meta.synthInstance] [0.001501] ✅️ Decidable
        ((if 2#32 ≥ ↑32 then none else if 100#32 = 0 then none else some (x✝ >>> 2#32 / 100#32)) ⊑
          if 400#32 = 0 then none else some (x✝ / 400#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if 2#32 ≥ ↑32 then none else if 100#32 = 0 then none else some (x✝ >>> 2#32 / 100#32)) ⊑
            if 400#32 = 0 then none else some (x✝ / 400#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ : ¬some (x✝ >>> 2 / 100#32) ⊑ some (x✝ / 400#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2012h08h28hudiv_ashl_proof.lean:27:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2012h08h28hudiv_ashl_proof.lean:21:8: error: (kernel) declaration has metavariables 'sdiv400_yes_thm'
[bv] [0.041875] Normalizing goal
  [Meta.synthInstance] [0.001956] ✅️ Decidable
        ((if 2#32 ≥ ↑32 then none
          else
            if (100#32 == 0 || 32 != 1 && x✝ >>> 2#32 == BitVec.intMin 32 && 100#32 == -1) = true then none
            else some ((x✝ >>> 2#32).sdiv 100#32)) ⊑
          if 400#32 = 0 then none else some (x✝ / 400#32))
    [Meta.check] [0.001122] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if 2#32 ≥ ↑32 then none
          else
            if (100#32 == 0 || 32 != 1 && x✝ >>> 2#32 == BitVec.intMin 32 && 100#32 == -1) = true then none
            else some ((x✝ >>> 2#32).sdiv 100#32))
          (if 400#32 = 0 then none else some (x✝ / 400#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if 2#32 ≥ ↑32 then none
            else
              if (100#32 == 0 || 32 != 1 && x✝ >>> 2#32 == BitVec.intMin 32 && 100#32 == -1) = true then none
              else some ((x✝ >>> 2#32).sdiv 100#32)) ⊑
            if 400#32 = 0 then none else some (x✝ / 400#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬some
              (if (x✝ >>> 2).getLsbD 31 = true then ~~~((~~~(x✝ >>> 2) + 1#32) / 100#32) + 1#32
              else x✝ >>> 2 / 100#32) ⊑
            some (x✝ / 400#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2012h08h28hudiv_ashl_proof.lean:37:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2012h08h28hudiv_ashl_proof.lean:31:8: error: (kernel) declaration has metavariables 'udiv_i80_thm'
[bv] [0.013403] Normalizing goal
  [Meta.synthInstance] [0.001230] ✅️ Decidable
        ((if 2#80 ≥ ↑80 then none else if 100#80 = 0 then none else some (x✝ >>> 2#80 / 100#80)) ⊑
          if 400#80 = 0 then none else some (x✝ / 400#80))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 80
      x✝ : BitVec 80
      a✝ :
        ¬(if 2#80 ≥ ↑80 then none else if 100#80 = 0 then none else some (x✝ >>> 2#80 / 100#80)) ⊑
            if 400#80 = 0 then none else some (x✝ / 400#80)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 80
      x✝ : BitVec 80
      a✝ : ¬some (x✝ >>> 2 / 100#80) ⊑ some (x✝ / 400#80)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
