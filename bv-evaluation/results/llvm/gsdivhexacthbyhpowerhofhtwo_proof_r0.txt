⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:16:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:11:8: error: (kernel) declaration has metavariables 't0_thm'
[bv] [0.045171] Normalizing goal
  [Meta.synthInstance] [0.001989] ✅️ Decidable
        ((if (32#8 == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 32#8 == -1) = true then none else some (x✝.sdiv 32#8)) ⊑
          if 5#8 ≥ ↑8 then none else some (x✝.sshiftRight (5#8).toNat))
    [Meta.check] [0.001012] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if (32#8 == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 32#8 == -1) = true then none else some (x✝.sdiv 32#8))
          (if 5#8 ≥ ↑8 then none else some (x✝.sshiftRight (5#8).toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (32#8 == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 32#8 == -1) = true then none else some (x✝.sdiv 32#8)) ⊑
            if 5#8 ≥ ↑8 then none else some (x✝.sshiftRight (5#8).toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ : ¬some (if x✝.getLsbD 7 = true then ~~~((~~~x✝ + 1#8) / 32#8) + 1#8 else x✝ / 32#8) ⊑ some (x✝.sshiftRight 5)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:26:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:20:8: error: (kernel) declaration has metavariables 'n2_thm'
[bv] [0.050134] Normalizing goal
  [Meta.synthInstance] [0.001559] ✅️ Decidable
        ((if (128#8 == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 128#8 == -1) = true then none
          else some (x✝.sdiv 128#8)) ⊑
          some (BitVec.zeroExtend 8 (BitVec.ofBool (x✝ == 128#8))))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (128#8 == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 128#8 == -1) = true then none
            else some (x✝.sdiv 128#8)) ⊑
            some (BitVec.zeroExtend 8 (BitVec.ofBool (x✝ == 128#8)))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some (if x✝.getLsbD 7 = true then (~~~x✝ + 1#8) / 128#8 else ~~~(x✝ / 128#8) + 1#8) ⊑
            some (BitVec.zeroExtend 8 (if (x✝ == 128#8) = true then 1#1 else 0#1))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:36:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:30:8: error: (kernel) declaration has metavariables 'shl1_nsw_thm'
[bv] [0.116230] Normalizing goal
  [Meta.synthInstance] [0.002289] ✅️ Decidable
        ((if True ∧ (1#8 <<< x✝¹).sshiftRight x✝¹.toNat = 1#8 then none
          else
            if x✝¹ ≥ ↑8 then none
            else
              if (1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) = true then none
              else some (x✝.sdiv (1#8 <<< x✝¹))) ⊑
          if x✝¹ ≥ ↑8 then none else some (x✝.sshiftRight x✝¹.toNat))
    [Meta.check] [0.001278] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if True ∧ (1#8 <<< x✝¹).sshiftRight x✝¹.toNat = 1#8 then none
          else
            if x✝¹ ≥ ↑8 then none
            else
              if (1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) = true then none
              else some (x✝.sdiv (1#8 <<< x✝¹)))
          (if x✝¹ ≥ ↑8 then none else some (x✝.sshiftRight x✝¹.toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if True ∧ (1#8 <<< x✝¹).sshiftRight x✝¹.toNat = 1#8 then none
            else
              if x✝¹ ≥ ↑8 then none
              else
                if (1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) = true then none
                else some (x✝.sdiv (1#8 <<< x✝¹))) ⊑
            if x✝¹ ≥ ↑8 then none else some (x✝.sshiftRight x✝¹.toNat)
      ⊢ False
  [Meta.isDefEq] [0.002154] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => 1#8 <<< x✝¹ == 0#8 || x && 1#8 <<< x✝¹ == 255#8) (Bool.true_and (x✝ == BitVec.intMin 8)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#8 <<< x✝¹ == 0#8)
            (x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8)))
    [Meta.isDefEq.assign] [0.002149] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => 1#8 <<< x✝¹ == 0#8 || x && 1#8 <<< x✝¹ == 255#8)
              (Bool.true_and (x✝ == BitVec.intMin 8)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#8 <<< x✝¹ == 0#8)
              (x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8)))
      [Meta.isDefEq.assign.checkTypes] [0.002130] ✅️ (?h₁ : ((1#8 <<< x✝¹ == 0 ||
                8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) =
              true) =
            ((!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => 1#8 <<< x✝¹ == 0#8 || x && 1#8 <<< x✝¹ == 255#8)
                (Bool.true_and (x✝ == BitVec.intMin 8)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#8 <<< x✝¹ == 0#8)
                (x✝ == BitVec.intMin 8 &&
                  1#8 <<< x✝¹ ==
                    255#8))) : ((1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8) = true) =
            ((!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) = true))
        [Meta.isDefEq] [0.002126] ✅️ ((1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) =
                true) =
              ((!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) =
                true) =?= ((1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8) = true) =
              ((!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) = true)
          [Meta.isDefEq] [0.002095] ✅️ (1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) =
                true =?= (1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8) = true
            [Meta.isDefEq] [0.002072] ✅️ 1#8 <<< x✝¹ == 0 ||
                  8 != 1 && x✝ == BitVec.intMin 8 &&
                    1#8 <<< x✝¹ == -1 =?= 1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8
              [Meta.isDefEq.delta] [0.002051] ✅️ 1#8 <<< x✝¹ == 0 ||
                    8 != 1 && x✝ == BitVec.intMin 8 &&
                      1#8 <<< x✝¹ == -1 =?= 1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8
                [Meta.isDefEq] [0.001635] ✅️ 8 != 1 && x✝ == BitVec.intMin 8 &&
                      1#8 <<< x✝¹ == -1 =?= true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8
                  [Meta.isDefEq.delta] [0.001615] ✅️ 8 != 1 && x✝ == BitVec.intMin 8 &&
                        1#8 <<< x✝¹ == -1 =?= true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8
                    [Meta.isDefEq] [0.001136] ✅️ 1#8 <<< x✝¹ == -1 =?= 1#8 <<< x✝¹ == 255#8
                      [Meta.isDefEq] [0.001106] ✅️ instBEqOfDecidableEq.1 (1#8 <<< x✝¹)
                            (-1) =?= instBEqOfDecidableEq.1 (1#8 <<< x✝¹) 255#8
                        [Meta.isDefEq] [0.001059] ✅️ Decidable.decide
                              (1#8 <<< x✝¹ = -1) =?= Decidable.decide (1#8 <<< x✝¹ = 255#8)
                          [Meta.isDefEq.delta] [0.001037] ✅️ Decidable.decide
                                (1#8 <<< x✝¹ = -1) =?= Decidable.decide (1#8 <<< x✝¹ = 255#8)
  [Meta.isDefEq] [0.001828] ✅️ if ?b then ?x
      else
        ?y =?= if x✝.msb = true then if (1#8 <<< x✝¹).msb = true then -x✝ / -1#8 <<< x✝¹ else -(-x✝ / 1#8 <<< x✝¹)
      else if (1#8 <<< x✝¹).msb = true then -(x✝ / -1#8 <<< x✝¹) else x✝ / 1#8 <<< x✝¹
    [Meta.isDefEq] [0.001623] ✅️ ?b =?= x✝.msb = true
      [Meta.isDefEq.assign] [0.001617] ✅️ ?b := x✝.msb = true
        [Meta.isDefEq.assign.checkTypes] [0.001602] ✅️ (?b : Prop) := (x✝.msb = true : Prop)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if ((1#8 <<< x✝¹).sshiftRight x✝¹.toNat == 1#8) = true then none
            else
              if (!8#8 >ᵤ x✝¹) = true then none
              else
                if (!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) = true then none
                else
                  some
                    (if x✝.getLsbD 7 = true then
                      if (1#8 <<< x✝¹).getLsbD 7 = true then (~~~x✝ + 1#8) / (~~~(1#8 <<< x✝¹) + 1#8)
                      else ~~~((~~~x✝ + 1#8) / 1#8 <<< x✝¹) + 1#8
                    else
                      if (1#8 <<< x✝¹).getLsbD 7 = true then ~~~(x✝ / (~~~(1#8 <<< x✝¹) + 1#8)) + 1#8
                      else x✝ / 1#8 <<< x✝¹)) ⊑
            if (!8#8 >ᵤ x✝¹) = true then none else some (x✝.sshiftRight x✝¹.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:47:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:40:8: error: (kernel) declaration has metavariables 'shl1_nsw_not_exact_thm'
[bv] [0.077174] Normalizing goal
  [Meta.synthInstance] [0.001400] ✅️ Decidable
        ((if True ∧ (1#8 <<< x✝¹).sshiftRight x✝¹.toNat = 1#8 then none
          else
            if x✝¹ ≥ ↑8 then none
            else
              if (1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) = true then none
              else some (x✝.sdiv (1#8 <<< x✝¹))) ⊑
          if True ∧ (1#8 <<< x✝¹).sshiftRight x✝¹.toNat = 1#8 then none
          else
            if True ∧ 1#8 <<< x✝¹ >>> x✝¹ = 1#8 then none
            else
              if x✝¹ ≥ ↑8 then none
              else
                if (1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) = true then none
                else some (x✝.sdiv (1#8 <<< x✝¹)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if True ∧ (1#8 <<< x✝¹).sshiftRight x✝¹.toNat = 1#8 then none
            else
              if x✝¹ ≥ ↑8 then none
              else
                if (1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) = true then none
                else some (x✝.sdiv (1#8 <<< x✝¹))) ⊑
            if True ∧ (1#8 <<< x✝¹).sshiftRight x✝¹.toNat = 1#8 then none
            else
              if True ∧ 1#8 <<< x✝¹ >>> x✝¹ = 1#8 then none
              else
                if x✝¹ ≥ ↑8 then none
                else
                  if (1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) = true then none
                  else some (x✝.sdiv (1#8 <<< x✝¹))
      ⊢ False
  [Meta.isDefEq] [0.001316] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => 1#8 <<< x✝¹ == 0#8 || x && 1#8 <<< x✝¹ == 255#8) (Bool.true_and (x✝ == BitVec.intMin 8)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#8 <<< x✝¹ == 0#8)
            (x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8)))
    [Meta.isDefEq.assign] [0.001293] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => 1#8 <<< x✝¹ == 0#8 || x && 1#8 <<< x✝¹ == 255#8)
              (Bool.true_and (x✝ == BitVec.intMin 8)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#8 <<< x✝¹ == 0#8)
              (x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8)))
      [Meta.isDefEq.assign.checkTypes] [0.001277] ✅️ (?h₁ : ((1#8 <<< x✝¹ == 0 ||
                8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) =
              true) =
            ((!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => 1#8 <<< x✝¹ == 0#8 || x && 1#8 <<< x✝¹ == 255#8)
                (Bool.true_and (x✝ == BitVec.intMin 8)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#8 <<< x✝¹ == 0#8)
                (x✝ == BitVec.intMin 8 &&
                  1#8 <<< x✝¹ ==
                    255#8))) : ((1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8) = true) =
            ((!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) = true))
        [Meta.isDefEq] [0.001274] ✅️ ((1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) =
                true) =
              ((!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) =
                true) =?= ((1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8) = true) =
              ((!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) = true)
          [Meta.isDefEq] [0.001254] ✅️ (1#8 <<< x✝¹ == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == -1) =
                true =?= (1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8) = true
            [Meta.isDefEq] [0.001240] ✅️ 1#8 <<< x✝¹ == 0 ||
                  8 != 1 && x✝ == BitVec.intMin 8 &&
                    1#8 <<< x✝¹ == -1 =?= 1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8
              [Meta.isDefEq.delta] [0.001225] ✅️ 1#8 <<< x✝¹ == 0 ||
                    8 != 1 && x✝ == BitVec.intMin 8 &&
                      1#8 <<< x✝¹ == -1 =?= 1#8 <<< x✝¹ == 0#8 || true && x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8
  [Meta.isDefEq] [0.001710] ✅️ ?x.msb =?= (1#8 <<< x✝¹).msb
    [Meta.isDefEq] [0.001680] ✅️ ?x =?= 1#8 <<< x✝¹
      [Meta.isDefEq.assign] [0.001676] ✅️ ?x := 1#8 <<< x✝¹
        [Meta.isDefEq.assign.checkTypes] [0.001666] ✅️ (?x : BitVec 8) := (1#8 <<< x✝¹ : BitVec 8)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if ((1#8 <<< x✝¹).sshiftRight x✝¹.toNat == 1#8) = true then none
            else
              if (!8#8 >ᵤ x✝¹) = true then none
              else
                if (!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) = true then none
                else
                  some
                    (if x✝.getLsbD 7 = true then
                      if (1#8 <<< x✝¹).getLsbD 7 = true then (~~~x✝ + 1#8) / (~~~(1#8 <<< x✝¹) + 1#8)
                      else ~~~((~~~x✝ + 1#8) / 1#8 <<< x✝¹) + 1#8
                    else
                      if (1#8 <<< x✝¹).getLsbD 7 = true then ~~~(x✝ / (~~~(1#8 <<< x✝¹) + 1#8)) + 1#8
                      else x✝ / 1#8 <<< x✝¹)) ⊑
            if ((1#8 <<< x✝¹).sshiftRight x✝¹.toNat == 1#8) = true then none
            else
              if (1#8 <<< x✝¹ >>> x✝¹ == 1#8) = true then none
              else
                if (!8#8 >ᵤ x✝¹) = true then none
                else
                  if (!(!1#8 <<< x✝¹ == 0#8 && !(x✝ == BitVec.intMin 8 && 1#8 <<< x✝¹ == 255#8))) = true then none
                  else
                    some
                      (if x✝.getLsbD 7 = true then
                        if (1#8 <<< x✝¹).getLsbD 7 = true then (~~~x✝ + 1#8) / (~~~(1#8 <<< x✝¹) + 1#8)
                        else ~~~((~~~x✝ + 1#8) / 1#8 <<< x✝¹) + 1#8
                      else
                        if (1#8 <<< x✝¹).getLsbD 7 = true then ~~~(x✝ / (~~~(1#8 <<< x✝¹) + 1#8)) + 1#8
                        else x✝ / 1#8 <<< x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:57:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:51:8: error: (kernel) declaration has metavariables 'prove_exact_with_high_mask_thm'
[bv] [0.030217] Normalizing goal
  [Meta.synthInstance] [0.001236] ✅️ Decidable
        ((if (4#8 == 0 || 8 != 1 && x✝ &&& 248#8 == BitVec.intMin 8 && 4#8 == -1) = true then none
          else some ((x✝ &&& 248#8).sdiv 4#8)) ⊑
          if 2#8 ≥ ↑8 then none else some (x✝.sshiftRight (2#8).toNat &&& 254#8))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (4#8 == 0 || 8 != 1 && x✝ &&& 248#8 == BitVec.intMin 8 && 4#8 == -1) = true then none
            else some ((x✝ &&& 248#8).sdiv 4#8)) ⊑
            if 2#8 ≥ ↑8 then none else some (x✝.sshiftRight (2#8).toNat &&& 254#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some
              (if (x✝ &&& 248#8).getLsbD 7 = true then ~~~((~~~(x✝ &&& 248#8) + 1#8) / 4#8) + 1#8
              else (x✝ &&& 248#8) / 4#8) ⊑
            some (x✝.sshiftRight 2 &&& 254#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:66:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivhexacthbyhpowerhofhtwo_proof.lean:61:8: error: (kernel) declaration has metavariables 'prove_exact_with_high_mask_limit_thm'
[bv] [0.028989] Normalizing goal
  [Meta.synthInstance] [0.001217] ✅️ Decidable
        ((if (8#8 == 0 || 8 != 1 && x✝ &&& 248#8 == BitVec.intMin 8 && 8#8 == -1) = true then none
          else some ((x✝ &&& 248#8).sdiv 8#8)) ⊑
          if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (8#8 == 0 || 8 != 1 && x✝ &&& 248#8 == BitVec.intMin 8 && 8#8 == -1) = true then none
            else some ((x✝ &&& 248#8).sdiv 8#8)) ⊑
            if 3#8 ≥ ↑8 then none else some (x✝.sshiftRight (3#8).toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some
              (if (x✝ &&& 248#8).getLsbD 7 = true then ~~~((~~~(x✝ &&& 248#8) + 1#8) / 8#8) + 1#8
              else (x✝ &&& 248#8) / 8#8) ⊑
            some (x✝.sshiftRight 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
