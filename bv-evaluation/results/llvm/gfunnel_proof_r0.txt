⚠ [874/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [879/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [885/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [886/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gfunnel_proof.lean:22:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gfunnel_proof.lean:22:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gfunnel_proof.lean:11:8: error: (kernel) declaration has metavariables 'unmasked_shlop_insufficient_mask_shift_amount_thm'
[bv] [0.052229] Normalizing goal
  [Meta.synthInstance] [0.001333] ✅️ Decidable
        ((if 8#16 - (x✝¹ &&& 15#16) ≥ ↑16 then none
          else
            if x✝¹ &&& 15#16 ≥ ↑16 then none
            else some (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16)))) ⊑
          if
              True ∧
                (BitVec.signExtend (16 + 1) 8#16 - BitVec.signExtend (16 + 1) (x✝¹ &&& 15#16)).msb ≠
                  (BitVec.signExtend (16 + 1) 8#16 - BitVec.signExtend (16 + 1) (x✝¹ &&& 15#16)).getMsbD 1 then
            none
          else
            if 8#16 - (x✝¹ &&& 15#16) ≥ ↑16 then none
            else
              if x✝¹ &&& 15#16 ≥ ↑16 then none
              else some (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 16
      x✝² x✝¹ x✝ : BitVec 16
      a✝ :
        ¬(if 8#16 - (x✝¹ &&& 15#16) ≥ ↑16 then none
            else
              if x✝¹ &&& 15#16 ≥ ↑16 then none
              else
                some (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16)))) ⊑
            if
                True ∧
                  (BitVec.signExtend (16 + 1) 8#16 - BitVec.signExtend (16 + 1) (x✝¹ &&& 15#16)).msb ≠
                    (BitVec.signExtend (16 + 1) 8#16 - BitVec.signExtend (16 + 1) (x✝¹ &&& 15#16)).getMsbD 1 then
              none
            else
              if 8#16 - (x✝¹ &&& 15#16) ≥ ↑16 then none
              else
                if x✝¹ &&& 15#16 ≥ ↑16 then none
                else some (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16)))
      ⊢ False
  [Meta.isDefEq] [0.004881] ✅️ ?h₃ =?= fun a =>
        congrArg (fun x => some (BitVec.truncate 8 (x✝ <<< x ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))))
          (Eq.trans (BitVec.sub_toAdd (8#16) (x✝¹ &&& 15#16))
            (Eq.trans (congrArg (HAdd.hAdd 8#16) (BitVec.neg_eq_not_add (x✝¹ &&& 15#16)))
              (Std.Tactic.BVDecide.Normalize.BitVec.add_const_right (8#16) (~~~(x✝¹ &&& 15#16)) 1#16)))
    [Meta.isDefEq.assign] [0.004878] ✅️ ?h₃ := fun a =>
          congrArg (fun x => some (BitVec.truncate 8 (x✝ <<< x ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))))
            (Eq.trans (BitVec.sub_toAdd (8#16) (x✝¹ &&& 15#16))
              (Eq.trans (congrArg (HAdd.hAdd 8#16) (BitVec.neg_eq_not_add (x✝¹ &&& 15#16)))
                (Std.Tactic.BVDecide.Normalize.BitVec.add_const_right (8#16) (~~~(x✝¹ &&& 15#16)) 1#16)))
      [Meta.isDefEq.assign.checkTypes] [0.004848] ✅️ (?h₃ : ¬(!16#16 >ᵤ x✝¹ &&& 15#16) = true →
            some (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))) =
              some
                (BitVec.zeroExtend 8
                  (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) |||
                    (x✝² &&& 255#16) >>>
                      (x✝¹ &&&
                        15#16)))) := (fun a =>
            congrArg (fun x => some (BitVec.truncate 8 (x✝ <<< x ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))))
              (Eq.trans (BitVec.sub_toAdd (8#16) (x✝¹ &&& 15#16))
                (Eq.trans (congrArg (HAdd.hAdd 8#16) (BitVec.neg_eq_not_add (x✝¹ &&& 15#16)))
                  (Std.Tactic.BVDecide.Normalize.BitVec.add_const_right (8#16) (~~~(x✝¹ &&& 15#16))
                    1#16))) : ¬(!16#16 >ᵤ x✝¹ &&& 15#16) = true →
            some (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))) =
              some
                (BitVec.truncate 8
                  (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))))
        [Meta.isDefEq] [0.004845] ✅️ ¬(!16#16 >ᵤ x✝¹ &&& 15#16) = true →
              some (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))) =
                some
                  (BitVec.zeroExtend 8
                    (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) |||
                      (x✝² &&& 255#16) >>>
                        (x✝¹ &&&
                          15#16))) =?= ¬(!16#16 >ᵤ x✝¹ &&& 15#16) = true →
              some (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))) =
                some
                  (BitVec.truncate 8
                    (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16)))
          [Meta.isDefEq] [0.004815] ✅️ some
                  (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))) =
                some
                  (BitVec.zeroExtend 8
                    (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) |||
                      (x✝² &&& 255#16) >>>
                        (x✝¹ &&&
                          15#16))) =?= some
                  (BitVec.truncate 8 (x✝ <<< (8#16 - (x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))) =
                some
                  (BitVec.truncate 8
                    (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16)))
            [Meta.isDefEq] [0.004793] ✅️ some
                  (BitVec.zeroExtend 8
                    (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) |||
                      (x✝² &&& 255#16) >>>
                        (x✝¹ &&&
                          15#16))) =?= some
                  (BitVec.truncate 8
                    (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16)))
              [Meta.isDefEq] [0.004772] ✅️ BitVec.zeroExtend 8
                    (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) |||
                      (x✝² &&& 255#16) >>>
                        (x✝¹ &&&
                          15#16)) =?= BitVec.truncate 8
                    (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))
                [Meta.isDefEq] [0.004758] ✅️ BitVec.setWidth 8
                      (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) |||
                        (x✝² &&& 255#16) >>>
                          (x✝¹ &&&
                            15#16)) =?= BitVec.setWidth 8
                      (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))
                  [Meta.isDefEq.delta] [0.004749] ✅️ BitVec.setWidth 8
                        (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) |||
                          (x✝² &&& 255#16) >>>
                            (x✝¹ &&&
                              15#16)) =?= BitVec.setWidth 8
                        (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))
                    [Meta.isDefEq] [0.004731] ✅️ x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) |||
                          (x✝² &&& 255#16) >>>
                            (x✝¹ &&&
                              15#16) =?= x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)) |||
                          (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16)
                      [Meta.isDefEq] [0.004689] ✅️ instHOrOfOrOp.1 (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)))
                            ((x✝² &&& 255#16) >>>
                              (x✝¹ &&&
                                15#16)) =?= instHOrOfOrOp.1 (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)))
                            ((x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))
                        [Meta.isDefEq] [0.004624] ✅️ OrOp.or (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)))
                              ((x✝² &&& 255#16) >>>
                                (x✝¹ &&&
                                  15#16)) =?= OrOp.or (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)))
                              ((x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))
                          [Meta.isDefEq] [0.004588] ✅️ BitVec.instOrOp.1 (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)))
                                ((x✝² &&& 255#16) >>>
                                  (x✝¹ &&&
                                    15#16)) =?= BitVec.instOrOp.1 (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)))
                                ((x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))
                            [Meta.isDefEq] [0.004546] ✅️ (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16))).or
                                  ((x✝² &&& 255#16) >>>
                                    (x✝¹ &&&
                                      15#16)) =?= (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16))).or
                                  ((x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))
                              [Meta.isDefEq.delta] [0.004535] ✅️ (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16))).or
                                    ((x✝² &&& 255#16) >>>
                                      (x✝¹ &&&
                                        15#16)) =?= (x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16))).or
                                    ((x✝² &&& 255#16) >>> (x✝¹ &&& 15#16))
                                [Meta.isDefEq] [0.004511] ✅️ x✝ <<<
                                      (9#16 + ~~~(x✝¹ &&& 15#16)) =?= x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16))
                                  [Meta.isDefEq] [0.004490] ✅️ BitVec.instHShiftLeft.1 x✝
                                        (9#16 +
                                          ~~~(x✝¹ &&&
                                              15#16)) =?= BitVec.instHShiftLeft.1 x✝ (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16))
                                    [Meta.isDefEq] [0.004439] ✅️ x✝ <<<
                                          (9#16 +
                                              ~~~(x✝¹ &&&
                                                  15#16)).toNat =?= x✝ <<< (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)).toNat
                                      [Meta.isDefEq] [0.004424] ✅️ BitVec.instHShiftLeftNat.1 x✝
                                            (9#16 +
                                                ~~~(x✝¹ &&&
                                                    15#16)).toNat =?= BitVec.instHShiftLeftNat.1 x✝
                                            (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)).toNat
                                        [Meta.isDefEq] [0.004380] ✅️ x✝.shiftLeft
                                              (9#16 +
                                                  ~~~(x✝¹ &&&
                                                      15#16)).toNat =?= x✝.shiftLeft
                                              (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)).toNat
                                          [Meta.isDefEq.delta] [0.004371] ✅️ x✝.shiftLeft
                                                (9#16 +
                                                    ~~~(x✝¹ &&&
                                                        15#16)).toNat =?= x✝.shiftLeft
                                                (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)).toNat
                                            [Meta.isDefEq] [0.004350] ✅️ (9#16 +
                                                    ~~~(x✝¹ &&&
                                                        15#16)).toNat =?= (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)).toNat
                                              [Meta.isDefEq.delta] [0.004333] ✅️ (9#16 +
                                                      ~~~(x✝¹ &&&
                                                          15#16)).toNat =?= (8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)).toNat
                                                [Meta.isDefEq] [0.004315] ✅️ 9#16 +
                                                      ~~~(x✝¹ &&& 15#16) =?= 8#16 + 1#16 + ~~~(x✝¹ &&& 15#16)
                                                  [Meta.isDefEq] [0.004189] ✅️ instHAdd.1 (9#16)
                                                        (~~~(x✝¹ &&&
                                                            15#16)) =?= instHAdd.1 (8#16 + 1#16) (~~~(x✝¹ &&& 15#16))
                                                    [Meta.isDefEq] [0.004150] ✅️ Add.add (9#16)
                                                          (~~~(x✝¹ &&&
                                                              15#16)) =?= Add.add (8#16 + 1#16) (~~~(x✝¹ &&& 15#16))
                                                      [Meta.isDefEq] [0.003694] ❌️ BitVec.instAdd =?= instAddNat
                                                        [Meta.isDefEq] [0.003675] ❌️ {
                                                              add := BitVec.add } =?= instAddNat
                                                          [Meta.isDefEq] [0.003661] ❌️ {
                                                                add := BitVec.add } =?= { add := Nat.add }
                                                            [Meta.isDefEq] [0.003611] ❌️ BitVec.add =?= Nat.add
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 16
      x✝² x✝¹ x✝ : BitVec 16
      a✝ :
        ¬(if (!16#16 >ᵤ 9#16 + ~~~(x✝¹ &&& 15#16)) = true then none
            else
              if (!16#16 >ᵤ x✝¹ &&& 15#16) = true then none
              else
                some
                  (BitVec.zeroExtend 8 (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16)))) ⊑
            if
                (!(9#17 + ~~~BitVec.signExtend 17 (x✝¹ &&& 15#16)).getLsbD 16 ==
                      (9#17 + ~~~BitVec.signExtend 17 (x✝¹ &&& 15#16)).getMsbD 1) =
                  true then
              none
            else
              if (!16#16 >ᵤ 9#16 + ~~~(x✝¹ &&& 15#16)) = true then none
              else
                if (!16#16 >ᵤ x✝¹ &&& 15#16) = true then none
                else
                  some
                    (BitVec.zeroExtend 8 (x✝ <<< (9#16 + ~~~(x✝¹ &&& 15#16)) ||| (x✝² &&& 255#16) >>> (x✝¹ &&& 15#16)))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
