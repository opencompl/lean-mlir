⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [883/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [886/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
Bitwuzla proved the goal after 133.151110ms, solving context: 0.000000ms
LeanSAT proved the goal after 96.063839ms: rewriting 27.892620ms, bitblasting 0.000000ms, SAT solving 57.945420ms, LRAT trimming 0.000000ms, LRAT checking 5.711120ms
Bitwuzla proved the goal after 78.547120ms, solving context: 2.000000ms
LeanSAT proved the goal after 98.805640ms: rewriting 31.537680ms, bitblasting 0.000000ms, SAT solving 61.327200ms, LRAT trimming 0.000000ms, LRAT checking 3.503710ms
Bitwuzla proved the goal after 71.297930ms, solving context: 0.000000ms
LeanSAT proved the goal after 138.944599ms: rewriting 16.951990ms, bitblasting 0.000000ms, SAT solving 113.711069ms, LRAT trimming 0.000000ms, LRAT checking 3.956210ms
Bitwuzla proved the goal after 91.028559ms, solving context: 0.000000ms
LeanSAT proved the goal after 85.718310ms: rewriting 17.400210ms, bitblasting 0.000000ms, SAT solving 59.660300ms, LRAT trimming 1.037830ms, LRAT checking 3.924090ms
Bitwuzla proved the goal after 76.480779ms, solving context: 2.000000ms
LeanSAT proved the goal after 137.109000ms: rewriting 20.079520ms, bitblasting 0.000000ms, SAT solving 107.854060ms, LRAT trimming 1.003440ms, LRAT checking 5.844460ms
Bitwuzla proved the goal after 80.723130ms, solving context: 0.000000ms
LeanSAT proved the goal after 84.272519ms: rewriting 16.732520ms, bitblasting 0.000000ms, SAT solving 58.671489ms, LRAT trimming 3.187140ms, LRAT checking 3.879370ms
Bitwuzla proved the goal after 73.533139ms, solving context: 4.000000ms
LeanSAT proved the goal after 127.437670ms: rewriting 12.666430ms, bitblasting 0.000000ms, SAT solving 107.467660ms, LRAT trimming 0.000000ms, LRAT checking 3.273620ms
Bitwuzla proved the goal after 77.952900ms, solving context: 0.000000ms
LeanSAT proved the goal after 137.807520ms: rewriting 27.724760ms, bitblasting 0.000000ms, SAT solving 106.193000ms, LRAT trimming 0.000000ms, LRAT checking 2.047080ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gmaskedhmergehadd_proof.lean:106:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gmaskedhmergehadd_proof.lean:99:8: error: (kernel) declaration has metavariables 'n3_constmask_samemask_thm'
[bv] [0.029479] Normalizing goal
  [Meta.synthInstance] [0.001198] ✅️ Decidable
        (some ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32)) ⊑
          if
              True ∧
                (x✝ &&& 65280#32).msb = (x✝¹ &&& 65280#32).msb ∧
                  ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32)).msb ≠ (x✝ &&& 65280#32).msb then
            none
          else
            if
                True ∧
                  ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32) < x✝ &&& 65280#32 ∨
                    (x✝ &&& 65280#32) + (x✝¹ &&& 65280#32) < x✝¹ &&& 65280#32) then
              none
            else some ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬some ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32)) ⊑
            if
                True ∧
                  (x✝ &&& 65280#32).msb = (x✝¹ &&& 65280#32).msb ∧
                    ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32)).msb ≠ (x✝ &&& 65280#32).msb then
              none
            else
              if
                  True ∧
                    ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32) < x✝ &&& 65280#32 ∨
                      (x✝ &&& 65280#32) + (x✝¹ &&& 65280#32) < x✝¹ &&& 65280#32) then
                none
              else some ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬some ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32)) ⊑
            if
                ((x✝ &&& 65280#32).getLsbD 31 == (x✝¹ &&& 65280#32).getLsbD 31 &&
                    !((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32)).getLsbD 31 == (x✝ &&& 65280#32).getLsbD 31) =
                  true then
              none
            else
              if
                  (!((!x✝ &&& 65280#32 >ᵤ (x✝ &&& 65280#32) + (x✝¹ &&& 65280#32)) &&
                        !x✝¹ &&& 65280#32 >ᵤ (x✝ &&& 65280#32) + (x✝¹ &&& 65280#32))) =
                    true then
                none
              else some ((x✝ &&& 65280#32) + (x✝¹ &&& 65280#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
