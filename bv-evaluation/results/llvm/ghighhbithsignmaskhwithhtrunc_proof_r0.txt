⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [884/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
Bitwuzla proved the goal after 0.702080ms, solving context: 0.000000ms
LeanSAT proved the goal after 3.181320ms: rewriting 3.151510ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
Bitwuzla proved the goal after 80.420660ms, solving context: 1.000000ms
LeanSAT proved the goal after 83.651359ms: rewriting 21.196070ms, bitblasting 0.000000ms, SAT solving 55.288169ms, LRAT trimming 0.000000ms, LRAT checking 4.347299ms
Bitwuzla proved the goal after 0.853470ms, solving context: 0.000000ms
LeanSAT proved the goal after 4.563620ms: rewriting 4.542770ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
Bitwuzla proved the goal after 100.375410ms, solving context: 0.000000ms
LeanSAT proved the goal after 104.386149ms: rewriting 36.079640ms, bitblasting 0.000000ms, SAT solving 59.232819ms, LRAT trimming 1.936180ms, LRAT checking 4.329950ms
Bitwuzla proved the goal after 0.803430ms, solving context: 0.000000ms
LeanSAT proved the goal after 4.396010ms: rewriting 4.374300ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
Bitwuzla proved the goal after 92.351301ms, solving context: 2.000000ms
LeanSAT proved the goal after 101.665230ms: rewriting 33.565960ms, bitblasting 0.000000ms, SAT solving 59.865250ms, LRAT trimming 0.000000ms, LRAT checking 4.480660ms
Bitwuzla proved the goal after 0.763330ms, solving context: 0.000000ms
LeanSAT proved the goal after 4.235400ms: rewriting 4.218260ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
Bitwuzla proved the goal after 89.898000ms, solving context: 0.000000ms
LeanSAT proved the goal after 102.091510ms: rewriting 33.521441ms, bitblasting 0.000000ms, SAT solving 61.546410ms, LRAT trimming 0.000000ms, LRAT checking 2.382670ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:58:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:51:8: error: (kernel) declaration has metavariables 'n9_thm'
[bv] [0.033428] Normalizing goal
  [Meta.synthInstance] [0.001368] ✅️ Decidable
        ((if 62#64 ≥ ↑64 then none else some (0#32 - BitVec.truncate 32 (x✝ >>> 62#64))) ⊑
          if 62#64 ≥ ↑64 then none
          else
            if
                True ∧
                  (BitVec.signExtend (32 + 1) 0#32 -
                        BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).msb ≠
                    (BitVec.signExtend (32 + 1) 0#32 -
                          BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).getMsbD
                      1 then
              none
            else some (0#32 - BitVec.truncate 32 (x✝ >>> 62#64)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ :
        ¬(if 62#64 ≥ ↑64 then none else some (0#32 - BitVec.truncate 32 (x✝ >>> 62#64))) ⊑
            if 62#64 ≥ ↑64 then none
            else
              if
                  True ∧
                    (BitVec.signExtend (32 + 1) 0#32 -
                          BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).msb ≠
                      (BitVec.signExtend (32 + 1) 0#32 -
                            BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).getMsbD
                        1 then
                none
              else some (0#32 - BitVec.truncate 32 (x✝ >>> 62#64))
      ⊢ False
  [Meta.isDefEq] [0.001986] ✅️ ?h₁ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg Ne
                (Eq.trans
                  (congrArg BitVec.msb
                    (Eq.trans (BitVec.sub_toAdd (0#33) (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))))
                      (Eq.trans
                        (congrArg (HAdd.hAdd 0#33)
                          (BitVec.neg_eq_not_add (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))))
                        (BitVec.zero_add (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33)))))
                  (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33))))
              (congrArg (fun x => x.getMsbD 1)
                (Eq.trans (BitVec.sub_toAdd (0#33) (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))))
                  (Eq.trans
                    (congrArg (HAdd.hAdd 0#33)
                      (BitVec.neg_eq_not_add (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))))
                    (BitVec.zero_add (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33))))))
            (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
              ((~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32)
              ((~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1))))
        (true_and
          ((!(~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32 ==
                (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1) =
            true))
    [Meta.isDefEq.assign] [0.001983] ✅️ ?h₁ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg Ne
                  (Eq.trans
                    (congrArg BitVec.msb
                      (Eq.trans (BitVec.sub_toAdd (0#33) (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))))
                        (Eq.trans
                          (congrArg (HAdd.hAdd 0#33)
                            (BitVec.neg_eq_not_add (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))))
                          (BitVec.zero_add (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33)))))
                    (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33))))
                (congrArg (fun x => x.getMsbD 1)
                  (Eq.trans (BitVec.sub_toAdd (0#33) (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))))
                    (Eq.trans
                      (congrArg (HAdd.hAdd 0#33)
                        (BitVec.neg_eq_not_add (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))))
                      (BitVec.zero_add (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33))))))
              (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                ((~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32)
                ((~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1))))
          (true_and
            ((!(~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32 ==
                  (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001964] ✅️ (?h₁ : (True ∧
              (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).msb ≠
                (BitVec.signExtend (32 + 1) 0#32 -
                      BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).getMsbD
                  1) =
            ((!(~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32 ==
                  (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg Ne
                    (Eq.trans
                      (congrArg BitVec.msb
                        (Eq.trans (BitVec.sub_toAdd (0#33) (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))))
                          (Eq.trans
                            (congrArg (HAdd.hAdd 0#33)
                              (BitVec.neg_eq_not_add (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))))
                            (BitVec.zero_add (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33)))))
                      (BitVec.msb_eq_getLsbD_last (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33))))
                  (congrArg (fun x => x.getMsbD 1)
                    (Eq.trans (BitVec.sub_toAdd (0#33) (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))))
                      (Eq.trans
                        (congrArg (HAdd.hAdd 0#33)
                          (BitVec.neg_eq_not_add (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))))
                        (BitVec.zero_add (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33))))))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                  ((~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32)
                  ((~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1))))
            (true_and
              ((!(~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32 ==
                    (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1) =
                true)) : (True ∧
              (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).msb ≠
                (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).getMsbD 1) =
            ((!(~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32 ==
                  (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1) =
              true))
        [Meta.isDefEq] [0.001961] ✅️ (True ∧
                (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).msb ≠
                  (BitVec.signExtend (32 + 1) 0#32 -
                        BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).getMsbD
                    1) =
              ((!(~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32 ==
                    (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1) =
                true) =?= (True ∧
                (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).msb ≠
                  (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).getMsbD 1) =
              ((!(~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32 ==
                    (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1) =
                true)
          [Meta.isDefEq] [0.001942] ✅️ True ∧
                (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).msb ≠
                  (BitVec.signExtend (32 + 1) 0#32 -
                        BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).getMsbD
                    1 =?= True ∧
                (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).msb ≠
                  (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).getMsbD 1
            [Meta.isDefEq] [0.001926] ✅️ (BitVec.signExtend (32 + 1) 0#32 -
                      BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).msb ≠
                  (BitVec.signExtend (32 + 1) 0#32 -
                        BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).getMsbD
                    1 =?= (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).msb ≠
                  (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).getMsbD 1
              [Meta.isDefEq.delta] [0.001912] ✅️ (BitVec.signExtend (32 + 1) 0#32 -
                        BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).msb ≠
                    (BitVec.signExtend (32 + 1) 0#32 -
                          BitVec.signExtend (32 + 1) (BitVec.truncate 32 (x✝ >>> 62#64))).getMsbD
                      1 =?= (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).msb ≠
                    (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).getMsbD 1
                [Meta.isDefEq] [0.001857] ✅️ (BitVec.signExtend (32 + 1) 0#32 -
                        BitVec.signExtend (32 + 1)
                          (BitVec.truncate 32
                            (x✝ >>>
                              62#64))).msb =?= (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).msb
                  [Meta.isDefEq.delta] [0.001823] ✅️ (BitVec.signExtend (32 + 1) 0#32 -
                          BitVec.signExtend (32 + 1)
                            (BitVec.truncate 32
                              (x✝ >>>
                                62#64))).msb =?= (0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))).msb
                    [Meta.isDefEq] [0.001800] ✅️ BitVec.signExtend (32 + 1) 0#32 -
                          BitVec.signExtend (32 + 1)
                            (BitVec.truncate 32
                              (x✝ >>> 62#64)) =?= 0#33 - BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62))
                      [Meta.isDefEq] [0.001772] ✅️ instHSub.1 (BitVec.signExtend (32 + 1) 0#32)
                            (BitVec.signExtend (32 + 1)
                              (BitVec.truncate 32
                                (x✝ >>>
                                  62#64))) =?= instHSub.1 (0#33)
                            (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))
                        [Meta.isDefEq] [0.001713] ✅️ Sub.sub (BitVec.signExtend (32 + 1) 0#32)
                              (BitVec.signExtend (32 + 1)
                                (BitVec.truncate 32
                                  (x✝ >>>
                                    62#64))) =?= Sub.sub (0#33)
                              (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))
                          [Meta.isDefEq] [0.001691] ✅️ BitVec.instSub.1 (BitVec.signExtend (32 + 1) 0#32)
                                (BitVec.signExtend (32 + 1)
                                  (BitVec.truncate 32
                                    (x✝ >>>
                                      62#64))) =?= BitVec.instSub.1 (0#33)
                                (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))
                            [Meta.isDefEq] [0.001652] ✅️ (BitVec.signExtend (32 + 1) 0#32).sub
                                  (BitVec.signExtend (32 + 1)
                                    (BitVec.truncate 32
                                      (x✝ >>>
                                        62#64))) =?= (0#33).sub
                                  (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))
                              [Meta.isDefEq.delta] [0.001642] ✅️ (BitVec.signExtend (32 + 1) 0#32).sub
                                    (BitVec.signExtend (32 + 1)
                                      (BitVec.truncate 32
                                        (x✝ >>>
                                          62#64))) =?= (0#33).sub
                                    (BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)))
                                [Meta.isDefEq] [0.001251] ✅️ BitVec.signExtend (32 + 1) 0#32 =?= 0#33
                                  [Meta.isDefEq] [0.001232] ✅️ BitVec.ofInt (32 + 1) (0#32).toInt =?= 0#33
                                    [Meta.isDefEq] [0.001214] ✅️ ((0#32).toInt %
                                              Int.ofNat (2 ^ (32 + 1))).toNat#'⋯ =?= 0#33
                                      [Meta.isDefEq] [0.001195] ✅️ ((0#32).toInt %
                                                Int.ofNat
                                                  (2 ^ (32 + 1))).toNat#'⋯ =?= { toFin := Fin.ofNat' (2 ^ 33) 0 }
                                        [Meta.isDefEq] [0.001174] ✅️ {
                                              toFin :=
                                                ⟨((0#32).toInt % Int.ofNat (2 ^ (32 + 1))).toNat,
                                                  ⋯⟩ } =?= { toFin := Fin.ofNat' (2 ^ 33) 0 }
                                          [Meta.isDefEq] [0.001115] ✅️ ⟨((0#32).toInt % Int.ofNat (2 ^ (32 + 1))).toNat,
                                                ⋯⟩ =?= Fin.ofNat' (2 ^ 33) 0
                                            [Meta.isDefEq] [0.001096] ✅️ ⟨((0#32).toInt %
                                                      Int.ofNat (2 ^ (32 + 1))).toNat,
                                                  ⋯⟩ =?= ⟨0 % 2 ^ 33, ⋯⟩
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ :
        ¬some (~~~BitVec.zeroExtend 32 (x✝ >>> 62) + 1#32) ⊑
            if
                (!(~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getLsbD 32 ==
                      (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x✝ >>> 62)) + 1#33).getMsbD 1) =
                  true then
              none
            else some (~~~BitVec.zeroExtend 32 (x✝ >>> 62) + 1#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:69:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:62:8: error: (kernel) declaration has metavariables 'n10_thm'
[bv] [0.035785] Normalizing goal
  [Meta.synthInstance] [0.001367] ✅️ Decidable
        ((if 63#64 ≥ ↑64 then none else some (1#32 - BitVec.truncate 32 (x✝ >>> 63#64))) ⊑
          if 63#64 ≥ ↑64 then none
          else
            if
                True ∧
                  (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb = (1#32).msb ∧
                    (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32).msb ≠
                      (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb then
              none
            else some (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ :
        ¬(if 63#64 ≥ ↑64 then none else some (1#32 - BitVec.truncate 32 (x✝ >>> 63#64))) ⊑
            if 63#64 ≥ ↑64 then none
            else
              if
                  True ∧
                    (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb = (1#32).msb ∧
                      (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32).msb ≠
                        (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb then
                none
              else some (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32)
      ⊢ False
  [Meta.isDefEq] [0.003161] ✅️ ?h₁ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg And
                (Eq.trans
                  (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (BitVec.zeroExtend 32 (x✝.sshiftRight 63))))
                    (BitVec.msb_eq_getLsbD_last 1#32))
                  (Std.Tactic.BVDecide.Normalize.Bool.eq_false_to_beq
                    ((BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31))))
              (Eq.trans
                (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32)))
                  (BitVec.msb_eq_getLsbD_last (BitVec.zeroExtend 32 (x✝.sshiftRight 63))))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                  ((BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31)
                  ((BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31))))
            (Std.Tactic.BVDecide.Normalize.Bool.and_to_and (!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31)
              !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                  (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31)))
        (true_and
          ((!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31 &&
              !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                  (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31) =
            true))
    [Meta.isDefEq.assign] [0.003158] ✅️ ?h₁ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg And
                  (Eq.trans
                    (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (BitVec.zeroExtend 32 (x✝.sshiftRight 63))))
                      (BitVec.msb_eq_getLsbD_last 1#32))
                    (Std.Tactic.BVDecide.Normalize.Bool.eq_false_to_beq
                      ((BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31))))
                (Eq.trans
                  (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32)))
                    (BitVec.msb_eq_getLsbD_last (BitVec.zeroExtend 32 (x✝.sshiftRight 63))))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                    ((BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31)
                    ((BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31))))
              (Std.Tactic.BVDecide.Normalize.Bool.and_to_and (!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31)
                !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                    (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31)))
          (true_and
            ((!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31 &&
                !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                    (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.003132] ✅️ (?h₁ : (True ∧
              (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb = (1#32).msb ∧
                (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32).msb ≠
                  (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb) =
            ((!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31 &&
                !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                    (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg And
                    (Eq.trans
                      (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (BitVec.zeroExtend 32 (x✝.sshiftRight 63))))
                        (BitVec.msb_eq_getLsbD_last 1#32))
                      (Std.Tactic.BVDecide.Normalize.Bool.eq_false_to_beq
                        ((BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31))))
                  (Eq.trans
                    (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32)))
                      (BitVec.msb_eq_getLsbD_last (BitVec.zeroExtend 32 (x✝.sshiftRight 63))))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq
                      ((BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31)
                      ((BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31))))
                (Std.Tactic.BVDecide.Normalize.Bool.and_to_and (!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31)
                  !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                      (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31)))
            (true_and
              ((!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31 &&
                  !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                      (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31) =
                true)) : (True ∧
              (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb = (1#32).msb ∧
                (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).msb ≠
                  (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb) =
            ((!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31 &&
                !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                    (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31) =
              true))
        [Meta.isDefEq] [0.003129] ✅️ (True ∧
                (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb = (1#32).msb ∧
                  (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32).msb ≠
                    (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb) =
              ((!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31 &&
                  !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                      (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31) =
                true) =?= (True ∧
                (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb = (1#32).msb ∧
                  (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).msb ≠
                    (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb) =
              ((!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31 &&
                  !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                      (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31) =
                true)
          [Meta.isDefEq] [0.003107] ✅️ True ∧
                (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb = (1#32).msb ∧
                  (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32).msb ≠
                    (BitVec.truncate 32
                        (x✝.sshiftRight
                          (63#64).toNat)).msb =?= True ∧
                (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb = (1#32).msb ∧
                  (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).msb ≠ (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb
            [Meta.isDefEq] [0.003091] ✅️ (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat)).msb = (1#32).msb ∧
                  (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32).msb ≠
                    (BitVec.truncate 32
                        (x✝.sshiftRight
                          (63#64).toNat)).msb =?= (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb = (1#32).msb ∧
                  (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).msb ≠ (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb
              [Meta.isDefEq] [0.002775] ✅️ (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32).msb ≠
                    (BitVec.truncate 32
                        (x✝.sshiftRight
                          (63#64).toNat)).msb =?= (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).msb ≠
                    (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb
                [Meta.isDefEq.delta] [0.002760] ✅️ (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) + 1#32).msb ≠
                      (BitVec.truncate 32
                          (x✝.sshiftRight
                            (63#64).toNat)).msb =?= (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).msb ≠
                      (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).msb
                  [Meta.isDefEq] [0.002703] ✅️ (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) +
                          1#32).msb =?= (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).msb
                    [Meta.isDefEq.delta] [0.002692] ✅️ (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) +
                            1#32).msb =?= (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).msb
                      [Meta.isDefEq] [0.002684] ✅️ BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat) +
                            1#32 =?= BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32
                        [Meta.isDefEq] [0.002547] ✅️ instHAdd.1 (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat))
                              1#32 =?= instHAdd.1 (BitVec.zeroExtend 32 (x✝.sshiftRight 63)) 1#32
                          [Meta.isDefEq] [0.002502] ✅️ Add.add (BitVec.truncate 32 (x✝.sshiftRight (63#64).toNat))
                                1#32 =?= Add.add (BitVec.zeroExtend 32 (x✝.sshiftRight 63)) 1#32
                            [Meta.isDefEq] [0.002198] ❌️ BitVec.instAdd =?= instAddNat
                              [Meta.isDefEq] [0.002172] ❌️ { add := BitVec.add } =?= instAddNat
                                [Meta.isDefEq] [0.002155] ❌️ { add := BitVec.add } =?= { add := Nat.add }
                                  [Meta.isDefEq] [0.002100] ❌️ BitVec.add =?= Nat.add
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ :
        ¬some (2#32 + ~~~BitVec.zeroExtend 32 (x✝ >>> 63)) ⊑
            if
                (!(BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31 &&
                    !(BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32).getLsbD 31 ==
                        (BitVec.zeroExtend 32 (x✝.sshiftRight 63)).getLsbD 31) =
                  true then
              none
            else some (BitVec.zeroExtend 32 (x✝.sshiftRight 63) + 1#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
