⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.ghighhbithsignmaskhwithhtrunc_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:7:96: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.aRmX0omn:3:132: expected terms of same sort at indices 0 and 1 as argument to 'bvadd'
info: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:7:96: [bv] [0.012842] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ : ¬-BitVec.setWidth 32 (x >>> 63) = BitVec.setWidth 32 (x.sshiftRight 63)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ : (!~~~BitVec.zeroExtend 32 (x >>> 63) + 1#32 == BitVec.zeroExtend 32 (x.sshiftRight 63)) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 64: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((~ (zext 32 (>> 63 var0))) + 0x00000001#32) == (zext 32 (>>a 63 var0)))
[bv] [0.062360] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 64))
      (assert (not (= (bvadd (bvnot ((_ zero_extend 0) (bvlshr x_0 #b0000000000000000000000000000000000000000000000000000000000111111))) #b00000000000000000000000000000001) ((_ zero_extend 0) (bvashr x_0 #b0000000000000000000000000000000000000000000000000000000000111111)))))
      (check-sat)
      (exit)
      
  [bv] [0.059120] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:9:102: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.NQmk3LuT:3:132: expected terms of same sort at indices 0 and 1 as argument to 'bvadd'
info: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:9:102: [bv] [0.012642] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ : ¬-BitVec.setWidth 32 (x >>> 63) = BitVec.setWidth 32 (x.sshiftRight 63)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ : (!~~~BitVec.zeroExtend 32 (x >>> 63) + 1#32 == BitVec.zeroExtend 32 (x.sshiftRight 63)) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 64: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((~ (zext 32 (>> 63 var0))) + 0x00000001#32) == (zext 32 (>>a 63 var0)))
[bv] [0.062331] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 64))
      (assert (not (= (bvadd (bvnot ((_ zero_extend 0) (bvlshr x_0 #b0000000000000000000000000000000000000000000000000000000000111111))) #b00000000000000000000000000000001) ((_ zero_extend 0) (bvashr x_0 #b0000000000000000000000000000000000000000000000000000000000111111)))))
      (check-sat)
      (exit)
      
  [bv] [0.059528] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:11:96: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.TaFfo6ml:3:132: expected terms of same sort at indices 0 and 1 as argument to 'bvadd'
info: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:11:96: [bv] [0.012385] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ : ¬-BitVec.setWidth 32 (x.sshiftRight 63) = BitVec.setWidth 32 (x >>> 63)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ : (!~~~BitVec.zeroExtend 32 (x.sshiftRight 63) + 1#32 == BitVec.zeroExtend 32 (x >>> 63)) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 64: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((~ (zext 32 (>>a 63 var0))) + 0x00000001#32) == (zext 32 (>> 63 var0)))
[bv] [0.061011] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 64))
      (assert (not (= (bvadd (bvnot ((_ zero_extend 0) (bvashr x_0 #b0000000000000000000000000000000000000000000000000000000000111111))) #b00000000000000000000000000000001) ((_ zero_extend 0) (bvlshr x_0 #b0000000000000000000000000000000000000000000000000000000000111111)))))
      (check-sat)
      (exit)
      
  [bv] [0.058024] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:13:102: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.jhgluUtt:3:132: expected terms of same sort at indices 0 and 1 as argument to 'bvadd'
info: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:13:102: [bv] [0.012277] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ : ¬-BitVec.setWidth 32 (x.sshiftRight 63) = BitVec.setWidth 32 (x >>> 63)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ : (!~~~BitVec.zeroExtend 32 (x.sshiftRight 63) + 1#32 == BitVec.zeroExtend 32 (x >>> 63)) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 64: x
[Meta.Tactic.bv] Reflected bv logical expression: !(((~ (zext 32 (>>a 63 var0))) + 0x00000001#32) == (zext 32 (>> 63 var0)))
[bv] [0.059525] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 64))
      (assert (not (= (bvadd (bvnot ((_ zero_extend 0) (bvashr x_0 #b0000000000000000000000000000000000000000000000000000000000111111))) #b00000000000000000000000000000001) ((_ zero_extend 0) (bvlshr x_0 #b0000000000000000000000000000000000000000000000000000000000111111)))))
      (check-sat)
      (exit)
      
  [bv] [0.056885] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:19:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:19:20: [bv] [0.019361] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (-BitVec.setWidth 32 (x >>> 62)) ⊑
            if
                (-BitVec.signExtend 33 (BitVec.setWidth 32 (x >>> 62))).msb =
                  (-BitVec.signExtend 33 (BitVec.setWidth 32 (x >>> 62))).getMsbD 1 then
              some (-BitVec.setWidth 32 (x >>> 62))
            else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (~~~BitVec.zeroExtend 32 (x >>> 62) + 1#32) ⊑
            if
                ((~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x >>> 62)) + 1#33).getLsbD 32 ==
                    (~~~BitVec.signExtend 33 (BitVec.zeroExtend 32 (x >>> 62)) + 1#33).getMsbD 1) =
                  true then
              some (~~~BitVec.zeroExtend 32 (x >>> 62) + 1#32)
            else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:27:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/ghighhbithsignmaskhwithhtrunc_proof.lean:27:60: [bv] [0.025670] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (1#32 - BitVec.setWidth 32 (x >>> 63)) ⊑
            if
                (BitVec.setWidth 32 (x.sshiftRight 63)).msb = false ∧
                  ¬(BitVec.setWidth 32 (x.sshiftRight 63) + 1#32).msb = (BitVec.setWidth 32 (x.sshiftRight 63)).msb then
              none
            else some (BitVec.setWidth 32 (x.sshiftRight 63) + 1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      a✝ :
        ¬some (2#32 + ~~~BitVec.zeroExtend 32 (x >>> 63)) ⊑
            if
                (!(BitVec.zeroExtend 32 (x.sshiftRight 63)).getLsbD 31 &&
                    !(BitVec.zeroExtend 32 (x.sshiftRight 63) + 1#32).getLsbD 31 ==
                        (BitVec.zeroExtend 32 (x.sshiftRight 63)).getLsbD 31) =
                  true then
              none
            else some (BitVec.zeroExtend 32 (x.sshiftRight 63) + 1#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.ghighhbithsignmaskhwithhtrunc_proof
