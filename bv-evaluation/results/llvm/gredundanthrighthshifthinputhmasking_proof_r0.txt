⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [882/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [885/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:11:8: error: (kernel) declaration has metavariables 't0_lshr_thm'
[bv] [0.029846] Normalizing goal
  [Meta.synthInstance] [0.001171] ✅️ Decidable
        ((if x✝ ≥ ↑32 then none else if x✝ ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹) >>> x✝)) ⊑
          if True ∧ ((-1#32) <<< x✝).sshiftRight x✝.toNat = -1#32 then none
          else if x✝ ≥ ↑32 then none else if x✝ ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹) >>> x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if x✝ ≥ ↑32 then none else if x✝ ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹) >>> x✝)) ⊑
            if True ∧ ((-1#32) <<< x✝).sshiftRight x✝.toNat = -1#32 then none
            else if x✝ ≥ ↑32 then none else if x✝ ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹) >>> x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!32#32 >ᵤ x✝) = true then none
            else if (!32#32 >ᵤ x✝) = true then none else some ((4294967295#32 <<< x✝ &&& x✝¹) >>> x✝)) ⊑
            if ((4294967295#32 <<< x✝).sshiftRight x✝.toNat == 4294967295#32) = true then none
            else
              if (!32#32 >ᵤ x✝) = true then none
              else if (!32#32 >ᵤ x✝) = true then none else some ((4294967295#32 <<< x✝ &&& x✝¹) >>> x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:29:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:29:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:22:8: error: (kernel) declaration has metavariables 't1_sshr_thm'
[bv] [0.047060] Normalizing goal
  [Meta.synthInstance] [0.001818] ✅️ Decidable
        ((if x✝ ≥ ↑32 then none else if x✝ ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹).sshiftRight x✝.toNat)) ⊑
          if True ∧ ((-1#32) <<< x✝).sshiftRight x✝.toNat = -1#32 then none
          else
            if x✝ ≥ ↑32 then none else if x✝ ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹).sshiftRight x✝.toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if x✝ ≥ ↑32 then none else if x✝ ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹).sshiftRight x✝.toNat)) ⊑
            if True ∧ ((-1#32) <<< x✝).sshiftRight x✝.toNat = -1#32 then none
            else
              if x✝ ≥ ↑32 then none else if x✝ ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹).sshiftRight x✝.toNat)
      ⊢ False
  [Meta.isDefEq] [0.001105] ✅️ ?h₃ =?= fun a => Eq.refl (some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat))
    [Meta.isDefEq.assign] [0.001100] ✅️ ?h₃ := fun a =>
          Eq.refl (some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat))
      [Meta.isDefEq.assign.checkTypes] [0.001060] ✅️ (?h₃ : ¬(!32#32 >ᵤ x✝) = true →
            some (((-1#32) <<< x✝ &&& x✝¹).sshiftRight x✝.toNat) =
              some
                ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight
                  x✝.toNat)) := (fun a =>
            Eq.refl
              (some
                ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight
                  x✝.toNat)) : ¬(!32#32 >ᵤ x✝) = true →
            some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat) =
              some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat))
        [Meta.isDefEq] [0.001055] ✅️ ¬(!32#32 >ᵤ x✝) = true →
              some (((-1#32) <<< x✝ &&& x✝¹).sshiftRight x✝.toNat) =
                some
                  ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight
                    x✝.toNat) =?= ¬(!32#32 >ᵤ x✝) = true →
              some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat) =
                some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat)
          [Meta.isDefEq] [0.001001] ✅️ some (((-1#32) <<< x✝ &&& x✝¹).sshiftRight x✝.toNat) =
                some
                  ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight
                    x✝.toNat) =?= some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat) =
                some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat)
  [Meta.appBuilder] [0.002118] ✅️ f: Subsingleton.elim, xs: [h✝, h]
    [Meta.isDefEq] [0.001845] ✅️ ?α =?= Decidable c✝
      [Meta.isDefEq.assign] [0.001836] ✅️ ?α := Decidable c✝
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!32#32 >ᵤ x✝) = true then none
            else if (!32#32 >ᵤ x✝) = true then none else some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat)) ⊑
            if ((4294967295#32 <<< x✝).sshiftRight x✝.toNat == 4294967295#32) = true then none
            else
              if (!32#32 >ᵤ x✝) = true then none
              else if (!32#32 >ᵤ x✝) = true then none else some ((4294967295#32 <<< x✝ &&& x✝¹).sshiftRight x✝.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:40:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:40:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:40:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthrighthshifthinputhmasking_proof.lean:33:8: error: (kernel) declaration has metavariables 'n13_thm'
[bv] [0.031060] Normalizing goal
  [Meta.synthInstance] [0.001109] ✅️ Decidable
        ((if x✝ ≥ ↑32 then none else if x✝² ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹) >>> x✝²)) ⊑
          if True ∧ ((-1#32) <<< x✝).sshiftRight x✝.toNat = -1#32 then none
          else if x✝ ≥ ↑32 then none else if x✝² ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹) >>> x✝²))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if x✝ ≥ ↑32 then none else if x✝² ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹) >>> x✝²)) ⊑
            if True ∧ ((-1#32) <<< x✝).sshiftRight x✝.toNat = -1#32 then none
            else if x✝ ≥ ↑32 then none else if x✝² ≥ ↑32 then none else some (((-1#32) <<< x✝ &&& x✝¹) >>> x✝²)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!32#32 >ᵤ x✝) = true then none
            else if (!32#32 >ᵤ x✝²) = true then none else some ((4294967295#32 <<< x✝ &&& x✝¹) >>> x✝²)) ⊑
            if ((4294967295#32 <<< x✝).sshiftRight x✝.toNat == 4294967295#32) = true then none
            else
              if (!32#32 >ᵤ x✝) = true then none
              else if (!32#32 >ᵤ x✝²) = true then none else some ((4294967295#32 <<< x✝ &&& x✝¹) >>> x✝²)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
