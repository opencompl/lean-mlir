⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gsethlowbitshmaskhcanonicalize_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:11:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:11:50: [bv] [0.020919] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x' => some (x' + 4294967295#32)) ⊑
            (if (4294967295#32 <<< x.toNat).sshiftRight x.toNat = 4294967295#32 then none
                else if 32#32 ≤ x then none else some (4294967295#32 <<< x.toNat)).bind
              fun x' => some (x' ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a => some (a + 4294967295#32)) ⊑
            (if ((4294967295#32 <<< x.toNat).sshiftRight x.toNat == 4294967295#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (4294967295#32 <<< x.toNat)).bind
              fun a => some (a ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:18:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:18:50: [bv] [0.036862] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x' =>
              if x'.msb = (4294967295#32).msb ∧ ¬(x' + 4294967295#32).msb = x'.msb then none
              else some (x' + 4294967295#32)) ⊑
            (if (4294967295#32 <<< x.toNat).sshiftRight x.toNat = 4294967295#32 then none
                else if 32#32 ≤ x then none else some (4294967295#32 <<< x.toNat)).bind
              fun x' => some (x' ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              if (a.getLsbD 31 && !(a + 4294967295#32).getLsbD 31 == a.getLsbD 31) = true then none
              else some (a + 4294967295#32)) ⊑
            (if ((4294967295#32 <<< x.toNat).sshiftRight x.toNat == 4294967295#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (4294967295#32 <<< x.toNat)).bind
              fun a => some (a ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:23:29: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:23:29: [bv] [0.021598] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x' =>
              if x' + 4294967295#32 < x' ∨ x' + 4294967295#32 < 4294967295#32 then none
              else some (x' + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              if (!((!a >ᵤ a + 4294967295#32) && !4294967295#32 >ᵤ a + 4294967295#32)) = true then none
              else some (a + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:29:29: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:29:29: [bv] [0.035271] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x' =>
              if x'.msb = (4294967295#32).msb ∧ ¬(x' + 4294967295#32).msb = x'.msb then none
              else
                if x' + 4294967295#32 < x' ∨ x' + 4294967295#32 < 4294967295#32 then none
                else some (x' + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a =>
              if (a.getLsbD 31 && !(a + 4294967295#32).getLsbD 31 == a.getLsbD 31) = true then none
              else
                if (!((!a >ᵤ a + 4294967295#32) && !4294967295#32 >ᵤ a + 4294967295#32)) = true then none
                else some (a + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:37:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:37:50: [bv] [0.024732] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat).sshiftRight x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' => some (x' + 4294967295#32)) ⊑
            (if (4294967295#32 <<< x.toNat).sshiftRight x.toNat = 4294967295#32 then none
                else if 32#32 ≤ x then none else some (4294967295#32 <<< x.toNat)).bind
              fun x' => some (x' ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((1#32 <<< x.toNat).sshiftRight x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a => some (a + 4294967295#32)) ⊑
            (if ((4294967295#32 <<< x.toNat).sshiftRight x.toNat == 4294967295#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (4294967295#32 <<< x.toNat)).bind
              fun a => some (a ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:46:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:46:50: [bv] [0.039674] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat).sshiftRight x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' =>
              if x'.msb = (4294967295#32).msb ∧ ¬(x' + 4294967295#32).msb = x'.msb then none
              else some (x' + 4294967295#32)) ⊑
            (if (4294967295#32 <<< x.toNat).sshiftRight x.toNat = 4294967295#32 then none
                else if 32#32 ≤ x then none else some (4294967295#32 <<< x.toNat)).bind
              fun x' => some (x' ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((1#32 <<< x.toNat).sshiftRight x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              if (a.getLsbD 31 && !(a + 4294967295#32).getLsbD 31 == a.getLsbD 31) = true then none
              else some (a + 4294967295#32)) ⊑
            (if ((4294967295#32 <<< x.toNat).sshiftRight x.toNat == 4294967295#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (4294967295#32 <<< x.toNat)).bind
              fun a => some (a ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:53:29: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:53:29: [bv] [0.024531] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat).sshiftRight x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' =>
              if x' + 4294967295#32 < x' ∨ x' + 4294967295#32 < 4294967295#32 then none
              else some (x' + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((1#32 <<< x.toNat).sshiftRight x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              if (!((!a >ᵤ a + 4294967295#32) && !4294967295#32 >ᵤ a + 4294967295#32)) = true then none
              else some (a + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:61:29: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:61:29: [bv] [0.038876] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat).sshiftRight x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' =>
              if x'.msb = (4294967295#32).msb ∧ ¬(x' + 4294967295#32).msb = x'.msb then none
              else
                if x' + 4294967295#32 < x' ∨ x' + 4294967295#32 < 4294967295#32 then none
                else some (x' + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((1#32 <<< x.toNat).sshiftRight x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              if (a.getLsbD 31 && !(a + 4294967295#32).getLsbD 31 == a.getLsbD 31) = true then none
              else
                if (!((!a >ᵤ a + 4294967295#32) && !4294967295#32 >ᵤ a + 4294967295#32)) = true then none
                else some (a + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:68:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:68:50: [bv] [0.025177] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' => some (x' + 4294967295#32)) ⊑
            (if (4294967295#32 <<< x.toNat).sshiftRight x.toNat = 4294967295#32 then none
                else if 32#32 ≤ x then none else some (4294967295#32 <<< x.toNat)).bind
              fun x' => some (x' ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a => some (a + 4294967295#32)) ⊑
            (if ((4294967295#32 <<< x.toNat).sshiftRight x.toNat == 4294967295#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (4294967295#32 <<< x.toNat)).bind
              fun a => some (a ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:76:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:76:50: [bv] [0.039452] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' =>
              if x'.msb = (4294967295#32).msb ∧ ¬(x' + 4294967295#32).msb = x'.msb then none
              else some (x' + 4294967295#32)) ⊑
            (if (4294967295#32 <<< x.toNat).sshiftRight x.toNat = 4294967295#32 then none
                else if 32#32 ≤ x then none else some (4294967295#32 <<< x.toNat)).bind
              fun x' => some (x' ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              if (a.getLsbD 31 && !(a + 4294967295#32).getLsbD 31 == a.getLsbD 31) = true then none
              else some (a + 4294967295#32)) ⊑
            (if ((4294967295#32 <<< x.toNat).sshiftRight x.toNat == 4294967295#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (4294967295#32 <<< x.toNat)).bind
              fun a => some (a ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:82:29: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:82:29: [bv] [0.024791] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' =>
              if x' + 4294967295#32 < x' ∨ x' + 4294967295#32 < 4294967295#32 then none
              else some (x' + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              if (!((!a >ᵤ a + 4294967295#32) && !4294967295#32 >ᵤ a + 4294967295#32)) = true then none
              else some (a + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:89:29: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:89:29: [bv] [0.039325] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' =>
              if x'.msb = (4294967295#32).msb ∧ ¬(x' + 4294967295#32).msb = x'.msb then none
              else
                if x' + 4294967295#32 < x' ∨ x' + 4294967295#32 < 4294967295#32 then none
                else some (x' + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              if (a.getLsbD 31 && !(a + 4294967295#32).getLsbD 31 == a.getLsbD 31) = true then none
              else
                if (!((!a >ᵤ a + 4294967295#32) && !4294967295#32 >ᵤ a + 4294967295#32)) = true then none
                else some (a + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:99:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:99:50: [bv] [0.030881] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat).sshiftRight x.toNat = 1#32 then none
                else
                  if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                  else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' => some (x' + 4294967295#32)) ⊑
            (if (4294967295#32 <<< x.toNat).sshiftRight x.toNat = 4294967295#32 then none
                else if 32#32 ≤ x then none else some (4294967295#32 <<< x.toNat)).bind
              fun x' => some (x' ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((1#32 <<< x.toNat).sshiftRight x.toNat == 1#32) = true then none
                else
                  if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a => some (a + 4294967295#32)) ⊑
            (if ((4294967295#32 <<< x.toNat).sshiftRight x.toNat == 4294967295#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (4294967295#32 <<< x.toNat)).bind
              fun a => some (a ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:110:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:110:50: [bv] [0.042820] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat).sshiftRight x.toNat = 1#32 then none
                else
                  if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                  else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' =>
              if x'.msb = (4294967295#32).msb ∧ ¬(x' + 4294967295#32).msb = x'.msb then none
              else some (x' + 4294967295#32)) ⊑
            (if (4294967295#32 <<< x.toNat).sshiftRight x.toNat = 4294967295#32 then none
                else if 32#32 ≤ x then none else some (4294967295#32 <<< x.toNat)).bind
              fun x' => some (x' ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((1#32 <<< x.toNat).sshiftRight x.toNat == 1#32) = true then none
                else
                  if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              if (a.getLsbD 31 && !(a + 4294967295#32).getLsbD 31 == a.getLsbD 31) = true then none
              else some (a + 4294967295#32)) ⊑
            (if ((4294967295#32 <<< x.toNat).sshiftRight x.toNat == 4294967295#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (4294967295#32 <<< x.toNat)).bind
              fun a => some (a ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:119:29: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:119:29: [bv] [0.028807] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat).sshiftRight x.toNat = 1#32 then none
                else
                  if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                  else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' =>
              if x' + 4294967295#32 < x' ∨ x' + 4294967295#32 < 4294967295#32 then none
              else some (x' + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((1#32 <<< x.toNat).sshiftRight x.toNat == 1#32) = true then none
                else
                  if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              if (!((!a >ᵤ a + 4294967295#32) && !4294967295#32 >ᵤ a + 4294967295#32)) = true then none
              else some (a + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:129:29: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:129:29: [bv] [0.042076] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (1#32 <<< x.toNat).sshiftRight x.toNat = 1#32 then none
                else
                  if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                  else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' =>
              if x'.msb = (4294967295#32).msb ∧ ¬(x' + 4294967295#32).msb = x'.msb then none
              else
                if x' + 4294967295#32 < x' ∨ x' + 4294967295#32 < 4294967295#32 then none
                else some (x' + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if ((1#32 <<< x.toNat).sshiftRight x.toNat == 1#32) = true then none
                else
                  if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a =>
              if (a.getLsbD 31 && !(a + 4294967295#32).getLsbD 31 == a.getLsbD 31) = true then none
              else
                if (!((!a >ᵤ a + 4294967295#32) && !4294967295#32 >ᵤ a + 4294967295#32)) = true then none
                else some (a + 4294967295#32)) ⊑
            some 4294967295#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:135:34: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:135:34: [bv] [0.019658] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind fun a => some (a + x)) ⊑
            (if 1#32 <<< x_1.toNat >>> x_1.toNat = 1#32 then none
                else if 32#32 ≤ x_1 then none else some (1#32 <<< x_1.toNat)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind fun a => some (a + x)) ⊑
            (if (1#32 <<< x_1.toNat >>> x_1.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (1#32 <<< x_1.toNat)).bind
              fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:140:91: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:140:91: [bv] [0.034873] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x' => some (x' + 1#32)) ⊑
            (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' => if x' + 1#32 < x' ∨ x' + 1#32 < 1#32 then none else some (x' + 1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a => some (a + 1#32)) ⊑
            (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a => if (!((!a >ᵤ a + 1#32) && !1#32 >ᵤ a + 1#32)) = true then none else some (a + 1#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:145:48: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:145:48: [bv] [0.020236] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind fun x' => some (x' + 4294967294#32)) ⊑
            (if 1#32 <<< x.toNat >>> x.toNat = 1#32 then none
                else if 32#32 ≤ x then none else some (1#32 <<< x.toNat)).bind
              fun x' => some (x' + 4294967294#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind fun a => some (a + 4294967294#32)) ⊑
            (if (1#32 <<< x.toNat >>> x.toNat == 1#32) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (1#32 <<< x.toNat)).bind
              fun a => some (a + 4294967294#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gsethlowbitshmaskhcanonicalize_proof
