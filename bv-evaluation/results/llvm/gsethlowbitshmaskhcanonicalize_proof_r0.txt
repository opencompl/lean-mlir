‚ö† [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
‚ö† [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
‚ö† [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
‚ö† [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
‚ö† [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:11:8: error: (kernel) declaration has metavariables 'shl_add_thm'
[bv] [0.094367] Normalizing goal
  [Meta.synthInstance] [0.002945] ‚úÖÔ∏è Decidable
        ((if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + -1#32)) ‚äë
          if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32))
    [Meta.synthInstance] [0.002080] ‚úÖÔ∏è apply @BitVec.Refinement.instDecidableRelOptionOfDecidableEq to Decidable
          ((if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + -1#32)) ‚äë
            if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + -1#32)) ‚äë
            if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.004003] ‚úÖÔ∏è ?x > ?y =?= x‚úù < 32#32
  [Meta.isDefEq] [0.006004] ‚ùåÔ∏è ?a == ?a =?= (32#32 >·µ§ x‚úù) == true
    [Meta.isDefEq.onFailure] [0.005761] ‚ùåÔ∏è ?a == ?a =?= (32#32 >·µ§ x‚úù) == true
      [Meta.synthInstance] [0.005739] üí•Ô∏è BEq ?Œ±
        [Meta.synthInstance] [0.005648] new goal BEq ?Œ±
  [Meta.isDefEq] [0.016060] ‚úÖÔ∏è ?h‚ÇÉ =?= fun a => Eq.refl (some (1#32 <<< x‚úù + 4294967295#32))
    [Meta.isDefEq.assign] [0.016057] ‚úÖÔ∏è ?h‚ÇÉ := fun a => Eq.refl (some (1#32 <<< x‚úù + 4294967295#32))
      [Meta.isDefEq.assign.checkTypes] [0.016033] ‚úÖÔ∏è (?h‚ÇÉ : ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
            some (1#32 <<< x‚úù + -1#32) =
              some
                (1#32 <<< x‚úù +
                  4294967295#32)) := (fun a =>
            Eq.refl
              (some
                (1#32 <<< x‚úù +
                  4294967295#32)) : ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
            some (1#32 <<< x‚úù + 4294967295#32) = some (1#32 <<< x‚úù + 4294967295#32))
        [Meta.isDefEq] [0.016029] ‚úÖÔ∏è ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
              some (1#32 <<< x‚úù + -1#32) =
                some
                  (1#32 <<< x‚úù +
                    4294967295#32) =?= ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
              some (1#32 <<< x‚úù + 4294967295#32) = some (1#32 <<< x‚úù + 4294967295#32)
          [Meta.isDefEq] [0.015998] ‚úÖÔ∏è some (1#32 <<< x‚úù + -1#32) =
                some
                  (1#32 <<< x‚úù +
                    4294967295#32) =?= some (1#32 <<< x‚úù + 4294967295#32) = some (1#32 <<< x‚úù + 4294967295#32)
            [Meta.isDefEq] [0.015980] ‚úÖÔ∏è some (1#32 <<< x‚úù + -1#32) =?= some (1#32 <<< x‚úù + 4294967295#32)
              [Meta.isDefEq] [0.015958] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 =?= 1#32 <<< x‚úù + 4294967295#32
                [Meta.isDefEq] [0.015847] ‚úÖÔ∏è instHAdd.1 (1#32 <<< x‚úù) (-1#32) =?= instHAdd.1 (1#32 <<< x‚úù) 4294967295#32
                  [Meta.isDefEq] [0.015788] ‚úÖÔ∏è Add.add (1#32 <<< x‚úù) (-1#32) =?= Add.add (1#32 <<< x‚úù) 4294967295#32
                    [Meta.isDefEq] [0.002307] ‚ùåÔ∏è BitVec.instAdd =?= instAddNat
                      [Meta.isDefEq] [0.002281] ‚ùåÔ∏è { add := BitVec.add } =?= instAddNat
                        [Meta.isDefEq] [0.002258] ‚ùåÔ∏è { add := BitVec.add } =?= { add := Nat.add }
                          [Meta.isDefEq] [0.002172] ‚ùåÔ∏è BitVec.add =?= Nat.add
                            [Meta.isDefEq.onFailure] [0.002136] ‚ùåÔ∏è BitVec.add =?= Nat.add
                    [Meta.isDefEq] [0.013438] ‚úÖÔ∏è BitVec.instAdd.1 (1#32 <<< x‚úù)
                          (-1#32) =?= BitVec.instAdd.1 (1#32 <<< x‚úù) 4294967295#32
                      [Meta.isDefEq] [0.013394] ‚úÖÔ∏è (1#32 <<< x‚úù).add (-1#32) =?= (1#32 <<< x‚úù).add 4294967295#32
                        [Meta.isDefEq.delta] [0.013383] ‚úÖÔ∏è (1#32 <<< x‚úù).add (-1#32) =?= (1#32 <<< x‚úù).add 4294967295#32
                          [Meta.isDefEq] [0.013352] ‚úÖÔ∏è -1#32 =?= 4294967295#32
                            [Meta.isDefEq] [0.013287] ‚úÖÔ∏è -1#32 =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                              [Meta.isDefEq] [0.013276] ‚úÖÔ∏è BitVec.instNeg.1
                                    1#32 =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                [Meta.isDefEq] [0.013249] ‚úÖÔ∏è (1#32).neg =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                  [Meta.isDefEq] [0.013234] ‚úÖÔ∏è BitVec.ofNat 32
                                        (2 ^ 32 - (1#32).toNat) =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                    [Meta.isDefEq] [0.013225] ‚úÖÔ∏è {
                                          toFin :=
                                            Fin.ofNat' (2 ^ 32)
                                              (2 ^ 32 - (1#32).toNat) } =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                      [Meta.isDefEq] [0.013191] ‚úÖÔ∏è Fin.ofNat' (2 ^ 32)
                                            (2 ^ 32 - (1#32).toNat) =?= Fin.ofNat' (2 ^ 32) 4294967295
                                        [Meta.isDefEq.delta] [0.013168] ‚úÖÔ∏è Fin.ofNat' (2 ^ 32)
                                              (2 ^ 32 - (1#32).toNat) =?= Fin.ofNat' (2 ^ 32) 4294967295
                                          [Meta.isDefEq] [0.013137] ‚úÖÔ∏è 2 ^ 32 - (1#32).toNat =?= 4294967295
                                            [Meta.whnf] [0.001748] Non-easy whnf: instSubNat
                                            [Meta.isDefEq] [0.009408] ‚úÖÔ∏è instHSub.1 (2 ^ 32)
                                                  (1#32).toNat =?= (instOfNatNat 4294967295).1
                                              [Meta.whnf] [0.001741] Non-easy whnf: HSub ‚Ñï ‚Ñï ‚Ñï
                                              [Meta.isDefEq] [0.007589] ‚úÖÔ∏è Sub.sub (2 ^ 32) (1#32).toNat =?= 4294967295
                                                [Meta.isDefEq] [0.007563] ‚úÖÔ∏è instSubNat.1 (2 ^ 32)
                                                      (1#32).toNat =?= 4294967295
                                                  [Meta.isDefEq] [0.007530] ‚úÖÔ∏è (2 ^ 32).sub (1#32).toNat =?= 4294967295
                                                    [Meta.whnf] [0.007308] Non-easy whnf: (1#32).toNat
                                                      [Meta.whnf] [0.007300] Non-easy whnf: ‚Üë(1#32).toFin
                                                        [Meta.whnf] [0.007289] Non-easy whnf: (1#32).toFin.1
                                                          [Meta.whnf] [0.001826] Non-easy whnf: (1#32).toFin
                                                          [Meta.whnf] [0.003797] Non-easy whnf: instHMod.1 1 (2 ^ 32)
                                                            [Meta.whnf] [0.003753] Non-easy whnf: Nat.instMod.1 1
                                                                  (2 ^ 32)
                                                              [Meta.whnf] [0.003712] Non-easy whnf: Nat.instMod
                                                                [Meta.whnf] [0.003698] Non-easy whnf: { mod := Nat.mod }
  [Meta.isDefEq] [0.002243] ‚úÖÔ∏è ?h‚ÇÉ =?= fun a => Eq.refl (some (4294967295#32 <<< x‚úù ^^^ 4294967295#32))
    [Meta.isDefEq.assign] [0.002240] ‚úÖÔ∏è ?h‚ÇÉ := fun a => Eq.refl (some (4294967295#32 <<< x‚úù ^^^ 4294967295#32))
      [Meta.isDefEq.assign.checkTypes] [0.002215] ‚úÖÔ∏è (?h‚ÇÉ : ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
            some ((-1#32) <<< x‚úù ^^^ -1#32) =
              some
                (4294967295#32 <<< x‚úù ^^^
                  4294967295#32)) := (fun a =>
            Eq.refl
              (some
                (4294967295#32 <<< x‚úù ^^^
                  4294967295#32)) : ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
            some (4294967295#32 <<< x‚úù ^^^ 4294967295#32) = some (4294967295#32 <<< x‚úù ^^^ 4294967295#32))
        [Meta.isDefEq] [0.002212] ‚úÖÔ∏è ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
              some ((-1#32) <<< x‚úù ^^^ -1#32) =
                some
                  (4294967295#32 <<< x‚úù ^^^
                    4294967295#32) =?= ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
              some (4294967295#32 <<< x‚úù ^^^ 4294967295#32) = some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
          [Meta.isDefEq] [0.002180] ‚úÖÔ∏è some ((-1#32) <<< x‚úù ^^^ -1#32) =
                some
                  (4294967295#32 <<< x‚úù ^^^
                    4294967295#32) =?= some (4294967295#32 <<< x‚úù ^^^ 4294967295#32) =
                some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
            [Meta.isDefEq] [0.002162] ‚úÖÔ∏è some
                  ((-1#32) <<< x‚úù ^^^ -1#32) =?= some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
              [Meta.isDefEq] [0.002149] ‚úÖÔ∏è (-1#32) <<< x‚úù ^^^ -1#32 =?= 4294967295#32 <<< x‚úù ^^^ 4294967295#32
                [Meta.isDefEq] [0.002124] ‚úÖÔ∏è instHXorOfXor.1 ((-1#32) <<< x‚úù)
                      (-1#32) =?= instHXorOfXor.1 (4294967295#32 <<< x‚úù) 4294967295#32
                  [Meta.isDefEq] [0.002064] ‚úÖÔ∏è Xor.xor ((-1#32) <<< x‚úù)
                        (-1#32) =?= Xor.xor (4294967295#32 <<< x‚úù) 4294967295#32
                    [Meta.isDefEq] [0.002038] ‚úÖÔ∏è BitVec.instXor.1 ((-1#32) <<< x‚úù)
                          (-1#32) =?= BitVec.instXor.1 (4294967295#32 <<< x‚úù) 4294967295#32
                      [Meta.whnf] [0.001684] Non-easy whnf: BitVec.instXor
                        [Meta.whnf] [0.001675] Non-easy whnf: { xor := BitVec.xor }
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (!32#32 >·µ§ x‚úù) = true then none else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            if ((4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:29:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:22:8: error: (kernel) declaration has metavariables 'shl_add_nsw_thm'
[bv] [0.043901] Normalizing goal
  [Meta.synthInstance] [0.001290] ‚úÖÔ∏è Decidable
        ((if x‚úù ‚â• ‚Üë32 then none
          else
            if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
            else some (1#32 <<< x‚úù + -1#32)) ‚äë
          if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
              else some (1#32 <<< x‚úù + -1#32)) ‚äë
            if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.001283] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg And
                (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (BitVec.msb_eq_getLsbD_last 4294967295#32)))
              (Eq.trans
                (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                  (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                  ((1#32 <<< x‚úù).getLsbD 31))))
            (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
              !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
        (true_and
          (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true))
    [Meta.isDefEq.assign] [0.001280] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg And
                  (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                (Eq.trans
                  (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                    (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                    ((1#32 <<< x‚úù).getLsbD 31))))
              (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
          (true_and
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001262] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg And
                    (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                      (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                  (Eq.trans
                    (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                      (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                      ((1#32 <<< x‚úù).getLsbD 31))))
                (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                  !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
            (true_and
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
        [Meta.isDefEq] [0.001259] ‚úÖÔ∏è (True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)
          [Meta.isDefEq] [0.001240] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
            [Meta.isDefEq] [0.001223] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß
                  (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
  [Meta.isDefEq] [0.001409] ‚ùåÔ∏è ?a == ?a =?= (4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32
    [Meta.isDefEq.onFailure] [0.001176] ‚ùåÔ∏è ?a == ?a =?= (4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32
      [Meta.synthInstance] [0.001157] üí•Ô∏è BEq ?Œ±
        [Meta.synthInstance] [0.001090] new goal BEq ?Œ±
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (!32#32 >·µ§ x‚úù) = true then none
            else
              if
                  ((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                    true then
                none
              else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            if ((4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:39:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:33:8: error: (kernel) declaration has metavariables 'shl_add_nuw_thm'
[bv] [0.025565] Normalizing goal
  [Meta.synthInstance] [0.001138] ‚úÖÔ∏è Decidable
        ((if x‚úù ‚â• ‚Üë32 then none
          else
            if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
            else some (1#32 <<< x‚úù + -1#32)) ‚äë
          some (-1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
              else some (1#32 <<< x‚úù + -1#32)) ‚äë
            some (-1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.001045] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (Eq.trans
              (congr
                (congrArg Or (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
              (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
            (congrArg (fun x => x = true)
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
        (true_and
          ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) = true))
    [Meta.isDefEq.assign] [0.001042] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (Eq.trans
                (congr
                  (congrArg Or
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
              (congrArg (fun x => x = true)
                (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
          (true_and
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001028] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (Eq.trans
                  (congr
                    (congrArg Or
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                  (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
                (congrArg (fun x => x = true)
                  (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
            (true_and
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
        [Meta.isDefEq] [0.001025] ‚úÖÔ∏è (True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)
          [Meta.isDefEq] [0.001003] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32) =?= True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (!32#32 >·µ§ x‚úù) = true then none
            else
              if
                  (!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                    true then
                none
              else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            some 4294967295#32
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:49:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:43:8: error: (kernel) declaration has metavariables 'shl_add_nsw_nuw_thm'
[bv] [0.037497] Normalizing goal
  [Meta.synthInstance] [0.001355] ‚úÖÔ∏è Decidable
        ((if x‚úù ‚â• ‚Üë32 then none
          else
            if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
            else
              if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
              else some (1#32 <<< x‚úù + -1#32)) ‚äë
          some (-1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
              else
                if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                else some (1#32 <<< x‚úù + -1#32)) ‚äë
            some (-1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.001370] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg And
                (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (BitVec.msb_eq_getLsbD_last 4294967295#32)))
              (Eq.trans
                (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                  (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                  ((1#32 <<< x‚úù).getLsbD 31))))
            (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
              !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
        (true_and
          (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true))
    [Meta.isDefEq.assign] [0.001368] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg And
                  (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                (Eq.trans
                  (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                    (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                    ((1#32 <<< x‚úù).getLsbD 31))))
              (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
          (true_and
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001349] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg And
                    (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                      (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                  (Eq.trans
                    (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                      (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                      ((1#32 <<< x‚úù).getLsbD 31))))
                (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                  !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
            (true_and
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
        [Meta.isDefEq] [0.001346] ‚úÖÔ∏è (True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)
          [Meta.isDefEq] [0.001327] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
            [Meta.isDefEq] [0.001310] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß
                  (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (!32#32 >·µ§ x‚úù) = true then none
            else
              if
                  ((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                    true then
                none
              else
                if
                    (!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) &&
                          !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                      true then
                  none
                else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            some 4294967295#32
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:60:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:53:8: error: (kernel) declaration has metavariables 'shl_nsw_add_thm'
[bv] [0.035927] Normalizing goal
  [Meta.synthInstance] [0.001224] ‚úÖÔ∏è Decidable
        ((if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + -1#32)) ‚äë
          if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + -1#32)) ‚äë
            if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.001026] ‚úÖÔ∏è ?h‚ÇÉ =?= fun a => Eq.refl (some (1#32 <<< x‚úù + 4294967295#32))
    [Meta.isDefEq.assign] [0.001022] ‚úÖÔ∏è ?h‚ÇÉ := fun a => Eq.refl (some (1#32 <<< x‚úù + 4294967295#32))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if ((1#32 <<< x‚úù).sshiftRight x‚úù.toNat == 1#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            if ((4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:71:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:64:8: error: (kernel) declaration has metavariables 'shl_nsw_add_nsw_thm'
[bv] [0.053017] Normalizing goal
  [Meta.synthInstance] [0.001326] ‚úÖÔ∏è Decidable
        ((if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
          else
            if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
              else some (1#32 <<< x‚úù + -1#32)) ‚äë
          if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
                else some (1#32 <<< x‚úù + -1#32)) ‚äë
            if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.001397] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg And
                (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (BitVec.msb_eq_getLsbD_last 4294967295#32)))
              (Eq.trans
                (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                  (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                  ((1#32 <<< x‚úù).getLsbD 31))))
            (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
              !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
        (true_and
          (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true))
    [Meta.isDefEq.assign] [0.001394] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg And
                  (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                (Eq.trans
                  (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                    (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                    ((1#32 <<< x‚úù).getLsbD 31))))
              (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
          (true_and
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001376] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg And
                    (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                      (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                  (Eq.trans
                    (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                      (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                      ((1#32 <<< x‚úù).getLsbD 31))))
                (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                  !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
            (true_and
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
        [Meta.isDefEq] [0.001372] ‚úÖÔ∏è (True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)
          [Meta.isDefEq] [0.001350] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
            [Meta.isDefEq] [0.001328] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß
                  (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if ((1#32 <<< x‚úù).sshiftRight x‚úù.toNat == 1#32) = true then none
            else
              if (!32#32 >·µ§ x‚úù) = true then none
              else
                if
                    ((1#32 <<< x‚úù).getLsbD 31 &&
                        !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                      true then
                  none
                else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            if ((4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:82:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:75:8: error: (kernel) declaration has metavariables 'shl_nsw_add_nuw_thm'
[bv] [0.055598] Normalizing goal
  [Meta.synthInstance] [0.001871] ‚úÖÔ∏è Decidable
        ((if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
          else
            if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
              else some (1#32 <<< x‚úù + -1#32)) ‚äë
          some (-1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                else some (1#32 <<< x‚úù + -1#32)) ‚äë
            some (-1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.003859] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (Eq.trans
              (congr
                (congrArg Or (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
              (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
            (congrArg (fun x => x = true)
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
        (true_and
          ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) = true))
    [Meta.isDefEq.assign] [0.003855] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (Eq.trans
                (congr
                  (congrArg Or
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
              (congrArg (fun x => x = true)
                (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
          (true_and
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.003831] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (Eq.trans
                  (congr
                    (congrArg Or
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                  (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
                (congrArg (fun x => x = true)
                  (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
            (true_and
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
        [Meta.isDefEq] [0.003826] ‚úÖÔ∏è (True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)
          [Meta.isDefEq] [0.003791] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32) =?= True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)
            [Meta.isDefEq] [0.003764] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32 =?= 1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32
              [Meta.isDefEq] [0.003524] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 <
                    1#32 <<< x‚úù =?= 1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù
                [Meta.isDefEq] [0.003490] ‚úÖÔ∏è instLTBitVec.1 (1#32 <<< x‚úù + -1#32)
                      (1#32 <<< x‚úù) =?= instLTBitVec.1 (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)
                  [Meta.isDefEq] [0.003413] ‚úÖÔ∏è (1#32 <<< x‚úù + -1#32).toNat <
                        (1#32 <<< x‚úù).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat < (1#32 <<< x‚úù).toNat
                    [Meta.isDefEq] [0.003389] ‚úÖÔ∏è instLTNat.1 (1#32 <<< x‚úù + -1#32).toNat
                          (1#32 <<< x‚úù).toNat =?= instLTNat.1 (1#32 <<< x‚úù + 4294967295#32).toNat (1#32 <<< x‚úù).toNat
                      [Meta.isDefEq] [0.003342] ‚úÖÔ∏è (1#32 <<< x‚úù + -1#32).toNat.lt
                            (1#32 <<< x‚úù).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat.lt (1#32 <<< x‚úù).toNat
                        [Meta.isDefEq.delta] [0.003322] ‚úÖÔ∏è (1#32 <<< x‚úù + -1#32).toNat.lt
                              (1#32 <<< x‚úù).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat.lt (1#32 <<< x‚úù).toNat
                          [Meta.isDefEq] [0.003298] ‚úÖÔ∏è (1#32 <<< x‚úù +
                                  -1#32).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat
                            [Meta.isDefEq.delta] [0.003279] ‚úÖÔ∏è (1#32 <<< x‚úù +
                                    -1#32).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat
                              [Meta.isDefEq] [0.003245] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 =?= 1#32 <<< x‚úù + 4294967295#32
                                [Meta.isDefEq] [0.003049] ‚úÖÔ∏è instHAdd.1 (1#32 <<< x‚úù)
                                      (-1#32) =?= instHAdd.1 (1#32 <<< x‚úù) 4294967295#32
                                  [Meta.isDefEq] [0.002987] ‚úÖÔ∏è Add.add (1#32 <<< x‚úù)
                                        (-1#32) =?= Add.add (1#32 <<< x‚úù) 4294967295#32
                                    [Meta.isDefEq] [0.002782] ‚úÖÔ∏è BitVec.instAdd.1 (1#32 <<< x‚úù)
                                          (-1#32) =?= BitVec.instAdd.1 (1#32 <<< x‚úù) 4294967295#32
                                      [Meta.isDefEq] [0.002729] ‚úÖÔ∏è (1#32 <<< x‚úù).add
                                            (-1#32) =?= (1#32 <<< x‚úù).add 4294967295#32
                                        [Meta.isDefEq.delta] [0.002711] ‚úÖÔ∏è (1#32 <<< x‚úù).add
                                              (-1#32) =?= (1#32 <<< x‚úù).add 4294967295#32
                                          [Meta.isDefEq] [0.002665] ‚úÖÔ∏è -1#32 =?= 4294967295#32
                                            [Meta.isDefEq] [0.002571] ‚úÖÔ∏è -1#32 =?= {
                                                  toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                              [Meta.isDefEq] [0.002547] ‚úÖÔ∏è BitVec.instNeg.1
                                                    1#32 =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                                [Meta.isDefEq] [0.002496] ‚úÖÔ∏è (1#32).neg =?= {
                                                      toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                                  [Meta.isDefEq] [0.002471] ‚úÖÔ∏è BitVec.ofNat 32
                                                        (2 ^ 32 -
                                                          (1#32).toNat) =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                                    [Meta.isDefEq] [0.002453] ‚úÖÔ∏è {
                                                          toFin :=
                                                            Fin.ofNat' (2 ^ 32)
                                                              (2 ^ 32 -
                                                                (1#32).toNat) } =?= {
                                                          toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                                      [Meta.isDefEq] [0.002401] ‚úÖÔ∏è Fin.ofNat' (2 ^ 32)
                                                            (2 ^ 32 - (1#32).toNat) =?= Fin.ofNat' (2 ^ 32) 4294967295
                                                        [Meta.isDefEq.delta] [0.002379] ‚úÖÔ∏è Fin.ofNat' (2 ^ 32)
                                                              (2 ^ 32 - (1#32).toNat) =?= Fin.ofNat' (2 ^ 32) 4294967295
                                                          [Meta.isDefEq] [0.002328] ‚úÖÔ∏è 2 ^ 32 -
                                                                (1#32).toNat =?= 4294967295
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if ((1#32 <<< x‚úù).sshiftRight x‚úù.toNat == 1#32) = true then none
            else
              if (!32#32 >·µ§ x‚úù) = true then none
              else
                if
                    (!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) &&
                          !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                      true then
                  none
                else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            some 4294967295#32
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:93:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:86:8: error: (kernel) declaration has metavariables 'shl_nsw_add_nsw_nuw_thm'
[bv] [0.068665] Normalizing goal
  [Meta.synthInstance] [0.001400] ‚úÖÔ∏è Decidable
        ((if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
          else
            if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
              else
                if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                else some (1#32 <<< x‚úù + -1#32)) ‚äë
          some (-1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
                else
                  if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                  else some (1#32 <<< x‚úù + -1#32)) ‚äë
            some (-1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.002361] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg And
                (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (BitVec.msb_eq_getLsbD_last 4294967295#32)))
              (Eq.trans
                (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                  (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                  ((1#32 <<< x‚úù).getLsbD 31))))
            (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
              !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
        (true_and
          (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true))
    [Meta.isDefEq.assign] [0.002357] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg And
                  (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                (Eq.trans
                  (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                    (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                    ((1#32 <<< x‚úù).getLsbD 31))))
              (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
          (true_and
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.002330] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg And
                    (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                      (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                  (Eq.trans
                    (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                      (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                      ((1#32 <<< x‚úù).getLsbD 31))))
                (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                  !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
            (true_and
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
        [Meta.isDefEq] [0.002325] ‚úÖÔ∏è (True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)
          [Meta.isDefEq] [0.002289] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
            [Meta.isDefEq] [0.002264] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß
                  (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
              [Meta.isDefEq] [0.001192] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb
                [Meta.isDefEq] [0.001158] ‚úÖÔ∏è (-1#32).msb =?= (4294967295#32).msb
                  [Meta.isDefEq.delta] [0.001138] ‚úÖÔ∏è (-1#32).msb =?= (4294967295#32).msb
                    [Meta.isDefEq] [0.001108] ‚úÖÔ∏è -1#32 =?= 4294967295#32
                      [Meta.isDefEq] [0.001039] ‚úÖÔ∏è -1#32 =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                        [Meta.isDefEq] [0.001016] ‚úÖÔ∏è BitVec.instNeg.1
                              1#32 =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
              [Meta.isDefEq] [0.001055] ‚úÖÔ∏è (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<< x‚úù).msb =?= (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
                [Meta.isDefEq.delta] [0.001027] ‚úÖÔ∏è (1#32 <<< x‚úù + -1#32).msb ‚â†
                      (1#32 <<< x‚úù).msb =?= (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
  [Meta.isDefEq] [0.001390] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (Eq.trans
              (congr
                (congrArg Or (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
              (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
            (congrArg (fun x => x = true)
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
        (true_and
          ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) = true))
    [Meta.isDefEq.assign] [0.001386] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (Eq.trans
                (congr
                  (congrArg Or
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
              (congrArg (fun x => x = true)
                (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
          (true_and
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001364] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (Eq.trans
                  (congr
                    (congrArg Or
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                  (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
                (congrArg (fun x => x = true)
                  (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
            (true_and
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
        [Meta.isDefEq] [0.001359] ‚úÖÔ∏è (True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)
          [Meta.isDefEq] [0.001324] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32) =?= True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)
            [Meta.isDefEq] [0.001306] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32 =?= 1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32
              [Meta.isDefEq] [0.001091] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 <
                    1#32 <<< x‚úù =?= 1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù
                [Meta.isDefEq] [0.001055] ‚úÖÔ∏è instLTBitVec.1 (1#32 <<< x‚úù + -1#32)
                      (1#32 <<< x‚úù) =?= instLTBitVec.1 (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if ((1#32 <<< x‚úù).sshiftRight x‚úù.toNat == 1#32) = true then none
            else
              if (!32#32 >·µ§ x‚úù) = true then none
              else
                if
                    ((1#32 <<< x‚úù).getLsbD 31 &&
                        !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                      true then
                  none
                else
                  if
                      (!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) &&
                            !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                        true then
                    none
                  else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            some 4294967295#32
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:104:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:97:8: error: (kernel) declaration has metavariables 'shl_nuw_add_thm'
[bv] [0.037970] Normalizing goal
  [Meta.synthInstance] [0.001228] ‚úÖÔ∏è Decidable
        ((if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + -1#32)) ‚äë
          if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + -1#32)) ‚äë
            if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.002716] ‚úÖÔ∏è ?h‚ÇÉ =?= fun a => Eq.refl (some (1#32 <<< x‚úù + 4294967295#32))
    [Meta.isDefEq.assign] [0.002714] ‚úÖÔ∏è ?h‚ÇÉ := fun a => Eq.refl (some (1#32 <<< x‚úù + 4294967295#32))
      [Meta.isDefEq.assign.checkTypes] [0.002684] ‚úÖÔ∏è (?h‚ÇÉ : ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
            some (1#32 <<< x‚úù + -1#32) =
              some
                (1#32 <<< x‚úù +
                  4294967295#32)) := (fun a =>
            Eq.refl
              (some
                (1#32 <<< x‚úù +
                  4294967295#32)) : ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
            some (1#32 <<< x‚úù + 4294967295#32) = some (1#32 <<< x‚úù + 4294967295#32))
        [Meta.isDefEq] [0.002681] ‚úÖÔ∏è ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
              some (1#32 <<< x‚úù + -1#32) =
                some
                  (1#32 <<< x‚úù +
                    4294967295#32) =?= ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
              some (1#32 <<< x‚úù + 4294967295#32) = some (1#32 <<< x‚úù + 4294967295#32)
          [Meta.isDefEq] [0.002650] ‚úÖÔ∏è some (1#32 <<< x‚úù + -1#32) =
                some
                  (1#32 <<< x‚úù +
                    4294967295#32) =?= some (1#32 <<< x‚úù + 4294967295#32) = some (1#32 <<< x‚úù + 4294967295#32)
            [Meta.isDefEq] [0.002632] ‚úÖÔ∏è some (1#32 <<< x‚úù + -1#32) =?= some (1#32 <<< x‚úù + 4294967295#32)
              [Meta.isDefEq] [0.002612] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 =?= 1#32 <<< x‚úù + 4294967295#32
                [Meta.isDefEq] [0.002504] ‚úÖÔ∏è instHAdd.1 (1#32 <<< x‚úù) (-1#32) =?= instHAdd.1 (1#32 <<< x‚úù) 4294967295#32
                  [Meta.isDefEq] [0.002464] ‚úÖÔ∏è Add.add (1#32 <<< x‚úù) (-1#32) =?= Add.add (1#32 <<< x‚úù) 4294967295#32
                    [Meta.isDefEq] [0.002342] ‚úÖÔ∏è BitVec.instAdd.1 (1#32 <<< x‚úù)
                          (-1#32) =?= BitVec.instAdd.1 (1#32 <<< x‚úù) 4294967295#32
                      [Meta.isDefEq] [0.002312] ‚úÖÔ∏è (1#32 <<< x‚úù).add (-1#32) =?= (1#32 <<< x‚úù).add 4294967295#32
                        [Meta.isDefEq.delta] [0.002303] ‚úÖÔ∏è (1#32 <<< x‚úù).add (-1#32) =?= (1#32 <<< x‚úù).add 4294967295#32
                          [Meta.isDefEq] [0.002278] ‚úÖÔ∏è -1#32 =?= 4294967295#32
                            [Meta.isDefEq] [0.002242] ‚úÖÔ∏è -1#32 =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                              [Meta.isDefEq] [0.002232] ‚úÖÔ∏è BitVec.instNeg.1
                                    1#32 =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                [Meta.isDefEq] [0.002208] ‚úÖÔ∏è (1#32).neg =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                  [Meta.isDefEq] [0.002196] ‚úÖÔ∏è BitVec.ofNat 32
                                        (2 ^ 32 - (1#32).toNat) =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                    [Meta.isDefEq] [0.002185] ‚úÖÔ∏è {
                                          toFin :=
                                            Fin.ofNat' (2 ^ 32)
                                              (2 ^ 32 - (1#32).toNat) } =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                      [Meta.isDefEq] [0.002158] ‚úÖÔ∏è Fin.ofNat' (2 ^ 32)
                                            (2 ^ 32 - (1#32).toNat) =?= Fin.ofNat' (2 ^ 32) 4294967295
                                        [Meta.isDefEq.delta] [0.002145] ‚úÖÔ∏è Fin.ofNat' (2 ^ 32)
                                              (2 ^ 32 - (1#32).toNat) =?= Fin.ofNat' (2 ^ 32) 4294967295
                                          [Meta.isDefEq] [0.002119] ‚úÖÔ∏è 2 ^ 32 - (1#32).toNat =?= 4294967295
                                            [Meta.isDefEq] [0.001995] ‚úÖÔ∏è instHSub.1 (2 ^ 32)
                                                  (1#32).toNat =?= (instOfNatNat 4294967295).1
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            if ((4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:115:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:108:8: error: (kernel) declaration has metavariables 'shl_nuw_add_nsw_thm'
[bv] [0.047575] Normalizing goal
  [Meta.synthInstance] [0.001362] ‚úÖÔ∏è Decidable
        ((if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
          else
            if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
              else some (1#32 <<< x‚úù + -1#32)) ‚äë
          if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
                else some (1#32 <<< x‚úù + -1#32)) ‚äë
            if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.001285] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg And
                (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (BitVec.msb_eq_getLsbD_last 4294967295#32)))
              (Eq.trans
                (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                  (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                  ((1#32 <<< x‚úù).getLsbD 31))))
            (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
              !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
        (true_and
          (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true))
    [Meta.isDefEq.assign] [0.001282] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg And
                  (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                (Eq.trans
                  (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                    (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                    ((1#32 <<< x‚úù).getLsbD 31))))
              (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
          (true_and
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001265] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg And
                    (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                      (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                  (Eq.trans
                    (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                      (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                      ((1#32 <<< x‚úù).getLsbD 31))))
                (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                  !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
            (true_and
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
        [Meta.isDefEq] [0.001262] ‚úÖÔ∏è (True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)
          [Meta.isDefEq] [0.001243] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
            [Meta.isDefEq] [0.001217] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß
                  (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
            else
              if (!32#32 >·µ§ x‚úù) = true then none
              else
                if
                    ((1#32 <<< x‚úù).getLsbD 31 &&
                        !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                      true then
                  none
                else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            if ((4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:126:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:119:8: error: (kernel) declaration has metavariables 'shl_nuw_add_nuw_thm'
[bv] [0.033381] Normalizing goal
  [Meta.synthInstance] [0.001171] ‚úÖÔ∏è Decidable
        ((if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
          else
            if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
              else some (1#32 <<< x‚úù + -1#32)) ‚äë
          some (-1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                else some (1#32 <<< x‚úù + -1#32)) ‚äë
            some (-1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.001088] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (Eq.trans
              (congr
                (congrArg Or (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
              (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
            (congrArg (fun x => x = true)
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
        (true_and
          ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) = true))
    [Meta.isDefEq.assign] [0.001086] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (Eq.trans
                (congr
                  (congrArg Or
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
              (congrArg (fun x => x = true)
                (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
          (true_and
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001071] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (Eq.trans
                  (congr
                    (congrArg Or
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                  (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
                (congrArg (fun x => x = true)
                  (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
            (true_and
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
        [Meta.isDefEq] [0.001067] ‚úÖÔ∏è (True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)
          [Meta.isDefEq] [0.001047] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32) =?= True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)
            [Meta.isDefEq] [0.001031] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32 =?= 1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
            else
              if (!32#32 >·µ§ x‚úù) = true then none
              else
                if
                    (!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) &&
                          !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                      true then
                  none
                else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            some 4294967295#32
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:137:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:130:8: error: (kernel) declaration has metavariables 'shl_nuw_add_nsw_nuw_thm'
[bv] [0.044415] Normalizing goal
  [Meta.synthInstance] [0.001328] ‚úÖÔ∏è Decidable
        ((if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
          else
            if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
              else
                if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                else some (1#32 <<< x‚úù + -1#32)) ‚äë
          some (-1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
                else
                  if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                  else some (1#32 <<< x‚úù + -1#32)) ‚äë
            some (-1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.001262] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg And
                (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (BitVec.msb_eq_getLsbD_last 4294967295#32)))
              (Eq.trans
                (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                  (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                  ((1#32 <<< x‚úù).getLsbD 31))))
            (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
              !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
        (true_and
          (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true))
    [Meta.isDefEq.assign] [0.001259] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg And
                  (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                (Eq.trans
                  (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                    (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                    ((1#32 <<< x‚úù).getLsbD 31))))
              (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
          (true_and
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001241] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg And
                    (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                      (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                  (Eq.trans
                    (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                      (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                      ((1#32 <<< x‚úù).getLsbD 31))))
                (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                  !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
            (true_and
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
        [Meta.isDefEq] [0.001238] ‚úÖÔ∏è (True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)
          [Meta.isDefEq] [0.001219] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
            [Meta.isDefEq] [0.001204] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß
                  (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
            else
              if (!32#32 >·µ§ x‚úù) = true then none
              else
                if
                    ((1#32 <<< x‚úù).getLsbD 31 &&
                        !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                      true then
                  none
                else
                  if
                      (!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) &&
                            !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                        true then
                    none
                  else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            some 4294967295#32
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:148:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:141:8: error: (kernel) declaration has metavariables 'shl_nsw_nuw_add_thm'
[bv] [0.044314] Normalizing goal
  [Meta.synthInstance] [0.001240] ‚úÖÔ∏è Decidable
        ((if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
          else
            if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + -1#32)) ‚äë
          if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
            else
              if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
              else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + -1#32)) ‚äë
            if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.002744] ‚úÖÔ∏è ?h‚ÇÉ =?= fun a => Eq.refl (some (1#32 <<< x‚úù + 4294967295#32))
    [Meta.isDefEq.assign] [0.002741] ‚úÖÔ∏è ?h‚ÇÉ := fun a => Eq.refl (some (1#32 <<< x‚úù + 4294967295#32))
      [Meta.isDefEq.assign.checkTypes] [0.002717] ‚úÖÔ∏è (?h‚ÇÉ : ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
            some (1#32 <<< x‚úù + -1#32) =
              some
                (1#32 <<< x‚úù +
                  4294967295#32)) := (fun a =>
            Eq.refl
              (some
                (1#32 <<< x‚úù +
                  4294967295#32)) : ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
            some (1#32 <<< x‚úù + 4294967295#32) = some (1#32 <<< x‚úù + 4294967295#32))
        [Meta.isDefEq] [0.002714] ‚úÖÔ∏è ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
              some (1#32 <<< x‚úù + -1#32) =
                some
                  (1#32 <<< x‚úù +
                    4294967295#32) =?= ¬¨(!32#32 >·µ§ x‚úù) = true ‚Üí
              some (1#32 <<< x‚úù + 4294967295#32) = some (1#32 <<< x‚úù + 4294967295#32)
          [Meta.isDefEq] [0.002684] ‚úÖÔ∏è some (1#32 <<< x‚úù + -1#32) =
                some
                  (1#32 <<< x‚úù +
                    4294967295#32) =?= some (1#32 <<< x‚úù + 4294967295#32) = some (1#32 <<< x‚úù + 4294967295#32)
            [Meta.isDefEq] [0.002666] ‚úÖÔ∏è some (1#32 <<< x‚úù + -1#32) =?= some (1#32 <<< x‚úù + 4294967295#32)
              [Meta.isDefEq] [0.002647] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 =?= 1#32 <<< x‚úù + 4294967295#32
                [Meta.isDefEq] [0.002497] ‚úÖÔ∏è instHAdd.1 (1#32 <<< x‚úù) (-1#32) =?= instHAdd.1 (1#32 <<< x‚úù) 4294967295#32
                  [Meta.isDefEq] [0.002455] ‚úÖÔ∏è Add.add (1#32 <<< x‚úù) (-1#32) =?= Add.add (1#32 <<< x‚úù) 4294967295#32
                    [Meta.isDefEq] [0.001743] ‚ùåÔ∏è BitVec.instAdd =?= instAddNat
                      [Meta.isDefEq] [0.001726] ‚ùåÔ∏è { add := BitVec.add } =?= instAddNat
                        [Meta.isDefEq] [0.001706] ‚ùåÔ∏è { add := BitVec.add } =?= { add := Nat.add }
                          [Meta.isDefEq] [0.001661] ‚ùåÔ∏è BitVec.add =?= Nat.add
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if ((1#32 <<< x‚úù).sshiftRight x‚úù.toNat == 1#32) = true then none
            else
              if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
              else if (!32#32 >·µ§ x‚úù) = true then none else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            if ((4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:159:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:152:8: error: (kernel) declaration has metavariables 'shl_nsw_nuw_add_nsw_thm'
[bv] [0.055306] Normalizing goal
  [Meta.synthInstance] [0.001426] ‚úÖÔ∏è Decidable
        ((if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
          else
            if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
                else some (1#32 <<< x‚úù + -1#32)) ‚äë
          if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
            else
              if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
              else
                if x‚úù ‚â• ‚Üë32 then none
                else
                  if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
                  else some (1#32 <<< x‚úù + -1#32)) ‚äë
            if True ‚àß ((-1#32) <<< x‚úù).sshiftRight x‚úù.toNat = -1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some ((-1#32) <<< x‚úù ^^^ -1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.001239] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg And
                (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (BitVec.msb_eq_getLsbD_last 4294967295#32)))
              (Eq.trans
                (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                  (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                  ((1#32 <<< x‚úù).getLsbD 31))))
            (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
              !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
        (true_and
          (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true))
    [Meta.isDefEq.assign] [0.001237] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg And
                  (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                (Eq.trans
                  (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                    (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                    ((1#32 <<< x‚úù).getLsbD 31))))
              (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
          (true_and
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001219] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg And
                    (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                      (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                  (Eq.trans
                    (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                      (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                      ((1#32 <<< x‚úù).getLsbD 31))))
                (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                  !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
            (true_and
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
        [Meta.isDefEq] [0.001216] ‚úÖÔ∏è (True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)
          [Meta.isDefEq] [0.001197] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
            [Meta.isDefEq] [0.001181] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß
                  (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
  [Meta.synthInstance] [0.001728] ‚úÖÔ∏è Decidable
        (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true)
    [Meta.synthInstance] [0.001414] ‚úÖÔ∏è apply instDecidableEqBool to Decidable
          (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true)
      [Meta.synthInstance.tryResolve] [0.001379] ‚úÖÔ∏è Decidable
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true) ‚âü Decidable
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true)
        [Meta.isDefEq] [0.001316] ‚úÖÔ∏è ?m.105220 =?= instDecidableEqBool
              ((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) true
          [Meta.isDefEq.assign] [0.001313] ‚úÖÔ∏è ?m.105220 := instDecidableEqBool
                ((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) true
            [Meta.isDefEq.assign.checkTypes] [0.001292] ‚úÖÔ∏è (?m.105220 : Decidable
                  (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                    true)) := (instDecidableEqBool
                  ((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)
                  true : Decidable
                  (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                    true))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if ((1#32 <<< x‚úù).sshiftRight x‚úù.toNat == 1#32) = true then none
            else
              if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
              else
                if (!32#32 >·µ§ x‚úù) = true then none
                else
                  if
                      ((1#32 <<< x‚úù).getLsbD 31 &&
                          !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                        true then
                    none
                  else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            if ((4294967295#32 <<< x‚úù).sshiftRight x‚úù.toNat == 4294967295#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (4294967295#32 <<< x‚úù ^^^ 4294967295#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:170:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:163:8: error: (kernel) declaration has metavariables 'shl_nsw_nuw_add_nuw_thm'
[bv] [0.041957] Normalizing goal
  [Meta.synthInstance] [0.001244] ‚úÖÔ∏è Decidable
        ((if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
          else
            if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                else some (1#32 <<< x‚úù + -1#32)) ‚äë
          some (-1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
            else
              if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
              else
                if x‚úù ‚â• ‚Üë32 then none
                else
                  if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                  else some (1#32 <<< x‚úù + -1#32)) ‚äë
            some (-1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.002327] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (Eq.trans
              (congr
                (congrArg Or (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
              (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
            (congrArg (fun x => x = true)
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
        (true_and
          ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) = true))
    [Meta.isDefEq.assign] [0.002325] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (Eq.trans
                (congr
                  (congrArg Or
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
              (congrArg (fun x => x = true)
                (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
          (true_and
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.002311] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (Eq.trans
                  (congr
                    (congrArg Or
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                  (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
                (congrArg (fun x => x = true)
                  (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
            (true_and
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
        [Meta.isDefEq] [0.002308] ‚úÖÔ∏è (True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)
          [Meta.isDefEq] [0.002288] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32) =?= True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)
            [Meta.isDefEq] [0.002272] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32 =?= 1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32
              [Meta.isDefEq] [0.002152] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 <
                    1#32 <<< x‚úù =?= 1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù
                [Meta.isDefEq] [0.002131] ‚úÖÔ∏è instLTBitVec.1 (1#32 <<< x‚úù + -1#32)
                      (1#32 <<< x‚úù) =?= instLTBitVec.1 (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)
                  [Meta.isDefEq] [0.002086] ‚úÖÔ∏è (1#32 <<< x‚úù + -1#32).toNat <
                        (1#32 <<< x‚úù).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat < (1#32 <<< x‚úù).toNat
                    [Meta.isDefEq] [0.002073] ‚úÖÔ∏è instLTNat.1 (1#32 <<< x‚úù + -1#32).toNat
                          (1#32 <<< x‚úù).toNat =?= instLTNat.1 (1#32 <<< x‚úù + 4294967295#32).toNat (1#32 <<< x‚úù).toNat
                      [Meta.isDefEq] [0.002042] ‚úÖÔ∏è (1#32 <<< x‚úù + -1#32).toNat.lt
                            (1#32 <<< x‚úù).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat.lt (1#32 <<< x‚úù).toNat
                        [Meta.isDefEq.delta] [0.002032] ‚úÖÔ∏è (1#32 <<< x‚úù + -1#32).toNat.lt
                              (1#32 <<< x‚úù).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat.lt (1#32 <<< x‚úù).toNat
                          [Meta.isDefEq] [0.002017] ‚úÖÔ∏è (1#32 <<< x‚úù +
                                  -1#32).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat
                            [Meta.isDefEq.delta] [0.002006] ‚úÖÔ∏è (1#32 <<< x‚úù +
                                    -1#32).toNat =?= (1#32 <<< x‚úù + 4294967295#32).toNat
                              [Meta.isDefEq] [0.001993] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 =?= 1#32 <<< x‚úù + 4294967295#32
                                [Meta.isDefEq] [0.001879] ‚úÖÔ∏è instHAdd.1 (1#32 <<< x‚úù)
                                      (-1#32) =?= instHAdd.1 (1#32 <<< x‚úù) 4294967295#32
                                  [Meta.isDefEq] [0.001832] ‚úÖÔ∏è Add.add (1#32 <<< x‚úù)
                                        (-1#32) =?= Add.add (1#32 <<< x‚úù) 4294967295#32
                                    [Meta.isDefEq] [0.001710] ‚úÖÔ∏è BitVec.instAdd.1 (1#32 <<< x‚úù)
                                          (-1#32) =?= BitVec.instAdd.1 (1#32 <<< x‚úù) 4294967295#32
                                      [Meta.isDefEq] [0.001682] ‚úÖÔ∏è (1#32 <<< x‚úù).add
                                            (-1#32) =?= (1#32 <<< x‚úù).add 4294967295#32
                                        [Meta.isDefEq.delta] [0.001672] ‚úÖÔ∏è (1#32 <<< x‚úù).add
                                              (-1#32) =?= (1#32 <<< x‚úù).add 4294967295#32
                                          [Meta.isDefEq] [0.001647] ‚úÖÔ∏è -1#32 =?= 4294967295#32
                                            [Meta.isDefEq] [0.001611] ‚úÖÔ∏è -1#32 =?= {
                                                  toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
                                              [Meta.isDefEq] [0.001599] ‚úÖÔ∏è BitVec.instNeg.1
                                                    1#32 =?= { toFin := Fin.ofNat' (2 ^ 32) 4294967295 }
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if ((1#32 <<< x‚úù).sshiftRight x‚úù.toNat == 1#32) = true then none
            else
              if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
              else
                if (!32#32 >·µ§ x‚úù) = true then none
                else
                  if
                      (!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) &&
                            !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                        true then
                    none
                  else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            some 4294967295#32
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:181:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:174:8: error: (kernel) declaration has metavariables 'shl_nsw_nuw_add_nsw_nuw_thm'
[bv] [0.085067] Normalizing goal
  [Meta.synthInstance] [0.002463] ‚úÖÔ∏è Decidable
        ((if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
          else
            if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
                else
                  if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                  else some (1#32 <<< x‚úù + -1#32)) ‚äë
          some (-1#32))
    [Meta.check] [0.001463] ‚úÖÔ∏è BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
          else
            if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
                else
                  if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                  else some (1#32 <<< x‚úù + -1#32))
          (some (-1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if True ‚àß (1#32 <<< x‚úù).sshiftRight x‚úù.toNat = 1#32 then none
            else
              if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
              else
                if x‚úù ‚â• ‚Üë32 then none
                else
                  if True ‚àß (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb then none
                  else
                    if True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32) then none
                    else some (1#32 <<< x‚úù + -1#32)) ‚äë
            some (-1#32)
      ‚ä¢ False
  [Meta.isDefEq] [0.002144] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (congr
              (congrArg And
                (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (BitVec.msb_eq_getLsbD_last 4294967295#32)))
              (Eq.trans
                (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                  (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                  ((1#32 <<< x‚úù).getLsbD 31))))
            (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
              !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
        (true_and
          (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) = true))
    [Meta.isDefEq.assign] [0.002140] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (congr
                (congrArg And
                  (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                (Eq.trans
                  (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                    (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                    ((1#32 <<< x‚úù).getLsbD 31))))
              (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
          (true_and
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.002111] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (congr
                  (congrArg And
                    (congr (congrArg Eq (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                      (BitVec.msb_eq_getLsbD_last 4294967295#32)))
                  (Eq.trans
                    (congr (congrArg Ne (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù + 4294967295#32)))
                      (BitVec.msb_eq_getLsbD_last (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq ((1#32 <<< x‚úù + 4294967295#32).getLsbD 31)
                      ((1#32 <<< x‚úù).getLsbD 31))))
                (Std.Tactic.BVDecide.Normalize.Bool.and_to_and ((1#32 <<< x‚úù).getLsbD 31)
                  !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31)))
            (true_and
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
            (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
              true))
        [Meta.isDefEq] [0.002106] ‚úÖÔ∏è (True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß (1#32 <<< x‚úù + -1#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb) =
              (((1#32 <<< x‚úù).getLsbD 31 && !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                true)
          [Meta.isDefEq] [0.002072] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= True ‚àß
                (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
            [Meta.isDefEq] [0.002046] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb ‚àß
                  (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<<
                        x‚úù).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb ‚àß
                  (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
              [Meta.isDefEq] [0.001015] ‚úÖÔ∏è (1#32 <<< x‚úù).msb = (-1#32).msb =?= (1#32 <<< x‚úù).msb = (4294967295#32).msb
              [Meta.isDefEq] [0.001011] ‚úÖÔ∏è (1#32 <<< x‚úù + -1#32).msb ‚â†
                    (1#32 <<< x‚úù).msb =?= (1#32 <<< x‚úù + 4294967295#32).msb ‚â† (1#32 <<< x‚úù).msb
  [Meta.isDefEq] [0.001365] ‚úÖÔ∏è ?h‚ÇÅ =?= Eq.trans
        (congrArg (And True)
          (Eq.trans
            (Eq.trans
              (congr
                (congrArg Or (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
              (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
            (congrArg (fun x => x = true)
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
        (true_and
          ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) = true))
    [Meta.isDefEq.assign] [0.001361] ‚úÖÔ∏è ?h‚ÇÅ := Eq.trans
          (congrArg (And True)
            (Eq.trans
              (Eq.trans
                (congr
                  (congrArg Or
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                  (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
              (congrArg (fun x => x = true)
                (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                  (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
          (true_and
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001333] ‚úÖÔ∏è (?h‚ÇÅ : (True ‚àß
              (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Eq.trans
                (Eq.trans
                  (congr
                    (congrArg Or
                      (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)))
                    (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult (1#32 <<< x‚úù + 4294967295#32) 4294967295#32))
                  (Std.Tactic.BVDecide.Normalize.Bool.or_to_or (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))
                (congrArg (fun x => x = true)
                  (Std.Tactic.BVDecide.Normalize.Bool.or_elim (1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32)
                    (4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)))))
            (true_and
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)) : (True ‚àß
              (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
            ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
              true))
        [Meta.isDefEq] [0.001328] ‚úÖÔ∏è (True ‚àß (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + -1#32 < -1#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true) =?= (True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)) =
              ((!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) && !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                true)
          [Meta.isDefEq] [0.001292] ‚úÖÔ∏è True ‚àß
                (1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32) =?= True ‚àß
                (1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32)
            [Meta.isDefEq] [0.001274] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 < 1#32 <<< x‚úù ‚à®
                  1#32 <<< x‚úù + -1#32 <
                    -1#32 =?= 1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 4294967295#32 < 4294967295#32
              [Meta.isDefEq] [0.001048] ‚úÖÔ∏è 1#32 <<< x‚úù + -1#32 <
                    1#32 <<< x‚úù =?= 1#32 <<< x‚úù + 4294967295#32 < 1#32 <<< x‚úù
                [Meta.isDefEq] [0.001014] ‚úÖÔ∏è instLTBitVec.1 (1#32 <<< x‚úù + -1#32)
                      (1#32 <<< x‚úù) =?= instLTBitVec.1 (1#32 <<< x‚úù + 4294967295#32) (1#32 <<< x‚úù)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if ((1#32 <<< x‚úù).sshiftRight x‚úù.toNat == 1#32) = true then none
            else
              if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
              else
                if (!32#32 >·µ§ x‚úù) = true then none
                else
                  if
                      ((1#32 <<< x‚úù).getLsbD 31 &&
                          !(1#32 <<< x‚úù + 4294967295#32).getLsbD 31 == (1#32 <<< x‚úù).getLsbD 31) =
                        true then
                    none
                  else
                    if
                        (!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 4294967295#32) &&
                              !4294967295#32 >·µ§ 1#32 <<< x‚úù + 4294967295#32)) =
                          true then
                      none
                    else some (1#32 <<< x‚úù + 4294967295#32)) ‚äë
            some 4294967295#32
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:191:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:191:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:185:8: error: (kernel) declaration has metavariables 'bad_add0_thm'
[bv] [0.021455] Normalizing goal
  [Meta.synthInstance] [0.001101] ‚úÖÔ∏è Decidable
        ((if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + x‚úù¬π)) ‚äë
          if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + x‚úù¬π))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x‚úù¬π x‚úù : BitVec 32
      a‚úù :
        ¬¨(if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + x‚úù¬π)) ‚äë
            if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + x‚úù¬π)
      ‚ä¢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x‚úù¬π x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (!32#32 >·µ§ x‚úù) = true then none else some (1#32 <<< x‚úù + x‚úù¬π)) ‚äë
            if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (1#32 <<< x‚úù + x‚úù¬π)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:202:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:195:8: error: (kernel) declaration has metavariables 'bad_add1_thm'
[bv] [0.032267] Normalizing goal
  [Meta.synthInstance] [0.001173] ‚úÖÔ∏è Decidable
        ((if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + 1#32)) ‚äë
          if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
          else
            if x‚úù ‚â• ‚Üë32 then none
            else
              if True ‚àß (1#32 <<< x‚úù + 1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 1#32 < 1#32) then none
              else some (1#32 <<< x‚úù + 1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + 1#32)) ‚äë
            if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
            else
              if x‚úù ‚â• ‚Üë32 then none
              else
                if True ‚àß (1#32 <<< x‚úù + 1#32 < 1#32 <<< x‚úù ‚à® 1#32 <<< x‚úù + 1#32 < 1#32) then none
                else some (1#32 <<< x‚úù + 1#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (!32#32 >·µ§ x‚úù) = true then none else some (1#32 <<< x‚úù + 1#32)) ‚äë
            if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
            else
              if (!32#32 >·µ§ x‚úù) = true then none
              else
                if (!((!1#32 <<< x‚úù >·µ§ 1#32 <<< x‚úù + 1#32) && !1#32 >·µ§ 1#32 <<< x‚úù + 1#32)) = true then none
                else some (1#32 <<< x‚úù + 1#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:213:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsethlowbitshmaskhcanonicalize_proof.lean:206:8: error: (kernel) declaration has metavariables 'bad_add2_thm'
[bv] [0.022105] Normalizing goal
  [Meta.synthInstance] [0.001048] ‚úÖÔ∏è Decidable
        ((if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + 4294967294#32)) ‚äë
          if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
          else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + 4294967294#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + 4294967294#32)) ‚äë
            if True ‚àß 1#32 <<< x‚úù >>> x‚úù = 1#32 then none
            else if x‚úù ‚â• ‚Üë32 then none else some (1#32 <<< x‚úù + 4294967294#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x‚úù : BitVec 32
      a‚úù :
        ¬¨(if (!32#32 >·µ§ x‚úù) = true then none else some (1#32 <<< x‚úù + 4294967294#32)) ‚äë
            if (1#32 <<< x‚úù >>> x‚úù == 1#32) = true then none
            else if (!32#32 >·µ§ x‚úù) = true then none else some (1#32 <<< x‚úù + 4294967294#32)
      ‚ä¢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
