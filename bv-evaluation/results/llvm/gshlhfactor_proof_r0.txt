⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gshlhfactor_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:10:81: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:10:81: [bv] [0.024126] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind fun a =>
              (if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind fun y' => some (a + y')) ⊑
            if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind fun a =>
              (if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind fun a_1 => some (a + a_1)) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:18:117: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:18:117: [bv] [0.065251] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 64
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 64#64 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if x <<< x_1.toNat >>> x_1.toNat = x then none
                  else if 64#64 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' => if a + y' < a ∨ a + y' < y' then none else some (a + y')) ⊑
            (if x_2 + x < x_2 ∨ x_2 + x < x then none else some (x_2 + x)).bind fun a =>
              if a <<< x_1.toNat >>> x_1.toNat = a then none else if 64#64 ≤ x_1 then none else some (a <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 64
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!64#64 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x <<< x_1.toNat >>> x_1.toNat == x) = true then none
                  else if (!64#64 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 => if (!((!a >ᵤ a + a_1) && !a_1 >ᵤ a + a_1)) = true then none else some (a + a_1)) ⊑
            (if (!((!x_2 >ᵤ x_2 + x) && !x >ᵤ x_2 + x)) = true then none else some (x_2 + x)).bind fun a =>
              if (a <<< x_1.toNat >>> x_1.toNat == a) = true then none
              else if (!64#64 >ᵤ x_1) = true then none else some (a <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:27:81: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:27:81: [bv] [0.029405] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (x_2 <<< x_1.toNat).sshiftRight x_1.toNat = x_2 then none
                else if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x <<< x_1.toNat).sshiftRight x_1.toNat = x then none
                  else if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' => some (a + y')) ⊑
            if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if ((x_2 <<< x_1.toNat).sshiftRight x_1.toNat == x_2) = true then none
                else if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if ((x <<< x_1.toNat).sshiftRight x_1.toNat == x) = true then none
                  else if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 => some (a + a_1)) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:34:81: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:34:81: [bv] [0.061752] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind fun a =>
              (if (x <<< x_1.toNat).sshiftRight x_1.toNat = x then none
                  else if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' => if a.msb = y'.msb ∧ ¬(a + y').msb = a.msb then none else some (a + y')) ⊑
            if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind fun a =>
              (if ((x <<< x_1.toNat).sshiftRight x_1.toNat == x) = true then none
                  else if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 =>
                if (a.getLsbD 5 == a_1.getLsbD 5 && !(a + a_1).getLsbD 5 == a.getLsbD 5) = true then none
                else some (a + a_1)) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:41:81: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:41:81: [bv] [0.031672] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if x <<< x_1.toNat >>> x_1.toNat = x then none
                  else if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' => some (a + y')) ⊑
            if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x <<< x_1.toNat >>> x_1.toNat == x) = true then none
                  else if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 => some (a + a_1)) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:48:81: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:48:81: [bv] [0.042898] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind fun y' =>
                if a + y' < a ∨ a + y' < y' then none else some (a + y')) ⊑
            if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind fun a_1 =>
                if (!((!a >ᵤ a + a_1) && !a_1 >ᵤ a + a_1)) = true then none else some (a + a_1)) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat + x <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:53:69: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:53:69: [bv] [0.041614] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind fun a =>
              (if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind fun y' => some (a - y')) ⊑
            if 6#6 ≤ x_1 then none else some ((x_2 - x) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind fun a =>
              (if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind fun a_1 =>
                some (a + (~~~a_1 + 1#6))) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some ((x_2 + (~~~x + 1#6)) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:61:117: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:61:117: [bv] [0.070495] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 64
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 64#64 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if x <<< x_1.toNat >>> x_1.toNat = x then none
                  else if 64#64 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' => if a < y' then none else some (a - y')) ⊑
            (if x_2 < x then none else some (x_2 - x)).bind fun a =>
              if a <<< x_1.toNat >>> x_1.toNat = a then none else if 64#64 ≤ x_1 then none else some (a <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 64
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!64#64 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x <<< x_1.toNat >>> x_1.toNat == x) = true then none
                  else if (!64#64 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 => if (a_1 >ᵤ a) = true then none else some (a + (~~~a_1 + 1#64))) ⊑
            (if (x >ᵤ x_2) = true then none else some (x_2 + (~~~x + 1#64))).bind fun a =>
              if (a <<< x_1.toNat >>> x_1.toNat == a) = true then none
              else if (!64#64 >ᵤ x_1) = true then none else some (a <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:70:69: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:70:69: [bv] [0.048795] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (x_2 <<< x_1.toNat).sshiftRight x_1.toNat = x_2 then none
                else if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x <<< x_1.toNat).sshiftRight x_1.toNat = x then none
                  else if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' => some (a - y')) ⊑
            if 6#6 ≤ x_1 then none else some ((x_2 - x) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if ((x_2 <<< x_1.toNat).sshiftRight x_1.toNat == x_2) = true then none
                else if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if ((x <<< x_1.toNat).sshiftRight x_1.toNat == x) = true then none
                  else if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 => some (a + (~~~a_1 + 1#6))) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some ((x_2 + (~~~x + 1#6)) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:79:69: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:79:69: [bv] [0.081529] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind fun a =>
              (if (x <<< x_1.toNat).sshiftRight x_1.toNat = x then none
                  else if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' =>
                if
                    (BitVec.signExtend 7 a - BitVec.signExtend 7 y').msb =
                      (BitVec.signExtend 7 a - BitVec.signExtend 7 y').getMsbD 1 then
                  some (a - y')
                else none) ⊑
            if 6#6 ≤ x_1 then none else some ((x_2 - x) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind fun a =>
              (if ((x <<< x_1.toNat).sshiftRight x_1.toNat == x) = true then none
                  else if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 =>
                if
                    ((BitVec.signExtend 7 a + (~~~BitVec.signExtend 7 a_1 + 1#7)).getLsbD 6 ==
                        (BitVec.signExtend 7 a + (~~~BitVec.signExtend 7 a_1 + 1#7)).getMsbD 1) =
                      true then
                  some (a + (~~~a_1 + 1#6))
                else none) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some ((x_2 + (~~~x + 1#6)) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:86:69: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:86:69: [bv] [0.047723] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if x <<< x_1.toNat >>> x_1.toNat = x then none
                  else if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind
                fun y' => some (a - y')) ⊑
            if 6#6 ≤ x_1 then none else some ((x_2 - x) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (x <<< x_1.toNat >>> x_1.toNat == x) = true then none
                  else if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind
                fun a_1 => some (a + (~~~a_1 + 1#6))) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some ((x_2 + (~~~x + 1#6)) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:93:69: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:93:69: [bv] [0.053328] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 6#6 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if 6#6 ≤ x_1 then none else some (x <<< x_1.toNat)).bind fun y' =>
                if a < y' then none else some (a - y')) ⊑
            if 6#6 ≤ x_1 then none else some ((x_2 - x) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 6
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!6#6 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (!6#6 >ᵤ x_1) = true then none else some (x <<< x_1.toNat)).bind fun a_1 =>
                if (a_1 >ᵤ a) = true then none else some (a + (~~~a_1 + 1#6))) ⊑
            if (!6#6 >ᵤ x_1) = true then none else some ((x_2 + (~~~x + 1#6)) <<< x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:98:59: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshlhfactor_proof.lean:98:59: [bv] [0.022178] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (4#8 <<< x.toNat)).bind fun a =>
              (if 8#8 ≤ x then none else some (3#8 <<< x.toNat)).bind fun y' => some (a + y')) ⊑
            if 8#8 ≤ x then none else some (7#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (4#8 <<< x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x) = true then none else some (3#8 <<< x.toNat)).bind fun a_1 => some (a + a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (7#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gshlhfactor_proof
