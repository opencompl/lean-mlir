⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gbinophofhdisplacedhshifts_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:10:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:10:60: [bv] [0.025944] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (16#8 <<< x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some (3#8 <<< ((x.toNat + 1) % 256))).bind fun y' => some (a ||| y')) ⊑
            if 8#8 ≤ x then none else some (22#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (16#8 <<< x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some (3#8 <<< ((x.toNat + 1) % 256))).bind fun a_1 =>
                some (a ||| a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (22#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:15:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:15:60: [bv] [0.025182] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (16#8 >>> x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some (3#8 >>> ((x.toNat + 1) % 256))).bind fun y' => some (a ||| y')) ⊑
            if 8#8 ≤ x then none else some (17#8 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (16#8 >>> x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some (3#8 >>> ((x.toNat + 1) % 256))).bind fun a_1 =>
                some (a ||| a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (17#8 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:21:71: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:21:71: [bv] [0.022211] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some ((192#8).sshiftRight x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some ((128#8).sshiftRight ((x.toNat + 1) % 256))).bind fun y' =>
                some (a ||| y')) ⊑
            if 8#8 ≤ x then none else some ((192#8).sshiftRight x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some ((192#8).sshiftRight x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some ((128#8).sshiftRight ((x.toNat + 1) % 256))).bind
                fun a_1 => some (a ||| a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some ((192#8).sshiftRight x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:26:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:26:60: [bv] [0.025447] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (16#8 <<< x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some (3#8 <<< ((x.toNat + 1) % 256))).bind fun y' => some (a ^^^ y')) ⊑
            if 8#8 ≤ x then none else some (22#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (16#8 <<< x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some (3#8 <<< ((x.toNat + 1) % 256))).bind fun a_1 =>
                some (a ^^^ a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (22#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:31:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:31:60: [bv] [0.025422] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (16#8 >>> x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some (3#8 >>> ((x.toNat + 1) % 256))).bind fun y' => some (a ^^^ y')) ⊑
            if 8#8 ≤ x then none else some (17#8 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (16#8 >>> x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some (3#8 >>> ((x.toNat + 1) % 256))).bind fun a_1 =>
                some (a ^^^ a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (17#8 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:37:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:37:60: [bv] [0.024081] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some ((128#8).sshiftRight x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some ((192#8).sshiftRight ((x.toNat + 1) % 256))).bind fun y' =>
                some (a ^^^ y')) ⊑
            if 8#8 ≤ x then none else some (96#8 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some ((128#8).sshiftRight x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some ((192#8).sshiftRight ((x.toNat + 1) % 256))).bind
                fun a_1 => some (a ^^^ a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (96#8 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:42:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:42:60: [bv] [0.025485] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (48#8 <<< x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some (8#8 <<< ((x.toNat + 1) % 256))).bind fun y' => some (a &&& y')) ⊑
            if 8#8 ≤ x then none else some (16#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (48#8 <<< x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some (8#8 <<< ((x.toNat + 1) % 256))).bind fun a_1 =>
                some (a &&& a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (16#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:47:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:47:60: [bv] [0.027183] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (48#8 >>> x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some (64#8 >>> ((x.toNat + 1) % 256))).bind fun y' => some (a &&& y')) ⊑
            if 8#8 ≤ x then none else some (32#8 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (48#8 >>> x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some (64#8 >>> ((x.toNat + 1) % 256))).bind fun a_1 =>
                some (a &&& a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (32#8 >>> x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:53:71: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:53:71: [bv] [0.024503] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some ((192#8).sshiftRight x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some ((128#8).sshiftRight ((x.toNat + 1) % 256))).bind fun y' =>
                some (a &&& y')) ⊑
            if 8#8 ≤ x then none else some ((192#8).sshiftRight x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some ((192#8).sshiftRight x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some ((128#8).sshiftRight ((x.toNat + 1) % 256))).bind
                fun a_1 => some (a &&& a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some ((192#8).sshiftRight x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:58:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:58:60: [bv] [0.027774] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (16#8 <<< x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some (7#8 <<< ((x.toNat + 1) % 256))).bind fun y' => some (a + y')) ⊑
            if 8#8 ≤ x then none else some (30#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (16#8 <<< x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some (7#8 <<< ((x.toNat + 1) % 256))).bind fun a_1 =>
                some (a + a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (30#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:66:76: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:66:76: [bv] [0.089506] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (16#8 >>> x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some (7#8 >>> ((x.toNat + 1) % 256))).bind fun y' => some (a + y')) ⊑
            (if 8#8 ≤ x then none else some (16#8 >>> x.toNat)).bind fun a =>
              (if 8#8 ≤ x + 1#8 then none else some (7#8 >>> ((x.toNat + 1) % 256))).bind fun y' =>
                if a.msb = y'.msb ∧ ¬(a + y').msb = a.msb then none
                else if a + y' < a ∨ a + y' < y' then none else some (a + y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (16#8 >>> x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some (7#8 >>> ((x.toNat + 1) % 256))).bind fun a_1 =>
                some (a + a_1)) ⊑
            (if (!8#8 >ᵤ x) = true then none else some (16#8 >>> x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x + 1#8) = true then none else some (7#8 >>> ((x.toNat + 1) % 256))).bind fun a_1 =>
                if (a.getLsbD 7 == a_1.getLsbD 7 && !(a + a_1).getLsbD 7 == a.getLsbD 7) = true then none
                else if (!((!a >ᵤ a + a_1) && !a_1 >ᵤ a + a_1)) = true then none else some (a + a_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:71:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:71:60: [bv] [0.025684] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x + 1#8 then none else some (3#8 <<< ((x.toNat + 1) % 256))).bind fun a =>
              (if 8#8 ≤ x then none else some (16#8 <<< x.toNat)).bind fun y' => some (a ||| y')) ⊑
            if 8#8 ≤ x then none else some (22#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x + 1#8) = true then none else some (3#8 <<< ((x.toNat + 1) % 256))).bind fun a =>
              (if (!8#8 >ᵤ x) = true then none else some (16#8 <<< x.toNat)).bind fun a_1 => some (a ||| a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (22#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:76:60: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:76:60: [bv] [0.023766] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (16#8 <<< x.toNat)).bind fun a =>
              (if 8#8 ≤ x ||| 1#8 then none else some (3#8 <<< (x.toNat ||| 1))).bind fun y' => some (a ||| y')) ⊑
            if 8#8 ≤ x then none else some (22#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (16#8 <<< x.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x ||| 1#8) = true then none else some (3#8 <<< (x.toNat ||| 1))).bind fun a_1 =>
                some (a ||| a_1)) ⊑
            if (!8#8 >ᵤ x) = true then none else some (22#8 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gbinophofhdisplacedhshifts_proof
