⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:11:8: error: (kernel) declaration has metavariables 'shl_or_thm'
[bv] [0.038201] Normalizing goal
  [Meta.synthInstance] [0.001532] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 <<< x✝ ||| 3#8 <<< (x✝ + 1#8))) ⊑
          if x✝ ≥ ↑8 then none else some (22#8 <<< x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 <<< x✝ ||| 3#8 <<< (x✝ + 1#8))) ⊑
            if x✝ ≥ ↑8 then none else some (22#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else if (!8#8 >ᵤ x✝ + 1#8) = true then none else some (16#8 <<< x✝ ||| 3#8 <<< (x✝ + 1#8))) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (22#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:27:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:21:8: error: (kernel) declaration has metavariables 'lshr_or_thm'
[bv] [0.046118] Normalizing goal
  [Meta.synthInstance] [0.002156] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 >>> x✝ ||| 3#8 >>> (x✝ + 1#8))) ⊑
          if x✝ ≥ ↑8 then none else some (17#8 >>> x✝))
    [Meta.check] [0.001109] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 >>> x✝ ||| 3#8 >>> (x✝ + 1#8)))
          (if x✝ ≥ ↑8 then none else some (17#8 >>> x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 >>> x✝ ||| 3#8 >>> (x✝ + 1#8))) ⊑
            if x✝ ≥ ↑8 then none else some (17#8 >>> x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else if (!8#8 >ᵤ x✝ + 1#8) = true then none else some (16#8 >>> x✝ ||| 3#8 >>> (x✝ + 1#8))) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (17#8 >>> x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:37:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:31:8: error: (kernel) declaration has metavariables 'ashr_or_thm'
[bv] [0.034281] Normalizing goal
  [Meta.synthInstance] [0.001974] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none
          else
            if x✝ + 1#8 ≥ ↑8 then none
            else some ((192#8).sshiftRight x✝.toNat ||| (128#8).sshiftRight (x✝ + 1#8).toNat)) ⊑
          if x✝ ≥ ↑8 then none else some ((192#8).sshiftRight x✝.toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none
            else
              if x✝ + 1#8 ≥ ↑8 then none
              else some ((192#8).sshiftRight x✝.toNat ||| (128#8).sshiftRight (x✝ + 1#8).toNat)) ⊑
            if x✝ ≥ ↑8 then none else some ((192#8).sshiftRight x✝.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else
              if (!8#8 >ᵤ x✝ + 1#8) = true then none
              else some ((192#8).sshiftRight x✝.toNat ||| (128#8).sshiftRight (x✝ + 1#8).toNat)) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some ((192#8).sshiftRight x✝.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:47:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:41:8: error: (kernel) declaration has metavariables 'shl_xor_thm'
[bv] [0.044267] Normalizing goal
  [Meta.synthInstance] [0.001932] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 <<< x✝ ^^^ 3#8 <<< (x✝ + 1#8))) ⊑
          if x✝ ≥ ↑8 then none else some (22#8 <<< x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 <<< x✝ ^^^ 3#8 <<< (x✝ + 1#8))) ⊑
            if x✝ ≥ ↑8 then none else some (22#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else if (!8#8 >ᵤ x✝ + 1#8) = true then none else some (16#8 <<< x✝ ^^^ 3#8 <<< (x✝ + 1#8))) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (22#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:57:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:51:8: error: (kernel) declaration has metavariables 'lshr_xor_thm'
[bv] [0.044406] Normalizing goal
  [Meta.synthInstance] [0.001643] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 >>> x✝ ^^^ 3#8 >>> (x✝ + 1#8))) ⊑
          if x✝ ≥ ↑8 then none else some (17#8 >>> x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 >>> x✝ ^^^ 3#8 >>> (x✝ + 1#8))) ⊑
            if x✝ ≥ ↑8 then none else some (17#8 >>> x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else if (!8#8 >ᵤ x✝ + 1#8) = true then none else some (16#8 >>> x✝ ^^^ 3#8 >>> (x✝ + 1#8))) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (17#8 >>> x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:67:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:61:8: error: (kernel) declaration has metavariables 'ashr_xor_thm'
[bv] [0.044578] Normalizing goal
  [Meta.synthInstance] [0.001873] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none
          else
            if x✝ + 1#8 ≥ ↑8 then none
            else some ((128#8).sshiftRight x✝.toNat ^^^ (192#8).sshiftRight (x✝ + 1#8).toNat)) ⊑
          if x✝ ≥ ↑8 then none else some (96#8 >>> x✝))
    [Meta.check] [0.001080] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if x✝ ≥ ↑8 then none
          else
            if x✝ + 1#8 ≥ ↑8 then none
            else some ((128#8).sshiftRight x✝.toNat ^^^ (192#8).sshiftRight (x✝ + 1#8).toNat))
          (if x✝ ≥ ↑8 then none else some (96#8 >>> x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none
            else
              if x✝ + 1#8 ≥ ↑8 then none
              else some ((128#8).sshiftRight x✝.toNat ^^^ (192#8).sshiftRight (x✝ + 1#8).toNat)) ⊑
            if x✝ ≥ ↑8 then none else some (96#8 >>> x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else
              if (!8#8 >ᵤ x✝ + 1#8) = true then none
              else some ((128#8).sshiftRight x✝.toNat ^^^ (192#8).sshiftRight (x✝ + 1#8).toNat)) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (96#8 >>> x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:77:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:71:8: error: (kernel) declaration has metavariables 'shl_and_thm'
[bv] [0.029488] Normalizing goal
  [Meta.synthInstance] [0.001287] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (48#8 <<< x✝ &&& 8#8 <<< (x✝ + 1#8))) ⊑
          if x✝ ≥ ↑8 then none else some (16#8 <<< x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (48#8 <<< x✝ &&& 8#8 <<< (x✝ + 1#8))) ⊑
            if x✝ ≥ ↑8 then none else some (16#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else if (!8#8 >ᵤ x✝ + 1#8) = true then none else some (48#8 <<< x✝ &&& 8#8 <<< (x✝ + 1#8))) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (16#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:87:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:81:8: error: (kernel) declaration has metavariables 'lshr_and_thm'
[bv] [0.042805] Normalizing goal
  [Meta.synthInstance] [0.001539] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (48#8 >>> x✝ &&& 64#8 >>> (x✝ + 1#8))) ⊑
          if x✝ ≥ ↑8 then none else some (32#8 >>> x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (48#8 >>> x✝ &&& 64#8 >>> (x✝ + 1#8))) ⊑
            if x✝ ≥ ↑8 then none else some (32#8 >>> x✝)
      ⊢ False
  [Meta.isDefEq] [0.001898] ✅️ ?h₂ =?= fun a => Eq.refl none
    [Meta.isDefEq.assign] [0.001894] ✅️ ?h₂ := fun a => Eq.refl none
      [Meta.isDefEq.assign.checkTypes] [0.001878] ✅️ (?h₂ : (!8#8 >ᵤ x✝ + 1#8) = true →
            none = none) := (fun a => Eq.refl none : (!8#8 >ᵤ x✝ + 1#8) = true → none = none)
        [Meta.isDefEq] [0.001873] ✅️ (!8#8 >ᵤ x✝ + 1#8) = true → none = none =?= (!8#8 >ᵤ x✝ + 1#8) = true → none = none
          [Meta.isDefEq] [0.001861] ✅️ none = none =?= none = none
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else if (!8#8 >ᵤ x✝ + 1#8) = true then none else some (48#8 >>> x✝ &&& 64#8 >>> (x✝ + 1#8))) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (32#8 >>> x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:97:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:91:8: error: (kernel) declaration has metavariables 'ashr_and_thm'
[bv] [0.027061] Normalizing goal
  [Meta.synthInstance] [0.001164] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none
          else
            if x✝ + 1#8 ≥ ↑8 then none
            else some ((192#8).sshiftRight x✝.toNat &&& (128#8).sshiftRight (x✝ + 1#8).toNat)) ⊑
          if x✝ ≥ ↑8 then none else some ((192#8).sshiftRight x✝.toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none
            else
              if x✝ + 1#8 ≥ ↑8 then none
              else some ((192#8).sshiftRight x✝.toNat &&& (128#8).sshiftRight (x✝ + 1#8).toNat)) ⊑
            if x✝ ≥ ↑8 then none else some ((192#8).sshiftRight x✝.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else
              if (!8#8 >ᵤ x✝ + 1#8) = true then none
              else some ((192#8).sshiftRight x✝.toNat &&& (128#8).sshiftRight (x✝ + 1#8).toNat)) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some ((192#8).sshiftRight x✝.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:107:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:101:8: error: (kernel) declaration has metavariables 'shl_add_thm'
[bv] [0.028901] Normalizing goal
  [Meta.synthInstance] [0.001165] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 <<< x✝ + 7#8 <<< (x✝ + 1#8))) ⊑
          if x✝ ≥ ↑8 then none else some (30#8 <<< x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 <<< x✝ + 7#8 <<< (x✝ + 1#8))) ⊑
            if x✝ ≥ ↑8 then none else some (30#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else if (!8#8 >ᵤ x✝ + 1#8) = true then none else some (16#8 <<< x✝ + 7#8 <<< (x✝ + 1#8))) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (30#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:118:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:111:8: error: (kernel) declaration has metavariables 'lshr_add_fail_thm'
[bv] [0.051029] Normalizing goal
  [Meta.synthInstance] [0.001393] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8))) ⊑
          if x✝ ≥ ↑8 then none
          else
            if x✝ + 1#8 ≥ ↑8 then none
            else
              if
                  True ∧
                    (16#8 >>> x✝).msb = (7#8 >>> (x✝ + 1#8)).msb ∧
                      (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8)).msb ≠ (16#8 >>> x✝).msb then
                none
              else
                if
                    True ∧
                      (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8) < 16#8 >>> x✝ ∨
                        16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8) < 7#8 >>> (x✝ + 1#8)) then
                  none
                else some (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none else if x✝ + 1#8 ≥ ↑8 then none else some (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8))) ⊑
            if x✝ ≥ ↑8 then none
            else
              if x✝ + 1#8 ≥ ↑8 then none
              else
                if
                    True ∧
                      (16#8 >>> x✝).msb = (7#8 >>> (x✝ + 1#8)).msb ∧
                        (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8)).msb ≠ (16#8 >>> x✝).msb then
                  none
                else
                  if
                      True ∧
                        (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8) < 16#8 >>> x✝ ∨
                          16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8) < 7#8 >>> (x✝ + 1#8)) then
                    none
                  else some (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else if (!8#8 >ᵤ x✝ + 1#8) = true then none else some (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8))) ⊑
            if (!8#8 >ᵤ x✝) = true then none
            else
              if (!8#8 >ᵤ x✝ + 1#8) = true then none
              else
                if
                    ((16#8 >>> x✝).getLsbD 7 == (7#8 >>> (x✝ + 1#8)).getLsbD 7 &&
                        !(16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8)).getLsbD 7 == (16#8 >>> x✝).getLsbD 7) =
                      true then
                  none
                else
                  if
                      (!((!16#8 >>> x✝ >ᵤ 16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8)) &&
                            !7#8 >>> (x✝ + 1#8) >ᵤ 16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8))) =
                        true then
                    none
                  else some (16#8 >>> x✝ + 7#8 >>> (x✝ + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:128:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:122:8: error: (kernel) declaration has metavariables 'shl_or_commuted_thm'
[bv] [0.027690] Normalizing goal
  [Meta.synthInstance] [0.001218] ✅️ Decidable
        ((if x✝ + 1#8 ≥ ↑8 then none else if x✝ ≥ ↑8 then none else some (3#8 <<< (x✝ + 1#8) ||| 16#8 <<< x✝)) ⊑
          if x✝ ≥ ↑8 then none else some (22#8 <<< x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ + 1#8 ≥ ↑8 then none else if x✝ ≥ ↑8 then none else some (3#8 <<< (x✝ + 1#8) ||| 16#8 <<< x✝)) ⊑
            if x✝ ≥ ↑8 then none else some (22#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝ + 1#8) = true then none
            else if (!8#8 >ᵤ x✝) = true then none else some (3#8 <<< (x✝ + 1#8) ||| 16#8 <<< x✝)) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (22#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:138:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gbinophofhdisplacedhshifts_proof.lean:132:8: error: (kernel) declaration has metavariables 'shl_or_with_or_disjoint_instead_of_add_thm'
[bv] [0.027952] Normalizing goal
  [Meta.synthInstance] [0.001455] ✅️ Decidable
        ((if x✝ ≥ ↑8 then none else if x✝ ||| 1#8 ≥ ↑8 then none else some (16#8 <<< x✝ ||| 3#8 <<< (x✝ ||| 1#8))) ⊑
          if x✝ ≥ ↑8 then none else some (22#8 <<< x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if x✝ ≥ ↑8 then none else if x✝ ||| 1#8 ≥ ↑8 then none else some (16#8 <<< x✝ ||| 3#8 <<< (x✝ ||| 1#8))) ⊑
            if x✝ ≥ ↑8 then none else some (22#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝) = true then none
            else if (!8#8 >ᵤ x✝ ||| 1#8) = true then none else some (16#8 <<< x✝ ||| 3#8 <<< (x✝ ||| 1#8))) ⊑
            if (!8#8 >ᵤ x✝) = true then none else some (22#8 <<< x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
