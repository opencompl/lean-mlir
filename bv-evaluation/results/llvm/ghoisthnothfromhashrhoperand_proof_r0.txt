⚠ [872/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [884/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/ghoisthnothfromhashrhoperand_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/ghoisthnothfromhashrhoperand_proof.lean:11:8: error: (kernel) declaration has metavariables 't0_thm'
[bv] [0.031903] Normalizing goal
  [Meta.synthInstance] [0.004839] ✅️ Decidable
        ((if x✝¹ ≥ ↑8 then none else some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat)) ⊑
          if x✝¹ ≥ ↑8 then none else some (x✝.sshiftRight x✝¹.toNat ^^^ -1#8))
    [Meta.synthInstance] [0.003534] ✅️ apply @BitVec.Refinement.instDecidableRelOptionOfDecidableEq to Decidable
          ((if x✝¹ ≥ ↑8 then none else some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat)) ⊑
            if x✝¹ ≥ ↑8 then none else some (x✝.sshiftRight x✝¹.toNat ^^^ -1#8))
      [Meta.synthInstance] [0.002754] new goal DecidableEq (BitVec 8)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ ≥ ↑8 then none else some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat)) ⊑
            if x✝¹ ≥ ↑8 then none else some (x✝.sshiftRight x✝¹.toNat ^^^ -1#8)
      ⊢ False
  [Meta.isDefEq] [0.001442] ✅️ ?h₃ =?= fun a => Eq.refl (some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat))
    [Meta.isDefEq.assign] [0.001437] ✅️ ?h₃ := fun a => Eq.refl (some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat))
      [Meta.isDefEq.assign.checkTypes] [0.001401] ✅️ (?h₃ : ¬(!8#8 >ᵤ x✝¹) = true →
            some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat) =
              some
                ((x✝ ^^^ 255#8).sshiftRight
                  x✝¹.toNat)) := (fun a =>
            Eq.refl
              (some
                ((x✝ ^^^ 255#8).sshiftRight
                  x✝¹.toNat)) : ¬(!8#8 >ᵤ x✝¹) = true →
            some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) = some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat))
        [Meta.isDefEq] [0.001396] ✅️ ¬(!8#8 >ᵤ x✝¹) = true →
              some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat) =
                some
                  ((x✝ ^^^ 255#8).sshiftRight
                    x✝¹.toNat) =?= ¬(!8#8 >ᵤ x✝¹) = true →
              some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) = some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)
          [Meta.isDefEq] [0.001347] ✅️ some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat) =
                some
                  ((x✝ ^^^ 255#8).sshiftRight
                    x✝¹.toNat) =?= some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) =
                some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)
            [Meta.isDefEq] [0.001298] ✅️ some
                  ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat) =?= some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)
              [Meta.isDefEq] [0.001269] ✅️ (x✝ ^^^ -1#8).sshiftRight x✝¹.toNat =?= (x✝ ^^^ 255#8).sshiftRight x✝¹.toNat
                [Meta.isDefEq.delta] [0.001254] ✅️ (x✝ ^^^ -1#8).sshiftRight
                      x✝¹.toNat =?= (x✝ ^^^ 255#8).sshiftRight x✝¹.toNat
                  [Meta.isDefEq] [0.001225] ✅️ x✝ ^^^ -1#8 =?= x✝ ^^^ 255#8
                    [Meta.isDefEq] [0.001191] ✅️ instHXorOfXor.1 x✝ (-1#8) =?= instHXorOfXor.1 x✝ 255#8
                      [Meta.isDefEq] [0.001092] ✅️ Xor.xor x✝ (-1#8) =?= Xor.xor x✝ 255#8
                        [Meta.isDefEq] [0.001057] ✅️ BitVec.instXor.1 x✝ (-1#8) =?= BitVec.instXor.1 x✝ 255#8
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹) = true then none else some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)) ⊑
            if (!8#8 >ᵤ x✝¹) = true then none else some (x✝.sshiftRight x✝¹.toNat ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/ghoisthnothfromhashrhoperand_proof.lean:27:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/ghoisthnothfromhashrhoperand_proof.lean:21:8: error: (kernel) declaration has metavariables 't1_thm'
[bv] [0.094951] Normalizing goal
  [Meta.synthInstance] [0.026686] ✅️ Decidable
        ((if x✝¹ ≥ ↑8 then none else some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat)) ⊑
          if x✝¹ ≥ ↑8 then none else some (x✝.sshiftRight x✝¹.toNat ^^^ -1#8))
    [Meta.check] [0.026021] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if x✝¹ ≥ ↑8 then none else some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat))
          (if x✝¹ ≥ ↑8 then none else some (x✝.sshiftRight x✝¹.toNat ^^^ -1#8))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ ≥ ↑8 then none else some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat)) ⊑
            if x✝¹ ≥ ↑8 then none else some (x✝.sshiftRight x✝¹.toNat ^^^ -1#8)
      ⊢ False
  [Meta.isDefEq] [0.018036] ✅️ ?h₃ =?= fun a => Eq.refl (some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat))
    [Meta.isDefEq.assign] [0.018033] ✅️ ?h₃ := fun a => Eq.refl (some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat))
      [Meta.isDefEq.assign.checkTypes] [0.018008] ✅️ (?h₃ : ¬(!8#8 >ᵤ x✝¹) = true →
            some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat) =
              some
                ((x✝ ^^^ 255#8).sshiftRight
                  x✝¹.toNat)) := (fun a =>
            Eq.refl
              (some
                ((x✝ ^^^ 255#8).sshiftRight
                  x✝¹.toNat)) : ¬(!8#8 >ᵤ x✝¹) = true →
            some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) = some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat))
        [Meta.isDefEq] [0.018004] ✅️ ¬(!8#8 >ᵤ x✝¹) = true →
              some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat) =
                some
                  ((x✝ ^^^ 255#8).sshiftRight
                    x✝¹.toNat) =?= ¬(!8#8 >ᵤ x✝¹) = true →
              some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) = some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)
          [Meta.isDefEq] [0.017972] ✅️ some ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat) =
                some
                  ((x✝ ^^^ 255#8).sshiftRight
                    x✝¹.toNat) =?= some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) =
                some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)
            [Meta.isDefEq] [0.017939] ✅️ some
                  ((x✝ ^^^ -1#8).sshiftRight x✝¹.toNat) =?= some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)
              [Meta.isDefEq] [0.017916] ✅️ (x✝ ^^^ -1#8).sshiftRight x✝¹.toNat =?= (x✝ ^^^ 255#8).sshiftRight x✝¹.toNat
                [Meta.isDefEq.delta] [0.017905] ✅️ (x✝ ^^^ -1#8).sshiftRight
                      x✝¹.toNat =?= (x✝ ^^^ 255#8).sshiftRight x✝¹.toNat
                  [Meta.isDefEq] [0.017884] ✅️ x✝ ^^^ -1#8 =?= x✝ ^^^ 255#8
                    [Meta.isDefEq] [0.017856] ✅️ instHXorOfXor.1 x✝ (-1#8) =?= instHXorOfXor.1 x✝ 255#8
  [Meta.isDefEq] [0.013204] ❌️ if ?c then ?a
      else ?a =?= if (!8#8 >ᵤ x✝¹) = true then none else some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)
  [Meta.isDefEq] [0.008157] ✅️ ?h₃ =?= fun a => Eq.refl (some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat))
    [Meta.isDefEq.assign] [0.008154] ✅️ ?h₃ := fun a => Eq.refl (some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat))
      [Meta.isDefEq.assign.checkTypes] [0.008146] ✅️ (?h₃ : ¬(!8#8 >ᵤ x✝¹) = true →
            some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) =
              some
                ((x✝ ^^^ 255#8).sshiftRight
                  x✝¹.toNat)) := (fun a =>
            Eq.refl
              (some
                ((x✝ ^^^ 255#8).sshiftRight
                  x✝¹.toNat)) : ¬(!8#8 >ᵤ x✝¹) = true →
            some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) = some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat))
        [Meta.isDefEq] [0.008139] ✅️ ¬(!8#8 >ᵤ x✝¹) = true →
              some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) =
                some
                  ((x✝ ^^^ 255#8).sshiftRight
                    x✝¹.toNat) =?= ¬(!8#8 >ᵤ x✝¹) = true →
              some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat) = some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹) = true then none else some ((x✝ ^^^ 255#8).sshiftRight x✝¹.toNat)) ⊑
            if (!8#8 >ᵤ x✝¹) = true then none else some (x✝.sshiftRight x✝¹.toNat ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
