⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [850/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [883/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [886/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthflags_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthflags_proof.lean:11:8: error: (kernel) declaration has metavariables 'shl_add_nuw_thm'
[bv] [0.033730] Normalizing goal
  [Meta.synthInstance] [0.001823] ✅️ Decidable
        ((if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ &&& 63#8) <<< (x✝¹ &&& 2#8))) ⊑
          if True ∧ (x✝ &&& 63#8) <<< (x✝¹ &&& 2#8) >>> (x✝¹ &&& 2#8) = x✝ &&& 63#8 then none
          else if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ &&& 63#8) <<< (x✝¹ &&& 2#8)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ &&& 63#8) <<< (x✝¹ &&& 2#8))) ⊑
            if True ∧ (x✝ &&& 63#8) <<< (x✝¹ &&& 2#8) >>> (x✝¹ &&& 2#8) = x✝ &&& 63#8 then none
            else if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ &&& 63#8) <<< (x✝¹ &&& 2#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹ &&& 2#8) = true then none else some ((x✝ &&& 63#8) <<< (x✝¹ &&& 2#8))) ⊑
            if ((x✝ &&& 63#8) <<< (x✝¹ &&& 2#8) >>> (x✝¹ &&& 2#8) == x✝ &&& 63#8) = true then none
            else if (!8#8 >ᵤ x✝¹ &&& 2#8) = true then none else some ((x✝ &&& 63#8) <<< (x✝¹ &&& 2#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthflags_proof.lean:29:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthflags_proof.lean:22:8: error: (kernel) declaration has metavariables 'shl_add_nuw_and_nsw_thm'
[bv] [0.035941] Normalizing goal
  [Meta.synthInstance] [0.001395] ✅️ Decidable
        ((if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8))) ⊑
          if True ∧ ((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat = x✝ &&& 31#8 then none
          else
            if True ∧ (x✝ &&& 31#8) <<< (x✝¹ &&& 2#8) >>> (x✝¹ &&& 2#8) = x✝ &&& 31#8 then none
            else if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8))) ⊑
            if True ∧ ((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat = x✝ &&& 31#8 then none
            else
              if True ∧ (x✝ &&& 31#8) <<< (x✝¹ &&& 2#8) >>> (x✝¹ &&& 2#8) = x✝ &&& 31#8 then none
              else if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8))
      ⊢ False
  [Meta.isDefEq] [0.003226] ✅️ ?h₁ =?= Eq.refl
        ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) = true)
    [Meta.isDefEq.assign] [0.003224] ✅️ ?h₁ := Eq.refl
          ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) = true)
      [Meta.isDefEq.assign.checkTypes] [0.003217] ✅️ (?h₁ : ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight
                  (x✝¹ &&& 2#8).toNat ==
                x✝ &&& 31#8) =
              true) =
            ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) =
              true)) := (Eq.refl
            ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) =
              true) : ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) = true) =
            ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) = true))
        [Meta.isDefEq] [0.003209] ✅️ ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat ==
                  x✝ &&& 31#8) =
                true) =
              ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) =
                true) =?= ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) = true) =
              ((((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) = true)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹ &&& 2#8) = true then none else some ((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8))) ⊑
            if (((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ &&& 31#8) = true then none
            else
              if ((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8) >>> (x✝¹ &&& 2#8) == x✝ &&& 31#8) = true then none
              else if (!8#8 >ᵤ x✝¹ &&& 2#8) = true then none else some ((x✝ &&& 31#8) <<< (x✝¹ &&& 2#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthflags_proof.lean:40:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthflags_proof.lean:33:8: error: (kernel) declaration has metavariables 'shl_add_nsw_thm'
[bv] [0.031062] Normalizing goal
  [Meta.synthInstance] [0.001625] ✅️ Decidable
        ((if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ ||| 224#8) <<< (x✝¹ &&& 2#8))) ⊑
          if True ∧ ((x✝ ||| 224#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat = x✝ ||| 224#8 then none
          else if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ ||| 224#8) <<< (x✝¹ &&& 2#8)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ ||| 224#8) <<< (x✝¹ &&& 2#8))) ⊑
            if True ∧ ((x✝ ||| 224#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat = x✝ ||| 224#8 then none
            else if x✝¹ &&& 2#8 ≥ ↑8 then none else some ((x✝ ||| 224#8) <<< (x✝¹ &&& 2#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 8
      x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹ &&& 2#8) = true then none else some ((x✝ ||| 224#8) <<< (x✝¹ &&& 2#8))) ⊑
            if (((x✝ ||| 224#8) <<< (x✝¹ &&& 2#8)).sshiftRight (x✝¹ &&& 2#8).toNat == x✝ ||| 224#8) = true then none
            else if (!8#8 >ᵤ x✝¹ &&& 2#8) = true then none else some ((x✝ ||| 224#8) <<< (x✝¹ &&& 2#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
