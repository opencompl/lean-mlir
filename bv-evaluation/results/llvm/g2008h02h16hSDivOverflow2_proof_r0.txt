⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2008h02h16hSDivOverflow2_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2008h02h16hSDivOverflow2_proof.lean:11:8: error: (kernel) declaration has metavariables 'i_thm'
[bv] [0.088021] Normalizing goal
  [Meta.synthInstance] [0.001912] ✅️ Decidable
        ((if (253#8 == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 253#8 == -1) = true then none
          else
            if (253#8 == 0 || 8 != 1 && x✝.sdiv 253#8 == BitVec.intMin 8 && 253#8 == -1) = true then none
            else some ((x✝.sdiv 253#8).sdiv 253#8)) ⊑
          if (9#8 == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 9#8 == -1) = true then none else some (x✝.sdiv 9#8))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (253#8 == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 253#8 == -1) = true then none
            else
              if (253#8 == 0 || 8 != 1 && x✝.sdiv 253#8 == BitVec.intMin 8 && 253#8 == -1) = true then none
              else some ((x✝.sdiv 253#8).sdiv 253#8)) ⊑
            if (9#8 == 0 || 8 != 1 && x✝ == BitVec.intMin 8 && 9#8 == -1) = true then none else some (x✝.sdiv 9#8)
      ⊢ False
  [Meta.appBuilder] [0.001073] ✅️ f: HAdd.hAdd, xs: [~~~x✝, 1#8]
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some
              (if (if x✝.getLsbD 7 = true then (~~~x✝ + 1#8) / 3#8 else ~~~(x✝ / 3#8) + 1#8).getLsbD 7 = true then
                ((~~~if x✝.getLsbD 7 = true then (~~~x✝ + 1#8) / 3#8 else ~~~(x✝ / 3#8) + 1#8) + 1#8) / 3#8
              else ~~~((if x✝.getLsbD 7 = true then (~~~x✝ + 1#8) / 3#8 else ~~~(x✝ / 3#8) + 1#8) / 3#8) + 1#8) ⊑
            some (if x✝.getLsbD 7 = true then ~~~((~~~x✝ + 1#8) / 9#8) + 1#8 else x✝ / 9#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
