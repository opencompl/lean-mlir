⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2010h11h23hDistributed_proof.lean:19:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2010h11h23hDistributed_proof.lean:11:8: error: (kernel) declaration has metavariables 'foo_thm'
[bv] [0.059031] Normalizing goal
  [Meta.synthInstance] [0.001663] ✅️ Decidable
        ((if True ∧ x✝.msb = x✝¹.msb ∧ (x✝ + x✝¹).msb ≠ x✝.msb then none
          else
            if
                True ∧
                  (BitVec.signExtend (2 * 32) (x✝ + x✝¹) * BitVec.signExtend (2 * 32) x✝ <
                      BitVec.signExtend (2 * 32) (BitVec.twoPow 32 (32 - 1)) ∨
                    BitVec.signExtend (2 * 32) (x✝ + x✝¹) * BitVec.signExtend (2 * 32) x✝ ≥
                      BitVec.twoPow (2 * 32) (32 - 1)) then
              none
            else
              if
                  True ∧
                    (BitVec.signExtend (2 * 32) x✝ * BitVec.signExtend (2 * 32) x✝ <
                        BitVec.signExtend (2 * 32) (BitVec.twoPow 32 (32 - 1)) ∨
                      BitVec.signExtend (2 * 32) x✝ * BitVec.signExtend (2 * 32) x✝ ≥
                        BitVec.twoPow (2 * 32) (32 - 1)) then
                none
              else some ((x✝ + x✝¹) * x✝ - x✝ * x✝)) ⊑
          some (x✝¹ * x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if True ∧ x✝.msb = x✝¹.msb ∧ (x✝ + x✝¹).msb ≠ x✝.msb then none
            else
              if
                  True ∧
                    (BitVec.signExtend (2 * 32) (x✝ + x✝¹) * BitVec.signExtend (2 * 32) x✝ <
                        BitVec.signExtend (2 * 32) (BitVec.twoPow 32 (32 - 1)) ∨
                      BitVec.signExtend (2 * 32) (x✝ + x✝¹) * BitVec.signExtend (2 * 32) x✝ ≥
                        BitVec.twoPow (2 * 32) (32 - 1)) then
                none
              else
                if
                    True ∧
                      (BitVec.signExtend (2 * 32) x✝ * BitVec.signExtend (2 * 32) x✝ <
                          BitVec.signExtend (2 * 32) (BitVec.twoPow 32 (32 - 1)) ∨
                        BitVec.signExtend (2 * 32) x✝ * BitVec.signExtend (2 * 32) x✝ ≥
                          BitVec.twoPow (2 * 32) (32 - 1)) then
                  none
                else some ((x✝ + x✝¹) * x✝ - x✝ * x✝)) ⊑
            some (x✝¹ * x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝.getLsbD 31 == x✝¹.getLsbD 31 && !(x✝ + x✝¹).getLsbD 31 == x✝.getLsbD 31) = true then none
            else
              if
                  (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ
                            BitVec.signExtend 64 (x✝ + x✝¹) * BitVec.signExtend 64 x✝) &&
                        BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 (x✝ + x✝¹) * BitVec.signExtend 64 x✝)) =
                    true then
                none
              else
                if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ
                              BitVec.signExtend 64 x✝ * BitVec.signExtend 64 x✝) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x✝ * BitVec.signExtend 64 x✝)) =
                      true then
                  none
                else some ((x✝ + x✝¹) * x✝ + (~~~(x✝ * x✝) + 1#32))) ⊑
            some (x✝¹ * x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 104.933910ms, solving context: 1.000000ms
LeanSAT proved the goal after 204.433820ms: rewriting 34.830220ms, bitblasting 0.000000ms, SAT solving 111.450519ms, LRAT trimming 10.364810ms, LRAT checking 26.889610ms
