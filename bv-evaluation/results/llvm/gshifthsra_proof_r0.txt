⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gshifthsra_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:11:31: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:11:31: [bv] [0.018580] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 32
      a✝ :
        ¬((if 32#32 ≤ BitVec.setWidth 32 x then none else some (x_1.sshiftRight (x.toNat % 4294967296))).bind fun x' =>
              some (x' &&& 1#32)) ⊑
            (if 32#32 ≤ BitVec.setWidth 32 x then none else some (x_1 >>> (x.toNat % 4294967296))).bind fun x' =>
              some (x' &&& 1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 32
      a✝ :
        ¬((if (!32#32 >ᵤ BitVec.zeroExtend 32 x) = true then none
                else some (x_1.sshiftRight (x.toNat % 4294967296))).bind
              fun a => some (a &&& 1#32)) ⊑
            (if (!32#32 >ᵤ BitVec.zeroExtend 32 x) = true then none else some (x_1 >>> (x.toNat % 4294967296))).bind
              fun a => some (a &&& 1#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:19:38: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:19:38: [bv] [0.026271] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some ((BitVec.setWidth 32 x + 7#32).sshiftRight 3) ⊑
            (if
                    (BitVec.setWidth 32 x).msb = (7#32).msb ∧
                      ¬(BitVec.setWidth 32 x + 7#32).msb = (BitVec.setWidth 32 x).msb then
                  none
                else
                  if BitVec.setWidth 32 x + 7#32 < BitVec.setWidth 32 x ∨ BitVec.setWidth 32 x + 7#32 < 7#32 then none
                  else some (BitVec.setWidth 32 x + 7#32)).bind
              fun x' => some (x' >>> 3)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬some ((BitVec.zeroExtend 32 x + 7#32).sshiftRight 3) ⊑
            (if
                    (!(BitVec.zeroExtend 32 x).getLsbD 31 &&
                        !(BitVec.zeroExtend 32 x + 7#32).getLsbD 31 == (BitVec.zeroExtend 32 x).getLsbD 31) =
                      true then
                  none
                else
                  if
                      (!((!BitVec.zeroExtend 32 x >ᵤ BitVec.zeroExtend 32 x + 7#32) &&
                            !7#32 >ᵤ BitVec.zeroExtend 32 x + 7#32)) =
                        true then
                    none
                  else some (BitVec.zeroExtend 32 x + 7#32)).bind
              fun a => some (a >>> 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:21:97: Bitwuzla proved the goal after 73.000000ms
LeanSAT proved the goal after 70.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 61.722625ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:23:104: Bitwuzla proved the goal after 70.000000ms
LeanSAT proved the goal after 70.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 61.522667ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:25:128: Bitwuzla proved the goal after 70.000000ms
LeanSAT proved the goal after 68.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 59.938708ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:27:128: Bitwuzla proved the goal after 70.000000ms
LeanSAT proved the goal after 65.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 57.242417ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gshifthsra_proof
