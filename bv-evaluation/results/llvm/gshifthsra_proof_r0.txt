⚠ [874/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [879/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [885/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [886/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:11:8: error: (kernel) declaration has metavariables 'test1_thm'
[bv] [0.026568] Normalizing goal
  [Meta.synthInstance] [0.001349] ✅️ Decidable
        ((if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none
          else some (x✝.sshiftRight (BitVec.zeroExtend 32 x✝¹).toNat &&& 1#32)) ⊑
          if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ >>> BitVec.zeroExtend 32 x✝¹ &&& 1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 8
      x✝ : BitVec 32
      a✝ :
        ¬(if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none
            else some (x✝.sshiftRight (BitVec.zeroExtend 32 x✝¹).toNat &&& 1#32)) ⊑
            if BitVec.zeroExtend 32 x✝¹ ≥ ↑32 then none else some (x✝ >>> BitVec.zeroExtend 32 x✝¹ &&& 1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      e_1 : LLVM.IntW 32
      x✝¹ : BitVec 8
      x✝ : BitVec 32
      a✝ :
        ¬(if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝¹) = true then none
            else some (x✝.sshiftRight (BitVec.zeroExtend 32 x✝¹).toNat &&& 1#32)) ⊑
            if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝¹) = true then none
            else some (x✝ >>> BitVec.zeroExtend 32 x✝¹ &&& 1#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:28:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:21:8: error: (kernel) declaration has metavariables 'test2_thm'
[bv] [0.046678] Normalizing goal
  [Meta.synthInstance] [0.002260] ✅️ Decidable
        ((if 3#32 ≥ ↑32 then none else some ((BitVec.zeroExtend 32 x✝ + 7#32).sshiftRight (3#32).toNat)) ⊑
          if
              True ∧
                (BitVec.zeroExtend 32 x✝).msb = (7#32).msb ∧
                  (BitVec.zeroExtend 32 x✝ + 7#32).msb ≠ (BitVec.zeroExtend 32 x✝).msb then
            none
          else
            if
                True ∧
                  (BitVec.zeroExtend 32 x✝ + 7#32 < BitVec.zeroExtend 32 x✝ ∨
                    BitVec.zeroExtend 32 x✝ + 7#32 < 7#32) then
              none
            else if 3#32 ≥ ↑32 then none else some ((BitVec.zeroExtend 32 x✝ + 7#32) >>> 3#32))
    [Meta.check] [0.001339] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if 3#32 ≥ ↑32 then none else some ((BitVec.zeroExtend 32 x✝ + 7#32).sshiftRight (3#32).toNat))
          (if
              True ∧
                (BitVec.zeroExtend 32 x✝).msb = (7#32).msb ∧
                  (BitVec.zeroExtend 32 x✝ + 7#32).msb ≠ (BitVec.zeroExtend 32 x✝).msb then
            none
          else
            if
                True ∧
                  (BitVec.zeroExtend 32 x✝ + 7#32 < BitVec.zeroExtend 32 x✝ ∨
                    BitVec.zeroExtend 32 x✝ + 7#32 < 7#32) then
              none
            else if 3#32 ≥ ↑32 then none else some ((BitVec.zeroExtend 32 x✝ + 7#32) >>> 3#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if 3#32 ≥ ↑32 then none else some ((BitVec.zeroExtend 32 x✝ + 7#32).sshiftRight (3#32).toNat)) ⊑
            if
                True ∧
                  (BitVec.zeroExtend 32 x✝).msb = (7#32).msb ∧
                    (BitVec.zeroExtend 32 x✝ + 7#32).msb ≠ (BitVec.zeroExtend 32 x✝).msb then
              none
            else
              if
                  True ∧
                    (BitVec.zeroExtend 32 x✝ + 7#32 < BitVec.zeroExtend 32 x✝ ∨
                      BitVec.zeroExtend 32 x✝ + 7#32 < 7#32) then
                none
              else if 3#32 ≥ ↑32 then none else some ((BitVec.zeroExtend 32 x✝ + 7#32) >>> 3#32)
      ⊢ False
  [Meta.isDefEq] [0.001113] ❌️ ?a ==
        ?a =?= (BitVec.zeroExtend 32 x✝ + 7#32).getLsbD 31 == (BitVec.zeroExtend 32 x✝).getLsbD 31
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬some ((BitVec.zeroExtend 32 x✝ + 7#32).sshiftRight 3) ⊑
            if
                (!(BitVec.zeroExtend 32 x✝).getLsbD 31 &&
                    !(BitVec.zeroExtend 32 x✝ + 7#32).getLsbD 31 == (BitVec.zeroExtend 32 x✝).getLsbD 31) =
                  true then
              none
            else
              if
                  (!((!BitVec.zeroExtend 32 x✝ >ᵤ BitVec.zeroExtend 32 x✝ + 7#32) &&
                        !7#32 >ᵤ BitVec.zeroExtend 32 x✝ + 7#32)) =
                    true then
                none
              else some ((BitVec.zeroExtend 32 x✝ + 7#32) >>> 3)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:37:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:32:8: error: (kernel) declaration has metavariables 'ashr_ashr_thm'
[bv] [0.011516] Normalizing goal
  [Meta.synthInstance] [0.001416] ✅️ Decidable
        ((if 5#32 ≥ ↑32 then none
          else if 7#32 ≥ ↑32 then none else some ((x✝.sshiftRight (5#32).toNat).sshiftRight (7#32).toNat)) ⊑
          if 12#32 ≥ ↑32 then none else some (x✝.sshiftRight (12#32).toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if 5#32 ≥ ↑32 then none
            else if 7#32 ≥ ↑32 then none else some ((x✝.sshiftRight (5#32).toNat).sshiftRight (7#32).toNat)) ⊑
            if 12#32 ≥ ↑32 then none else some (x✝.sshiftRight (12#32).toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ : ¬some ((x✝.sshiftRight 5).sshiftRight 7) ⊑ some (x✝.sshiftRight 12)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:46:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:41:8: error: (kernel) declaration has metavariables 'ashr_overshift_thm'
[bv] [0.009786] Normalizing goal
  [Meta.synthInstance] [0.001250] ✅️ Decidable
        ((if 15#32 ≥ ↑32 then none
          else if 17#32 ≥ ↑32 then none else some ((x✝.sshiftRight (15#32).toNat).sshiftRight (17#32).toNat)) ⊑
          if 31#32 ≥ ↑32 then none else some (x✝.sshiftRight (31#32).toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if 15#32 ≥ ↑32 then none
            else if 17#32 ≥ ↑32 then none else some ((x✝.sshiftRight (15#32).toNat).sshiftRight (17#32).toNat)) ⊑
            if 31#32 ≥ ↑32 then none else some (x✝.sshiftRight (31#32).toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ : ¬some ((x✝.sshiftRight 15).sshiftRight 17) ⊑ some (x✝.sshiftRight 31)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:55:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:50:8: error: (kernel) declaration has metavariables 'hoist_ashr_ahead_of_sext_1_thm'
[bv] [0.013075] Normalizing goal
  [Meta.synthInstance] [0.001924] ✅️ Decidable
        ((if 3#32 ≥ ↑32 then none else some ((BitVec.signExtend 32 x✝).sshiftRight (3#32).toNat)) ⊑
          if 3#8 ≥ ↑8 then none else some (BitVec.signExtend 32 (x✝.sshiftRight (3#8).toNat)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if 3#32 ≥ ↑32 then none else some ((BitVec.signExtend 32 x✝).sshiftRight (3#32).toNat)) ⊑
            if 3#8 ≥ ↑8 then none else some (BitVec.signExtend 32 (x✝.sshiftRight (3#8).toNat))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ : ¬some ((BitVec.signExtend 32 x✝).sshiftRight 3) ⊑ some (BitVec.signExtend 32 (x✝.sshiftRight 3))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:64:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthsra_proof.lean:59:8: error: (kernel) declaration has metavariables 'hoist_ashr_ahead_of_sext_2_thm'
[bv] [0.013852] Normalizing goal
  [Meta.synthInstance] [0.001920] ✅️ Decidable
        ((if 8#32 ≥ ↑32 then none else some ((BitVec.signExtend 32 x✝).sshiftRight (8#32).toNat)) ⊑
          if 7#8 ≥ ↑8 then none else some (BitVec.signExtend 32 (x✝.sshiftRight (7#8).toNat)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if 8#32 ≥ ↑32 then none else some ((BitVec.signExtend 32 x✝).sshiftRight (8#32).toNat)) ⊑
            if 7#8 ≥ ↑8 then none else some (BitVec.signExtend 32 (x✝.sshiftRight (7#8).toNat))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ : ¬some ((BitVec.signExtend 32 x✝).sshiftRight 8) ⊑ some (BitVec.signExtend 32 (x✝.sshiftRight 7))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
