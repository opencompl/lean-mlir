⚠ [874/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [879/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [885/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [886/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthaddhinseltpoison_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthaddhinseltpoison_proof.lean:11:8: error: (kernel) declaration has metavariables 'shl_C1_add_A_C2_i32_thm'
[bv] [0.029860] Normalizing goal
  [Meta.synthInstance] [0.001433] ✅️ Decidable
        ((if BitVec.zeroExtend 32 x✝ + 5#32 ≥ ↑32 then none else some (6#32 <<< (BitVec.zeroExtend 32 x✝ + 5#32))) ⊑
          if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none else some (192#32 <<< BitVec.zeroExtend 32 x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ :
        ¬(if BitVec.zeroExtend 32 x✝ + 5#32 ≥ ↑32 then none else some (6#32 <<< (BitVec.zeroExtend 32 x✝ + 5#32))) ⊑
            if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none else some (192#32 <<< BitVec.zeroExtend 32 x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ :
        ¬(if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝ + 5#32) = true then none
            else some (6#32 <<< (BitVec.zeroExtend 32 x✝ + 5#32))) ⊑
            if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝) = true then none else some (192#32 <<< BitVec.zeroExtend 32 x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthaddhinseltpoison_proof.lean:27:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthaddhinseltpoison_proof.lean:21:8: error: (kernel) declaration has metavariables 'ashr_C1_add_A_C2_i32_thm'
[bv] [0.020993] Normalizing goal
  [Meta.synthInstance] [0.001403] ✅️ Decidable
        ((if (x✝ &&& 65535#32) + 5#32 ≥ ↑32 then none else some ((6#32).sshiftRight ((x✝ &&& 65535#32) + 5#32).toNat)) ⊑
          some 0#32)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ &&& 65535#32) + 5#32 ≥ ↑32 then none else some ((6#32).sshiftRight ((x✝ &&& 65535#32) + 5#32).toNat)) ⊑
            some 0#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if (!32#32 >ᵤ (x✝ &&& 65535#32) + 5#32) = true then none
            else some ((6#32).sshiftRight ((x✝ &&& 65535#32) + 5#32).toNat)) ⊑
            some 0#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthaddhinseltpoison_proof.lean:38:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gshifthaddhinseltpoison_proof.lean:31:8: error: (kernel) declaration has metavariables 'lshr_C1_add_A_C2_i32_thm'
[bv] [0.047989] Normalizing goal
  [Meta.synthInstance] [0.006246] ✅️ Decidable
        ((if (x✝ &&& 65535#32) + 5#32 ≥ ↑32 then none else some (6#32 <<< ((x✝ &&& 65535#32) + 5#32))) ⊑
          if x✝ &&& 65535#32 ≥ ↑32 then none else some (192#32 <<< (x✝ &&& 65535#32)))
    [Meta.synthInstance] [0.004956] ✅️ apply @instDecidableEqBitVec to DecidableEq (BitVec 32)
      [Meta.synthInstance.tryResolve] [0.004881] ✅️ Decidable (a = b) ≟ Decidable (a = b)
        [Meta.isDefEq] [0.004798] ✅️ Decidable (a = b) =?= Decidable (?m.10601 a b = ?m.10602 a b)
          [Meta.isDefEq] [0.004777] ✅️ a = b =?= ?m.10601 a b = ?m.10602 a b
            [Meta.isDefEq] [0.004658] ✅️ b =?= ?m.10602 a b
              [Meta.isDefEq.assign] [0.004654] ✅️ ?m.10602 a b := b
                [Meta.isDefEq.assign.checkTypes] [0.004642] ✅️ (?m.10602 : BitVec 32 →
                      BitVec 32 → BitVec 32) := (fun a b => b : BitVec 32 → BitVec 32 → BitVec 32)
                  [Meta.isDefEq] [0.004635] ✅️ BitVec 32 → BitVec 32 → BitVec 32 =?= BitVec 32 → BitVec 32 → BitVec 32
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ &&& 65535#32) + 5#32 ≥ ↑32 then none else some (6#32 <<< ((x✝ &&& 65535#32) + 5#32))) ⊑
            if x✝ &&& 65535#32 ≥ ↑32 then none else some (192#32 <<< (x✝ &&& 65535#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if (!32#32 >ᵤ (x✝ &&& 65535#32) + 5#32) = true then none else some (6#32 <<< ((x✝ &&& 65535#32) + 5#32))) ⊑
            if (!32#32 >ᵤ x✝ &&& 65535#32) = true then none else some (192#32 <<< (x✝ &&& 65535#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
