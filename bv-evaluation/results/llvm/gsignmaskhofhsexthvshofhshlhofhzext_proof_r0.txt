⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsignmaskhofhsexthvshofhshlhofhzext_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsignmaskhofhsexthvshofhshlhofhzext_proof.lean:11:8: error: (kernel) declaration has metavariables 't0_thm'
[bv] [0.015005] Normalizing goal
  [Meta.synthInstance] [0.001651] ✅️ Decidable
        ((if 16#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 16#32 &&& 2147483648#32)) ⊑
          some (BitVec.signExtend 32 x✝ &&& 2147483648#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ :
        ¬(if 16#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 16#32 &&& 2147483648#32)) ⊑
            some (BitVec.signExtend 32 x✝ &&& 2147483648#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ : ¬some (BitVec.zeroExtend 32 x✝ <<< 16 &&& 2147483648#32) ⊑ some (BitVec.signExtend 32 x✝ &&& 2147483648#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsignmaskhofhsexthvshofhshlhofhzext_proof.lean:29:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsignmaskhofhsexthvshofhshlhofhzext_proof.lean:22:8: error: (kernel) declaration has metavariables 't1_thm'
[bv] [0.014650] Normalizing goal
  [Meta.synthInstance] [0.001576] ✅️ Decidable
        ((if 24#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 24#32 &&& 2147483648#32)) ⊑
          some (BitVec.signExtend 32 x✝ &&& 2147483648#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if 24#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 24#32 &&& 2147483648#32)) ⊑
            some (BitVec.signExtend 32 x✝ &&& 2147483648#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ : ¬some (BitVec.zeroExtend 32 x✝ <<< 24 &&& 2147483648#32) ⊑ some (BitVec.signExtend 32 x✝ &&& 2147483648#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsignmaskhofhsexthvshofhshlhofhzext_proof.lean:39:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsignmaskhofhsexthvshofhshlhofhzext_proof.lean:33:8: error: (kernel) declaration has metavariables 'n2_thm'
[bv] [0.016175] Normalizing goal
  [Meta.synthInstance] [0.001817] ✅️ Decidable
        ((if 15#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 15#32 &&& 2147483648#32)) ⊑ some 0#32)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ : ¬(if 15#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 15#32 &&& 2147483648#32)) ⊑ some 0#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ : ¬some (BitVec.zeroExtend 32 x✝ <<< 15 &&& 2147483648#32) ⊑ some 0#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsignmaskhofhsexthvshofhshlhofhzext_proof.lean:50:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsignmaskhofhsexthvshofhshlhofhzext_proof.lean:43:8: error: (kernel) declaration has metavariables 'n4_thm'
[bv] [0.034002] Normalizing goal
  [Meta.synthInstance] [0.001973] ✅️ Decidable
        ((if 16#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 16#32 &&& 3221225472#32)) ⊑
          if True ∧ BitVec.zeroExtend 32 x✝ <<< 16#32 >>> 16#32 = BitVec.zeroExtend 32 x✝ then none
          else if 16#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 16#32 &&& 3221225472#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ :
        ¬(if 16#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 16#32 &&& 3221225472#32)) ⊑
            if True ∧ BitVec.zeroExtend 32 x✝ <<< 16#32 >>> 16#32 = BitVec.zeroExtend 32 x✝ then none
            else if 16#32 ≥ ↑32 then none else some (BitVec.zeroExtend 32 x✝ <<< 16#32 &&& 3221225472#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ :
        ¬some (BitVec.zeroExtend 32 x✝ <<< 16 &&& 3221225472#32) ⊑
            if (BitVec.zeroExtend 32 x✝ <<< 16 >>> 16 == BitVec.zeroExtend 32 x✝) = true then none
            else some (BitVec.zeroExtend 32 x✝ <<< 16 &&& 3221225472#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
