⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [850/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [883/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [886/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshifthsimplify_proof.lean:16:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshifthsimplify_proof.lean:16:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshifthsimplify_proof.lean:11:8: error: (kernel) declaration has metavariables 'test0_thm'
[bv] [0.023817] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 41
      x✝² x✝¹ x✝ : BitVec 41
      a✝ :
        ¬(if x✝¹ ≥ ↑41 then none else if x✝¹ ≥ ↑41 then none else some (x✝ <<< x✝¹ &&& x✝² <<< x✝¹)) ⊑
            if x✝¹ ≥ ↑41 then none else some ((x✝ &&& x✝²) <<< x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 41
      x✝² x✝¹ x✝ : BitVec 41
      a✝ :
        ¬(if (!41#41 >ᵤ x✝¹) = true then none
            else if (!41#41 >ᵤ x✝¹) = true then none else some (x✝ <<< x✝¹ &&& x✝² <<< x✝¹)) ⊑
            if (!41#41 >ᵤ x✝¹) = true then none else some ((x✝ &&& x✝²) <<< x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshifthsimplify_proof.lean:25:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshifthsimplify_proof.lean:25:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshifthsimplify_proof.lean:20:8: error: (kernel) declaration has metavariables 'test1_thm'
[bv] [0.023799] Normalizing goal
  [Meta.synthInstance] [0.001093] ✅️ Decidable
        ((if x✝¹ ≥ ↑57 then none else if x✝¹ ≥ ↑57 then none else some (x✝ >>> x✝¹ ||| x✝² >>> x✝¹)) ⊑
          if x✝¹ ≥ ↑57 then none else some ((x✝ ||| x✝²) >>> x✝¹))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 57
      x✝² x✝¹ x✝ : BitVec 57
      a✝ :
        ¬(if x✝¹ ≥ ↑57 then none else if x✝¹ ≥ ↑57 then none else some (x✝ >>> x✝¹ ||| x✝² >>> x✝¹)) ⊑
            if x✝¹ ≥ ↑57 then none else some ((x✝ ||| x✝²) >>> x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 57
      x✝² x✝¹ x✝ : BitVec 57
      a✝ :
        ¬(if (!57#57 >ᵤ x✝¹) = true then none
            else if (!57#57 >ᵤ x✝¹) = true then none else some (x✝ >>> x✝¹ ||| x✝² >>> x✝¹)) ⊑
            if (!57#57 >ᵤ x✝¹) = true then none else some ((x✝ ||| x✝²) >>> x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshifthsimplify_proof.lean:34:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshifthsimplify_proof.lean:34:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshifthsimplify_proof.lean:29:8: error: (kernel) declaration has metavariables 'test2_thm'
[bv] [0.033530] Normalizing goal
  [Meta.synthInstance] [0.001601] ✅️ Decidable
        ((if x✝¹ ≥ ↑49 then none
          else if x✝¹ ≥ ↑49 then none else some (x✝.sshiftRight x✝¹.toNat ^^^ x✝².sshiftRight x✝¹.toNat)) ⊑
          if x✝¹ ≥ ↑49 then none else some ((x✝ ^^^ x✝²).sshiftRight x✝¹.toNat))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 49
      x✝² x✝¹ x✝ : BitVec 49
      a✝ :
        ¬(if x✝¹ ≥ ↑49 then none
            else if x✝¹ ≥ ↑49 then none else some (x✝.sshiftRight x✝¹.toNat ^^^ x✝².sshiftRight x✝¹.toNat)) ⊑
            if x✝¹ ≥ ↑49 then none else some ((x✝ ^^^ x✝²).sshiftRight x✝¹.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 49
      x✝² x✝¹ x✝ : BitVec 49
      a✝ :
        ¬(if (!49#49 >ᵤ x✝¹) = true then none
            else
              if (!49#49 >ᵤ x✝¹) = true then none else some (x✝.sshiftRight x✝¹.toNat ^^^ x✝².sshiftRight x✝¹.toNat)) ⊑
            if (!49#49 >ᵤ x✝¹) = true then none else some ((x✝ ^^^ x✝²).sshiftRight x✝¹.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
