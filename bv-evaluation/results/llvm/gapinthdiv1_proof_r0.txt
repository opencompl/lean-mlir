⚠ [874/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [879/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [885/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [886/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv1_proof.lean:16:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv1_proof.lean:11:8: error: (kernel) declaration has metavariables 'test1_thm'
[bv] [0.028938] Normalizing goal
  [Meta.synthInstance] [0.001213] ✅️ Decidable
        ((if 4096#33 = 0 then none else some (x✝ / 4096#33)) ⊑ if 12#33 ≥ ↑33 then none else some (x✝ >>> 12#33))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 33
      x✝ : BitVec 33
      a✝ : ¬(if 4096#33 = 0 then none else some (x✝ / 4096#33)) ⊑ if 12#33 ≥ ↑33 then none else some (x✝ >>> 12#33)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 33
      x✝ : BitVec 33
      a✝ : ¬some (x✝ / 4096#33) ⊑ some (x✝ >>> 12)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv1_proof.lean:25:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv1_proof.lean:20:8: error: (kernel) declaration has metavariables 'test2_thm'
[bv] [0.013260] Normalizing goal
  [Meta.synthInstance] [0.001340] ✅️ Decidable
        ((if 17#49 ≥ ↑49 then none else if 4096#49 <<< 17#49 = 0 then none else some (x✝ / 4096#49 <<< 17#49)) ⊑
          if 29#49 ≥ ↑49 then none else some (x✝ >>> 29#49))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 49
      x✝ : BitVec 49
      a✝ :
        ¬(if 17#49 ≥ ↑49 then none else if 4096#49 <<< 17#49 = 0 then none else some (x✝ / 4096#49 <<< 17#49)) ⊑
            if 29#49 ≥ ↑49 then none else some (x✝ >>> 29#49)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 49
      x✝ : BitVec 49
      a✝ : ¬some (x✝ / 536870912#49) ⊑ some (x✝ >>> 29)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv1_proof.lean:36:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthdiv1_proof.lean:29:8: error: (kernel) declaration has metavariables 'test3_thm'
[bv] [0.101583] Normalizing goal
  [Meta.synthInstance] [0.003015] ✅️ Decidable
        ((Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 1024#59
            | some { toFin := ⟨0, ⋯⟩ } => some 4096#59)
            fun y' => if y' = 0 then none else some (x✝ / y')) ⊑
          Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 10#59
            | some { toFin := ⟨0, ⋯⟩ } => some 12#59)
            fun y' => if y' ≥ ↑59 then none else some (x✝ >>> y'))
    [Meta.check] [0.002012] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 1024#59
            | some { toFin := ⟨0, ⋯⟩ } => some 4096#59)
            fun y' => if y' = 0 then none else some (x✝ / y'))
          (Option.bind
            (match some x✝¹ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 10#59
            | some { toFin := ⟨0, ⋯⟩ } => some 12#59)
            fun y' => if y' ≥ ↑59 then none else some (x✝ >>> y'))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 1
      e_1 : LLVM.IntW 59
      x✝¹ : BitVec 1
      x✝ : BitVec 59
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 1024#59
              | some { toFin := ⟨0, ⋯⟩ } => some 4096#59)
              fun y' => if y' = 0 then none else some (x✝ / y')) ⊑
            Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 10#59
              | some { toFin := ⟨0, ⋯⟩ } => some 12#59)
              fun y' => if y' ≥ ↑59 then none else some (x✝ >>> y')
      ⊢ False
  [Meta.isDefEq] [0.001093] ❌️ match none with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 1024#59
      | some { toFin := ⟨0, ⋯⟩ } => some 4096#59
  [Meta.isDefEq] [0.001223] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 1024#59
      | some { toFin := ⟨0, ⋯⟩ } => some 4096#59
  [Meta.isDefEq] [0.001187] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 1024#59
      | some { toFin := ⟨0, ⋯⟩ } => some 4096#59
  [Meta.isDefEq] [0.002262] ✅️ ?h₁ =?= Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
        (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (59#59) a)
          (Eq.trans
            (Eq.trans (congrArg Not (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult a 59#59))
              (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq (59#59 >ᵤ a) true))
            (congrArg (fun x => (!x) = true) (beq_true (59#59 >ᵤ a)))))
    [Meta.isDefEq.assign] [0.002258] ✅️ ?h₁ := Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
          (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (59#59) a)
            (Eq.trans
              (Eq.trans (congrArg Not (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult a 59#59))
                (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq (59#59 >ᵤ a) true))
              (congrArg (fun x => (!x) = true) (beq_true (59#59 >ᵤ a)))))
      [Meta.isDefEq.assign.checkTypes] [0.002242] ✅️ (?h₁ : (a ≥ ↑59) =
            ((!59#59 >ᵤ a) =
              true)) := (Eq.trans Std.Tactic.BVDecide.Normalize.BitVec._auxLemma.2
            (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.le_ult (59#59) a)
              (Eq.trans
                (Eq.trans (congrArg Not (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult a 59#59))
                  (Std.Tactic.BVDecide.Normalize.Bool.ne_to_beq (59#59 >ᵤ a) true))
                (congrArg (fun x => (!x) = true) (beq_true (59#59 >ᵤ a))))) : (a ≥ 59#59) = ((!59#59 >ᵤ a) = true))
        [Meta.isDefEq] [0.002238] ✅️ (a ≥ ↑59) = ((!59#59 >ᵤ a) = true) =?= (a ≥ 59#59) = ((!59#59 >ᵤ a) = true)
          [Meta.isDefEq] [0.002207] ✅️ a ≥ ↑59 =?= a ≥ 59#59
            [Meta.isDefEq.delta] [0.002189] ✅️ a ≥ ↑59 =?= a ≥ 59#59
              [Meta.isDefEq] [0.002141] ✅️ ↑59 =?= 59#59
                [Meta.isDefEq] [0.002114] ✅️ NatCast.natCast 59 =?= 59#59
                  [Meta.whnf] [0.002073] Non-easy whnf: BitVec.natCastInst
                    [Meta.whnf] [0.002057] Non-easy whnf: { natCast := BitVec.ofNat 59 }
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 1
      e_1 : LLVM.IntW 59
      x✝¹ : BitVec 1
      x✝ : BitVec 59
      a✝ :
        ¬(Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 1024#59
              | some { toFin := ⟨0, ⋯⟩ } => some 4096#59)
              fun a => if (a == 0#59) = true then none else some (x✝ / a)) ⊑
            Option.bind
              (match some x✝¹ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 10#59
              | some { toFin := ⟨0, ⋯⟩ } => some 12#59)
              fun a => if (!59#59 >ᵤ a) = true then none else some (x✝ >>> a)
      ⊢ False
  [Meta.isDefEq] [0.001041] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 10#59
      | some { toFin := ⟨0, ⋯⟩ } => some 12#59
  [Meta.isDefEq] [0.001004] ❌️ match some { toFin := ⟨0, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 10#59
      | some { toFin := ⟨0, ⋯⟩ } => some 12#59
  [Meta.isDefEq] [0.001024] ❌️ match some { toFin := ⟨1, ⋯⟩ } with
      | none => ?h_1 ()
      | some { toFin := ⟨1, ⋯⟩ } => ?h_2 ()
      | some { toFin := ⟨0, ⋯⟩ } => ?h_3 () =?= match some x✝¹ with
      | none => none
      | some { toFin := ⟨1, ⋯⟩ } => some 10#59
      | some { toFin := ⟨0, ⋯⟩ } => some 12#59
  [Meta.Tactic.bv] Pipeline reached a fixpoint
