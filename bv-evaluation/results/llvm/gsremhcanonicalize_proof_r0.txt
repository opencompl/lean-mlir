⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [884/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsremhcanonicalize_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsremhcanonicalize_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsremhcanonicalize_proof.lean:11:8: error: (kernel) declaration has metavariables 'test_srem_canonicalize_op0_thm'
[bv] [0.157479] Normalizing goal
  [Meta.synthInstance] [0.001595] ✅️ Decidable
        ((if
              True ∧
                (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) x✝).msb ≠
                  (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) x✝).getMsbD 1 then
            none
          else
            Option.map (fun div => 0#32 - x✝ - div * x✝¹)
              (if (x✝¹ == 0 || 32 != 1 && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else some ((0#32 - x✝).sdiv x✝¹))) ⊑
          (Option.map (fun div => x✝ - div * x✝¹)
                (if (x✝¹ == 0 || 32 != 1 && x✝ == BitVec.intMin 32 && x✝¹ == -1) = true then none
                else some (x✝.sdiv x✝¹))).bind
            fun y' =>
            if
                True ∧
                  (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) y').msb ≠
                    (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) y').getMsbD 1 then
              none
            else some (0#32 - y'))
    [Meta.check] [0.001015] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if
              True ∧
                (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) x✝).msb ≠
                  (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) x✝).getMsbD 1 then
            none
          else
            Option.map (fun div => 0#32 - x✝ - div * x✝¹)
              (if (x✝¹ == 0 || 32 != 1 && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else some ((0#32 - x✝).sdiv x✝¹)))
          ((Option.map (fun div => x✝ - div * x✝¹)
                (if (x✝¹ == 0 || 32 != 1 && x✝ == BitVec.intMin 32 && x✝¹ == -1) = true then none
                else some (x✝.sdiv x✝¹))).bind
            fun y' =>
            if
                True ∧
                  (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) y').msb ≠
                    (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) y').getMsbD 1 then
              none
            else some (0#32 - y'))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if
                True ∧
                  (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) x✝).msb ≠
                    (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) x✝).getMsbD 1 then
              none
            else
              Option.map (fun div => 0#32 - x✝ - div * x✝¹)
                (if (x✝¹ == 0 || 32 != 1 && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == -1) = true then none
                else some ((0#32 - x✝).sdiv x✝¹))) ⊑
            (Option.map (fun div => x✝ - div * x✝¹)
                  (if (x✝¹ == 0 || 32 != 1 && x✝ == BitVec.intMin 32 && x✝¹ == -1) = true then none
                  else some (x✝.sdiv x✝¹))).bind
              fun y' =>
              if
                  True ∧
                    (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) y').msb ≠
                      (BitVec.signExtend (32 + 1) 0#32 - BitVec.signExtend (32 + 1) y').getMsbD 1 then
                none
              else some (0#32 - y')
      ⊢ False
  [Meta.isDefEq] [0.001164] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝¹ == 0#32 || x && x✝¹ == 4294967295#32)
            (Eq.trans
              (congrArg (fun x => true && x == BitVec.intMin 32)
                (Eq.trans (BitVec.sub_toAdd (0#32) x✝)
                  (Eq.trans (congrArg (HAdd.hAdd 0#32) (BitVec.neg_eq_not_add x✝)) (BitVec.zero_add (~~~x✝ + 1#32)))))
              (Bool.true_and (~~~x✝ + 1#32 == BitVec.intMin 32))))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#32)
            (~~~x✝ + 1#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001162] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝¹ == 0#32 || x && x✝¹ == 4294967295#32)
              (Eq.trans
                (congrArg (fun x => true && x == BitVec.intMin 32)
                  (Eq.trans (BitVec.sub_toAdd (0#32) x✝)
                    (Eq.trans (congrArg (HAdd.hAdd 0#32) (BitVec.neg_eq_not_add x✝)) (BitVec.zero_add (~~~x✝ + 1#32)))))
                (Bool.true_and (~~~x✝ + 1#32 == BitVec.intMin 32))))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#32)
              (~~~x✝ + 1#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001144] ✅️ (?h₁ : ((x✝¹ == 0 ||
                32 != 1 && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == -1) =
              true) =
            ((!(!x✝¹ == 0#32 && !(~~~x✝ + 1#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝¹ == 0#32 || x && x✝¹ == 4294967295#32)
                (Eq.trans
                  (congrArg (fun x => true && x == BitVec.intMin 32)
                    (Eq.trans (BitVec.sub_toAdd (0#32) x✝)
                      (Eq.trans (congrArg (HAdd.hAdd 0#32) (BitVec.neg_eq_not_add x✝))
                        (BitVec.zero_add (~~~x✝ + 1#32)))))
                  (Bool.true_and (~~~x✝ + 1#32 == BitVec.intMin 32))))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#32)
                (~~~x✝ + 1#32 == BitVec.intMin 32 &&
                  x✝¹ ==
                    4294967295#32))) : ((x✝¹ == 0#32 || true && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == 4294967295#32) =
              true) =
            ((!(!x✝¹ == 0#32 && !(~~~x✝ + 1#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001141] ✅️ ((x✝¹ == 0 || 32 != 1 && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == -1) = true) =
              ((!(!x✝¹ == 0#32 && !(~~~x✝ + 1#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) =
                true) =?= ((x✝¹ == 0#32 || true && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == 4294967295#32) = true) =
              ((!(!x✝¹ == 0#32 && !(~~~x✝ + 1#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001123] ✅️ (x✝¹ == 0 || 32 != 1 && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == -1) =
                true =?= (x✝¹ == 0#32 || true && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == 4294967295#32) = true
            [Meta.isDefEq] [0.001109] ✅️ x✝¹ == 0 ||
                  32 != 1 && 0#32 - x✝ == BitVec.intMin 32 &&
                    x✝¹ == -1 =?= x✝¹ == 0#32 || true && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == 4294967295#32
              [Meta.isDefEq.delta] [0.001095] ✅️ x✝¹ == 0 ||
                    32 != 1 && 0#32 - x✝ == BitVec.intMin 32 &&
                      x✝¹ == -1 =?= x✝¹ == 0#32 || true && 0#32 - x✝ == BitVec.intMin 32 && x✝¹ == 4294967295#32
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if
                (!(~~~BitVec.signExtend 33 x✝ + 1#33).getLsbD 32 == (~~~BitVec.signExtend 33 x✝ + 1#33).getMsbD 1) =
                  true then
              none
            else
              Option.map (fun div => ~~~x✝ + 1#32 + (~~~(div * x✝¹) + 1#32))
                (if (!(!x✝¹ == 0#32 && !(~~~x✝ + 1#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
                else
                  some
                    (if (~~~x✝ + 1#32).getLsbD 31 = true then
                      if x✝¹.getLsbD 31 = true then x✝ / (~~~x✝¹ + 1#32) else ~~~(x✝ / x✝¹) + 1#32
                    else
                      if x✝¹.getLsbD 31 = true then ~~~((~~~x✝ + 1#32) / (~~~x✝¹ + 1#32)) + 1#32
                      else (~~~x✝ + 1#32) / x✝¹))) ⊑
            (Option.map (fun div => x✝ + (~~~(div * x✝¹) + 1#32))
                  (if (!(!x✝¹ == 0#32 && !(x✝ == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
                  else
                    some
                      (if x✝.getLsbD 31 = true then
                        if x✝¹.getLsbD 31 = true then (~~~x✝ + 1#32) / (~~~x✝¹ + 1#32)
                        else ~~~((~~~x✝ + 1#32) / x✝¹) + 1#32
                      else if x✝¹.getLsbD 31 = true then ~~~(x✝ / (~~~x✝¹ + 1#32)) + 1#32 else x✝ / x✝¹))).bind
              fun a =>
              if
                  (!(~~~BitVec.signExtend 33 a + 1#33).getLsbD 32 == (~~~BitVec.signExtend 33 a + 1#33).getMsbD 1) =
                    true then
                none
              else some (~~~a + 1#32)
      ⊢ False
  [Meta.appBuilder] [0.001920] ✅️ f: Subsingleton.elim, xs: [h✝, h]
    [Meta.synthInstance] [0.001871] ✅️ Subsingleton (Decidable c✝)
      [Meta.synthInstance] [0.001811] ✅️ apply instSubsingletonDecidable to Subsingleton (Decidable c✝)
        [Meta.synthInstance.tryResolve] [0.001787] ✅️ Subsingleton (Decidable c✝) ≟ Subsingleton (Decidable c✝)
          [Meta.isDefEq] [0.001756] ✅️ Subsingleton (Decidable c✝) =?= Subsingleton (Decidable ?m.12769)
            [Meta.isDefEq] [0.001734] ✅️ Decidable c✝ =?= Decidable ?m.12769
              [Meta.isDefEq] [0.001692] ✅️ c✝ =?= ?m.12769
                [Meta.isDefEq.assign] [0.001686] ✅️ ?m.12769 := c✝
  [Meta.Tactic.bv] Pipeline reached a fixpoint
