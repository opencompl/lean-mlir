⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [858/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [884/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2008h01h21hMulTrunc_proof.lean:18:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2008h01h21hMulTrunc_proof.lean:11:8: error: (kernel) declaration has metavariables 'test1_thm'
[bv] [0.027628] Normalizing goal
  [Meta.synthInstance] [0.004973] ✅️ Decidable
        ((if 8#32 ≥ ↑32 then none
          else some (BitVec.truncate 16 (BitVec.zeroExtend 32 x✝ >>> 8#32 ||| BitVec.zeroExtend 32 x✝ * 5#32))) ⊑
          if 8#16 ≥ ↑16 then none else some (x✝ >>> 8#16 ||| x✝ * 5#16))
    [Meta.synthInstance] [0.003644] ✅️ apply @BitVec.Refinement.instDecidableRelOptionOfDecidableEq to Decidable
          ((if 8#32 ≥ ↑32 then none
            else some (BitVec.truncate 16 (BitVec.zeroExtend 32 x✝ >>> 8#32 ||| BitVec.zeroExtend 32 x✝ * 5#32))) ⊑
            if 8#16 ≥ ↑16 then none else some (x✝ >>> 8#16 ||| x✝ * 5#16))
      [Meta.synthInstance.tryResolve] [0.003522] ✅️ Decidable
            ((if 8#32 ≥ ↑32 then none
              else some (BitVec.truncate 16 (BitVec.zeroExtend 32 x✝ >>> 8#32 ||| BitVec.zeroExtend 32 x✝ * 5#32))) ⊑
              if 8#16 ≥ ↑16 then none
              else
                some
                  (x✝ >>> 8#16 |||
                    x✝ *
                      5#16)) ≟ Decidable
            ((if 8#32 ≥ ↑32 then none
              else some (BitVec.truncate 16 (BitVec.zeroExtend 32 x✝ >>> 8#32 ||| BitVec.zeroExtend 32 x✝ * 5#32))) ⊑
              if 8#16 ≥ ↑16 then none else some (x✝ >>> 8#16 ||| x✝ * 5#16))
        [Meta.isDefEq] [0.003462] ✅️ Decidable
              ((if 8#32 ≥ ↑32 then none
                else some (BitVec.truncate 16 (BitVec.zeroExtend 32 x✝ >>> 8#32 ||| BitVec.zeroExtend 32 x✝ * 5#32))) ⊑
                if 8#16 ≥ ↑16 then none else some (x✝ >>> 8#16 ||| x✝ * 5#16)) =?= Decidable (?m.5268 ⊑ ?m.5269)
          [Meta.isDefEq] [0.003442] ✅️ (if 8#32 ≥ ↑32 then none
                else some (BitVec.truncate 16 (BitVec.zeroExtend 32 x✝ >>> 8#32 ||| BitVec.zeroExtend 32 x✝ * 5#32))) ⊑
                if 8#16 ≥ ↑16 then none else some (x✝ >>> 8#16 ||| x✝ * 5#16) =?= ?m.5268 ⊑ ?m.5269
            [Meta.isDefEq] [0.003335] ✅️ BitVec 16 =?= ?m.5266
              [Meta.isDefEq.assign] [0.003331] ✅️ ?m.5266 := BitVec 16
                [Meta.isDefEq.assign.checkTypes] [0.003326] ✅️ (?m.5266 : Type ?u.5265) := (BitVec 16 : Type)
                  [Meta.isDefEq] [0.003322] ✅️ Type ?u.5265 =?= Type
                    [Meta.isLevelDefEq] [0.003311] ✅️ ?u.5265 =?= 0
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ :
        ¬(if 8#32 ≥ ↑32 then none
            else some (BitVec.truncate 16 (BitVec.zeroExtend 32 x✝ >>> 8#32 ||| BitVec.zeroExtend 32 x✝ * 5#32))) ⊑
            if 8#16 ≥ ↑16 then none else some (x✝ >>> 8#16 ||| x✝ * 5#16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 16
      x✝ : BitVec 16
      a✝ :
        ¬some (BitVec.zeroExtend 16 (BitVec.zeroExtend 32 x✝ >>> 8 ||| BitVec.zeroExtend 32 x✝ * 5#32)) ⊑
            some (x✝ >>> 8 ||| x✝ * 5#16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
