⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivh1_proof.lean:17:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gsdivh1_proof.lean:11:8: error: (kernel) declaration has metavariables 'c_thm'
[bv] [0.014719] Normalizing goal
  [Meta.synthInstance] [0.001187] ✅️ Decidable
        ((if
              (BitVec.ofInt 32 (-3) == 0 ||
                  32 != 1 && 0#32 - BitVec.ofInt 32 (-2147483648) == BitVec.intMin 32 && BitVec.ofInt 32 (-3) == -1) =
                true then
            none
          else some ((0#32 - BitVec.ofInt 32 (-2147483648)).sdiv (BitVec.ofInt 32 (-3)))) ⊑
          some 715827882#32)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      a✝ :
        ¬(if
                (BitVec.ofInt 32 (-3) == 0 ||
                    32 != 1 && 0#32 - BitVec.ofInt 32 (-2147483648) == BitVec.intMin 32 && BitVec.ofInt 32 (-3) == -1) =
                  true then
              none
            else some ((0#32 - BitVec.ofInt 32 (-2147483648)).sdiv (BitVec.ofInt 32 (-3)))) ⊑
            some 715827882#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      a✝ : ¬some 715827882#32 ⊑ some 715827882#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
