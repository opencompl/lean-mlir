⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [883/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gtrunchshifthtrunc_proof.lean:16:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gtrunchshifthtrunc_proof.lean:11:8: error: (kernel) declaration has metavariables 'trunc_lshr_trunc_thm'
[bv] [0.014884] Normalizing goal
  [Meta.synthInstance] [0.001417] ✅️ Decidable
        ((if 8#32 ≥ ↑32 then none else some (BitVec.truncate 8 (BitVec.truncate 32 x✝ >>> 8#32))) ⊑
          if 8#64 ≥ ↑64 then none else some (BitVec.truncate 8 (x✝ >>> 8#64)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ :
        ¬(if 8#32 ≥ ↑32 then none else some (BitVec.truncate 8 (BitVec.truncate 32 x✝ >>> 8#32))) ⊑
            if 8#64 ≥ ↑64 then none else some (BitVec.truncate 8 (x✝ >>> 8#64))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ : ¬some (BitVec.zeroExtend 8 (BitVec.zeroExtend 32 x✝ >>> 8)) ⊑ some (BitVec.zeroExtend 8 (x✝ >>> 8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gtrunchshifthtrunc_proof.lean:25:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gtrunchshifthtrunc_proof.lean:20:8: error: (kernel) declaration has metavariables 'trunc_ashr_trunc_thm'
[bv] [0.018533] Normalizing goal
  [Meta.synthInstance] [0.001816] ✅️ Decidable
        ((if 8#32 ≥ ↑32 then none else some (BitVec.truncate 8 ((BitVec.truncate 32 x✝).sshiftRight (8#32).toNat))) ⊑
          if 8#64 ≥ ↑64 then none else some (BitVec.truncate 8 (x✝ >>> 8#64)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ :
        ¬(if 8#32 ≥ ↑32 then none else some (BitVec.truncate 8 ((BitVec.truncate 32 x✝).sshiftRight (8#32).toNat))) ⊑
            if 8#64 ≥ ↑64 then none else some (BitVec.truncate 8 (x✝ >>> 8#64))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ : ¬some (BitVec.zeroExtend 8 ((BitVec.zeroExtend 32 x✝).sshiftRight 8)) ⊑ some (BitVec.zeroExtend 8 (x✝ >>> 8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gtrunchshifthtrunc_proof.lean:34:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gtrunchshifthtrunc_proof.lean:29:8: error: (kernel) declaration has metavariables 'trunc_ashr_trunc_exact_thm'
[bv] [0.017895] Normalizing goal
  [Meta.synthInstance] [0.001446] ✅️ Decidable
        ((if 8#32 ≥ ↑32 then none else some (BitVec.truncate 8 ((BitVec.truncate 32 x✝).sshiftRight (8#32).toNat))) ⊑
          if 8#64 ≥ ↑64 then none else some (BitVec.truncate 8 (x✝ >>> 8#64)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ :
        ¬(if 8#32 ≥ ↑32 then none else some (BitVec.truncate 8 ((BitVec.truncate 32 x✝).sshiftRight (8#32).toNat))) ⊑
            if 8#64 ≥ ↑64 then none else some (BitVec.truncate 8 (x✝ >>> 8#64))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 64
      x✝ : BitVec 64
      a✝ : ¬some (BitVec.zeroExtend 8 ((BitVec.zeroExtend 32 x✝).sshiftRight 8)) ⊑ some (BitVec.zeroExtend 8 (x✝ >>> 8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
