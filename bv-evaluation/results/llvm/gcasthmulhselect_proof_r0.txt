⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gcasthmulhselect_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:7:109: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.4a73uSSX:4:94: expected terms of same sort at indices 0 and 1 as argument to '='
info: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:7:109: [bv] [0.010133] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ : ¬BitVec.setWidth 32 (BitVec.setWidth 8 x_1 * BitVec.setWidth 8 x) = x_1 * x &&& 255#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 32
      a✝ : (!BitVec.zeroExtend 32 (BitVec.zeroExtend 8 x_1 * BitVec.zeroExtend 8 x) == x_1 * x &&& 255#32) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x_1
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((zext 32 ((zext 8 var0) * (zext 8 var1))) == ((var0 * var1) && 0x000000ff#32))
[bv] [0.060553] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (declare-const x_1 (_ BitVec 32))
      (assert (not (= ((_ zero_extend 24) (bvmul ((_ zero_extend 0) x_0) ((_ zero_extend 0) x_1))) (bvand (bvmul x_0 x_1) #b00000000000000000000000011111111))))
      (check-sat)
      (exit)
      
  [bv] [0.057841] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:13:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:19:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:21:41: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:21:41: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun a => some (BitVec.setWidth 32 a)) ⊑ sorry.bind fun a => some (a &&& 255#32)
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun a => some (BitVec.zeroExtend 32 a)) ⊑ sorry.bind fun a => some (a &&& 255#32)
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:22:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:22:87: 'select1_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:36:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:36:87: 'select1_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:51:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:51:87: 'select1_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:66:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:66:87: 'select1_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:81:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:81:87: 'select1_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:96:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:96:87: 'select1_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:110:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:110:87: 'select1_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:129:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:134:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:135:45: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:135:45: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun a => some (BitVec.setWidth 8 a)) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬(sorry.bind fun a => some (BitVec.zeroExtend 8 a)) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:136:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:136:88: 'select2_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:148:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:148:88: 'select2_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:161:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:161:88: 'select2_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:174:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:174:88: 'select2_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:187:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:187:88: 'select2_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:200:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:200:88: 'select2_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:212:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gcasthmulhselect_proof.lean:212:88: 'select2_thm' has already been declared
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gcasthmulhselect_proof
