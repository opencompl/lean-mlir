⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
Bitwuzla proved the goal after 71.539920ms, solving context: 2.000000ms
LeanSAT proved the goal after 77.116330ms: rewriting 11.485280ms, bitblasting 0.000000ms, SAT solving 61.987060ms, LRAT trimming 0.000000ms, LRAT checking 1.859400ms
Bitwuzla proved the goal after 73.601400ms, solving context: 0.000000ms
LeanSAT proved the goal after 89.797800ms: rewriting 24.543980ms, bitblasting 0.000000ms, SAT solving 58.839200ms, LRAT trimming 0.000000ms, LRAT checking 2.522100ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhorhand_proof.lean:38:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhorhand_proof.lean:32:8: error: (kernel) declaration has metavariables 'test3_thm'
[bv] [0.015245] Normalizing goal
  [Meta.synthInstance] [0.001565] ✅️ Decidable
        ((if 1#32 ≥ ↑32 then none else some ((x✝ ||| x✝¹ <<< 1#32) &&& 1#32)) ⊑ some (x✝ &&& 1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ : ¬(if 1#32 ≥ ↑32 then none else some ((x✝ ||| x✝¹ <<< 1#32) &&& 1#32)) ⊑ some (x✝ &&& 1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ : ¬some ((x✝ ||| x✝¹ <<< 1) &&& 1#32) ⊑ some (x✝ &&& 1#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhorhand_proof.lean:48:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhorhand_proof.lean:42:8: error: (kernel) declaration has metavariables 'test4_thm'
[bv] [0.010369] Normalizing goal
  [Meta.synthInstance] [0.001062] ✅️ Decidable
        ((if 31#32 ≥ ↑32 then none else some ((x✝ ||| x✝¹ >>> 31#32) &&& 2#32)) ⊑ some (x✝ &&& 2#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ : ¬(if 31#32 ≥ ↑32 then none else some ((x✝ ||| x✝¹ >>> 31#32) &&& 2#32)) ⊑ some (x✝ &&& 2#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ : ¬some ((x✝ ||| x✝¹ >>> 31) &&& 2#32) ⊑ some (x✝ &&& 2#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 73.935780ms, solving context: 1.000000ms
LeanSAT proved the goal after 83.374200ms: rewriting 11.444180ms, bitblasting 0.000000ms, SAT solving 55.317660ms, LRAT trimming 2.006230ms, LRAT checking 7.763080ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhorhand_proof.lean:66:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhorhand_proof.lean:61:8: error: (kernel) declaration has metavariables 'or_test2_thm'
[bv] [0.007913] Normalizing goal
  [Meta.synthInstance] [0.001064] ✅️ Decidable ((if 7#8 ≥ ↑8 then none else some (x✝ <<< 7#8 ||| 128#8)) ⊑ some 128#8)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ : ¬(if 7#8 ≥ ↑8 then none else some (x✝ <<< 7#8 ||| 128#8)) ⊑ some 128#8
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ : ¬some (x✝ <<< 7 ||| 128#8) ⊑ some 128#8
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
