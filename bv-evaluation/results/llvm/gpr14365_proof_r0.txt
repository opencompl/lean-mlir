⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gpr14365_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gpr14365_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gpr14365_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gpr14365_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gpr14365_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gpr14365_proof.lean:15:37: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gpr14365_proof.lean:15:37: [bv] [0.032289] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (x.msb && (1431655765#32).msb) = (4294967295#32).msb ∧
                      ¬((x &&& 1431655765#32 ^^^ 4294967295#32) + 1#32).msb =
                          (x.msb && (1431655765#32).msb ^^ (4294967295#32).msb) then
                  none
                else some ((x &&& 1431655765#32 ^^^ 4294967295#32) + 1#32)).bind
              fun y' => if x.msb = y'.msb ∧ ¬(x + y').msb = x.msb then none else some (x + y')) ⊑
            some (x &&& 2863311530#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((some ((x &&& 1431655765#32 ^^^ 4294967295#32) + 1#32)).bind fun a =>
              if (x.getLsbD 31 == a.getLsbD 31 && !(x + a).getLsbD 31 == x.getLsbD 31) = true then none
              else some (x + a)) ⊑
            some (x &&& 2863311530#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gpr14365_proof.lean:29:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gpr14365_proof.lean:29:20: [bv] [0.049486] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (x.msb && (1431655765#32).msb) = (4294967295#32).msb ∧
                      ¬((x.sshiftRight 1 &&& 1431655765#32 ^^^ 4294967295#32) + 1#32).msb =
                          (x.msb && (1431655765#32).msb ^^ (4294967295#32).msb) then
                  none
                else some ((x.sshiftRight 1 &&& 1431655765#32 ^^^ 4294967295#32) + 1#32)).bind
              fun y' => if x.msb = y'.msb ∧ ¬(x + y').msb = x.msb then none else some (x + y')) ⊑
            if
                (BitVec.signExtend 33 x - BitVec.signExtend 33 (x >>> 1 &&& 1431655765#32)).msb =
                  (BitVec.signExtend 33 x - BitVec.signExtend 33 (x >>> 1 &&& 1431655765#32)).getMsbD 1 then
              some (x - (x >>> 1 &&& 1431655765#32))
            else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((some ((x.sshiftRight 1 &&& 1431655765#32 ^^^ 4294967295#32) + 1#32)).bind fun a =>
              if (x.getLsbD 31 == a.getLsbD 31 && !(x + a).getLsbD 31 == x.getLsbD 31) = true then none
              else some (x + a)) ⊑
            if
                ((BitVec.signExtend 33 x + (~~~BitVec.signExtend 33 (x >>> 1 &&& 1431655765#32) + 1#33)).getLsbD 32 ==
                    (BitVec.signExtend 33 x + (~~~BitVec.signExtend 33 (x >>> 1 &&& 1431655765#32) + 1#33)).getMsbD 1) =
                  true then
              some (x + (~~~(x >>> 1 &&& 1431655765#32) + 1#32))
            else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gpr14365_proof
