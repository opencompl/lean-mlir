⚠ [684/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:16:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:11:8: error: (kernel) declaration has metavariables 'test6_thm'
[bv] [0.010258] Normalizing goal
  [Meta.synthInstance] [0.001294] ✅️ Decidable
        ((if 1#55 ≥ ↑55 then none else some (x✝ <<< 1#55 * 3#55)) ⊑ some (x✝ * 6#55))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 55
      x✝ : BitVec 55
      a✝ : ¬(if 1#55 ≥ ↑55 then none else some (x✝ <<< 1#55 * 3#55)) ⊑ some (x✝ * 6#55)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 55
      x✝ : BitVec 55
      a✝ : ¬some (x✝ <<< 1 * 3#55) ⊑ some (x✝ * 6#55)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:25:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:20:8: error: (kernel) declaration has metavariables 'test6a_thm'
[bv] [0.010012] Normalizing goal
  [Meta.synthInstance] [0.001537] ✅️ Decidable
        ((if 1#55 ≥ ↑55 then none else some ((x✝ * 3#55) <<< 1#55)) ⊑ some (x✝ * 6#55))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 55
      x✝ : BitVec 55
      a✝ : ¬(if 1#55 ≥ ↑55 then none else some ((x✝ * 3#55) <<< 1#55)) ⊑ some (x✝ * 6#55)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 55
      x✝ : BitVec 55
      a✝ : ¬some ((x✝ * 3#55) <<< 1) ⊑ some (x✝ * 6#55)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:34:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:29:8: error: (kernel) declaration has metavariables 'test7_thm'
[bv] [0.017836] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if BitVec.zeroExtend 29 x✝ ≥ ↑29 then none else some ((-1#29).sshiftRight (BitVec.zeroExtend 29 x✝).toNat)) ⊑
            some (-1#29)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!29#29 >ᵤ BitVec.zeroExtend 29 x✝) = true then none
            else some ((536870911#29).sshiftRight (BitVec.zeroExtend 29 x✝).toNat)) ⊑
            some 536870911#29
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:43:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:38:8: error: (kernel) declaration has metavariables 'test8_thm'
[bv] [0.010496] Normalizing goal
  [Meta.synthInstance] [0.001449] ✅️ Decidable
        ((if 4#7 ≥ ↑7 then none else if 3#7 ≥ ↑7 then none else some (x✝ <<< 4#7 <<< 3#7)) ⊑ some 0#7)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 7
      x✝ : BitVec 7
      a✝ : ¬(if 4#7 ≥ ↑7 then none else if 3#7 ≥ ↑7 then none else some (x✝ <<< 4#7 <<< 3#7)) ⊑ some 0#7
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 7
      x✝ : BitVec 7
      a✝ : ¬some (x✝ <<< 4 <<< 3) ⊑ some 0#7
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:52:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:47:8: error: (kernel) declaration has metavariables 'test9_thm'
[bv] [0.009269] Normalizing goal
  [Meta.synthInstance] [0.001134] ✅️ Decidable
        ((if 16#17 ≥ ↑17 then none else if 16#17 ≥ ↑17 then none else some (x✝ <<< 16#17 >>> 16#17)) ⊑
          some (x✝ &&& 1#17))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 17
      x✝ : BitVec 17
      a✝ :
        ¬(if 16#17 ≥ ↑17 then none else if 16#17 ≥ ↑17 then none else some (x✝ <<< 16#17 >>> 16#17)) ⊑
            some (x✝ &&& 1#17)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 17
      x✝ : BitVec 17
      a✝ : ¬some (x✝ <<< 16 >>> 16) ⊑ some (x✝ &&& 1#17)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:62:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:56:8: error: (kernel) declaration has metavariables 'test10_thm'
[bv] [0.009529] Normalizing goal
  [Meta.synthInstance] [0.001197] ✅️ Decidable
        ((if 18#19 ≥ ↑19 then none else if 18#19 ≥ ↑19 then none else some (x✝ >>> 18#19 <<< 18#19)) ⊑
          some (x✝ &&& 262144#19))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 19
      x✝ : BitVec 19
      a✝ :
        ¬(if 18#19 ≥ ↑19 then none else if 18#19 ≥ ↑19 then none else some (x✝ >>> 18#19 <<< 18#19)) ⊑
            some (x✝ &&& 262144#19)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 19
      x✝ : BitVec 19
      a✝ : ¬some (x✝ >>> 18 <<< 18) ⊑ some (x✝ &&& 262144#19)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:73:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:66:8: error: (kernel) declaration has metavariables 'multiuse_lshr_lshr_thm'
[bv] [0.012732] Normalizing goal
  [Meta.synthInstance] [0.001123] ✅️ Decidable
        ((if 2#9 ≥ ↑9 then none
          else if 2#9 ≥ ↑9 then none else if 3#9 ≥ ↑9 then none else some (x✝ >>> 2#9 * x✝ >>> 2#9 >>> 3#9)) ⊑
          if 2#9 ≥ ↑9 then none else if 5#9 ≥ ↑9 then none else some (x✝ >>> 2#9 * x✝ >>> 5#9))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 9
      x✝ : BitVec 9
      a✝ :
        ¬(if 2#9 ≥ ↑9 then none
            else if 2#9 ≥ ↑9 then none else if 3#9 ≥ ↑9 then none else some (x✝ >>> 2#9 * x✝ >>> 2#9 >>> 3#9)) ⊑
            if 2#9 ≥ ↑9 then none else if 5#9 ≥ ↑9 then none else some (x✝ >>> 2#9 * x✝ >>> 5#9)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 9
      x✝ : BitVec 9
      a✝ : ¬some (x✝ >>> 2 * x✝ >>> 2 >>> 3) ⊑ some (x✝ >>> 2 * x✝ >>> 5)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:84:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:77:8: error: (kernel) declaration has metavariables 'multiuse_shl_shl_thm'
[bv] [0.012800] Normalizing goal
  [Meta.synthInstance] [0.001132] ✅️ Decidable
        ((if 8#42 ≥ ↑42 then none
          else if 8#42 ≥ ↑42 then none else if 9#42 ≥ ↑42 then none else some (x✝ <<< 8#42 * x✝ <<< 8#42 <<< 9#42)) ⊑
          if 8#42 ≥ ↑42 then none else if 17#42 ≥ ↑42 then none else some (x✝ <<< 8#42 * x✝ <<< 17#42))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 42
      x✝ : BitVec 42
      a✝ :
        ¬(if 8#42 ≥ ↑42 then none
            else if 8#42 ≥ ↑42 then none else if 9#42 ≥ ↑42 then none else some (x✝ <<< 8#42 * x✝ <<< 8#42 <<< 9#42)) ⊑
            if 8#42 ≥ ↑42 then none else if 17#42 ≥ ↑42 then none else some (x✝ <<< 8#42 * x✝ <<< 17#42)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 42
      x✝ : BitVec 42
      a✝ : ¬some (x✝ <<< 8 * x✝ <<< 8 <<< 9) ⊑ some (x✝ <<< 8 * x✝ <<< 17)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:95:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:88:8: error: (kernel) declaration has metavariables 'test11_thm'
[bv] [0.012108] Normalizing goal
  [Meta.synthInstance] [0.001292] ✅️ Decidable
        ((if 11#23 ≥ ↑23 then none else if 12#23 ≥ ↑23 then none else some ((x✝ * 3#23) >>> 11#23 <<< 12#23)) ⊑
          some (x✝ * 6#23 &&& 8384512#23))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 23
      x✝ : BitVec 23
      a✝ :
        ¬(if 11#23 ≥ ↑23 then none else if 12#23 ≥ ↑23 then none else some ((x✝ * 3#23) >>> 11#23 <<< 12#23)) ⊑
            some (x✝ * 6#23 &&& 8384512#23)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 23
      x✝ : BitVec 23
      a✝ : ¬some ((x✝ * 3#23) >>> 11 <<< 12) ⊑ some (x✝ * 6#23 &&& 8384512#23)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:104:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:99:8: error: (kernel) declaration has metavariables 'test12_thm'
[bv] [0.009848] Normalizing goal
  [Meta.synthInstance] [0.001471] ✅️ Decidable
        ((if 8#47 ≥ ↑47 then none else if 8#47 ≥ ↑47 then none else some (x✝.sshiftRight (8#47).toNat <<< 8#47)) ⊑
          some (x✝ &&& 140737488355072#47))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 47
      x✝ : BitVec 47
      a✝ :
        ¬(if 8#47 ≥ ↑47 then none else if 8#47 ≥ ↑47 then none else some (x✝.sshiftRight (8#47).toNat <<< 8#47)) ⊑
            some (x✝ &&& 140737488355072#47)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 47
      x✝ : BitVec 47
      a✝ : ¬some (x✝.sshiftRight 8 <<< 8) ⊑ some (x✝ &&& 140737488355072#47)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:115:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:108:8: error: (kernel) declaration has metavariables 'test13_thm'
[bv] [0.019084] Normalizing goal
  [Meta.synthInstance] [0.001966] ✅️ Decidable
        ((if 8#18 ≥ ↑18 then none
          else if 9#18 ≥ ↑18 then none else some ((x✝ * 3#18).sshiftRight (8#18).toNat <<< 9#18)) ⊑
          some (x✝ * 6#18 &&& 261632#18))
    [Meta.check] [0.001053] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if 8#18 ≥ ↑18 then none
          else if 9#18 ≥ ↑18 then none else some ((x✝ * 3#18).sshiftRight (8#18).toNat <<< 9#18))
          (some (x✝ * 6#18 &&& 261632#18))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 18
      x✝ : BitVec 18
      a✝ :
        ¬(if 8#18 ≥ ↑18 then none
            else if 9#18 ≥ ↑18 then none else some ((x✝ * 3#18).sshiftRight (8#18).toNat <<< 9#18)) ⊑
            some (x✝ * 6#18 &&& 261632#18)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 18
      x✝ : BitVec 18
      a✝ : ¬some ((x✝ * 3#18).sshiftRight 8 <<< 9) ⊑ some (x✝ * 6#18 &&& 261632#18)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:126:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:119:8: error: (kernel) declaration has metavariables 'test14_thm'
[bv] [0.010883] Normalizing goal
  [Meta.synthInstance] [0.001232] ✅️ Decidable
        ((if 4#35 ≥ ↑35 then none else if 4#35 ≥ ↑35 then none else some ((x✝ >>> 4#35 ||| 1234#35) <<< 4#35)) ⊑
          some (x✝ &&& 34359718608#35 ||| 19744#35))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 35
      x✝ : BitVec 35
      a✝ :
        ¬(if 4#35 ≥ ↑35 then none else if 4#35 ≥ ↑35 then none else some ((x✝ >>> 4#35 ||| 1234#35) <<< 4#35)) ⊑
            some (x✝ &&& 34359718608#35 ||| 19744#35)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 35
      x✝ : BitVec 35
      a✝ : ¬some ((x✝ >>> 4 ||| 1234#35) <<< 4) ⊑ some (x✝ &&& 34359718608#35 ||| 19744#35)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:136:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:130:8: error: (kernel) declaration has metavariables 'test14a_thm'
[bv] [0.010342] Normalizing goal
  [Meta.synthInstance] [0.001119] ✅️ Decidable
        ((if 4#79 ≥ ↑79 then none else if 4#79 ≥ ↑79 then none else some ((x✝ <<< 4#79 &&& 1234#79) >>> 4#79)) ⊑
          some (x✝ &&& 77#79))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 79
      x✝ : BitVec 79
      a✝ :
        ¬(if 4#79 ≥ ↑79 then none else if 4#79 ≥ ↑79 then none else some ((x✝ <<< 4#79 &&& 1234#79) >>> 4#79)) ⊑
            some (x✝ &&& 77#79)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 79
      x✝ : BitVec 79
      a✝ : ¬some ((x✝ <<< 4 &&& 1234#79) >>> 4) ⊑ some (x✝ &&& 77#79)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:146:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:140:8: error: (kernel) declaration has metavariables 'test15_thm'
[bv] [0.037628] Normalizing goal
  [Meta.synthInstance] [0.001648] ✅️ Decidable
        ((Option.bind
            (match some x✝ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 3#45
            | some { toFin := ⟨0, ⋯⟩ } => some 1#45)
            fun x' => if 2#45 ≥ ↑45 then none else some (x' <<< 2#45)) ⊑
          match some x✝ with
          | none => none
          | some { toFin := ⟨1, ⋯⟩ } => some 12#45
          | some { toFin := ⟨0, ⋯⟩ } => some 4#45)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 1
      x✝ : BitVec 1
      a✝ :
        ¬(Option.bind
              (match some x✝ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 3#45
              | some { toFin := ⟨0, ⋯⟩ } => some 1#45)
              fun x' => if 2#45 ≥ ↑45 then none else some (x' <<< 2#45)) ⊑
            match some x✝ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 12#45
            | some { toFin := ⟨0, ⋯⟩ } => some 4#45
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 1
      x✝ : BitVec 1
      a✝ :
        ¬(Option.bind
              (match some x✝ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 3#45
              | some { toFin := ⟨0, ⋯⟩ } => some 1#45)
              fun a => some (a <<< 2)) ⊑
            match some x✝ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 12#45
            | some { toFin := ⟨0, ⋯⟩ } => some 4#45
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:156:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:150:8: error: (kernel) declaration has metavariables 'test15a_thm'
[bv] [0.054438] Normalizing goal
  [Meta.synthInstance] [0.001769] ✅️ Decidable
        ((Option.bind
            (match some x✝ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 3#8
            | some { toFin := ⟨0, ⋯⟩ } => some 1#8)
            fun x => if BitVec.zeroExtend 53 x ≥ ↑53 then none else some (64#53 <<< BitVec.zeroExtend 53 x)) ⊑
          match some x✝ with
          | none => none
          | some { toFin := ⟨1, ⋯⟩ } => some 512#53
          | some { toFin := ⟨0, ⋯⟩ } => some 128#53)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 1
      x✝ : BitVec 1
      a✝ :
        ¬(Option.bind
              (match some x✝ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 3#8
              | some { toFin := ⟨0, ⋯⟩ } => some 1#8)
              fun x => if BitVec.zeroExtend 53 x ≥ ↑53 then none else some (64#53 <<< BitVec.zeroExtend 53 x)) ⊑
            match some x✝ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 512#53
            | some { toFin := ⟨0, ⋯⟩ } => some 128#53
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 1
      x✝ : BitVec 1
      a✝ :
        ¬(Option.bind
              (match some x✝ with
              | none => none
              | some { toFin := ⟨1, ⋯⟩ } => some 3#8
              | some { toFin := ⟨0, ⋯⟩ } => some 1#8)
              fun a =>
              if (!53#53 >ᵤ BitVec.zeroExtend 53 a) = true then none else some (64#53 <<< BitVec.zeroExtend 53 a)) ⊑
            match some x✝ with
            | none => none
            | some { toFin := ⟨1, ⋯⟩ } => some 512#53
            | some { toFin := ⟨0, ⋯⟩ } => some 128#53
      ⊢ False
  [Meta.isDefEq] [0.002255] ✅️ if ?b then ?x
      else ?y =?= if (!53#53 >ᵤ BitVec.zeroExtend 53 a) = true then none else some (64#53 <<< BitVec.zeroExtend 53 a)
    [Meta.isDefEq] [0.002094] ✅️ ?α =?= LLVM.IntW 53
      [Meta.isDefEq.assign] [0.002091] ✅️ ?α := LLVM.IntW 53
        [Meta.isDefEq.assign.checkTypes] [0.002086] ✅️ (?α : Sort ?u.66075) := (LLVM.IntW 53 : Type)
          [Meta.isDefEq] [0.002082] ✅️ Sort ?u.66075 =?= Type
            [Meta.isLevelDefEq] [0.002075] ✅️ ?u.66075 =?= 1
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:167:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:160:8: error: (kernel) declaration has metavariables 'test16_thm'
[bv] [0.020775] Normalizing goal
  [Meta.synthInstance] [0.001043] ✅️ Decidable
        ((if 4#84 ≥ ↑84 then none else some (BitVec.ofBool (x✝.sshiftRight (4#84).toNat &&& 1#84 != 0#84))) ⊑
          some (BitVec.ofBool (x✝ &&& 16#84 != 0#84)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 84
      x✝ : BitVec 84
      a✝ :
        ¬(if 4#84 ≥ ↑84 then none else some (BitVec.ofBool (x✝.sshiftRight (4#84).toNat &&& 1#84 != 0#84))) ⊑
            some (BitVec.ofBool (x✝ &&& 16#84 != 0#84))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 84
      x✝ : BitVec 84
      a✝ :
        ¬some (if (!x✝.sshiftRight 4 &&& 1#84 == 0#84) = true then 1#1 else 0#1) ⊑
            some (if (!x✝ &&& 16#84 == 0#84) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:178:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:171:8: error: (kernel) declaration has metavariables 'test17_thm'
[bv] [0.020609] Normalizing goal
  [Meta.synthInstance] [0.001086] ✅️ Decidable
        ((if 3#106 ≥ ↑106 then none else some (BitVec.ofBool (x✝ >>> 3#106 == 1234#106))) ⊑
          some (BitVec.ofBool (x✝ &&& 81129638414606681695789005144056#106 == 9872#106)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 106
      x✝ : BitVec 106
      a✝ :
        ¬(if 3#106 ≥ ↑106 then none else some (BitVec.ofBool (x✝ >>> 3#106 == 1234#106))) ⊑
            some (BitVec.ofBool (x✝ &&& 81129638414606681695789005144056#106 == 9872#106))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 106
      x✝ : BitVec 106
      a✝ :
        ¬some (if (x✝ >>> 3 == 1234#106) = true then 1#1 else 0#1) ⊑
            some (if (x✝ &&& 81129638414606681695789005144056#106 == 9872#106) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:187:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:182:8: error: (kernel) declaration has metavariables 'test18_thm'
[bv] [0.014882] Normalizing goal
  [Meta.synthInstance] [0.001019] ✅️ Decidable
        ((if 10#11 ≥ ↑11 then none else some (BitVec.ofBool (x✝ >>> 10#11 == 123#11))) ⊑ some 0#1)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 11
      x✝ : BitVec 11
      a✝ : ¬(if 10#11 ≥ ↑11 then none else some (BitVec.ofBool (x✝ >>> 10#11 == 123#11))) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 11
      x✝ : BitVec 11
      a✝ : ¬some (if (x✝ >>> 10 == 123#11) = true then 1#1 else 0#1) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:197:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:191:8: error: (kernel) declaration has metavariables 'test19_thm'
[bv] [0.017055] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 37
      x✝ : BitVec 37
      a✝ :
        ¬(if 2#37 ≥ ↑37 then none else some (BitVec.ofBool (x✝.sshiftRight (2#37).toNat == 0#37))) ⊑
            some (BitVec.ofBool (4#37 >ᵤ x✝))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 37
      x✝ : BitVec 37
      a✝ :
        ¬some (if (x✝.sshiftRight 2 == 0#37) = true then 1#1 else 0#1) ⊑ some (if (4#37 >ᵤ x✝) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:207:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:201:8: error: (kernel) declaration has metavariables 'test19a_thm'
[bv] [0.017220] Normalizing goal
  [Meta.synthInstance] [0.001005] ✅️ Decidable
        ((if 2#39 ≥ ↑39 then none else some (BitVec.ofBool (x✝.sshiftRight (2#39).toNat == -1#39))) ⊑
          some (BitVec.ofBool (x✝ >ᵤ 549755813883#39)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 39
      x✝ : BitVec 39
      a✝ :
        ¬(if 2#39 ≥ ↑39 then none else some (BitVec.ofBool (x✝.sshiftRight (2#39).toNat == -1#39))) ⊑
            some (BitVec.ofBool (x✝ >ᵤ 549755813883#39))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 39
      x✝ : BitVec 39
      a✝ :
        ¬some (if (x✝.sshiftRight 2 == 549755813887#39) = true then 1#1 else 0#1) ⊑
            some (if (x✝ >ᵤ 549755813883#39) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:216:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:211:8: error: (kernel) declaration has metavariables 'test20_thm'
[bv] [0.014194] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 13
      x✝ : BitVec 13
      a✝ : ¬(if 12#13 ≥ ↑13 then none else some (BitVec.ofBool (x✝.sshiftRight (12#13).toNat == 123#13))) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 13
      x✝ : BitVec 13
      a✝ : ¬some (if (x✝.sshiftRight 12 == 123#13) = true then 1#1 else 0#1) ⊑ some 0#1
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:227:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:220:8: error: (kernel) declaration has metavariables 'test21_thm'
[bv] [0.020841] Normalizing goal
  [Meta.synthInstance] [0.001107] ✅️ Decidable
        ((if 6#12 ≥ ↑12 then none else some (BitVec.ofBool (x✝ <<< 6#12 == 3968#12))) ⊑
          some (BitVec.ofBool (x✝ &&& 63#12 == 62#12)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 12
      x✝ : BitVec 12
      a✝ :
        ¬(if 6#12 ≥ ↑12 then none else some (BitVec.ofBool (x✝ <<< 6#12 == 3968#12))) ⊑
            some (BitVec.ofBool (x✝ &&& 63#12 == 62#12))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 12
      x✝ : BitVec 12
      a✝ :
        ¬some (if (x✝ <<< 6 == 3968#12) = true then 1#1 else 0#1) ⊑
            some (if (x✝ &&& 63#12 == 62#12) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:238:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:231:8: error: (kernel) declaration has metavariables 'test22_thm'
[bv] [0.022623] Normalizing goal
  [Meta.synthInstance] [0.001133] ✅️ Decidable
        ((if 7#14 ≥ ↑14 then none else some (BitVec.ofBool (x✝ <<< 7#14 == 0#14))) ⊑
          some (BitVec.ofBool (x✝ &&& 127#14 == 0#14)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 14
      x✝ : BitVec 14
      a✝ :
        ¬(if 7#14 ≥ ↑14 then none else some (BitVec.ofBool (x✝ <<< 7#14 == 0#14))) ⊑
            some (BitVec.ofBool (x✝ &&& 127#14 == 0#14))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 14
      x✝ : BitVec 14
      a✝ :
        ¬some (if (x✝ <<< 7 == 0#14) = true then 1#1 else 0#1) ⊑
            some (if (x✝ &&& 127#14 == 0#14) = true then 1#1 else 0#1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:247:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:242:8: error: (kernel) declaration has metavariables 'test23_thm'
[bv] [0.008576] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 44
      x✝ : BitVec 44
      a✝ :
        ¬(if 33#44 ≥ ↑44 then none
            else if 33#44 ≥ ↑44 then none else some (BitVec.truncate 11 ((x✝ <<< 33#44).sshiftRight (33#44).toNat))) ⊑
            some (BitVec.truncate 11 x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 44
      x✝ : BitVec 44
      a✝ : ¬some (BitVec.zeroExtend 11 ((x✝ <<< 33).sshiftRight 33)) ⊑ some (BitVec.zeroExtend 11 x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 0.577350ms, solving context: 0.000000ms
LeanSAT proved the goal after 2.768260ms: rewriting 2.755720ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
Bitwuzla proved the goal after 82.725869ms, solving context: 2.000000ms
LeanSAT proved the goal after 148.586610ms: rewriting 17.250250ms, bitblasting 0.000000ms, SAT solving 113.042930ms, LRAT trimming 1.061400ms, LRAT checking 11.685500ms
Bitwuzla proved the goal after 0.850310ms, solving context: 0.000000ms
LeanSAT proved the goal after 4.414720ms: rewriting 4.398510ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
Bitwuzla proved the goal after 83.259180ms, solving context: 6.000000ms
LeanSAT proved the goal after 168.886859ms: rewriting 16.089260ms, bitblasting 26.096659ms, SAT solving 107.759780ms, LRAT trimming 0.000000ms, LRAT checking 11.654830ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:280:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:280:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gapinthshift_proof.lean:273:8: error: (kernel) declaration has metavariables 'test25_thm'
[bv] [0.013420] Normalizing goal
  [Meta.synthInstance] [0.001088] ✅️ Decidable
        ((if 17#37 ≥ ↑37 then none
          else
            if 17#37 ≥ ↑37 then none
            else if 17#37 ≥ ↑37 then none else some ((x✝ >>> 17#37 + x✝¹ >>> 17#37) <<< 17#37)) ⊑
          some (x✝¹ + (x✝ &&& 137438822400#37) &&& 137438822400#37))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 37
      x✝¹ x✝ : BitVec 37
      a✝ :
        ¬(if 17#37 ≥ ↑37 then none
            else
              if 17#37 ≥ ↑37 then none
              else if 17#37 ≥ ↑37 then none else some ((x✝ >>> 17#37 + x✝¹ >>> 17#37) <<< 17#37)) ⊑
            some (x✝¹ + (x✝ &&& 137438822400#37) &&& 137438822400#37)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 37
      x✝¹ x✝ : BitVec 37
      a✝ : ¬some ((x✝ >>> 17 + x✝¹ >>> 17) <<< 17) ⊑ some (x✝¹ + (x✝ &&& 137438822400#37) &&& 137438822400#37)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
