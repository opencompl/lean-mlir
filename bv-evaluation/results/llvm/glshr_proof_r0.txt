⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.glshr_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/glshr_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/glshr_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/glshr_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:7:87: Bitwuzla proved the goal after 79.000000ms
LeanSAT proved the goal after 78.000000ms: rewriting 11.085709ms, bitblasting 0.000000ms, SAT solving 61.489333ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:9:94: Bitwuzla proved the goal after 80.000000ms
LeanSAT proved the goal after 78.000000ms: rewriting 12.636625ms, bitblasting 0.000000ms, SAT solving 60.644625ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:11:84: Bitwuzla proved the goal after 71.000000ms
LeanSAT proved the goal after 68.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 56.470500ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:13:111: Bitwuzla proved the goal after 74.000000ms
LeanSAT proved the goal after 71.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 60.161542ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:15:92: Bitwuzla proved the goal after 70.000000ms
LeanSAT proved the goal after 73.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 61.503500ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:20:17: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:20:17: [bv] [0.016838] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if BitVec.twoPow 64 31 <<< 1 ≤ BitVec.setWidth 64 x * 65537#64 then none else some (x * 65537#32)).bind
              fun x' => some (x' >>> 16)) ⊑
            some x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if (!BitVec.twoPow 64 31 <<< 1 >ᵤ BitVec.zeroExtend 64 x * 65537#64) = true then none
                else some (x * 65537#32)).bind
              fun a => some (a >>> 16)) ⊑
            some x
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:29:78: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:29:78: [bv] [0.080995] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if a.msb = x.msb ∧ ¬(a + x).msb = a.msb then none
                  else if a + x < a ∨ a + x < x then none else some (a + x)).bind
                fun a => if 32#32 ≤ x_1 then none else some (a >>> x_1.toNat)) ⊑
            (if 32#32 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun a =>
              if a.msb = x_2.msb ∧ ¬(a + x_2).msb = a.msb then none
              else if a + x_2 < a ∨ a + x_2 < x_2 then none else some (a + x_2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (a.getLsbD 31 == x.getLsbD 31 && !(a + x).getLsbD 31 == a.getLsbD 31) = true then none
                  else if (!((!a >ᵤ a + x) && !x >ᵤ a + x)) = true then none else some (a + x)).bind
                fun a => if (!32#32 >ᵤ x_1) = true then none else some (a >>> x_1.toNat)) ⊑
            (if (!32#32 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a =>
              if (a.getLsbD 31 == x_2.getLsbD 31 && !(a + x_2).getLsbD 31 == a.getLsbD 31) = true then none
              else if (!((!a >ᵤ a + x_2) && !x_2 >ᵤ a + x_2)) = true then none else some (a + x_2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:37:73: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:37:73: [bv] [0.047494] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if a + x < a ∨ a + x < x then none else some (a + x)).bind fun a =>
                if 32#32 ≤ x_1 then none else some (a >>> x_1.toNat)) ⊑
            (if 32#32 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun a =>
              if a + x_2 < a ∨ a + x_2 < x_2 then none else some (a + x_2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if (!((!a >ᵤ a + x) && !x >ᵤ a + x)) = true then none else some (a + x)).bind fun a =>
                if (!32#32 >ᵤ x_1) = true then none else some (a >>> x_1.toNat)) ⊑
            (if (!32#32 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a =>
              if (!((!a >ᵤ a + x_2) && !x_2 >ᵤ a + x_2)) = true then none else some (a + x_2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:45:73: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:45:73: [bv] [0.048572] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_1 <<< x.toNat >>> x.toNat = x_1 then none else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a =>
              (if x_2 * x_2 + a < x_2 * x_2 ∨ x_2 * x_2 + a < a then none else some (x_2 * x_2 + a)).bind fun a =>
                if 32#32 ≤ x then none else some (a >>> x.toNat)) ⊑
            (if 32#32 ≤ x then none else some ((x_2 * x_2) >>> x.toNat)).bind fun a =>
              if a + x_1 < a ∨ a + x_1 < x_1 then none else some (a + x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a =>
              (if (!((!x_2 * x_2 >ᵤ x_2 * x_2 + a) && !a >ᵤ x_2 * x_2 + a)) = true then none
                  else some (x_2 * x_2 + a)).bind
                fun a => if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)) ⊑
            (if (!32#32 >ᵤ x) = true then none else some ((x_2 * x_2) >>> x.toNat)).bind fun a =>
              if (!((!a >ᵤ a + x_1) && !x_1 >ᵤ a + x_1)) = true then none else some (a + x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:57:22: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:57:22: [bv] [0.086981] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if
                      (BitVec.signExtend 33 a - BitVec.signExtend 33 x).msb =
                        (BitVec.signExtend 33 a - BitVec.signExtend 33 x).getMsbD 1 then
                    if a < x then none else some (a - x)
                  else none).bind
                fun a => if 32#32 ≤ x_1 then none else some (a >>> x_1.toNat)) ⊑
            (if 32#32 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun y' =>
              if
                  (BitVec.signExtend 33 x_2 - BitVec.signExtend 33 y').msb =
                    (BitVec.signExtend 33 x_2 - BitVec.signExtend 33 y').getMsbD 1 then
                if x_2 < y' then none else some (x_2 - y')
              else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a =>
              (if
                      ((BitVec.signExtend 33 a + (~~~BitVec.signExtend 33 x + 1#33)).getLsbD 32 ==
                          (BitVec.signExtend 33 a + (~~~BitVec.signExtend 33 x + 1#33)).getMsbD 1) =
                        true then
                    if (x >ᵤ a) = true then none else some (a + (~~~x + 1#32))
                  else none).bind
                fun a => if (!32#32 >ᵤ x_1) = true then none else some (a >>> x_1.toNat)) ⊑
            (if (!32#32 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a =>
              if
                  ((BitVec.signExtend 33 x_2 + (~~~BitVec.signExtend 33 a + 1#33)).getLsbD 32 ==
                      (BitVec.signExtend 33 x_2 + (~~~BitVec.signExtend 33 a + 1#33)).getMsbD 1) =
                    true then
                if (a >ᵤ x_2) = true then none else some (x_2 + (~~~a + 1#32))
              else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:69:22: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:69:22: [bv] [0.086683] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_1 <<< x.toNat >>> x.toNat = x_1 then none else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a =>
              (if
                      (BitVec.signExtend 33 x_2 - BitVec.signExtend 33 a).msb =
                        (BitVec.signExtend 33 x_2 - BitVec.signExtend 33 a).getMsbD 1 then
                    if x_2 < a then none else some (x_2 - a)
                  else none).bind
                fun a => if 32#32 ≤ x then none else some (a >>> x.toNat)) ⊑
            (if 32#32 ≤ x then none else some (x_2 >>> x.toNat)).bind fun a =>
              if
                  (BitVec.signExtend 33 a - BitVec.signExtend 33 x_1).msb =
                    (BitVec.signExtend 33 a - BitVec.signExtend 33 x_1).getMsbD 1 then
                if a < x_1 then none else some (a - x_1)
              else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a =>
              (if
                      ((BitVec.signExtend 33 x_2 + (~~~BitVec.signExtend 33 a + 1#33)).getLsbD 32 ==
                          (BitVec.signExtend 33 x_2 + (~~~BitVec.signExtend 33 a + 1#33)).getMsbD 1) =
                        true then
                    if (a >ᵤ x_2) = true then none else some (x_2 + (~~~a + 1#32))
                  else none).bind
                fun a => if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)) ⊑
            (if (!32#32 >ᵤ x) = true then none else some (x_2 >>> x.toNat)).bind fun a =>
              if
                  ((BitVec.signExtend 33 a + (~~~BitVec.signExtend 33 x_1 + 1#33)).getLsbD 32 ==
                      (BitVec.signExtend 33 a + (~~~BitVec.signExtend 33 x_1 + 1#33)).getMsbD 1) =
                    true then
                if (x_1 >ᵤ a) = true then none else some (a + (~~~x_1 + 1#32))
              else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:76:53: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:76:53: [bv] [0.052773] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_1 <<< x.toNat >>> x.toNat = x_1 then none else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a =>
              (if x_2 < a then none else some (x_2 - a)).bind fun a =>
                if 32#32 ≤ x then none else some (a >>> x.toNat)) ⊑
            (if 32#32 ≤ x then none else some (x_2 >>> x.toNat)).bind fun a => if a < x_1 then none else some (a - x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a =>
              (if (a >ᵤ x_2) = true then none else some (x_2 + (~~~a + 1#32))).bind fun a =>
                if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)) ⊑
            (if (!32#32 >ᵤ x) = true then none else some (x_2 >>> x.toNat)).bind fun a =>
              if (x_1 >ᵤ a) = true then none else some (a + (~~~x_1 + 1#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:85:53: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:85:53: [bv] [0.055391] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat).sshiftRight x.toNat = x_1 then none
                else
                  if x_1 <<< x.toNat >>> x.toNat = x_1 then none
                  else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a =>
              (if x_2 < a then none else some (x_2 - a)).bind fun a =>
                if 32#32 ≤ x then none else some (a >>> x.toNat)) ⊑
            (if 32#32 ≤ x then none else some (x_2 >>> x.toNat)).bind fun a => if a < x_1 then none else some (a - x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if ((x_1 <<< x.toNat).sshiftRight x.toNat == x_1) = true then none
                else
                  if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                  else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a =>
              (if (a >ᵤ x_2) = true then none else some (x_2 + (~~~a + 1#32))).bind fun a =>
                if (!32#32 >ᵤ x) = true then none else some (a >>> x.toNat)) ⊑
            (if (!32#32 >ᵤ x) = true then none else some (x_2 >>> x.toNat)).bind fun a =>
              if (x_1 >ᵤ a) = true then none else some (a + (~~~x_1 + 1#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:90:103: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:90:103: [bv] [0.025154] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x_1 then none else some ((a ||| x) >>> x_1.toNat)) ⊑
            (if 32#32 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun a => some (a ||| x_2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x_1) = true then none else some ((a ||| x) >>> x_1.toNat)) ⊑
            (if (!32#32 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a => some (a ||| x_2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:95:103: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:95:103: [bv] [0.024150] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x_1 then none else some ((a ||| x) >>> x_1.toNat)) ⊑
            (if 32#32 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun a => some (a ||| x_2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x_1) = true then none else some ((a ||| x) >>> x_1.toNat)) ⊑
            (if (!32#32 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a => some (a ||| x_2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:100:101: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:100:101: [bv] [0.025317] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_1 <<< x.toNat >>> x.toNat = x_1 then none else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a => if 32#32 ≤ x then none else some ((x_2 ||| a) >>> x.toNat)) ⊑
            (if 32#32 ≤ x then none else some (x_2 >>> x.toNat)).bind fun a => some (a ||| x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some ((x_2 ||| a) >>> x.toNat)) ⊑
            (if (!32#32 >ᵤ x) = true then none else some (x_2 >>> x.toNat)).bind fun a => some (a ||| x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:105:101: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:105:101: [bv] [0.024837] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_1 <<< x.toNat >>> x.toNat = x_1 then none else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a => if 32#32 ≤ x then none else some ((x_2 ||| a) >>> x.toNat)) ⊑
            (if 32#32 ≤ x then none else some (x_2 >>> x.toNat)).bind fun a => some (a ||| x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some ((x_2 ||| a) >>> x.toNat)) ⊑
            (if (!32#32 >ᵤ x) = true then none else some (x_2 >>> x.toNat)).bind fun a => some (a ||| x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:110:103: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:110:103: [bv] [0.024618] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x_1 then none else some ((a ^^^ x) >>> x_1.toNat)) ⊑
            (if 32#32 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun a => some (a ^^^ x_2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x_1) = true then none else some ((a ^^^ x) >>> x_1.toNat)) ⊑
            (if (!32#32 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a => some (a ^^^ x_2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:115:101: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:115:101: [bv] [0.025508] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_1 <<< x.toNat >>> x.toNat = x_1 then none else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a => if 32#32 ≤ x then none else some ((x_2 ^^^ a) >>> x.toNat)) ⊑
            (if 32#32 ≤ x then none else some (x_2 >>> x.toNat)).bind fun a => some (a ^^^ x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some ((x_2 ^^^ a) >>> x.toNat)) ⊑
            (if (!32#32 >ᵤ x) = true then none else some (x_2 >>> x.toNat)).bind fun a => some (a ^^^ x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:120:103: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:120:103: [bv] [0.024896] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x_1 then none else some ((a &&& x) >>> x_1.toNat)) ⊑
            (if 32#32 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun a => some (a &&& x_2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x_1) = true then none else some ((a &&& x) >>> x_1.toNat)) ⊑
            (if (!32#32 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a => some (a &&& x_2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:125:101: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:125:101: [bv] [0.026104] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_1 <<< x.toNat >>> x.toNat = x_1 then none else if 32#32 ≤ x then none else some (x_1 <<< x.toNat)).bind
              fun a => if 32#32 ≤ x then none else some ((x_2 &&& a) >>> x.toNat)) ⊑
            (if 32#32 ≤ x then none else some (x_2 >>> x.toNat)).bind fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_1 <<< x.toNat >>> x.toNat == x_1) = true then none
                else if (!32#32 >ᵤ x) = true then none else some (x_1 <<< x.toNat)).bind
              fun a => if (!32#32 >ᵤ x) = true then none else some ((x_2 &&& a) >>> x.toNat)) ⊑
            (if (!32#32 >ᵤ x) = true then none else some (x_2 >>> x.toNat)).bind fun a => some (a &&& x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:130:103: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:130:103: [bv] [0.024750] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if x_2 <<< x_1.toNat >>> x_1.toNat = x_2 then none
                else if 32#32 ≤ x_1 then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if 32#32 ≤ x_1 then none else some ((a &&& x) >>> x_1.toNat)) ⊑
            (if 32#32 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun a => some (a &&& x_2)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 32
      a✝ :
        ¬((if (x_2 <<< x_1.toNat >>> x_1.toNat == x_2) = true then none
                else if (!32#32 >ᵤ x_1) = true then none else some (x_2 <<< x_1.toNat)).bind
              fun a => if (!32#32 >ᵤ x_1) = true then none else some ((a &&& x) >>> x_1.toNat)) ⊑
            (if (!32#32 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a => some (a &&& x_2)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:136:92: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:136:92: [bv] [0.028402] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    BitVec.signExtend 64 x * 65537#64 < BitVec.signExtend 64 (BitVec.twoPow 32 31) ∨
                      BitVec.twoPow 64 31 ≤ BitVec.signExtend 64 x * 65537#64 then
                  none
                else some (x * 65537#32)).bind
              fun x' => some (x' >>> 16)) ⊑
            if x.msb = false ∧ ¬(x + x >>> 16).msb = x.msb then none else some (x + x >>> 16)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬((if
                    (!((!BitVec.signExtend 64 (BitVec.twoPow 32 31) >ᵤ BitVec.signExtend 64 x * 65537#64) &&
                          BitVec.twoPow 64 31 >ᵤ BitVec.signExtend 64 x * 65537#64)) =
                      true then
                  none
                else some (x * 65537#32)).bind
              fun a => some (a >>> 16)) ⊑
            if (!x.getLsbD 31 && !(x + x >>> 16).getLsbD 31 == x.getLsbD 31) = true then none else some (x + x >>> 16)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:140:17: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:140:17: [bv] [0.017093] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 2
      a✝ :
        ¬((if BitVec.twoPow 4 1 <<< 1 ≤ BitVec.setWidth 4 x * 2#4 then none else some (x * 2#2)).bind fun x' =>
              some (x' >>> 1)) ⊑
            some x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 2
      a✝ :
        ¬((if (!BitVec.twoPow 4 1 <<< 1 >ᵤ BitVec.zeroExtend 4 x * 2#4) = true then none else some (x * 2#2)).bind
              fun a => some (a >>> 1)) ⊑
            some x
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:142:102: Bitwuzla proved the goal after 81.000000ms
LeanSAT proved the goal after 1603.000000ms: rewriting 15.152750ms, bitblasting 40.341833ms, SAT solving 814.740250ms, LRAT trimming 297.169959ms, LRAT checking 366.864167ms
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:144:105: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.CTEYjBEA:3:93: expected terms of same sort at indices 0 and 1 as argument to 'bvlshr'
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:144:105: [bv] [0.010822] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ : ¬BitVec.setWidth 12 (x >>> 28) >>> 2 = BitVec.setWidth 12 (x >>> 30)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ : (!BitVec.zeroExtend 12 (x >>> 28) >>> 2 == BitVec.zeroExtend 12 (x >>> 30)) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((>> 2 (zext 12 (>> 28 var0))) == (zext 12 (>> 30 var0)))
[bv] [0.060332] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (assert (not (= (bvlshr ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000011100)) #b000000000010) ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000011110)))))
      (check-sat)
      (exit)
      
  [bv] [0.058095] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:146:116: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.n1lu5mRB:3:93: expected terms of same sort at indices 0 and 1 as argument to 'bvlshr'
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:146:116: [bv] [0.010687] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ : ¬BitVec.setWidth 12 (x >>> 20) >>> 1 = BitVec.setWidth 12 (x >>> 21)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ : (!BitVec.zeroExtend 12 (x >>> 20) >>> 1 == BitVec.zeroExtend 12 (x >>> 21)) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((>> 1 (zext 12 (>> 20 var0))) == (zext 12 (>> 21 var0)))
[bv] [0.065348] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (assert (not (= (bvlshr ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000010100)) #b000000000001) ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000010101)))))
      (check-sat)
      (exit)
      
  [bv] [0.062842] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:148:130: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.d2ETvtMX:3:93: expected terms of same sort at indices 0 and 1 as argument to 'bvlshr'
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:148:130: [bv] [0.013259] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ : ¬BitVec.setWidth 12 (x >>> 19) >>> 1 = BitVec.setWidth 12 (x >>> 20) &&& 2047#12
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ : (!BitVec.zeroExtend 12 (x >>> 19) >>> 1 == BitVec.zeroExtend 12 (x >>> 20) &&& 2047#12) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((>> 1 (zext 12 (>> 19 var0))) == ((zext 12 (>> 20 var0)) && 0x7ff#12))
[bv] [0.065729] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (assert (not (= (bvlshr ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000010011)) #b000000000001) (bvand ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000010100)) #b011111111111))))
      (check-sat)
      (exit)
      
  [bv] [0.062789] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:150:120: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.Ekt0v0Bq:3:93: expected terms of same sort at indices 0 and 1 as argument to 'bvlshr'
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:150:120: [bv] [0.010737] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ : ¬BitVec.setWidth 12 (x >>> 20) >>> 11 = BitVec.setWidth 12 (x >>> 31)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ : (!BitVec.zeroExtend 12 (x >>> 20) >>> 11 == BitVec.zeroExtend 12 (x >>> 31)) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((>> 11 (zext 12 (>> 20 var0))) == (zext 12 (>> 31 var0)))
[bv] [0.061912] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (assert (not (= (bvlshr ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000010100)) #b000000001011) ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000011111)))))
      (check-sat)
      (exit)
      
  [bv] [0.059211] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:152:120: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.GFEzChs0:3:93: expected terms of same sort at indices 0 and 1 as argument to 'bvlshr'
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:152:120: [bv] [0.010840] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ : ¬BitVec.setWidth 12 (x >>> 30) >>> 1 = BitVec.setWidth 12 (x >>> 31)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ : (!BitVec.zeroExtend 12 (x >>> 30) >>> 1 == BitVec.zeroExtend 12 (x >>> 31)) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((>> 1 (zext 12 (>> 30 var0))) == (zext 12 (>> 31 var0)))
[bv] [0.065679] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (assert (not (= (bvlshr ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000011110)) #b000000000001) ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000011111)))))
      (check-sat)
      (exit)
      
  [bv] [0.062517] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:154:103: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.NBcLvpUM:3:93: expected terms of same sort at indices 0 and 1 as argument to 'bvlshr'
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:154:103: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 32
    a✝ : ¬BitVec.setWidth 12 (x >>> 21) >>> 11 = 0#12
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 32
    a✝ : (!BitVec.zeroExtend 12 (x >>> 21) >>> 11 == 0#12) = true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((>> 11 (zext 12 (>> 21 var0))) == 0x000#12)
[bv] [0.064431] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (assert (not (= (bvlshr ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000010101)) #b000000001011) #b000000000000)))
      (check-sat)
      (exit)
      
  [bv] [0.061705] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:156:102: The external prover produced unexpected output, stdout:
stderr:
[error] /var/folders/mw/4wzj975d1_s2cxywvdfyyh000000gn/T/tmp.GrEu3nNb:3:93: expected terms of same sort at indices 0 and 1 as argument to 'bvlshr'
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:156:102: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 32
    a✝ : ¬BitVec.setWidth 12 (x >>> 31) >>> 1 = 0#12
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 32
    a✝ : (!BitVec.zeroExtend 12 (x >>> 31) >>> 1 == 0#12) = true
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
[Meta.Tactic.bv] New atom of width 32: x
[Meta.Tactic.bv] Reflected bv logical expression: !((>> 1 (zext 12 (>> 31 var0))) == 0x000#12)
[bv] [0.063479] Preparing LRAT reflection term
  [Meta.Tactic.bv] Encoded as SMT: (set-logic QF_BV)
      (declare-const x_0 (_ BitVec 32))
      (assert (not (= (bvlshr ((_ zero_extend 0) (bvlshr x_0 #b00000000000000000000000000011111)) #b000000000001) #b000000000000)))
      (check-sat)
      (exit)
      
  [bv] [0.060878] Proving with bitwuzla
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:162:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:163:50: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:163:50: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬some (BitVec.signExtend 16 x >>> 4) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬some (BitVec.signExtend 16 x >>> 4) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:169:26: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:170:51: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:170:51: [Meta.Tactic.bv] Running preprocessing pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬some (BitVec.signExtend 128 x >>> 42) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Rerunning pipeline on:
    case h
    x : BitVec 1
    a✝ : ¬some (BitVec.signExtend 128 x >>> 42) ⊑ sorry
    ⊢ False
[Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:173:80: Bitwuzla proved the goal after 80.000000ms
LeanSAT proved the goal after 72.000000ms: rewriting 10.527917ms, bitblasting 0.000000ms, SAT solving 58.216250ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:179:46: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/glshr_proof.lean:179:46: [bv] [0.016041] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 1
      a✝ :
        ¬some ((BitVec.setWidth 2 x_1 + BitVec.setWidth 2 x).sshiftRight 1) ⊑
            (if
                    BitVec.setWidth 2 x_1 + BitVec.setWidth 2 x < BitVec.setWidth 2 x_1 ∨
                      BitVec.setWidth 2 x_1 + BitVec.setWidth 2 x < BitVec.setWidth 2 x then
                  none
                else some (BitVec.setWidth 2 x_1 + BitVec.setWidth 2 x)).bind
              fun x' => some (x'.sshiftRight 1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 1
      a✝ :
        ¬some ((BitVec.zeroExtend 2 x_1 + BitVec.zeroExtend 2 x).sshiftRight 1) ⊑
            (if
                    (!((!BitVec.zeroExtend 2 x_1 >ᵤ BitVec.zeroExtend 2 x_1 + BitVec.zeroExtend 2 x) &&
                          !BitVec.zeroExtend 2 x >ᵤ BitVec.zeroExtend 2 x_1 + BitVec.zeroExtend 2 x)) =
                      true then
                  none
                else some (BitVec.zeroExtend 2 x_1 + BitVec.zeroExtend 2 x)).bind
              fun a => some (a.sshiftRight 1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.glshr_proof
