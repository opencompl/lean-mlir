⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gsubhofhnegatible_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:7:59: Bitwuzla proved the goal after 0.000000ms
LeanSAT proved the goal after 3.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:11:98: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:11:98: [bv] [0.027793] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x then none else some (214#8 <<< x.toNat)).bind fun y' => some (x_1 - y')) ⊑
            (if 8#8 ≤ x then none else some (42#8 <<< x.toNat)).bind fun a => some (a + x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x) = true then none else some (214#8 <<< x.toNat)).bind fun a => some (x_1 + (~~~a + 1#8))) ⊑
            (if (!8#8 >ᵤ x) = true then none else some (42#8 <<< x.toNat)).bind fun a => some (a + x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:17:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:23:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:25:36: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:25:36: [bv] [0.016703] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 8
      a✝ : ¬(sorry.bind fun y' => some (x_1 - y')) ⊑ sorry.bind fun a => some (a + x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 8
      a✝ : ¬(sorry.bind fun a => some (x_1 + (~~~a + 1#8))) ⊑ sorry.bind fun a => some (a + x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:31:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:37:30: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:42:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:42:20: [bv] [0.057168] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun x' =>
              sorry.bind fun a =>
                (if (-BitVec.signExtend 33 a).msb = (-BitVec.signExtend 33 a).getMsbD 1 then some (-a) else none).bind
                  fun y' => some (x' &&& y')) ⊑
            some 2#32
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              sorry.bind fun a_1 =>
                (if
                        ((~~~BitVec.signExtend 33 a_1 + 1#33).getLsbD 32 ==
                            (~~~BitVec.signExtend 33 a_1 + 1#33).getMsbD 1) =
                          true then
                      some (~~~a_1 + 1#32)
                    else none).bind
                  fun a_2 => some (a &&& a_2)) ⊑
            some 2#32
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:48:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:54:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:56:36: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:56:36: [bv] [0.016805] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 8
      a✝ : ¬(sorry.bind fun y' => some (x_1 - y')) ⊑ sorry.bind fun a => some (a + x_1)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 8
      a✝ : ¬(sorry.bind fun a => some (x_1 + (~~~a + 1#8))) ⊑ sorry.bind fun a => some (a + x_1)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:57:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:57:89: 't7_thm' has already been declared
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:74:81: Bitwuzla proved the goal after 0.000000ms
LeanSAT proved the goal after 4.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:76:104: Bitwuzla proved the goal after 78.000000ms
LeanSAT proved the goal after 78.000000ms: rewriting 15.026834ms, bitblasting 0.000000ms, SAT solving 56.263208ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:78:113: Bitwuzla proved the goal after 81.000000ms
LeanSAT proved the goal after 95.000000ms: rewriting 17.535208ms, bitblasting 0.000000ms, SAT solving 60.233458ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:80:83: Bitwuzla proved the goal after 0.000000ms
LeanSAT proved the goal after 8.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:82:104: Bitwuzla proved the goal after 76.000000ms
LeanSAT proved the goal after 84.000000ms: rewriting 15.918042ms, bitblasting 0.000000ms, SAT solving 60.830625ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:84:80: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 71.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 56.559834ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:88:88: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:88:88: [bv] [0.021339] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 4
      a✝ :
        ¬((if 4#4 ≤ x then none else some ((x_1 ^^^ 5#4) <<< x.toNat)).bind fun a => some (-a)) ⊑
            if 4#4 ≤ x then none else some ((x_1 ^^^ 10#4) <<< x.toNat + 1#4 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 4
      a✝ :
        ¬((if (!4#4 >ᵤ x) = true then none else some ((x_1 ^^^ 5#4) <<< x.toNat)).bind fun a => some (~~~a + 1#4)) ⊑
            if (!4#4 >ᵤ x) = true then none else some ((x_1 ^^^ 10#4) <<< x.toNat + 1#4 <<< x.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:90:90: Bitwuzla proved the goal after 77.000000ms
LeanSAT proved the goal after 118.000000ms: rewriting 12.090417ms, bitblasting 0.000000ms, SAT solving 60.898333ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:92:89: Bitwuzla proved the goal after 73.000000ms
LeanSAT proved the goal after 80.000000ms: rewriting 13.201583ms, bitblasting 0.000000ms, SAT solving 60.816000ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:94:89: Bitwuzla proved the goal after 79.000000ms
LeanSAT proved the goal after 78.000000ms: rewriting 12.910708ms, bitblasting 0.000000ms, SAT solving 58.859084ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:96:144: Bitwuzla proved the goal after 80.000000ms
LeanSAT proved the goal after 82.000000ms: rewriting 15.674542ms, bitblasting 0.000000ms, SAT solving 56.869125ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:98:117: Bitwuzla provided a counter example after 79.000000ms
LeanSAT provided a counter example after 74.000000ms: rewriting 12.319375 SAT solving 60.812375ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:98:8: (kernel) declaration has metavariables 'negation_of_increment_via_or_disjoint_thm'
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:100:99: Bitwuzla proved the goal after 0.000000ms
LeanSAT proved the goal after 7.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gsubhofhnegatible_proof.lean:102:127: Bitwuzla proved the goal after 727.000000ms
LeanSAT proved the goal after 857.000000ms: rewriting 14.134584ms, bitblasting 0.000000ms, SAT solving 377.675000ms, LRAT processing 217.629917ms
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gsubhofhnegatible_proof
