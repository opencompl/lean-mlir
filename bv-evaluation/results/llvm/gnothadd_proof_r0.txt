⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gnothadd_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.lean:7:85: Bitwuzla proved the goal after 78.000000ms
LeanSAT proved the goal after 78.000000ms: rewriting 11.203083ms, bitblasting 0.000000ms, SAT solving 57.788375ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.lean:9:93: Bitwuzla proved the goal after 78.000000ms
LeanSAT proved the goal after 85.000000ms: rewriting 11.255875ms, bitblasting 0.000000ms, SAT solving 60.995917ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.lean:16:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.lean:16:20: [bv] [0.035005] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (x_1.msb ^^ (255#8).msb) = x.msb ∧ ¬((x_1 ^^^ 255#8) + x).msb = (x_1.msb ^^ (255#8).msb) then none
                else some ((x_1 ^^^ 255#8) + x)).bind
              fun x' => some (x' ^^^ 255#8)) ⊑
            if
                (BitVec.signExtend 9 x_1 - BitVec.signExtend 9 x).msb =
                  (BitVec.signExtend 9 x_1 - BitVec.signExtend 9 x).getMsbD 1 then
              some (x_1 - x)
            else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if ((!x_1.getLsbD 7) == x.getLsbD 7 && !((x_1 ^^^ 255#8) + x).getLsbD 7 == !x_1.getLsbD 7) = true then none
                else some ((x_1 ^^^ 255#8) + x)).bind
              fun a => some (a ^^^ 255#8)) ⊑
            if
                ((BitVec.signExtend 9 x_1 + (~~~BitVec.signExtend 9 x + 1#9)).getLsbD 8 ==
                    (BitVec.signExtend 9 x_1 + (~~~BitVec.signExtend 9 x + 1#9)).getMsbD 1) =
                  true then
              some (x_1 + (~~~x + 1#8))
            else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.lean:21:51: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.lean:21:51: [bv] [0.021165] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (x_1 ^^^ 255#8) + x < x_1 ^^^ 255#8 ∨ (x_1 ^^^ 255#8) + x < x then none
                else some ((x_1 ^^^ 255#8) + x)).bind
              fun x' => some (x' ^^^ 255#8)) ⊑
            if x_1 < x then none else some (x_1 - x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (!((!x_1 ^^^ 255#8 >ᵤ (x_1 ^^^ 255#8) + x) && !x >ᵤ (x_1 ^^^ 255#8) + x)) = true then none
                else some ((x_1 ^^^ 255#8) + x)).bind
              fun a => some (a ^^^ 255#8)) ⊑
            if (x >ᵤ x_1) = true then none else some (x_1 + (~~~x + 1#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.lean:31:20: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gnothadd_proof.lean:31:20: [bv] [0.041224] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (x_1.msb ^^ (255#8).msb) = x.msb ∧ ¬((x_1 ^^^ 255#8) + x).msb = (x_1.msb ^^ (255#8).msb) then none
                else
                  if (x_1 ^^^ 255#8) + x < x_1 ^^^ 255#8 ∨ (x_1 ^^^ 255#8) + x < x then none
                  else some ((x_1 ^^^ 255#8) + x)).bind
              fun x' => some (x' ^^^ 255#8)) ⊑
            if
                (BitVec.signExtend 9 x_1 - BitVec.signExtend 9 x).msb =
                  (BitVec.signExtend 9 x_1 - BitVec.signExtend 9 x).getMsbD 1 then
              if x_1 < x then none else some (x_1 - x)
            else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if ((!x_1.getLsbD 7) == x.getLsbD 7 && !((x_1 ^^^ 255#8) + x).getLsbD 7 == !x_1.getLsbD 7) = true then none
                else
                  if (!((!x_1 ^^^ 255#8 >ᵤ (x_1 ^^^ 255#8) + x) && !x >ᵤ (x_1 ^^^ 255#8) + x)) = true then none
                  else some ((x_1 ^^^ 255#8) + x)).bind
              fun a => some (a ^^^ 255#8)) ⊑
            if
                ((BitVec.signExtend 9 x_1 + (~~~BitVec.signExtend 9 x + 1#9)).getLsbD 8 ==
                    (BitVec.signExtend 9 x_1 + (~~~BitVec.signExtend 9 x + 1#9)).getMsbD 1) =
                  true then
              if (x >ᵤ x_1) = true then none else some (x_1 + (~~~x + 1#8))
            else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gnothadd_proof
