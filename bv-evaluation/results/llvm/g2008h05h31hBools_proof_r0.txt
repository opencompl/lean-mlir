⚠ [874/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [879/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [884/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
Bitwuzla proved the goal after 93.952570ms, solving context: 0.000000ms
LeanSAT proved the goal after 81.531780ms: rewriting 19.520710ms, bitblasting 0.000000ms, SAT solving 57.395690ms, LRAT trimming 0.000000ms, LRAT checking 2.016470ms
Bitwuzla proved the goal after 2.621000ms, solving context: 0.000000ms
LeanSAT proved the goal after 2.353270ms: rewriting 2.336910ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2008h05h31hBools_proof.lean:34:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2008h05h31hBools_proof.lean:29:8: error: (kernel) declaration has metavariables 'foo3_thm'
[bv] [0.024463] Normalizing goal
  [Meta.synthInstance] [0.001666] ✅️ Decidable ((if x✝¹ = 0 then none else some (x✝ / x✝¹)) ⊑ some x✝)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 1
      x✝¹ x✝ : BitVec 1
      a✝ : ¬(if x✝¹ = 0 then none else some (x✝ / x✝¹)) ⊑ some x✝
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 1
      x✝¹ x✝ : BitVec 1
      a✝ : ¬(if (x✝¹ == 0#1) = true then none else some (x✝ &&& x✝¹)) ⊑ some x✝
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2008h05h31hBools_proof.lean:43:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/g2008h05h31hBools_proof.lean:38:8: error: (kernel) declaration has metavariables 'foo4_thm'
[bv] [0.084698] Normalizing goal
  [Meta.synthInstance] [0.001722] ✅️ Decidable
        ((if (x✝¹ == 0 || 1 != 1 && x✝ == BitVec.intMin 1 && x✝¹ == -1) = true then none else some (x✝.sdiv x✝¹)) ⊑
          some x✝)
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 1
      x✝¹ x✝ : BitVec 1
      a✝ :
        ¬(if (x✝¹ == 0 || 1 != 1 && x✝ == BitVec.intMin 1 && x✝¹ == -1) = true then none else some (x✝.sdiv x✝¹)) ⊑
            some x✝
      ⊢ False
  [Meta.isDefEq] [0.001009] ❌️ ?a == ?a =?= x✝¹ == 0#1
  [Meta.isDefEq] [0.002328] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (Eq.trans
            (congrArg (x✝¹ == 0#1).or
              (Eq.trans (congrArg (fun x => x && x✝¹ == 1#1) (Bool.false_and (x✝ == BitVec.intMin 1)))
                (Bool.false_and (x✝¹ == 1#1))))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#1) false))
          (Eq.trans (congrArg not (Eq.trans (congrArg (!x✝¹ == 0#1).and Bool.not_false) (Bool.and_true !x✝¹ == 0#1)))
            (Bool.not_not (x✝¹ == 0#1))))
    [Meta.isDefEq.assign] [0.002324] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (Eq.trans
              (congrArg (x✝¹ == 0#1).or
                (Eq.trans (congrArg (fun x => x && x✝¹ == 1#1) (Bool.false_and (x✝ == BitVec.intMin 1)))
                  (Bool.false_and (x✝¹ == 1#1))))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#1) false))
            (Eq.trans (congrArg not (Eq.trans (congrArg (!x✝¹ == 0#1).and Bool.not_false) (Bool.and_true !x✝¹ == 0#1)))
              (Bool.not_not (x✝¹ == 0#1))))
      [Meta.isDefEq.assign.checkTypes] [0.002299] ✅️ (?h₁ : ((x✝¹ == 0 ||
                1 != 1 && x✝ == BitVec.intMin 1 && x✝¹ == -1) =
              true) =
            ((x✝¹ == 0#1) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (Eq.trans
                (congrArg (x✝¹ == 0#1).or
                  (Eq.trans (congrArg (fun x => x && x✝¹ == 1#1) (Bool.false_and (x✝ == BitVec.intMin 1)))
                    (Bool.false_and (x✝¹ == 1#1))))
                (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#1) false))
              (Eq.trans
                (congrArg not (Eq.trans (congrArg (!x✝¹ == 0#1).and Bool.not_false) (Bool.and_true !x✝¹ == 0#1)))
                (Bool.not_not
                  (x✝¹ ==
                    0#1)))) : ((x✝¹ == 0#1 || false && x✝ == BitVec.intMin 1 && x✝¹ == 1#1) = true) =
            ((x✝¹ == 0#1) = true))
        [Meta.isDefEq] [0.002294] ✅️ ((x✝¹ == 0 || 1 != 1 && x✝ == BitVec.intMin 1 && x✝¹ == -1) = true) =
              ((x✝¹ == 0#1) =
                true) =?= ((x✝¹ == 0#1 || false && x✝ == BitVec.intMin 1 && x✝¹ == 1#1) = true) = ((x✝¹ == 0#1) = true)
          [Meta.isDefEq] [0.002261] ✅️ (x✝¹ == 0 || 1 != 1 && x✝ == BitVec.intMin 1 && x✝¹ == -1) =
                true =?= (x✝¹ == 0#1 || false && x✝ == BitVec.intMin 1 && x✝¹ == 1#1) = true
            [Meta.isDefEq] [0.002237] ✅️ x✝¹ == 0 ||
                  1 != 1 && x✝ == BitVec.intMin 1 &&
                    x✝¹ == -1 =?= x✝¹ == 0#1 || false && x✝ == BitVec.intMin 1 && x✝¹ == 1#1
              [Meta.isDefEq.delta] [0.002214] ✅️ x✝¹ == 0 ||
                    1 != 1 && x✝ == BitVec.intMin 1 &&
                      x✝¹ == -1 =?= x✝¹ == 0#1 || false && x✝ == BitVec.intMin 1 && x✝¹ == 1#1
                [Meta.isDefEq] [0.001795] ✅️ 1 != 1 && x✝ == BitVec.intMin 1 &&
                      x✝¹ == -1 =?= false && x✝ == BitVec.intMin 1 && x✝¹ == 1#1
                  [Meta.isDefEq.delta] [0.001774] ✅️ 1 != 1 && x✝ == BitVec.intMin 1 &&
                        x✝¹ == -1 =?= false && x✝ == BitVec.intMin 1 && x✝¹ == 1#1
                    [Meta.isDefEq] [0.001290] ✅️ x✝¹ == -1 =?= x✝¹ == 1#1
                      [Meta.isDefEq] [0.001257] ✅️ instBEqOfDecidableEq.1 x✝¹ (-1) =?= instBEqOfDecidableEq.1 x✝¹ 1#1
                        [Meta.isDefEq] [0.001206] ✅️ Decidable.decide (x✝¹ = -1) =?= Decidable.decide (x✝¹ = 1#1)
                          [Meta.isDefEq.delta] [0.001186] ✅️ Decidable.decide
                                (x✝¹ = -1) =?= Decidable.decide (x✝¹ = 1#1)
                            [Meta.isDefEq] [0.001104] ✅️ x✝¹ = -1 =?= x✝¹ = 1#1
                              [Meta.isDefEq] [0.001073] ✅️ -1 =?= 1#1
  [Meta.appBuilder] [0.001075] ✅️ f: HAdd.hAdd, xs: [~~~x✝, 1#1]
  [Meta.appBuilder] [0.001004] ✅️ f: HAdd.hAdd, xs: [~~~(x✝ &&& (~~~x✝¹ ^^^ 1#1)), 1#1]
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 1
      x✝¹ x✝ : BitVec 1
      a✝ :
        ¬(if (x✝¹ == 0#1) = true then none
            else
              some
                (if x✝.getLsbD 0 = true then
                  if x✝¹.getLsbD 0 = true then (~~~x✝ ^^^ 1#1) &&& (~~~x✝¹ ^^^ 1#1)
                  else ~~~((~~~x✝ ^^^ 1#1) &&& x✝¹) ^^^ 1#1
                else if x✝¹.getLsbD 0 = true then ~~~(x✝ &&& (~~~x✝¹ ^^^ 1#1)) ^^^ 1#1 else x✝ &&& x✝¹)) ⊑
            some x✝
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
