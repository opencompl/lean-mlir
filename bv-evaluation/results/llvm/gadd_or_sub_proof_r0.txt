⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gadd_or_sub_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:8:106: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:8:106: [bv] [0.014236] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 32
      a✝ : ¬(if (-x ||| x) + x < -x ||| x ∨ (-x ||| x) + x < x then none else some ((-x ||| x) + x)) ⊑ some x
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 32
      a✝ :
        ¬(if (!((!~~~x + 1#32 ||| x >ᵤ (~~~x + 1#32 ||| x) + x) && !x >ᵤ (~~~x + 1#32 ||| x) + x)) = true then none
            else some ((~~~x + 1#32 ||| x) + x)) ⊑
            some x
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:14:40: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:14:40: [bv] [0.036744] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if ((-(x * x)).msb = true → (x * x).msb = true) ∧ ¬(x * x + (-(x * x) ||| x * x)).msb = (x * x).msb then none
            else some (x * x + (-(x * x) ||| x * x))) ⊑
            (if (x * x).msb = (255#8).msb ∧ ¬(x * x + 255#8).msb = (x * x).msb then none else some (x * x + 255#8)).bind
              fun a => some (a &&& x * x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if
                (!((~~~(x * x) + 1#8).getLsbD 7 && !(x * x).getLsbD 7) &&
                    !(x * x + (~~~(x * x) + 1#8 ||| x * x)).getLsbD 7 == (x * x).getLsbD 7) =
                  true then
              none
            else some (x * x + (~~~(x * x) + 1#8 ||| x * x))) ⊑
            (if ((x * x).getLsbD 7 && !(x * x + 255#8).getLsbD 7 == (x * x).getLsbD 7) = true then none
                else some (x * x + 255#8)).bind
              fun a => some (a &&& x * x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:24:23: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:24:23: [bv] [0.029831] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 128
      a✝ :
        ¬(if
                ((-(x * x)).msb = true → (x * x).msb = true) ∧
                  ¬((x * x ||| -(x * x)) + x * x).msb = ((x * x).msb || (-(x * x)).msb) then
              none
            else
              if (x * x ||| -(x * x)) + x * x < x * x ||| -(x * x) ∨ (x * x ||| -(x * x)) + x * x < x * x then none
              else some ((x * x ||| -(x * x)) + x * x)) ⊑
            some (x * x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 128
      a✝ :
        ¬(if
                (!((~~~(x * x) + 1#128).getLsbD 127 && !(x * x).getLsbD 127) &&
                    !((x * x ||| ~~~(x * x) + 1#128) + x * x).getLsbD 127 ==
                        !(!(x * x).getLsbD 127 && !(~~~(x * x) + 1#128).getLsbD 127)) =
                  true then
              none
            else
              if
                  (!((!x * x ||| ~~~(x * x) + 1#128 >ᵤ (x * x ||| ~~~(x * x) + 1#128) + x * x) &&
                        !x * x >ᵤ (x * x ||| ~~~(x * x) + 1#128) + x * x)) =
                    true then
                none
              else some ((x * x ||| ~~~(x * x) + 1#128) + x * x)) ⊑
            some (x * x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:26:139: Bitwuzla proved the goal after 77.000000ms
LeanSAT proved the goal after 4779.000000ms: rewriting 12.856292ms, bitblasting 55.439209ms, SAT solving 3446.667750ms, LRAT processing 1017.940542ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:28:97: Bitwuzla proved the goal after 78.000000ms
LeanSAT proved the goal after 79.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 66.388042ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:30:96: Bitwuzla proved the goal after 79.000000ms
LeanSAT proved the goal after 77.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 65.219042ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:32:89: Bitwuzla proved the goal after 81.000000ms
LeanSAT proved the goal after 80.000000ms: rewriting 10.058042ms, bitblasting 0.000000ms, SAT solving 65.594459ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gadd_or_sub_proof.lean:34:98: Bitwuzla proved the goal after 79.000000ms
LeanSAT proved the goal after 79.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 66.283292ms, LRAT processing 0.000000ms
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gadd_or_sub_proof
