⚠ [861/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [867/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [884/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
⚠ [890/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
Bitwuzla proved the goal after 241.843260ms, solving context: 13.000000ms
LeanSAT proved the goal after 143.196740ms: rewriting 57.791030ms, bitblasting 0.000000ms, SAT solving 59.813610ms, LRAT trimming 1.180970ms, LRAT checking 20.117710ms
Bitwuzla proved the goal after 72.795819ms, solving context: 0.000000ms
LeanSAT proved the goal after 120.442160ms: rewriting 40.748400ms, bitblasting 0.000000ms, SAT solving 64.742810ms, LRAT trimming 0.000000ms, LRAT checking 8.380470ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhmerge_proof.lean:37:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhmerge_proof.lean:37:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhmerge_proof.lean:30:8: error: (kernel) declaration has metavariables 'PR38781_thm'
[bv] [0.027639] Normalizing goal
  [Meta.synthInstance] [0.001226] ✅️ Decidable
        ((if 31#32 ≥ ↑32 then none
          else if 31#32 ≥ ↑32 then none else some ((x✝ >>> 31#32 ^^^ 1#32) &&& (x✝¹ >>> 31#32 ^^^ 1#32))) ⊑
          some (BitVec.zeroExtend 32 (BitVec.ofBool (x✝ ||| x✝¹ >ₛ -1#32))))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if 31#32 ≥ ↑32 then none
            else if 31#32 ≥ ↑32 then none else some ((x✝ >>> 31#32 ^^^ 1#32) &&& (x✝¹ >>> 31#32 ^^^ 1#32))) ⊑
            some (BitVec.zeroExtend 32 (BitVec.ofBool (x✝ ||| x✝¹ >ₛ -1#32)))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬some ((x✝ >>> 31 ^^^ 1#32) &&& (x✝¹ >>> 31 ^^^ 1#32)) ⊑
            some (BitVec.zeroExtend 32 (if (!(x✝ ||| x✝¹).getLsbD 31) = true then 1#1 else 0#1))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 72.159810ms, solving context: 0.000000ms
LeanSAT proved the goal after 85.683430ms: rewriting 23.082950ms, bitblasting 0.000000ms, SAT solving 58.334140ms, LRAT trimming 0.000000ms, LRAT checking 1.884660ms
