⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gmulhpow2_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.c --json
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:11:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:17:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:19:71: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:19:71: [bv] [0.015361] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 1
      a✝ : ¬(sorry.bind fun a => some (a * x)) ⊑ sorry.bind fun y' => if 8#8 ≤ y' then none else some (x <<< y'.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 1
      a✝ :
        ¬(sorry.bind fun a => some (a * x)) ⊑
            sorry.bind fun a => if (!8#8 >ᵤ a) = true then none else some (x <<< a.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:25:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:36:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:39:111: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:39:111: [bv] [0.050109] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              if
                  BitVec.signExtend 16 a * BitVec.signExtend 16 x < BitVec.signExtend 16 (BitVec.twoPow 8 7) ∨
                    BitVec.twoPow 16 7 ≤ BitVec.signExtend 16 a * BitVec.signExtend 16 x then
                none
              else
                if BitVec.twoPow 16 7 <<< 1 ≤ BitVec.setWidth 16 a * BitVec.setWidth 16 x then none else some (a * x)) ⊑
            sorry.bind fun y' =>
              if x <<< ↑y'.toNat >>> ↑y'.toNat = x then none else if 8#8 ≤ y' then none else some (x <<< y'.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 1
      a✝ :
        ¬(sorry.bind fun a =>
              if
                  (!((!BitVec.signExtend 16 (BitVec.twoPow 8 7) >ᵤ BitVec.signExtend 16 a * BitVec.signExtend 16 x) &&
                        BitVec.twoPow 16 7 >ᵤ BitVec.signExtend 16 a * BitVec.signExtend 16 x)) =
                    true then
                none
              else
                if (!BitVec.twoPow 16 7 <<< 1 >ᵤ BitVec.zeroExtend 16 a * BitVec.zeroExtend 16 x) = true then none
                else some (a * x)) ⊑
            sorry.bind fun a =>
              if (x <<< BitVec.ofNat 8 a.toNat >>> BitVec.ofNat 8 a.toNat == x) = true then none
              else if (!8#8 >ᵤ a) = true then none else some (x <<< a.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:45:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:51:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:53:71: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:53:71: [bv] [0.014899] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 1
      a✝ : ¬(sorry.bind fun a => some (a * x)) ⊑ sorry.bind fun y' => if 8#8 ≤ y' then none else some (x <<< y'.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      x_1 : BitVec 1
      a✝ :
        ¬(sorry.bind fun a => some (a * x)) ⊑
            sorry.bind fun a => if (!8#8 >ᵤ a) = true then none else some (x <<< a.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:54:0: unexpected identifier; expected command
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:54:81: 'mul_selectp2_x_non_const_thm' has already been declared
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:73:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:79:28: invalid pattern
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:81:81: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:81:81: [bv] [0.016199] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 8
      a✝ :
        ¬(sorry.bind fun y' => some (x_1 * x_1 * y')) ⊑
            sorry.bind fun y' => if 8#8 ≤ y' then none else some ((x_1 * x_1) <<< y'.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 1
      x_1 : BitVec 8
      a✝ :
        ¬(sorry.bind fun y' => some (x_1 * x_1 * y')) ⊑
            sorry.bind fun a => if (!8#8 >ᵤ a) = true then none else some ((x_1 * x_1) <<< a.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:86:79: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:86:79: [bv] [0.022212] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if 4#8 <<< x.toNat >>> x.toNat = 4#8 then none else if 8#8 ≤ x then none else some (4#8 <<< x.toNat)).bind
              fun y' => some (x_1 * y')) ⊑
            if 8#8 ≤ x + 2#8 then none else some (x_1 <<< ((x.toNat + 2) % 256))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (4#8 <<< x.toNat >>> x.toNat == 4#8) = true then none
                else if (!8#8 >ᵤ x) = true then none else some (4#8 <<< x.toNat)).bind
              fun a => some (x_1 * a)) ⊑
            if (!8#8 >ᵤ x + 2#8) = true then none else some (x_1 <<< ((x.toNat + 2) % 256))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:91:79: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gmulhpow2_proof.lean:91:79: [bv] [0.021285] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if (4#8 <<< x.toNat).sshiftRight x.toNat = 4#8 then none
                else if 8#8 ≤ x then none else some (4#8 <<< x.toNat)).bind
              fun y' => some (x_1 * y')) ⊑
            if 8#8 ≤ x + 2#8 then none else some (x_1 <<< ((x.toNat + 2) % 256))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬((if ((4#8 <<< x.toNat).sshiftRight x.toNat == 4#8) = true then none
                else if (!8#8 >ᵤ x) = true then none else some (4#8 <<< x.toNat)).bind
              fun a => some (x_1 * a)) ⊑
            if (!8#8 >ᵤ x + 2#8) = true then none else some (x_1 <<< ((x.toNat + 2) % 256))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gmulhpow2_proof
