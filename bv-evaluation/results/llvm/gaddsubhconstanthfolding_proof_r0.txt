⚠ [667/887] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [674/887] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [687/887] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [869/887] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [873/887] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [874/887] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [880/887] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/887] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [887/887] Building SSA.Projects.InstCombine.tests.proofs.gaddsubhconstanthfolding_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-25/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:7:84: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 73.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 61.018375ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:9:83: Bitwuzla proved the goal after 73.000000ms
LeanSAT proved the goal after 70.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 57.214458ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:11:94: Bitwuzla proved the goal after 82.000000ms
LeanSAT proved the goal after 99.000000ms: rewriting 15.168625ms, bitblasting 0.000000ms, SAT solving 61.476291ms, LRAT trimming 0.000000ms, LRAT checking 10.446000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:16:111: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:16:111: [bv] [0.054238] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if x.msb = false ∧ ¬(x + 1#8).msb = x.msb then none else some (x + 1#8)).bind fun a =>
              if (385#9 - BitVec.signExtend 9 a).msb = (385#9 - BitVec.signExtend 9 a).getMsbD 1 then some (129#8 - a)
              else none) ⊑
            if (384#9 - BitVec.signExtend 9 x).msb = (384#9 - BitVec.signExtend 9 x).getMsbD 1 then some (128#8 - x)
            else none
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!x.getLsbD 7 && !(x + 1#8).getLsbD 7 == x.getLsbD 7) = true then none else some (x + 1#8)).bind fun a =>
              if
                  ((386#9 + ~~~BitVec.signExtend 9 a).getLsbD 8 == (386#9 + ~~~BitVec.signExtend 9 a).getMsbD 1) =
                    true then
                some (130#8 + ~~~a)
              else none) ⊑
            if
                ((385#9 + ~~~BitVec.signExtend 9 x).getLsbD 8 == (385#9 + ~~~BitVec.signExtend 9 x).getMsbD 1) =
                  true then
              some (129#8 + ~~~x)
            else none
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:20:27: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:20:27: [bv] [0.028019] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if x.msb = false ∧ ¬(x + 1#8).msb = x.msb then none else some (x + 1#8)).bind fun y' => some (129#8 - y')) ⊑
            some (128#8 - x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!x.getLsbD 7 && !(x + 1#8).getLsbD 7 == x.getLsbD 7) = true then none else some (x + 1#8)).bind fun a =>
              some (130#8 + ~~~a)) ⊑
            some (129#8 + ~~~x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:25:27: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:25:27: [bv] [0.026115] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if (385#9 - BitVec.signExtend 9 (x + 1#8)).msb = (385#9 - BitVec.signExtend 9 (x + 1#8)).getMsbD 1 then
              some (129#8 - (x + 1#8))
            else none) ⊑
            some (128#8 - x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬(if
                ((386#9 + ~~~BitVec.signExtend 9 (x + 1#8)).getLsbD 8 ==
                    (386#9 + ~~~BitVec.signExtend 9 (x + 1#8)).getMsbD 1) =
                  true then
              some (129#8 + ~~~x)
            else none) ⊑
            some (129#8 + ~~~x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:30:27: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:30:27: [bv] [0.044361] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if x.msb = (2#8).msb ∧ ¬(x + 2#8).msb = x.msb then none else some (x + 2#8)).bind fun a =>
              if (385#9 - BitVec.signExtend 9 a).msb = (385#9 - BitVec.signExtend 9 a).getMsbD 1 then some (129#8 - a)
              else none) ⊑
            some (127#8 - x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!x.getLsbD 7 && !(x + 2#8).getLsbD 7 == x.getLsbD 7) = true then none else some (x + 2#8)).bind fun a =>
              if
                  ((386#9 + ~~~BitVec.signExtend 9 a).getLsbD 8 == (386#9 + ~~~BitVec.signExtend 9 a).getMsbD 1) =
                    true then
                some (130#8 + ~~~a)
              else none) ⊑
            some (128#8 + ~~~x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:35:55: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:35:55: [bv] [0.030668] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if x + 1#8 < x ∨ x + 1#8 < 1#8 then none else some (x + 1#8)).bind fun y' =>
              if 129#8 < y' then none else some (129#8 - y')) ⊑
            if 128#8 < x then none else some (128#8 - x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!((!x >ᵤ x + 1#8) && !1#8 >ᵤ x + 1#8)) = true then none else some (x + 1#8)).bind fun a =>
              if (a >ᵤ 129#8) = true then none else some (130#8 + ~~~a)) ⊑
            if (x >ᵤ 128#8) = true then none else some (129#8 + ~~~x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:39:27: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:39:27: [bv] [0.024550] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if x + 1#8 < x ∨ x + 1#8 < 1#8 then none else some (x + 1#8)).bind fun y' => some (129#8 - y')) ⊑
            some (128#8 - x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ :
        ¬((if (!((!x >ᵤ x + 1#8) && !1#8 >ᵤ x + 1#8)) = true then none else some (x + 1#8)).bind fun a =>
              some (130#8 + ~~~a)) ⊑
            some (129#8 + ~~~x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:42:88: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:42:88: [bv] [0.019064] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if 129#8 < x + 1#8 then none else some (129#8 - (x + 1#8))) ⊑ some (128#8 - x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 8
      a✝ : ¬(if (x + 1#8 >ᵤ 129#8) = true then none else some (129#8 + ~~~x)) ⊑ some (129#8 + ~~~x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:44:92: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 74.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 61.203292ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:46:92: Bitwuzla proved the goal after 70.000000ms
LeanSAT proved the goal after 73.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 59.981625ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:48:86: Bitwuzla proved the goal after 82.000000ms
LeanSAT proved the goal after 91.000000ms: rewriting 15.841500ms, bitblasting 0.000000ms, SAT solving 58.206792ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:50:84: Bitwuzla proved the goal after 0.000000ms
LeanSAT proved the goal after 9.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:52:83: Bitwuzla proved the goal after 0.000000ms
LeanSAT proved the goal after 9.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 0.000000ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:54:94: Bitwuzla proved the goal after 79.000000ms
LeanSAT proved the goal after 87.000000ms: rewriting 15.519667ms, bitblasting 0.000000ms, SAT solving 57.705458ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:59:32: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:59:32: [bv] [0.029614] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 7
      a✝ :
        ¬(if (x_1 + 42#7).msb = (10#7 - x).msb ∧ ¬(x_1 + 42#7 + (10#7 - x)).msb = (x_1 + 42#7).msb then none
            else some (x_1 + 42#7 + (10#7 - x))) ⊑
            some (x_1 - x + 52#7)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 7
      a✝ :
        ¬(if
                ((x_1 + 42#7).getLsbD 6 == (11#7 + ~~~x).getLsbD 6 &&
                    !(x_1 + 42#7 + (11#7 + ~~~x)).getLsbD 6 == (x_1 + 42#7).getLsbD 6) =
                  true then
              none
            else some (x_1 + 42#7 + (11#7 + ~~~x))) ⊑
            some (x_1 + (~~~x + 1#7) + 52#7)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:61:89: Bitwuzla proved the goal after 78.000000ms
LeanSAT proved the goal after 96.000000ms: rewriting 17.717833ms, bitblasting 0.000000ms, SAT solving 61.790209ms, LRAT trimming 0.000000ms, LRAT checking 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:66:38: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gaddsubhconstanthfolding_proof.lean:66:38: [bv] [0.047321] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 5
      a✝ :
        ¬((if (10#6 - BitVec.signExtend 6 x).msb = (10#6 - BitVec.signExtend 6 x).getMsbD 1 then some (10#5 - x)
                else none).bind
              fun y' =>
              if (x_1 * x_1).msb = y'.msb ∧ ¬(x_1 * x_1 + y').msb = (x_1 * x_1).msb then none
              else some (x_1 * x_1 + y')) ⊑
            some (x_1 * x_1 - x + 10#5)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 5
      a✝ :
        ¬((if ((11#6 + ~~~BitVec.signExtend 6 x).getLsbD 5 == (11#6 + ~~~BitVec.signExtend 6 x).getMsbD 1) = true then
                  some (11#5 + ~~~x)
                else none).bind
              fun a =>
              if
                  ((x_1 * x_1).getLsbD 4 == a.getLsbD 4 && !(x_1 * x_1 + a).getLsbD 4 == (x_1 * x_1).getLsbD 4) =
                    true then
                none
              else some (x_1 * x_1 + a)) ⊑
            some (x_1 * x_1 + (~~~x + 1#5) + 10#5)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gaddsubhconstanthfolding_proof
