⚠ [665/885] Replayed SSA.Core.ErasedContext
warning: ././././SSA/Core/ErasedContext.lean:325:14: unused variable `t`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [672/885] Replayed SSA.Core.Framework
warning: ././././SSA/Core/Framework.lean:1826:9: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:1833:75: unused variable `inst`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2083:31: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././SSA/Core/Framework.lean:2084:33: unused variable `x`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [685/885] Replayed SSA.Core.MLIRSyntax.AST
warning: ././././SSA/Core/MLIRSyntax/AST.lean:40:4: The namespace 'SSAVal' is duplicated in the declaration 'MLIR.AST.SSAVal.SSAVal'
note: this linter can be disabled with `set_option linter.dupNamespace false`
⚠ [867/885] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [871/885] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [872/885] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/885] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [879/885] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
✖ [885/885] Building SSA.Projects.InstCombine.tests.proofs.gbinophandhshifts_proof
trace: .> LEAN_PATH=././.lake/packages/batteries/.lake/build/lib:././.lake/packages/Qq/.lake/build/lib:././.lake/packages/aesop/.lake/build/lib:././.lake/packages/proofwidgets/.lake/build/lib:././.lake/packages/Cli/.lake/build/lib:././.lake/packages/importGraph/.lake/build/lib:././.lake/packages/LeanSearchClient/.lake/build/lib:././.lake/packages/mathlib/.lake/build/lib:././.lake/packages/leanwuzla/.lake/build/lib:././.lake/build/lib DYLD_LIBRARY_PATH= /Users/luisa/.elan/toolchains/leanprover--lean4---nightly-2024-10-24/bin/lean ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean -R ./././. -o ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.olean -i ././.lake/build/lib/SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.ilean -c ././.lake/build/ir/SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.c --json
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:7:113: Bitwuzla proved the goal after 80.000000ms
LeanSAT proved the goal after 79.000000ms: rewriting 12.711250ms, bitblasting 0.000000ms, SAT solving 61.283375ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:9:124: Bitwuzla proved the goal after 77.000000ms
LeanSAT proved the goal after 76.000000ms: rewriting 11.681417ms, bitblasting 0.000000ms, SAT solving 61.116083ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:11:109: Bitwuzla proved the goal after 78.000000ms
LeanSAT proved the goal after 85.000000ms: rewriting 13.235083ms, bitblasting 0.000000ms, SAT solving 60.624666ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:17:111: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:17:111: [bv] [0.033885] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 >>> 2 + (x >>> 2 + 48#8)) ⊑
            (if (48#8).msb = false ∧ (x >>> 2 + 48#8).msb = true then none
                else if x >>> 2 + 48#8 < x >>> 2 ∨ x >>> 2 + 48#8 < 48#8 then none else some (x >>> 2 + 48#8)).bind
              fun y' => if x_1 >>> 2 + y' < x_1 >>> 2 ∨ x_1 >>> 2 + y' < y' then none else some (x_1 >>> 2 + y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 >>> 2 + (x >>> 2 + 48#8)) ⊑
            (if (x >>> 2 + 48#8).getLsbD 7 = true then none
                else
                  if (!((!x >>> 2 >ᵤ x >>> 2 + 48#8) && !48#8 >ᵤ x >>> 2 + 48#8)) = true then none
                  else some (x >>> 2 + 48#8)).bind
              fun a =>
              if (!((!x_1 >>> 2 >ᵤ x_1 >>> 2 + a) && !a >ᵤ x_1 >>> 2 + a)) = true then none else some (x_1 >>> 2 + a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:19:111: Bitwuzla proved the goal after 76.000000ms
LeanSAT proved the goal after 73.000000ms: rewriting 10.612375ms, bitblasting 0.000000ms, SAT solving 57.516292ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:21:86: Bitwuzla proved the goal after 74.000000ms
LeanSAT proved the goal after 73.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 60.480042ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:23:117: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 71.000000ms: rewriting 10.140958ms, bitblasting 0.000000ms, SAT solving 56.388625ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:25:119: Bitwuzla proved the goal after 76.000000ms
LeanSAT proved the goal after 75.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 60.817042ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:30:111: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:30:111: [bv] [0.025123] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 x_3 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_2 then none else some (x_3 >>> x_2.toNat)).bind fun a =>
              (if 8#8 ≤ x_2 then none else some (x_1 >>> x_2.toNat)).bind fun a_1 => some (a ||| (a_1 ||| x))) ⊑
            (if 8#8 ≤ x_2 then none else some ((x_1 ||| x_3) >>> x_2.toNat)).bind fun a => some (a ||| x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 x_3 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_2) = true then none else some (x_3 >>> x_2.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_2) = true then none else some (x_1 >>> x_2.toNat)).bind fun a_1 =>
                some (a ||| (a_1 ||| x))) ⊑
            (if (!8#8 >ᵤ x_2) = true then none else some ((x_1 ||| x_3) >>> x_2.toNat)).bind fun a => some (a ||| x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:35:111: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:35:111: [bv] [0.024106] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 x_3 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_2 then none else some (x_3 <<< x_2.toNat)).bind fun a =>
              (if 8#8 ≤ x_2 then none else some (x_1 <<< x_2.toNat)).bind fun a_1 => some (a ^^^ (a_1 ^^^ x))) ⊑
            (if 8#8 ≤ x_2 then none else some ((x_1 ^^^ x_3) <<< x_2.toNat)).bind fun a => some (a ^^^ x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 x_3 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_2) = true then none else some (x_3 <<< x_2.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_2) = true then none else some (x_1 <<< x_2.toNat)).bind fun a_1 =>
                some (a ^^^ (a_1 ^^^ x))) ⊑
            (if (!8#8 >ᵤ x_2) = true then none else some ((x_1 ^^^ x_3) <<< x_2.toNat)).bind fun a => some (a ^^^ x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:41:25: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:41:25: [bv] [0.030213] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 x_3 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_2 then none else some (x_3 <<< x_2.toNat)).bind fun a =>
              (if 8#8 ≤ x_2 then none else some (x_1 <<< x_2.toNat)).bind fun a_1 => some (a + (a_1 + x))) ⊑
            (if 8#8 ≤ x_2 then none else some (x_1 <<< x_2.toNat + x_3 <<< x_2.toNat)).bind fun a => some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 x_3 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_2) = true then none else some (x_3 <<< x_2.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_2) = true then none else some (x_1 <<< x_2.toNat)).bind fun a_1 => some (a + (a_1 + x))) ⊑
            (if (!8#8 >ᵤ x_2) = true then none else some (x_1 <<< x_2.toNat + x_3 <<< x_2.toNat)).bind fun a =>
              some (a + x)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:43:121: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 72.000000ms: rewriting 10.020250ms, bitblasting 0.000000ms, SAT solving 58.730666ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:45:123: Bitwuzla proved the goal after 74.000000ms
LeanSAT proved the goal after 75.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 60.581541ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:47:135: Bitwuzla proved the goal after 75.000000ms
LeanSAT proved the goal after 74.000000ms: rewriting 0.000000ms, bitblasting 0.000000ms, SAT solving 60.439167ms, LRAT processing 0.000000ms
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:49:108: Bitwuzla proved the goal after 76.000000ms
LeanSAT proved the goal after 78.000000ms: rewriting 11.691500ms, bitblasting 0.000000ms, SAT solving 60.636666ms, LRAT processing 0.000000ms
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:54:54: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:54:54: [bv] [0.015654] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 >>> 1 + (x >>> 1 &&& 123#8)) ⊑
            if x_1 >>> 1 + (x >>> 1 &&& 123#8) < x_1 >>> 1 ∨ x_1 >>> 1 + (x >>> 1 &&& 123#8) < x >>> 1 &&& 123#8 then
              none
            else some (x_1 >>> 1 + (x >>> 1 &&& 123#8))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 >>> 1 + (x >>> 1 &&& 123#8)) ⊑
            if
                (!((!x_1 >>> 1 >ᵤ x_1 >>> 1 + (x >>> 1 &&& 123#8)) &&
                      !x >>> 1 &&& 123#8 >ᵤ x_1 >>> 1 + (x >>> 1 &&& 123#8))) =
                  true then
              none
            else some (x_1 >>> 1 + (x >>> 1 &&& 123#8))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:59:36: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:59:36: [bv] [0.017725] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 >>> 1 ||| x >>> 1 + 123#8) ⊑
            (if x >>> 1 + 123#8 < x >>> 1 ∨ x >>> 1 + 123#8 < 123#8 then none else some (x >>> 1 + 123#8)).bind
              fun y' => some (x_1 >>> 1 ||| y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 >>> 1 ||| x >>> 1 + 123#8) ⊑
            (if (!((!x >>> 1 >ᵤ x >>> 1 + 123#8) && !123#8 >ᵤ x >>> 1 + 123#8)) = true then none
                else some (x >>> 1 + 123#8)).bind
              fun a => some (x_1 >>> 1 ||| a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:64:36: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:64:36: [bv] [0.017796] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 >>> 1 ^^^ x >>> 1 + 123#8) ⊑
            (if x >>> 1 + 123#8 < x >>> 1 ∨ x >>> 1 + 123#8 < 123#8 then none else some (x >>> 1 + 123#8)).bind
              fun y' => some (x_1 >>> 1 ^^^ y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 >>> 1 ^^^ x >>> 1 + 123#8) ⊑
            (if (!((!x >>> 1 >ᵤ x >>> 1 + 123#8) && !123#8 >ᵤ x >>> 1 + 123#8)) = true then none
                else some (x >>> 1 + 123#8)).bind
              fun a => some (x_1 >>> 1 ^^^ a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:69:36: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:69:36: [bv] [0.019390] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 <<< 1 &&& x >>> 1 + 123#8) ⊑
            (if x >>> 1 + 123#8 < x >>> 1 ∨ x >>> 1 + 123#8 < 123#8 then none else some (x >>> 1 + 123#8)).bind
              fun y' => some (x_1 <<< 1 &&& y')
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 : BitVec 8
      a✝ :
        ¬some (x_1 <<< 1 &&& x >>> 1 + 123#8) ⊑
            (if (!((!x >>> 1 >ᵤ x >>> 1 + 123#8) && !123#8 >ᵤ x >>> 1 + 123#8)) = true then none
                else some (x >>> 1 + 123#8)).bind
              fun a => some (x_1 <<< 1 &&& a)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:74:91: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:74:91: [bv] [0.022164] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_1 then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x.sshiftRight x_1.toNat)).bind fun x => some (a &&& (x ^^^ 255#8))) ⊑
            if 8#8 ≤ x_1 then none else some ((x_2 &&& (x ^^^ 255#8)).sshiftRight x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_1) = true then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x.sshiftRight x_1.toNat)).bind fun a_1 =>
                some (a &&& (a_1 ^^^ 255#8))) ⊑
            if (!8#8 >ᵤ x_1) = true then none else some ((x_2 &&& (x ^^^ 255#8)).sshiftRight x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:79:91: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:79:91: [bv] [0.021423] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_1 then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x.sshiftRight x_1.toNat)).bind fun y' => some ((a ^^^ 255#8) &&& y')) ⊑
            if 8#8 ≤ x_1 then none else some ((x &&& (x_2 ^^^ 255#8)).sshiftRight x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_1) = true then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x.sshiftRight x_1.toNat)).bind fun a_1 =>
                some ((a ^^^ 255#8) &&& a_1)) ⊑
            if (!8#8 >ᵤ x_1) = true then none else some ((x &&& (x_2 ^^^ 255#8)).sshiftRight x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:84:89: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:84:89: [bv] [0.020547] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_1 then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x.sshiftRight x_1.toNat)).bind fun x => some (a ||| x ^^^ 255#8)) ⊑
            if 8#8 ≤ x_1 then none else some ((x_2 ||| x ^^^ 255#8).sshiftRight x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_1) = true then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x.sshiftRight x_1.toNat)).bind fun a_1 =>
                some (a ||| a_1 ^^^ 255#8)) ⊑
            if (!8#8 >ᵤ x_1) = true then none else some ((x_2 ||| x ^^^ 255#8).sshiftRight x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:89:89: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:89:89: [bv] [0.019613] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_1 then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x.sshiftRight x_1.toNat)).bind fun y' => some (a ^^^ 255#8 ||| y')) ⊑
            if 8#8 ≤ x_1 then none else some ((x ||| x_2 ^^^ 255#8).sshiftRight x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_1) = true then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x.sshiftRight x_1.toNat)).bind fun a_1 =>
                some (a ^^^ 255#8 ||| a_1)) ⊑
            if (!8#8 >ᵤ x_1) = true then none else some ((x ||| x_2 ^^^ 255#8).sshiftRight x_1.toNat)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:95:32: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:95:32: [bv] [0.022067] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_1 then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x.sshiftRight x_1.toNat)).bind fun x => some (a ^^^ (x ^^^ 255#8))) ⊑
            (if 8#8 ≤ x_1 then none else some ((x ^^^ x_2).sshiftRight x_1.toNat)).bind fun x' => some (x' ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_1) = true then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x.sshiftRight x_1.toNat)).bind fun a_1 =>
                some (a ^^^ (a_1 ^^^ 255#8))) ⊑
            (if (!8#8 >ᵤ x_1) = true then none else some ((x ^^^ x_2).sshiftRight x_1.toNat)).bind fun a =>
              some (a ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:101:32: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:101:32: [bv] [0.022772] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_1 then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x.sshiftRight x_1.toNat)).bind fun y' => some (a ^^^ 255#8 ^^^ y')) ⊑
            (if 8#8 ≤ x_1 then none else some ((x_2 ^^^ x).sshiftRight x_1.toNat)).bind fun x' => some (x' ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_1) = true then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x.sshiftRight x_1.toNat)).bind fun a_1 =>
                some (a ^^^ 255#8 ^^^ a_1)) ⊑
            (if (!8#8 >ᵤ x_1) = true then none else some ((x_2 ^^^ x).sshiftRight x_1.toNat)).bind fun a =>
              some (a ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:107:113: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:107:113: [bv] [0.026470] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_1 then none else some (x_2 >>> x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x.sshiftRight x_1.toNat)).bind fun x => some (a ^^^ (x ^^^ 255#8))) ⊑
            (if 8#8 ≤ x_1 then none else some (x.sshiftRight x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x_2 >>> x_1.toNat)).bind fun x => some (a ^^^ x ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_1) = true then none else some (x_2 >>> x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x.sshiftRight x_1.toNat)).bind fun a_1 =>
                some (a ^^^ (a_1 ^^^ 255#8))) ⊑
            (if (!8#8 >ᵤ x_1) = true then none else some (x.sshiftRight x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x_2 >>> x_1.toNat)).bind fun a_1 =>
                some (a ^^^ a_1 ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:114:39: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:114:39: [bv] [0.026387] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_1 then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun x => some (a ^^^ (x ^^^ 255#8))) ⊑
            (if 8#8 ≤ x_1 then none else some (x >>> x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x_2.sshiftRight x_1.toNat)).bind fun x => some (a ^^^ x ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_1) = true then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a_1 =>
                some (a ^^^ (a_1 ^^^ 255#8))) ⊑
            (if (!8#8 >ᵤ x_1) = true then none else some (x >>> x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x_2.sshiftRight x_1.toNat)).bind fun a_1 =>
                some (a ^^^ a_1 ^^^ 255#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:120:32: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
info: ././././SSA/Projects/InstCombine/tests/proofs/gbinophandhshifts_proof.lean:120:32: [bv] [0.022128] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if 8#8 ≤ x_1 then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if 8#8 ≤ x_1 then none else some (x.sshiftRight x_1.toNat)).bind fun x => some (a ^^^ (x ^^^ 254#8))) ⊑
            (if 8#8 ≤ x_1 then none else some ((x ^^^ x_2).sshiftRight x_1.toNat)).bind fun x' => some (x' ^^^ 254#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x x_1 x_2 : BitVec 8
      a✝ :
        ¬((if (!8#8 >ᵤ x_1) = true then none else some (x_2.sshiftRight x_1.toNat)).bind fun a =>
              (if (!8#8 >ᵤ x_1) = true then none else some (x.sshiftRight x_1.toNat)).bind fun a_1 =>
                some (a ^^^ (a_1 ^^^ 254#8))) ⊑
            (if (!8#8 >ᵤ x_1) = true then none else some ((x ^^^ x_2).sshiftRight x_1.toNat)).bind fun a =>
              some (a ^^^ 254#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
error: Lean exited with code 1
Some required builds logged failures:
- SSA.Projects.InstCombine.tests.proofs.gbinophandhshifts_proof
