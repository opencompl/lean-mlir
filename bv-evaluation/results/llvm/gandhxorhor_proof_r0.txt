⚠ [60/892] Replayed Mathlib.Algebra.Group.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Defs.lean:802:33: `pow_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Defs.lean:807:6: `pow_mul_comm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Defs.lean:816:6: `pow_three'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Defs.lean:839:6: `pow_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [72/892] Replayed Mathlib.Logic.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:155:8: `dec_em'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:159:8: `em'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:304:8: `or_congr_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:307:8: `or_congr_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:320:8: `imp_or'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:359:8: `xor_iff_not_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:418:8: `eqRec_heq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:515:8: `forall_true_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:536:8: `exists_apply_eq_apply'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:543:6: `exists_apply_eq_apply2'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:552:6: `exists_apply_eq_apply3'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:579:8: `forall_apply_eq_imp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:582:8: `forall_eq_apply_imp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:642:8: `forall_prop_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:715:6: `Classical.choose_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:851:8: `dite_eq_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Basic.lean:855:8: `ite_eq_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [73/892] Replayed Mathlib.Logic.ExistsUnique
warning: ././.lake/packages/mathlib/././Mathlib/Logic/ExistsUnique.lean:109:16: `exists_unique_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [76/892] Replayed Mathlib.Logic.Function.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:83:8: `Function.Injective.eq_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:92:8: `Function.Injective.ne_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:122:8: `Function.Injective.of_comp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:168:8: `Function.Surjective.of_comp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:242:8: `Function.Bijective.of_comp_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:546:8: `Function.update_comp_eq_of_forall_ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:557:8: `Function.update_comp_eq_of_injective'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:654:8: `Function.extend_apply'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Basic.lean:686:8: `Function.Injective.surjective_comp_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [78/892] Replayed Mathlib.Algebra.GroupWithZero.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Defs.lean:110:8: `mul_left_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Defs.lean:113:8: `mul_right_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [82/892] Replayed Mathlib.Algebra.Ring.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Defs.lean:233:6: `add_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [86/892] Replayed Mathlib.Algebra.Field.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Defs.lean:201:6: `Rat.cast_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [233/892] Replayed Mathlib.Data.Nat.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:89:6: `Nat.succ_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:280:16: `Nat.sub_eq_of_eq_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:282:16: `Nat.eq_sub_of_add_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:285:16: `Nat.lt_sub_iff_add_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:287:16: `Nat.sub_lt_iff_lt_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:370:6: `Nat.mul_lt_mul''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:415:6: `Nat.le_div_iff_mul_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:417:6: `Nat.div_lt_iff_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:451:16: `Nat.mul_div_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:503:16: `Nat.div_le_of_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:517:16: `Nat.div_le_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:628:6: `Nat.one_le_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:634:6: `Nat.one_lt_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:643:6: `Nat.one_lt_two_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:726:6: `Nat.leRec_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:770:6: `Nat.leRecOn_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:877:6: `Nat.decreasingInduction_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:1066:6: `Nat.mod_add_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:1068:6: `Nat.div_add_mod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:1158:6: `Nat.mul_add_mod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Defs.lean:1175:6: `Nat.dvd_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [234/892] Replayed Mathlib.Logic.IsEmpty
warning: ././.lake/packages/mathlib/././Mathlib/Logic/IsEmpty.lean:36:9: `Fin.isEmpty'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [238/892] Replayed Mathlib.Tactic.Lift
warning: ././.lake/packages/mathlib/././Mathlib/Tactic/Lift.lean:49:9: `PiSubtype.canLift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [239/892] Replayed Mathlib.Data.Int.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Defs.lean:191:16: `Int.add_le_zero_iff_le_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Defs.lean:193:16: `Int.add_nonnneg_iff_neg_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Defs.lean:324:14: `Int.natAbs_ofNat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Defs.lean:577:6: `Int.toNat_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [241/892] Replayed Mathlib.Algebra.Group.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:165:8: `mul_rotate'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:331:8: `mul_div_assoc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:445:6: `inv_zpow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:490:6: `zpow_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:516:8: `inv_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:527:8: `inv_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:707:8: `div_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:721:8: `eq_div_of_mul_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:724:8: `div_eq_of_eq_mul''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:767:8: `eq_div_iff_mul_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:869:8: `zpow_eq_zpow_emod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:915:8: `div_eq_of_eq_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:924:8: `eq_div_of_mul_eq''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:927:8: `eq_mul_of_div_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:930:8: `mul_eq_of_eq_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:934:8: `div_div_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:947:8: `eq_div_iff_mul_eq''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:950:8: `div_eq_iff_eq_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Basic.lean:978:8: `div_mul_div_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [242/892] Replayed Mathlib.Algebra.Group.Units.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Defs.lean:438:8: `isUnit_iff_exists_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Defs.lean:547:21: `IsUnit.val_inv_unit'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [244/892] Replayed Mathlib.Logic.Unique
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Unique.lean:131:18: `Unique.subsingleton_unique'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Unique.lean:259:9: `Unique.subtypeEq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [253/892] Replayed Mathlib.Logic.Function.Iterate
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Iterate.lean:160:8: `Function.iterate_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Function/Iterate.lean:163:8: `Function.iterate_succ_apply'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [254/892] Replayed Mathlib.Data.Prod.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:31:8: `Prod.forall'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:34:8: `Prod.exists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:51:8: `Prod.map_apply'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:54:8: `Prod.map_fst'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Prod/Basic.lean:57:8: `Prod.map_snd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [260/892] Replayed Mathlib.Algebra.Group.Units.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Basic.lean:210:8: `eq_one_of_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Basic.lean:213:8: `eq_one_of_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Basic.lean:216:8: `mul_eq_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Units/Basic.lean:219:8: `mul_ne_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [261/892] Replayed Mathlib.Algebra.Group.Semiconj.Units
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Semiconj/Units.lean:100:6: `Units.conj_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [263/892] Replayed Mathlib.Algebra.Group.Invertible.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:97:8: `invOf_mul_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:103:8: `mul_invOf_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:109:8: `invOf_mul_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:120:8: `mul_invOf_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:131:8: `invOf_mul_cancel_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:142:8: `mul_invOf_cancel_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Invertible/Defs.lean:198:8: `invOf_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [272/892] Replayed Mathlib.Data.FunLike.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/FunLike/Basic.lean:187:8: `DFunLike.ext'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [273/892] Replayed Mathlib.Algebra.Group.Hom.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:407:8: `map_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:412:6: `map_comp_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:460:8: `map_zpow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:466:6: `map_comp_zpow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Hom/Defs.lean:842:18: `MonoidHom.map_zpow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [278/892] Replayed Mathlib.Logic.Relation
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:351:8: `Relation.TransGen.head'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:354:8: `Relation.TransGen.tail'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:444:8: `Relation.TransGen.lift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:453:6: `Relation.TransGen.closed'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Relation.lean:523:8: `Relation.ReflTransGen.lift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [285/892] Replayed Mathlib.Data.Quot
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:563:18: `Quotient.liftOn'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:567:14: `Quotient.surjective_liftOn'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:578:18: `Quotient.liftOn₂'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:644:8: `Quotient.hrecOn'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:657:8: `Quotient.hrecOn₂'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:669:8: `Quotient.map'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:679:8: `Quotient.map₂'_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:684:8: `Quotient.exact'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:688:8: `Quotient.sound'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:692:18: `Quotient.eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:696:18: `Quotient.eq''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:705:8: `Quotient.out_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Quot.lean:708:8: `Quotient.mk_out'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [286/892] Replayed Mathlib.Data.Bool.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Bool/Basic.lean:156:8: `Bool.eq_true_of_not_eq_false'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Bool/Basic.lean:159:8: `Bool.eq_false_of_not_eq_true'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [288/892] Replayed Mathlib.Logic.Equiv.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:138:9: `Equiv.inhabited'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:153:8: `Equiv.left_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:154:8: `Equiv.right_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:725:16: `Equiv.forall_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:737:16: `Equiv.exists_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:757:16: `Equiv.existsUnique_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:772:18: `Equiv.forall₂_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Defs.lean:782:18: `Equiv.forall₃_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [290/892] Replayed Mathlib.Algebra.NeZero
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:44:6: `zero_ne_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:46:6: `one_ne_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:48:6: `two_ne_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:50:6: `three_ne_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/NeZero.lean:52:6: `four_ne_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [292/892] Replayed Mathlib.Algebra.GroupWithZero.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Basic.lean:185:14: `pow_eq_zero_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Basic.lean:350:8: `div_self_mul_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Basic.lean:417:6: `zpow_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [295/892] Replayed Mathlib.Algebra.GroupWithZero.Units.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:183:8: `Units.mul_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:187:8: `Units.inv_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:300:6: `div_left_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:395:8: `Ring.inverse_eq_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:435:6: `mul_div_cancel_of_imp'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:457:6: `div_div_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:459:6: `div_div_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:464:6: `div_div_div_cancel_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Units/Basic.lean:467:14: `div_mul_div_cancel₀'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [297/892] Replayed Mathlib.Data.Sigma.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sigma/Basic.lean:90:6: `Sigma.exists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sigma/Basic.lean:93:6: `Sigma.forall'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [313/892] Replayed Mathlib.Logic.Equiv.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Logic/Equiv/Basic.lean:1706:8: `Equiv.coe_piCongr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [314/892] Replayed Mathlib.Algebra.Group.Equiv.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Equiv/Basic.lean:330:8: `MulEquiv.mk_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [320/892] Replayed Mathlib.Algebra.Group.TypeTags
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/TypeTags.lean:494:6: `AddMonoidHom.coe_toMultiplicative'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/TypeTags.lean:504:6: `MonoidHom.coe_toAdditive'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/TypeTags.lean:525:6: `AddMonoidHom.coe_toMultiplicative''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/TypeTags.lean:535:6: `MonoidHom.coe_toAdditive''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [323/892] Replayed Mathlib.Data.Nat.Sqrt
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:114:6: `Nat.sqrt_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:118:6: `Nat.lt_succ_sqrt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:127:6: `Nat.le_sqrt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:131:6: `Nat.sqrt_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:150:6: `Nat.eq_sqrt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:170:6: `Nat.sqrt_add_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:175:6: `Nat.sqrt_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:185:6: `Nat.exists_mul_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:191:6: `Nat.sqrt_mul_sqrt_lt_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:197:6: `Nat.succ_le_succ_sqrt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Sqrt.lean:207:6: `Nat.not_exists_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [324/892] Replayed Mathlib.Algebra.Group.Nat
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Nat.lean:128:6: `Nat.even_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [336/892] Replayed Mathlib.Algebra.GroupWithZero.Commute
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Commute.lean:22:8: `Ring.mul_inverse_rev'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [342/892] Replayed Mathlib.Algebra.Ring.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Basic.lean:92:8: `inv_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [346/892] Replayed Mathlib.Algebra.Ring.Commute
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Commute.lean:47:8: `Commute.mul_self_sub_mul_self_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Commute.lean:131:6: `neg_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Commute.lean:193:6: `sub_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [427/892] Replayed Mathlib.Control.Combinators
warning: ././.lake/packages/mathlib/././Mathlib/Control/Combinators.lean:35:4: `Monad.mapM'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Control/Combinators.lean:57:4: `Monad.sequence'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [428/892] Replayed Mathlib.Data.Option.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:80:8: `Option.none_bind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:84:8: `Option.some_bind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:87:8: `Option.bind_eq_some'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:96:8: `Option.bind_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:103:8: `Option.bind_eq_bind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:110:8: `Option.map_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:140:8: `Option.map_bind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:207:8: `Option.some_orElse'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:211:8: `Option.none_orElse'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:214:8: `Option.orElse_none'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:229:8: `Option.guard_eq_some'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:276:8: `Option.orElse_eq_some'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Option/Basic.lean:287:8: `Option.orElse_eq_none'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [433/892] Replayed Mathlib.Algebra.Group.Action.Faithful
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Action/Faithful.lean:51:6: `smul_left_injective'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [435/892] Replayed Mathlib.Algebra.GroupWithZero.Action.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:237:9: `AddMonoid.nat_smulCommClass'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:250:9: `AddGroup.int_smulCommClass'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:278:8: `smul_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:318:14: `smul_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:328:8: `smul_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Action/Defs.lean:331:8: `smul_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [439/892] Replayed Mathlib.Order.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:69:8: `le_trans'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:72:8: `lt_trans'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:75:8: `lt_of_le_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:78:8: `lt_of_lt_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:90:8: `lt_of_le_of_ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:95:8: `Ne.lt_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:155:8: `le_of_le_of_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:158:8: `le_of_eq_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:161:8: `lt_of_lt_of_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:164:8: `lt_of_eq_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:264:8: `LT.lt.ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:349:8: `min_def'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:358:8: `max_def'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:401:8: `lt_iff_lt_of_le_iff_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:419:8: `le_of_forall_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:428:8: `le_of_forall_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:431:8: `forall_lt_iff_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:850:8: `update_le_update_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:909:8: `min_rec'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Basic.lean:912:8: `max_rec'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [441/892] Replayed Mathlib.Algebra.Field.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:56:8: `add_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:60:8: `div_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:103:8: `neg_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:199:8: `sub_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Field/Basic.lean:203:8: `div_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [444/892] Replayed Mathlib.Order.Compare
warning: ././.lake/packages/mathlib/././Mathlib/Order/Compare.lean:220:8: `Eq.cmp_eq_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [447/892] Replayed Mathlib.Order.RelClasses
warning: ././.lake/packages/mathlib/././Mathlib/Order/RelClasses.lean:35:8: `antisymm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/RelClasses.lean:112:8: `ne_of_irrefl'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [448/892] Replayed Mathlib.Order.Monotone.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Monotone/Basic.lean:457:8: `Subsingleton.monotone'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Monotone/Basic.lean:460:8: `Subsingleton.antitone'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Monotone/Basic.lean:549:18: `StrictMono.ite'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Monotone/Basic.lean:567:18: `StrictAnti.ite'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [455/892] Replayed Mathlib.Algebra.Order.Monoid.Unbundled.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:63:8: `mul_le_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:68:8: `le_of_mul_le_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:76:8: `mul_le_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:82:8: `le_of_mul_le_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:118:8: `mul_lt_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:123:8: `lt_of_mul_lt_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:129:8: `mul_lt_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:135:8: `lt_of_mul_lt_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:184:8: `mul_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:251:8: `mul_left_cancel''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:256:8: `mul_right_cancel''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:310:8: `max_mul_mul_le_max_mul_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:315:8: `min_mul_min_le_min_mul_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:332:8: `le_mul_of_one_le_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:339:8: `mul_le_of_le_one_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:346:8: `le_mul_of_one_le_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:353:8: `mul_le_of_le_one_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:382:8: `le_mul_iff_one_le_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:388:8: `le_mul_iff_one_le_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:394:8: `mul_le_iff_le_one_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:400:8: `mul_le_iff_le_one_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:412:8: `lt_mul_of_one_lt_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:419:8: `mul_lt_of_lt_one_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:426:8: `lt_mul_of_one_lt_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:434:8: `mul_lt_of_lt_one_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:464:8: `lt_mul_iff_one_lt_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:470:8: `lt_mul_iff_one_lt_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:475:8: `mul_lt_iff_lt_one_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:481:8: `mul_lt_iff_lt_one_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:532:8: `mul_lt_of_lt_of_lt_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:622:8: `lt_mul_of_lt_of_one_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:712:8: `mul_lt_of_lt_one_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:805:8: `lt_mul_of_one_lt_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1058:8: `Monotone.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1062:8: `MonotoneOn.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1066:8: `Antitone.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1070:8: `AntitoneOn.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1074:8: `Monotone.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1078:8: `MonotoneOn.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1083:8: `Antitone.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1087:8: `AntitoneOn.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1122:8: `StrictMono.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1126:8: `StrictMonoOn.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1131:8: `StrictAnti.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1135:8: `StrictAntiOn.const_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1146:8: `StrictMono.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1150:8: `StrictMonoOn.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1155:8: `StrictAnti.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1159:8: `StrictAntiOn.mul_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1259:8: `cmp_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Basic.lean:1265:8: `cmp_mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [456/892] Replayed Mathlib.Algebra.Order.Sub.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Sub/Defs.lean:200:8: `le_add_tsub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [457/892] Replayed Mathlib.Algebra.Order.Group.Unbundled.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:60:8: `inv_le_iff_one_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:102:8: `inv_lt_iff_one_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:106:8: `lt_inv_iff_mul_lt_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:257:8: `inv_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:260:8: `lt_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:354:8: `inv_mul_le_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:358:8: `mul_inv_le_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:362:8: `mul_inv_le_mul_inv_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:372:8: `inv_mul_lt_iff_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:376:8: `mul_inv_lt_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:380:8: `mul_inv_lt_mul_inv_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:477:8: `div_le_div_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:481:8: `one_le_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:487:8: `div_le_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:525:8: `div_le_div_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:541:8: `div_le_div_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:545:8: `le_div_iff_mul_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:550:8: `div_le_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:559:8: `inv_le_div_iff_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:576:8: `div_le_div''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:599:8: `div_lt_div_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:603:8: `one_lt_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:609:8: `div_lt_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:645:8: `div_lt_div_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:661:8: `div_lt_div_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:665:8: `lt_div_iff_mul_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:670:8: `div_lt_iff_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:675:8: `inv_lt_div_iff_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:693:8: `div_lt_div''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Basic.lean:713:8: `cmp_div_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [462/892] Replayed Mathlib.Order.BoundedOrder
warning: ././.lake/packages/mathlib/././Mathlib/Order/BoundedOrder.lean:146:8: `Ne.lt_top'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BoundedOrder.lean:323:8: `Ne.bot_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [463/892] Replayed Mathlib.Order.Disjoint
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:139:8: `Disjoint.inf_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:145:8: `Disjoint.inf_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:153:8: `Disjoint.of_disjoint_inf_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:267:6: `Codisjoint.ne_bot_of_ne_top'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:302:8: `Codisjoint.sup_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:308:8: `Codisjoint.sup_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Disjoint.lean:317:8: `Codisjoint.of_codisjoint_sup_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [466/892] Replayed Mathlib.Order.WithBot
warning: ././.lake/packages/mathlib/././Mathlib/Order/WithBot.lean:361:8: `WithBot.le_coe_unbot'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [468/892] Replayed Mathlib.Order.Hom.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Basic.lean:1079:8: `OrderIso.map_bot'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Basic.lean:1088:8: `OrderIso.map_top'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [469/892] Replayed Mathlib.Algebra.Order.Group.OrderIso
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/OrderIso.lean:42:8: `inv_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/OrderIso.lean:50:8: `le_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [471/892] Replayed Mathlib.Algebra.Order.Group.Unbundled.Abs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Abs.lean:60:21: `mabs_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Unbundled/Abs.lean:249:21: `max_div_min_eq_mabs'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [475/892] Replayed Mathlib.Algebra.Order.GroupWithZero.Unbundled
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:258:8: `mul_le_mul_of_nonneg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:299:8: `mul_lt_mul_of_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:561:8: `mul_eq_mul_iff_eq_and_eq_of_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:741:8: `mul_le_of_le_of_le_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:745:8: `mul_lt_of_lt_of_le_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:749:8: `mul_lt_of_le_of_lt_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:787:8: `le_mul_of_le_of_one_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:791:8: `lt_mul_of_le_of_one_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:795:8: `lt_mul_of_lt_of_one_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:837:8: `mul_le_of_le_one_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:841:8: `mul_lt_of_lt_one_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:845:8: `mul_lt_of_le_one_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:928:8: `exists_square_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:1064:16: `Decidable.mul_lt_mul''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Unbundled.lean:1497:14: `inv_neg''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [476/892] Replayed Mathlib.Algebra.Order.Group.Synonym
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Synonym.lean:39:9: `OrderDual.instPow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Synonym.lean:156:9: `Lex.instPow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [478/892] Replayed Mathlib.Algebra.Order.Monoid.Unbundled.Pow
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:68:8: `pow_le_pow_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:72:8: `pow_le_pow_right_of_le_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:76:8: `one_lt_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:86:8: `pow_right_strictMono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:90:8: `pow_lt_pow_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:140:6: `pow_lt_pow_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:150:8: `pow_le_pow_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:207:8: `pow_le_pow_iff_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:211:8: `pow_lt_pow_iff_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:221:8: `lt_of_pow_lt_pow_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:239:8: `le_of_pow_le_pow_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/Pow.lean:253:8: `Left.pow_lt_one_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [482/892] Replayed Mathlib.Order.Heyting.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Heyting/Basic.lean:380:8: `sdiff_le_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Heyting/Basic.lean:431:8: `sup_sdiff_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Heyting/Basic.lean:766:8: `top_sdiff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [483/892] Replayed Mathlib.Order.BooleanAlgebra
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:287:8: `sdiff_eq_self_iff_disjoint'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:337:8: `sdiff_sdiff_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:367:8: `sdiff_sdiff_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:379:8: `sdiff_sdiff_sup_sdiff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/BooleanAlgebra.lean:524:8: `inf_compl_eq_bot'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [485/892] Replayed Mathlib.Data.Set.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:127:9: `Set.PiSetCoe.canLift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:153:8: `SetCoe.exists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:157:8: `SetCoe.forall'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:391:8: `Set.nonempty_of_ssubset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:1030:8: `Set.setOf_eq_eq_singleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:1209:8: `Set.eq_of_nonempty_of_subsingleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:1453:8: `Set.union_diff_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:2135:8: `Disjoint.inter_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Basic.lean:2141:8: `Disjoint.inter_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [488/892] Replayed Mathlib.Order.SymmDiff
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:80:8: `symmDiff_eq_Xor'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:286:8: `symmDiff_top'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:289:8: `top_symmDiff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:349:8: `sdiff_symmDiff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:418:8: `symmDiff_symmDiff_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:588:8: `symmDiff_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:591:8: `bihimp_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/SymmDiff.lean:634:8: `symmDiff_symmDiff_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [490/892] Replayed Mathlib.Data.Set.Image
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:107:8: `Set.preimage_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:625:8: `Set.Nonempty.preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:718:8: `Set.preimage_eq_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:745:8: `Set.range_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:837:8: `Set.range_quotient_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:840:6: `Set.Quotient.range_mk''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:844:8: `Set.range_quotient_lift_on'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:910:8: `Set.range_ite_subset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:1255:8: `Subtype.preimage_coe_compl'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Image.lean:1404:6: `sigma_mk_preimage_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [491/892] Replayed Mathlib.Order.Directed
warning: ././.lake/packages/mathlib/././Mathlib/Order/Directed.lean:68:8: `DirectedOn.mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Directed.lean:208:8: `directedOn_pair'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Directed.lean:277:18: `IsMin.not_isMax'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Directed.lean:283:18: `IsMax.not_isMin'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [492/892] Replayed Mathlib.Order.Interval.Set.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1003:8: `Set.Ioo_union_Ioi'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1031:8: `Set.Ico_union_Ici'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1051:8: `Set.Ioc_union_Ioi'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1086:8: `Set.Icc_union_Ici'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1121:8: `Set.Iio_union_Ico'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1142:8: `Set.Iic_union_Ioc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1164:8: `Set.Iio_union_Ioo'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1186:8: `Set.Iic_union_Icc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1231:8: `Set.Ico_union_Ico'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1305:8: `Set.Ioc_union_Ioc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1353:8: `Set.Icc_union_Icc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/Basic.lean:1384:8: `Set.Ioo_union_Ioo'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [493/892] Replayed Mathlib.Order.Bounds.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/Basic.lean:894:8: `IsLUB.exists_between'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/Basic.lean:902:8: `IsGLB.exists_between'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [494/892] Replayed Mathlib.Data.Set.Prod
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Prod.lean:681:8: `Set.pi_eq_empty_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Prod.lean:700:8: `Set.singleton_pi'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Prod.lean:846:8: `Set.eval_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [495/892] Replayed Mathlib.Data.Set.Function
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:278:8: `Set.mapsTo'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:331:6: `Set.mapsTo_of_subsingleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:767:6: `Set.surjOn_of_subsingleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:914:6: `Set.bijOn_of_subsingleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1020:8: `Set.LeftInvOn.image_inter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1036:8: `Set.LeftInvOn.image_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1400:8: `Set.EqOn.piecewise_ite'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1542:8: `Function.update_comp_eq_of_not_mem_range'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Function.lean:1636:6: `Equiv.bijOn'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [504/892] Replayed Mathlib.Order.Hom.Set
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Set.lean:141:9: `OrderIso.subsingleton_of_wellFoundedLT'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Set.lean:155:9: `OrderIso.subsingleton_of_wellFoundedGT'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [506/892] Replayed Mathlib.Order.CompleteLattice
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:438:6: `sSup_eq_bot'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:508:8: `sSup_eq_iSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:517:8: `biSup_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:553:8: `iSup_range'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:557:8: `sSup_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:569:8: `sInf_eq_iInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:579:8: `biInf_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:610:8: `iInf_range'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:613:8: `sInf_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:628:8: `le_iSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:631:8: `iInf_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:700:8: `iSup_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:703:8: `iInf_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:706:8: `iSup₂_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:712:8: `iInf₂_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:993:8: `iSup_subtype'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:997:8: `iInf_subtype'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1001:8: `iSup_subtype''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1004:8: `iInf_subtype''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1287:8: `iSup_of_empty'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1325:6: `iSup_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1328:6: `iInf_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1339:6: `iSup_psigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1342:6: `iInf_psigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1351:6: `iSup_prod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteLattice.lean:1354:6: `iInf_prod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [507/892] Replayed Mathlib.Order.CompleteBooleanAlgebra
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteBooleanAlgebra.lean:231:6: `CompletelyDistribLattice.MinimalAxioms.iInf_iSup_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteBooleanAlgebra.lean:596:8: `compl_sInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/CompleteBooleanAlgebra.lean:599:8: `compl_sSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [509/892] Replayed Mathlib.Order.GaloisConnection
warning: ././.lake/packages/mathlib/././Mathlib/Order/GaloisConnection.lean:157:8: `GaloisConnection.u_l_u_eq_u'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/GaloisConnection.lean:184:8: `GaloisConnection.l_u_l_eq_l'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [515/892] Replayed Mathlib.Data.PNat.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/PNat/Defs.lean:131:8: `PNat.coe_toPNat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [521/892] Replayed Mathlib.Algebra.Order.Monoid.Unbundled.ExistsOfLE
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/ExistsOfLE.lean:51:21: `exists_one_lt_mul_of_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/ExistsOfLE.lean:77:8: `le_of_forall_one_lt_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/ExistsOfLE.lean:81:8: `le_iff_forall_one_lt_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [522/892] Replayed Mathlib.Algebra.Order.Monoid.Canonical.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Canonical/Defs.lean:103:8: `le_iff_exists_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Canonical/Defs.lean:189:26: `NeZero.of_gt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Canonical/Defs.lean:226:8: `min_mul_distrib'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [525/892] Replayed Mathlib.Algebra.Order.Group.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:115:8: `LinearOrderedCommGroup.mul_lt_mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:119:8: `eq_one_of_inv_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:130:8: `exists_one_lt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:177:8: `inv_le_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Defs.lean:181:8: `inv_lt_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [526/892] Replayed Mathlib.Algebra.Order.Monoid.Unbundled.WithTop
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/WithTop.lean:53:8: `WithTop.untop_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/Unbundled/WithTop.lean:418:8: `WithBot.unbot_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [536/892] Replayed Mathlib.Algebra.Order.Monoid.NatCast
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Monoid/NatCast.lean:49:6: `one_le_two'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [538/892] Replayed Mathlib.Algebra.Order.Ring.Unbundled.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Unbundled/Basic.lean:177:8: `mul_le_mul_of_nonneg_of_nonpos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Unbundled/Basic.lean:187:8: `mul_le_mul_of_nonpos_of_nonneg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Unbundled/Basic.lean:197:8: `mul_le_mul_of_nonpos_of_nonpos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Unbundled/Basic.lean:484:8: `add_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [547/892] Replayed Mathlib.Data.List.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Defs.lean:241:9: `List.decidableChain'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [548/892] Replayed Mathlib.Data.Nat.Bits
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Bits.lean:225:8: `Nat.bit_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [549/892] Replayed Mathlib.Data.Nat.Size
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Size.lean:57:8: `Nat.size_shiftLeft'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [566/892] Replayed Mathlib.Data.Nat.Find
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Find.lean:71:18: `Nat.find_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [571/892] Replayed Mathlib.Control.Applicative
warning: ././.lake/packages/mathlib/././Mathlib/Control/Applicative.lean:34:8: `Applicative.pure_seq_eq_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [572/892] Replayed Mathlib.Control.Traversable.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Control/Traversable/Basic.lean:139:8: `ApplicativeTransformation.preserves_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [661/892] Replayed Mathlib.Algebra.Order.Group.Abs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Abs.lean:72:8: `le_abs'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Abs.lean:81:8: `apply_abs_le_mul_of_one_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Group/Abs.lean:100:8: `abs_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [663/892] Replayed Mathlib.Order.Bounds.OrderIso
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/OrderIso.lean:34:8: `OrderIso.isLUB_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/OrderIso.lean:41:8: `OrderIso.isGLB_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/OrderIso.lean:48:8: `OrderIso.isLUB_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Bounds/OrderIso.lean:55:8: `OrderIso.isGLB_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [667/892] Replayed Mathlib.Order.Hom.Lattice
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1050:8: `LatticeHom.coe_comp_sup_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1060:8: `LatticeHom.coe_comp_inf_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1233:8: `BoundedLatticeHom.coe_comp_lattice_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1244:8: `BoundedLatticeHom.coe_comp_sup_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Hom/Lattice.lean:1254:8: `BoundedLatticeHom.coe_comp_inf_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [668/892] Replayed Mathlib.Data.Setoid.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:61:8: `Setoid.ext'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:81:8: `Setoid.refl'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:84:8: `Setoid.symm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:87:8: `Setoid.trans'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:89:8: `Setoid.comm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Setoid/Basic.lean:104:8: `Setoid.ker_apply_mk_out'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [673/892] Replayed Mathlib.Data.SetLike.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/SetLike/Basic.lean:154:8: `SetLike.ext'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [697/892] Replayed Mathlib.Order.Interval.Set.UnorderedInterval
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:82:6: `Set.Icc_subset_uIcc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:103:6: `Set.uIcc_subset_uIcc_iff_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:140:6: `Set.eq_of_mem_uIcc_of_mem_uIcc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:271:6: `Set.Ioc_subset_uIoc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/UnorderedInterval.lean:279:6: `Set.eq_of_mem_uIoc_of_mem_uIoc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [698/892] Replayed Mathlib.Data.Rat.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:111:8: `Rat.normalize_eq_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:125:14: `Rat.divInt_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:172:8: `Rat.add_def''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:186:6: `Rat.sub_def''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:190:6: `Rat.divInt_mul_divInt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:199:6: `Rat.mk'_mul_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:238:14: `Rat.inv_divInt'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:243:6: `Rat.inv_def'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Defs.lean:249:6: `Rat.div_def'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [701/892] Replayed Mathlib.Data.Fin.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:102:6: `Fin.size_positive'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:326:8: `Fin.last_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:393:8: `Fin.val_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:397:8: `Fin.val_one''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:524:8: `Fin.succ_zero_eq_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:529:8: `Fin.one_pos'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:530:8: `Fin.zero_ne_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:701:8: `Fin.forall_fin_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:709:8: `Fin.exists_fin_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:796:8: `Fin.pred_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:903:8: `Fin.castPred_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:1526:18: `Fin.mul_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:1533:18: `Fin.one_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:1536:18: `Fin.mul_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Basic.lean:1538:18: `Fin.zero_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [702/892] Replayed Mathlib.Data.List.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:218:8: `List.replicate_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:234:8: `List.replicate_right_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:261:8: `List.reverse_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:264:8: `List.reverse_concat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:301:8: `List.getLast_append'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:307:8: `List.getLast_concat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:311:8: `List.getLast_singleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:623:6: `List.cons_sublist_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:766:8: `List.ext_get?'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:785:8: `List.ext_get?_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:827:8: `List.get_reverse'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1045:8: `List.takeI_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1069:8: `List.takeD_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1100:8: `List.foldl_fixed'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1104:8: `List.foldr_fixed'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1284:8: `List.foldl_eq_of_comm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1288:8: `List.foldl_eq_foldr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1298:8: `List.foldr_eq_of_comm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1611:8: `List.lookmap_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1688:8: `List.filter_subset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1722:6: `List.map_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:1727:6: `List.filter_attach'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:2032:8: `List.map₂Left_eq_map₂Left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:2071:8: `List.map₂Right_eq_map₂Right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:2105:8: `List.zipLeft_eq_zipLeft'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Basic.lean:2141:8: `List.zipRight_eq_zipRight'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [706/892] Replayed Mathlib.Algebra.Group.Int
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Int.lean:115:6: `Int.eq_one_or_neg_one_of_mul_eq_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Int.lean:128:6: `Int.eq_one_or_neg_one_of_mul_eq_neg_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Int.lean:210:6: `Int.even_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [707/892] Replayed Mathlib.Data.Nat.Cast.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:67:6: `nsmul_eq_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:98:8: `ext_nat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:113:8: `eq_natCast'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:117:8: `map_natCast'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Cast/Basic.lean:124:8: `map_ofNat'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [708/892] Replayed Mathlib.Algebra.Ring.Parity
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:119:14: `odd_add_self_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:121:14: `odd_add_one_self'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:223:6: `Nat.even_or_odd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:226:6: `Nat.even_xor_odd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:244:6: `Nat.even_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:253:6: `Nat.even_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:276:6: `Nat.odd_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Parity.lean:286:6: `Nat.odd_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [709/892] Replayed Mathlib.Algebra.Ring.Int
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:113:6: `Int.even_or_odd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:121:6: `Int.even_xor'_odd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:130:6: `Int.even_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:136:6: `Int.even_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:148:6: `Int.odd_pow'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:153:6: `Int.odd_add'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Ring/Int.lean:160:6: `Int.odd_sub'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [713/892] Replayed Mathlib.Data.Set.Lattice
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:288:8: `Set.iUnion_mono''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:301:8: `Set.iInter_mono''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:310:8: `Set.iUnion_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:316:8: `Set.iUnion₂_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:320:8: `Set.iInter_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:328:8: `Set.iInter₂_mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:628:8: `Set.iUnion_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:635:8: `Set.iInter_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:658:8: `Set.biUnion_and'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:670:8: `Set.biInter_and'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:1443:8: `Set.iUnion_iUnion_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Lattice.lean:1451:8: `Set.iInter_iInter_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [714/892] Replayed Mathlib.Order.ConditionallyCompleteLattice.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:84:8: `WithTop.coe_sInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:96:8: `WithTop.coe_sSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:111:8: `WithBot.coe_sSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:116:8: `WithBot.coe_sInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:757:8: `le_csInf_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:792:8: `isLUB_csSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:802:8: `csSup_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:810:8: `le_csSup_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:814:8: `le_csInf_iff''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:818:8: `csInf_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:820:8: `exists_lt_of_lt_csSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:824:8: `not_mem_of_lt_csInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:827:8: `csInf_le_csInf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/ConditionallyCompleteLattice/Basic.lean:830:8: `csSup_le_csSup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [716/892] Replayed Mathlib.Data.Set.Pairwise.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Pairwise/Basic.lean:73:8: `Set.Pairwise.mono'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Pairwise/Basic.lean:311:8: `Set.PairwiseDisjoint.elim'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [717/892] Replayed Mathlib.Order.Antichain
warning: ././.lake/packages/mathlib/././Mathlib/Order/Antichain.lean:56:18: `IsAntichain.eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [718/892] Replayed Mathlib.Order.Interval.Set.OrdConnected
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/OrdConnected.lean:130:9: `Set.OrdConnected.inter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/OrdConnected.lean:149:9: `Set.ordConnected_iInter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Interval/Set/OrdConnected.lean:162:9: `Set.ordConnected_pi'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [723/892] Replayed Mathlib.Data.NNRat.Defs
warning: ././.lake/packages/mathlib/././Mathlib/Data/NNRat/Defs.lean:265:8: `Rat.toNNRat_lt_toNNRat_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/NNRat/Defs.lean:287:8: `Rat.le_toNNRat_iff_coe_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [726/892] Replayed Mathlib.Data.Int.Cast.Lemmas
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Cast/Lemmas.lean:107:6: `zsmul_eq_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Cast/Lemmas.lean:217:8: `eq_intCast'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/Cast/Lemmas.lean:354:8: `RingHom.eq_intCast'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [727/892] Replayed Mathlib.Algebra.GroupWithZero.Divisibility
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Divisibility.lean:142:8: `dvd_antisymm'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/Divisibility.lean:152:8: `eq_of_forall_dvd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [728/892] Replayed Mathlib.Data.Rat.Lemmas
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Lemmas.lean:132:8: `Rat.mul_num_den'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Lemmas.lean:146:8: `Rat.add_num_den'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Rat/Lemmas.lean:165:8: `Rat.substr_num_den'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [733/892] Replayed Mathlib.Tactic.Ring.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Tactic/Ring/Basic.lean:942:8: `Mathlib.Tactic.Ring.atom_pf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [735/892] Replayed Mathlib.Algebra.GroupWithZero.WithZero
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/GroupWithZero/WithZero.lean:132:6: `WithZero.map'_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [736/892] Replayed Mathlib.Algebra.Order.GroupWithZero.Canonical
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Canonical.lean:69:14: `zero_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/GroupWithZero/Canonical.lean:73:8: `not_lt_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [739/892] Replayed Mathlib.Data.PNat.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/PNat/Basic.lean:293:8: `PNat.mod_add_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/PNat/Basic.lean:297:8: `PNat.div_add_mod'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/PNat/Basic.lean:329:8: `PNat.dvd_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [744/892] Replayed Mathlib.Data.Int.GCD
warning: ././.lake/packages/mathlib/././Mathlib/Data/Int/GCD.lean:278:8: `Int.exists_gcd_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [745/892] Replayed Mathlib.Data.Nat.ModEq
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:95:18: `Nat.ModEq.mul_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:102:18: `Nat.ModEq.mul_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:141:18: `Nat.ModEq.add_left_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:149:18: `Nat.ModEq.add_right_cancel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:160:18: `Nat.ModEq.mul_left_cancel_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:172:18: `Nat.ModEq.mul_right_cancel_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:254:6: `Nat.ModEq.cancel_left_div_gcd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/ModEq.lean:258:6: `Nat.ModEq.cancel_right_div_gcd'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [746/892] Replayed Mathlib.Data.List.Forall2
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Forall2.lean:108:8: `List.left_unique_forall₂'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Forall2.lean:116:8: `List.right_unique_forall₂'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [748/892] Replayed Mathlib.Data.List.Lattice
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Lattice.lean:111:8: `List.inter_nil'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [749/892] Replayed Mathlib.Data.List.Dedup
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Dedup.lean:33:8: `List.dedup_cons_of_mem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Dedup.lean:36:8: `List.dedup_cons_of_not_mem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [753/892] Replayed Mathlib.Data.Multiset.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:51:8: `Multiset.quot_mk_to_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:55:8: `Multiset.quot_mk_to_coe''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:398:8: `Multiset.induction_on'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1151:8: `Multiset.map_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1159:16: `Multiset.map_const'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1289:8: `Multiset.foldr_induction'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1303:8: `Multiset.foldl_induction'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1376:8: `Multiset.attach_map_val'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:1871:6: `Multiset.map_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:2252:8: `Multiset.ext'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:2303:8: `Multiset.filter_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Basic.lean:2578:6: `Multiset.filter_attach'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [755/892] Replayed Mathlib.Data.List.Pairwise
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Pairwise.lean:53:46: `List.pairwise_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [757/892] Replayed Mathlib.Data.Multiset.Dedup
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Dedup.lean:56:8: `Multiset.dedup_subset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Dedup.lean:60:8: `Multiset.subset_dedup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [760/892] Replayed Mathlib.Data.Finset.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:185:14: `Finset.forall_mem_not_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:213:9: `Finset.decidableMem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:247:9: `Finset.PiFinsetCoe.canLift'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:679:8: `Finset.subset_singleton_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:977:8: `Finset.insert_val'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:1799:8: `Finset.erase_injOn'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:1953:6: `Finset.insert_sdiff_insert'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:2049:8: `Finset.sdiff_sdiff_left'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:2400:8: `Finset.disjoint_filter_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:2549:8: `Finset.filter_ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:2567:6: `Finset.filter_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:3051:8: `Finset.pairwise_subtype_iff_pairwise_finset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Basic.lean:3059:8: `Finset.pairwise_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [762/892] Replayed Mathlib.Data.List.Lex
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Lex.lean:158:9: `List.LT'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Lex.lean:168:9: `List.LE'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [763/892] Replayed Mathlib.Data.List.Chain
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Chain.lean:204:8: `List.chain'_map_of_chain'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Chain.lean:208:8: `List.Pairwise.chain'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Chain.lean:235:8: `List.Chain'.cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Chain.lean:239:8: `List.chain'_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [765/892] Replayed Mathlib.Data.List.Rotate
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:52:8: `List.length_rotate'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:68:8: `List.rotate'_rotate'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:96:8: `List.rotate_eq_rotate'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:408:8: `List.isRotated_nil_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Rotate.lean:416:8: `List.isRotated_singleton_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [766/892] Replayed Mathlib.Data.List.Join
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Join.lean:137:8: `List.drop_take_succ_join_eq_get'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [767/892] Replayed Mathlib.Algebra.BigOperators.Group.List
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/List.lean:539:8: `List.alternatingProd_cons_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/List.lean:553:8: `List.alternatingProd_cons'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [768/892] Replayed Mathlib.Algebra.BigOperators.Group.Multiset
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Multiset.lean:137:8: `Multiset.prod_hom'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Multiset.lean:261:8: `Multiset.prod_map_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [771/892] Replayed Mathlib.Data.Finset.Image
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:83:8: `Finset.mem_map'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:186:6: `Finset.map_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:191:6: `Finset.filter_attach'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:283:8: `Finset.range_add_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:379:8: `Finset.image_id'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Image.lean:498:8: `Finset.mem_range_iff_mem_finset_range_of_mod_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [772/892] Replayed Mathlib.Data.Fin.Tuple.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Tuple/Basic.lean:853:8: `Fin.insertNth_zero'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Tuple/Basic.lean:869:8: `Fin.insertNth_last'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fin/Tuple/Basic.lean:1013:8: `Fin.find_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [773/892] Replayed Mathlib.Data.List.OfFn
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/OfFn.lean:74:8: `List.ofFn_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [775/892] Replayed Mathlib.Data.Fintype.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Basic.lean:293:8: `Finset.insert_inj_on'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Basic.lean:827:16: `Fin.univ_image_getElem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Basic.lean:831:8: `Fin.univ_image_get'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [780/892] Replayed Mathlib.Data.Fintype.Card
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Card.lean:128:8: `Fintype.card_of_finset'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Card.lean:142:8: `Fintype.card_congr'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Card.lean:310:8: `Fintype.card_subtype_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [787/892] Replayed Mathlib.Data.Finset.Piecewise
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Piecewise.lean:157:6: `Finset.piecewise_le_piecewise'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Piecewise.lean:170:6: `Finset.piecewise_mem_Icc'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [790/892] Replayed Mathlib.Data.Vector.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Vector/Basic.lean:581:8: `Mathlib.Vector.prod_set'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [805/892] Replayed Mathlib.Algebra.Order.Ring.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Basic.lean:81:6: `pow_add_pow_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [806/892] Replayed Mathlib.Order.Cover
warning: ././.lake/packages/mathlib/././Mathlib/Order/Cover.lean:97:6: `WCovBy.of_le_of_le'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Order/Cover.lean:253:8: `CovBy.ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [807/892] Replayed Mathlib.Algebra.Group.Support
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:52:8: `Function.mulSupport_subset_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:135:8: `Function.mulSupport_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:183:8: `Function.mulSupport_prod_mk'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:198:8: `Function.mulSupport_curry'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Support.lean:226:8: `Function.mulSupport_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [810/892] Replayed Mathlib.Data.Nat.Factorial.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Factorial/Basic.lean:114:8: `Nat.factorial_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Factorial/Basic.lean:252:8: `Nat.pow_lt_ascFactorial'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Factorial/Basic.lean:338:8: `Nat.add_descFactorial_eq_ascFactorial'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Factorial/Basic.lean:391:8: `Nat.pow_sub_lt_descFactorial'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [814/892] Replayed Mathlib.Tactic.Positivity.Core
warning: ././.lake/packages/mathlib/././Mathlib/Tactic/Positivity/Core.lean:28:6: `ne_of_ne_of_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Tactic/Positivity/Core.lean:122:6: `Mathlib.Meta.Positivity.lt_of_le_of_ne'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [824/892] Replayed Mathlib.Algebra.CharZero.Lemmas
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/CharZero/Lemmas.lean:100:8: `nat_mul_inj'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [825/892] Replayed Mathlib.Algebra.Order.Ring.Abs
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Abs.lean:100:6: `sq_lt_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Abs.lean:107:6: `sq_le_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Abs.lean:113:6: `abs_lt_of_sq_lt_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Ring/Abs.lean:119:6: `abs_le_of_sq_le_sq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [826/892] Replayed Mathlib.Algebra.Order.Field.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:34:8: `lt_div_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:40:8: `div_lt_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:46:8: `inv_mul_le_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:52:8: `mul_inv_le_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:58:8: `inv_mul_lt_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:64:8: `mul_inv_lt_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:70:8: `inv_pos_le_iff_one_le_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:76:8: `inv_pos_lt_iff_one_lt_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:226:8: `div_lt_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:495:8: `div_le_iff_of_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:501:8: `le_div_iff_of_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:507:8: `div_lt_iff_of_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Order/Field/Basic.lean:513:8: `lt_div_iff_of_neg'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [840/892] Replayed Mathlib.Data.Finset.Lattice
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:706:8: `Finset.coe_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:731:8: `Finset.le_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:817:8: `map_finset_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:822:6: `Finset.nsmul_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:879:8: `Finset.coe_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:900:8: `Finset.le_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:972:8: `map_finset_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:977:6: `Finset.nsmul_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1066:8: `Finset.toDual_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1071:8: `Finset.toDual_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1076:8: `Finset.ofDual_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1081:8: `Finset.ofDual_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1099:8: `Finset.sup'_inf_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1109:8: `Finset.inf'_sup_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1146:8: `Finset.exists_mem_eq_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1156:8: `Finset.exists_mem_eq_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1212:8: `Finset.sup_singleton''` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Lattice.lean:1219:8: `Finset.sup_singleton'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [841/892] Replayed Mathlib.Data.Set.Sigma
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Sigma.lean:124:8: `biSup_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Sigma.lean:132:8: `biInf_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Sigma.lean:142:8: `Set.biUnion_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Sigma.lean:150:8: `Set.biInter_sigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [844/892] Replayed Mathlib.Data.Finset.Sigma
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Sigma.lean:107:8: `biSup_finsetSigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Sigma.lean:115:8: `biInf_finsetSigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Sigma.lean:123:8: `Set.biUnion_finsetSigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Sigma.lean:131:8: `Set.biInter_finsetSigma'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [845/892] Replayed Mathlib.Data.Fintype.Sigma
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Sigma.lean:27:6: `Set.biUnion_finsetSigma_univ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [849/892] Replayed Mathlib.Data.Sym.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Basic.lean:307:9: `Sym.inhabitedSym'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [852/892] Replayed Mathlib.Algebra.Group.Indicator
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:103:8: `Set.mulIndicator_eq_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:157:8: `Set.mulIndicator_empty'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:167:8: `Set.mulIndicator_one'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:305:8: `Set.mulIndicator_mul'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:367:8: `Set.mulIndicator_inv'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:381:8: `Set.mulIndicator_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:391:8: `Set.mulIndicator_compl'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/Group/Indicator.lean:403:8: `Set.mulIndicator_diff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [853/892] Replayed Mathlib.Data.Finset.Max
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:190:8: `Finset.le_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:193:8: `Finset.isLeast_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:207:8: `Finset.le_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:213:8: `Finset.isGreatest_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:228:8: `Finset.max'_eq_sup'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:230:8: `Finset.min'_eq_inf'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:236:8: `Finset.min'_lt_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:266:8: `Finset.ofDual_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:273:8: `Finset.ofDual_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:280:8: `Finset.toDual_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:287:8: `Finset.toDual_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:314:8: `Finset.lt_max'_of_mem_erase_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:318:8: `Finset.min'_lt_of_mem_erase_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:348:8: `Finset.coe_max'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Finset/Max.lean:351:8: `Finset.coe_min'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [855/892] Replayed Mathlib.Data.Nat.Choose.Basic
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Choose/Basic.lean:60:8: `Nat.choose_succ_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Choose/Basic.lean:228:8: `Nat.ascFactorial_eq_factorial_mul_choose'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Nat/Choose/Basic.lean:247:8: `Nat.choose_eq_asc_factorial_div_factorial'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [856/892] Replayed Mathlib.Data.List.Sublists
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:71:8: `List.mem_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:85:8: `List.length_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:161:8: `List.sublists_eq_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:251:8: `List.sublistsLen_sublist_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:308:8: `List.Pairwise.sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:330:8: `List.nodup_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:356:8: `List.sublists_perm_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Sublists.lean:390:8: `List.revzip_sublists'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [857/892] Replayed Mathlib.Data.List.Zip
warning: ././.lake/packages/mathlib/././Mathlib/Data/List/Zip.lean:122:8: `List.get?_zipWith'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [858/892] Replayed Mathlib.Data.Multiset.Powerset
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:40:8: `Multiset.powersetAux_perm_powersetAux'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:81:8: `Multiset.powerset_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:113:8: `Multiset.revzip_powersetAux'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:133:8: `Multiset.revzip_powersetAux_perm_aux'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Multiset/Powerset.lean:205:8: `Multiset.powersetCard_coe'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [860/892] Replayed Mathlib.Data.Fintype.Powerset
warning: ././.lake/packages/mathlib/././Mathlib/Data/Fintype/Powerset.lean:59:9: `Set.finite'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [865/892] Replayed Mathlib.Data.Set.Finite
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:341:9: `Set.fintypeBiUnion'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:361:9: `Set.fintypeBind'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:455:9: `Set.fintypeSeq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:568:9: `Finite.Set.finite_biUnion'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:772:8: `Set.Finite.preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:780:6: `Set.Infinite.preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:861:8: `Set.Finite.seq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:960:8: `Set.Finite.toFinset_insert'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:1092:8: `Set.empty_card'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Set/Finite.lean:1546:6: `Set.finite_diff_iUnion_Ioo'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [867/892] Replayed Mathlib.Data.Sym.Sym2
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:80:8: `Sym2.rel_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:284:8: `Sym2.mem_iff'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:587:9: `Sym2.instDecidableRel'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:624:8: `Sym2.other_spec'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:630:8: `Sym2.other_eq_other'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:633:8: `Sym2.other_mem'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Data/Sym/Sym2.lean:637:8: `Sym2.other_invol'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [880/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [881/892] Replayed Mathlib.Algebra.BigOperators.Group.Finset
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:438:8: `Equiv.Perm.prod_comp'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:683:6: `Finset.prod_fiberwise_eq_prod_filter'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:696:6: `Finset.prod_fiberwise_of_maps_to'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:711:6: `Finset.prod_fiberwise'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:743:8: `Finset.prod_finset_product'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:756:8: `Finset.prod_finset_product_right'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:762:8: `Finset.prod_image'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:985:6: `Finset.prod_preimage'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1125:8: `Finset.prod_dite_eq'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1173:8: `Finset.prod_pi_mulSingle'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1310:8: `Finset.prod_range_succ'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1451:8: `Finset.prod_range_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1459:8: `Finset.eq_prod_range_div'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:1967:6: `Fintype.prod_fiberwise'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
warning: ././.lake/packages/mathlib/././Mathlib/Algebra/BigOperators/Group/Finset.lean:2131:8: `Multiset.count_sum'` is missing a doc-string, please add one.
Declarations whose name ends with a `'` are expected to contain an explanation for the presence of a `'` in their doc-string. This may consist of discussion of the difference relative to the unprimed version, or an explanation as to why no better naming scheme is possible.
note: this linter can be disabled with `set_option linter.docPrime false`
⚠ [884/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:11:8: warning: declaration uses 'sorry'
[bv] [0.042741] Normalizing goal
  [Meta.synthInstance] [0.001120] ✅️ Decidable
        ((if x✝ = 0 then none
          else if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#32 / x✝ &&& (42#32 / x✝ ^^^ 43#32 / x✝¹))) ⊑
          if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#32 / x✝ &&& (42#32 / x✝ ^^^ 43#32 / x✝¹))) ⊑
            if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001594] ✅️ ?h₃ =?= fun a => Eq.refl (some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)))
    [Meta.isDefEq.assign] [0.001590] ✅️ ?h₃ := fun a => Eq.refl (some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001561] ✅️ (?h₃ : ¬(x✝¹ == 0#32) = true →
            some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)) =
              some
                (42#32 / x✝ &&&
                  (43#32 / x✝¹ ^^^
                    4294967295#32))) := (fun a =>
            Eq.refl
              (some
                (42#32 / x✝ &&&
                  (43#32 / x✝¹ ^^^
                    4294967295#32))) : ¬(x✝¹ == 0#32) = true →
            some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)) =
              some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)))
        [Meta.isDefEq] [0.001557] ✅️ ¬(x✝¹ == 0#32) = true →
              some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)) =
                some
                  (42#32 / x✝ &&&
                    (43#32 / x✝¹ ^^^
                      4294967295#32)) =?= ¬(x✝¹ == 0#32) = true →
              some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)) =
                some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32))
          [Meta.isDefEq] [0.001493] ✅️ some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)) =
                some
                  (42#32 / x✝ &&&
                    (43#32 / x✝¹ ^^^
                      4294967295#32)) =?= some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)) =
                some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32))
            [Meta.isDefEq] [0.001470] ✅️ some
                  (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)) =?= some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32))
              [Meta.isDefEq] [0.001442] ✅️ 42#32 / x✝ &&&
                    (43#32 / x✝¹ ^^^ -1#32) =?= 42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)
                [Meta.isDefEq] [0.001407] ✅️ instHAndOfAndOp.1 (42#32 / x✝)
                      (43#32 / x✝¹ ^^^ -1#32) =?= instHAndOfAndOp.1 (42#32 / x✝) (43#32 / x✝¹ ^^^ 4294967295#32)
                  [Meta.isDefEq] [0.001319] ✅️ AndOp.and (42#32 / x✝)
                        (43#32 / x✝¹ ^^^ -1#32) =?= AndOp.and (42#32 / x✝) (43#32 / x✝¹ ^^^ 4294967295#32)
                    [Meta.isDefEq] [0.001290] ✅️ BitVec.instAndOp.1 (42#32 / x✝)
                          (43#32 / x✝¹ ^^^ -1#32) =?= BitVec.instAndOp.1 (42#32 / x✝) (43#32 / x✝¹ ^^^ 4294967295#32)
                      [Meta.isDefEq] [0.001224] ✅️ (42#32 / x✝).and
                            (43#32 / x✝¹ ^^^ -1#32) =?= (42#32 / x✝).and (43#32 / x✝¹ ^^^ 4294967295#32)
                        [Meta.isDefEq.delta] [0.001210] ✅️ (42#32 / x✝).and
                              (43#32 / x✝¹ ^^^ -1#32) =?= (42#32 / x✝).and (43#32 / x✝¹ ^^^ 4294967295#32)
                          [Meta.isDefEq] [0.001176] ✅️ 43#32 / x✝¹ ^^^ -1#32 =?= 43#32 / x✝¹ ^^^ 4294967295#32
                            [Meta.isDefEq] [0.001146] ✅️ instHXorOfXor.1 (43#32 / x✝¹)
                                  (-1#32) =?= instHXorOfXor.1 (43#32 / x✝¹) 4294967295#32
                              [Meta.isDefEq] [0.001071] ✅️ Xor.xor (43#32 / x✝¹)
                                    (-1#32) =?= Xor.xor (43#32 / x✝¹) 4294967295#32
                                [Meta.isDefEq] [0.001033] ✅️ BitVec.instXor.1 (43#32 / x✝¹)
                                      (-1#32) =?= BitVec.instXor.1 (43#32 / x✝¹) 4294967295#32
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0#32) = true then none
            else
              if (x✝ == 0#32) = true then none
              else if (x✝¹ == 0#32) = true then none else some (42#32 / x✝ &&& (42#32 / x✝ ^^^ 43#32 / x✝¹))) ⊑
            if (x✝ == 0#32) = true then none
            else if (x✝¹ == 0#32) = true then none else some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:22:8: warning: declaration uses 'sorry'
[bv] [0.047016] Normalizing goal
  [Meta.synthInstance] [0.001778] ✅️ Decidable
        ((if x✝ = 0 then none
          else if x✝¹ = 0 then none else if x✝ = 0 then none else some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 42#32 / x✝))) ⊑
          if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝¹ = 0 then none else if x✝ = 0 then none else some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 42#32 / x✝))) ⊑
            if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001003] ❌️ ?a == ?a =?= x✝ == 0#32
  [Meta.isDefEq] [0.001456] ✅️ ?h₃ =?= fun a => Eq.refl (some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)))
    [Meta.isDefEq.assign] [0.001452] ✅️ ?h₃ := fun a => Eq.refl (some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001418] ✅️ (?h₃ : ¬(x✝¹ == 0#32) = true →
            some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)) =
              some
                (42#32 / x✝ &&&
                  (43#32 / x✝¹ ^^^
                    4294967295#32))) := (fun a =>
            Eq.refl
              (some
                (42#32 / x✝ &&&
                  (43#32 / x✝¹ ^^^
                    4294967295#32))) : ¬(x✝¹ == 0#32) = true →
            some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)) =
              some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)))
        [Meta.isDefEq] [0.001413] ✅️ ¬(x✝¹ == 0#32) = true →
              some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)) =
                some
                  (42#32 / x✝ &&&
                    (43#32 / x✝¹ ^^^
                      4294967295#32)) =?= ¬(x✝¹ == 0#32) = true →
              some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)) =
                some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32))
          [Meta.isDefEq] [0.001367] ✅️ some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)) =
                some
                  (42#32 / x✝ &&&
                    (43#32 / x✝¹ ^^^
                      4294967295#32)) =?= some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)) =
                some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32))
            [Meta.isDefEq] [0.001343] ✅️ some
                  (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ -1#32)) =?= some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32))
              [Meta.isDefEq] [0.001314] ✅️ 42#32 / x✝ &&&
                    (43#32 / x✝¹ ^^^ -1#32) =?= 42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32)
                [Meta.isDefEq] [0.001278] ✅️ instHAndOfAndOp.1 (42#32 / x✝)
                      (43#32 / x✝¹ ^^^ -1#32) =?= instHAndOfAndOp.1 (42#32 / x✝) (43#32 / x✝¹ ^^^ 4294967295#32)
                  [Meta.isDefEq] [0.001187] ✅️ AndOp.and (42#32 / x✝)
                        (43#32 / x✝¹ ^^^ -1#32) =?= AndOp.and (42#32 / x✝) (43#32 / x✝¹ ^^^ 4294967295#32)
                    [Meta.isDefEq] [0.001154] ✅️ BitVec.instAndOp.1 (42#32 / x✝)
                          (43#32 / x✝¹ ^^^ -1#32) =?= BitVec.instAndOp.1 (42#32 / x✝) (43#32 / x✝¹ ^^^ 4294967295#32)
                      [Meta.isDefEq] [0.001092] ✅️ (42#32 / x✝).and
                            (43#32 / x✝¹ ^^^ -1#32) =?= (42#32 / x✝).and (43#32 / x✝¹ ^^^ 4294967295#32)
                        [Meta.isDefEq.delta] [0.001077] ✅️ (42#32 / x✝).and
                              (43#32 / x✝¹ ^^^ -1#32) =?= (42#32 / x✝).and (43#32 / x✝¹ ^^^ 4294967295#32)
                          [Meta.isDefEq] [0.001041] ✅️ 43#32 / x✝¹ ^^^ -1#32 =?= 43#32 / x✝¹ ^^^ 4294967295#32
                            [Meta.isDefEq] [0.001006] ✅️ instHXorOfXor.1 (43#32 / x✝¹)
                                  (-1#32) =?= instHXorOfXor.1 (43#32 / x✝¹) 4294967295#32
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0#32) = true then none
            else
              if (x✝¹ == 0#32) = true then none
              else if (x✝ == 0#32) = true then none else some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 42#32 / x✝))) ⊑
            if (x✝ == 0#32) = true then none
            else if (x✝¹ == 0#32) = true then none else some (42#32 / x✝ &&& (43#32 / x✝¹ ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:33:8: warning: declaration uses 'sorry'
[bv] [0.042314] Normalizing goal
  [Meta.synthInstance] [0.001160] ✅️ Decidable
        ((if x✝ = 0 then none
          else
            if x✝¹ = 0 then none else if x✝¹ = 0 then none else some ((43#32 / x✝ ^^^ 42#32 / x✝¹) &&& 42#32 / x✝¹)) ⊑
          if x✝¹ = 0 then none else if x✝ = 0 then none else some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝¹ = 0 then none else if x✝¹ = 0 then none else some ((43#32 / x✝ ^^^ 42#32 / x✝¹) &&& 42#32 / x✝¹)) ⊑
            if x✝¹ = 0 then none else if x✝ = 0 then none else some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001423] ✅️ ?h₃ =?= fun a => Eq.refl (some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32)))
    [Meta.isDefEq.assign] [0.001419] ✅️ ?h₃ := fun a => Eq.refl (some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001387] ✅️ (?h₃ : ¬(x✝ == 0#32) = true →
            some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ -1#32)) =
              some
                (42#32 / x✝¹ &&&
                  (43#32 / x✝ ^^^
                    4294967295#32))) := (fun a =>
            Eq.refl
              (some
                (42#32 / x✝¹ &&&
                  (43#32 / x✝ ^^^
                    4294967295#32))) : ¬(x✝ == 0#32) = true →
            some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32)) =
              some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32)))
        [Meta.isDefEq] [0.001382] ✅️ ¬(x✝ == 0#32) = true →
              some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ -1#32)) =
                some
                  (42#32 / x✝¹ &&&
                    (43#32 / x✝ ^^^
                      4294967295#32)) =?= ¬(x✝ == 0#32) = true →
              some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32)) =
                some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32))
          [Meta.isDefEq] [0.001340] ✅️ some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ -1#32)) =
                some
                  (42#32 / x✝¹ &&&
                    (43#32 / x✝ ^^^
                      4294967295#32)) =?= some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32)) =
                some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32))
            [Meta.isDefEq] [0.001317] ✅️ some
                  (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ -1#32)) =?= some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32))
              [Meta.isDefEq] [0.001289] ✅️ 42#32 / x✝¹ &&&
                    (43#32 / x✝ ^^^ -1#32) =?= 42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32)
                [Meta.isDefEq] [0.001253] ✅️ instHAndOfAndOp.1 (42#32 / x✝¹)
                      (43#32 / x✝ ^^^ -1#32) =?= instHAndOfAndOp.1 (42#32 / x✝¹) (43#32 / x✝ ^^^ 4294967295#32)
                  [Meta.isDefEq] [0.001171] ✅️ AndOp.and (42#32 / x✝¹)
                        (43#32 / x✝ ^^^ -1#32) =?= AndOp.and (42#32 / x✝¹) (43#32 / x✝ ^^^ 4294967295#32)
                    [Meta.isDefEq] [0.001140] ✅️ BitVec.instAndOp.1 (42#32 / x✝¹)
                          (43#32 / x✝ ^^^ -1#32) =?= BitVec.instAndOp.1 (42#32 / x✝¹) (43#32 / x✝ ^^^ 4294967295#32)
                      [Meta.isDefEq] [0.001082] ✅️ (42#32 / x✝¹).and
                            (43#32 / x✝ ^^^ -1#32) =?= (42#32 / x✝¹).and (43#32 / x✝ ^^^ 4294967295#32)
                        [Meta.isDefEq.delta] [0.001067] ✅️ (42#32 / x✝¹).and
                              (43#32 / x✝ ^^^ -1#32) =?= (42#32 / x✝¹).and (43#32 / x✝ ^^^ 4294967295#32)
                          [Meta.isDefEq] [0.001028] ✅️ 43#32 / x✝ ^^^ -1#32 =?= 43#32 / x✝ ^^^ 4294967295#32
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 : LLVM.IntW 32
      x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0#32) = true then none
            else
              if (x✝¹ == 0#32) = true then none
              else if (x✝¹ == 0#32) = true then none else some ((43#32 / x✝ ^^^ 42#32 / x✝¹) &&& 42#32 / x✝¹)) ⊑
            if (x✝¹ == 0#32) = true then none
            else if (x✝ == 0#32) = true then none else some (42#32 / x✝¹ &&& (43#32 / x✝ ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 75.427011ms, solving context: 3.000000ms
LeanSAT proved the goal after 136.288479ms: rewriting 13.501390ms, bitblasting 0.000000ms, SAT solving 55.467089ms, LRAT trimming 1.563280ms, LRAT checking 6.542930ms
Bitwuzla proved the goal after 75.734660ms, solving context: 2.000000ms
LeanSAT proved the goal after 90.420560ms: rewriting 19.400320ms, bitblasting 0.000000ms, SAT solving 60.995130ms, LRAT trimming 2.608450ms, LRAT checking 5.724550ms
Bitwuzla proved the goal after 70.638170ms, solving context: 0.000000ms
LeanSAT proved the goal after 274.536479ms: rewriting 12.254610ms, bitblasting 0.000000ms, SAT solving 205.867780ms, LRAT trimming 34.375830ms, LRAT checking 11.534190ms
Bitwuzla proved the goal after 79.264359ms, solving context: 2.000000ms
LeanSAT proved the goal after 85.162470ms: rewriting 17.162280ms, bitblasting 0.000000ms, SAT solving 58.035260ms, LRAT trimming 1.241270ms, LRAT checking 5.635750ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:82:8: warning: declaration uses 'sorry'
[bv] [0.037966] Normalizing goal
  [Meta.synthInstance] [0.001048] ✅️ Decidable
        ((if x✝ = 0 then none
          else
            if x✝¹ = 0 then none
            else
              if x✝² = 0 then none
              else if x✝¹ = 0 then none else some (42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝² ||| 42#64 / x✝¹)) ⊑
          if x✝² = 0 then none else if x✝¹ = 0 then none else some (42#64 / x✝² ||| 42#64 / x✝¹))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝¹ = 0 then none
              else
                if x✝² = 0 then none
                else if x✝¹ = 0 then none else some (42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝² ||| 42#64 / x✝¹)) ⊑
            if x✝² = 0 then none else if x✝¹ = 0 then none else some (42#64 / x✝² ||| 42#64 / x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if (x✝ == 0#64) = true then none
            else
              if (x✝¹ == 0#64) = true then none
              else
                if (x✝² == 0#64) = true then none
                else
                  if (x✝¹ == 0#64) = true then none
                  else some (42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝² ||| 42#64 / x✝¹)) ⊑
            if (x✝² == 0#64) = true then none
            else if (x✝¹ == 0#64) = true then none else some (42#64 / x✝² ||| 42#64 / x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:95:8: warning: declaration uses 'sorry'
[bv] [0.037214] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝¹ = 0 then none
              else
                if x✝² = 0 then none
                else if x✝ = 0 then none else some (42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝² ||| 42#64 / x✝)) ⊑
            if x✝² = 0 then none else if x✝ = 0 then none else some (42#64 / x✝² ||| 42#64 / x✝)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if (x✝ == 0#64) = true then none
            else
              if (x✝¹ == 0#64) = true then none
              else
                if (x✝² == 0#64) = true then none
                else
                  if (x✝ == 0#64) = true then none
                  else some (42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝² ||| 42#64 / x✝)) ⊑
            if (x✝² == 0#64) = true then none
            else if (x✝ == 0#64) = true then none else some (42#64 / x✝² ||| 42#64 / x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:108:8: warning: declaration uses 'sorry'
[bv] [0.042334] Normalizing goal
  [Meta.synthInstance] [0.001148] ✅️ Decidable
        ((if x✝ = 0 then none
          else
            if x✝¹ = 0 then none
            else
              if x✝² = 0 then none
              else if x✝² = 0 then none else some (42#64 / x✝ ^^^ 42#64 / x✝¹ &&& 42#64 / x✝² ||| 42#64 / x✝²)) ⊑
          if x✝ = 0 then none else if x✝² = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝²))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝¹ = 0 then none
              else
                if x✝² = 0 then none
                else if x✝² = 0 then none else some (42#64 / x✝ ^^^ 42#64 / x✝¹ &&& 42#64 / x✝² ||| 42#64 / x✝²)) ⊑
            if x✝ = 0 then none else if x✝² = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝²)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if (x✝ == 0#64) = true then none
            else
              if (x✝¹ == 0#64) = true then none
              else
                if (x✝² == 0#64) = true then none
                else
                  if (x✝² == 0#64) = true then none
                  else some (42#64 / x✝ ^^^ 42#64 / x✝¹ &&& 42#64 / x✝² ||| 42#64 / x✝²)) ⊑
            if (x✝ == 0#64) = true then none
            else if (x✝² == 0#64) = true then none else some (42#64 / x✝ ||| 42#64 / x✝²)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:121:8: warning: declaration uses 'sorry'
[bv] [0.050307] Normalizing goal
  [Meta.synthInstance] [0.001189] ✅️ Decidable
        ((if x✝ = 0 then none
          else
            if x✝¹ = 0 then none
            else
              if x✝² = 0 then none
              else if x✝¹ = 0 then none else some (42#64 / x✝ ^^^ 42#64 / x✝¹ &&& 42#64 / x✝² ||| 42#64 / x✝¹)) ⊑
          if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝¹))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝¹ = 0 then none
              else
                if x✝² = 0 then none
                else if x✝¹ = 0 then none else some (42#64 / x✝ ^^^ 42#64 / x✝¹ &&& 42#64 / x✝² ||| 42#64 / x✝¹)) ⊑
            if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if (x✝ == 0#64) = true then none
            else
              if (x✝¹ == 0#64) = true then none
              else
                if (x✝² == 0#64) = true then none
                else
                  if (x✝¹ == 0#64) = true then none
                  else some (42#64 / x✝ ^^^ 42#64 / x✝¹ &&& 42#64 / x✝² ||| 42#64 / x✝¹)) ⊑
            if (x✝ == 0#64) = true then none
            else if (x✝¹ == 0#64) = true then none else some (42#64 / x✝ ||| 42#64 / x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:134:8: warning: declaration uses 'sorry'
[bv] [0.047488] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝¹ = 0 then none
              else
                if x✝ = 0 then none
                else if x✝² = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝¹ &&& 42#64 / x✝ ^^^ 42#64 / x✝²)) ⊑
            if x✝ = 0 then none else if x✝² = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝²)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if (x✝ == 0#64) = true then none
            else
              if (x✝¹ == 0#64) = true then none
              else
                if (x✝ == 0#64) = true then none
                else
                  if (x✝² == 0#64) = true then none
                  else some (42#64 / x✝ ||| 42#64 / x✝¹ &&& 42#64 / x✝ ^^^ 42#64 / x✝²)) ⊑
            if (x✝ == 0#64) = true then none
            else if (x✝² == 0#64) = true then none else some (42#64 / x✝ ||| 42#64 / x✝²)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:146:8: warning: declaration uses 'sorry'
[bv] [0.036755] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝ = 0 then none
              else
                if x✝¹ = 0 then none
                else if x✝² = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝²)) ⊑
            if x✝ = 0 then none else if x✝² = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝²)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if (x✝ == 0#64) = true then none
            else
              if (x✝ == 0#64) = true then none
              else
                if (x✝¹ == 0#64) = true then none
                else
                  if (x✝² == 0#64) = true then none
                  else some (42#64 / x✝ ||| 42#64 / x✝ &&& 42#64 / x✝¹ ^^^ 42#64 / x✝²)) ⊑
            if (x✝ == 0#64) = true then none
            else if (x✝² == 0#64) = true then none else some (42#64 / x✝ ||| 42#64 / x✝²)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:158:8: warning: declaration uses 'sorry'
[bv] [0.036789] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝¹ = 0 then none
              else
                if x✝² = 0 then none
                else if x✝ = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝¹ ^^^ 42#64 / x✝² &&& 42#64 / x✝)) ⊑
            if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if (x✝ == 0#64) = true then none
            else
              if (x✝¹ == 0#64) = true then none
              else
                if (x✝² == 0#64) = true then none
                else
                  if (x✝ == 0#64) = true then none
                  else some (42#64 / x✝ ||| 42#64 / x✝¹ ^^^ 42#64 / x✝² &&& 42#64 / x✝)) ⊑
            if (x✝ == 0#64) = true then none
            else if (x✝¹ == 0#64) = true then none else some (42#64 / x✝ ||| 42#64 / x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:170:8: warning: declaration uses 'sorry'
[bv] [0.035766] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if x✝ = 0 then none
            else
              if x✝¹ = 0 then none
              else
                if x✝ = 0 then none
                else if x✝² = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝¹ ^^^ 42#64 / x✝ &&& 42#64 / x✝²)) ⊑
            if x✝ = 0 then none else if x✝¹ = 0 then none else some (42#64 / x✝ ||| 42#64 / x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 64
      x✝² x✝¹ x✝ : BitVec 64
      a✝ :
        ¬(if (x✝ == 0#64) = true then none
            else
              if (x✝¹ == 0#64) = true then none
              else
                if (x✝ == 0#64) = true then none
                else
                  if (x✝² == 0#64) = true then none
                  else some (42#64 / x✝ ||| 42#64 / x✝¹ ^^^ 42#64 / x✝ &&& 42#64 / x✝²)) ⊑
            if (x✝ == 0#64) = true then none
            else if (x✝¹ == 0#64) = true then none else some (42#64 / x✝ ||| 42#64 / x✝¹)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:182:8: warning: declaration uses 'sorry'
[bv] [0.023714] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ ≥ ↑8 then none else if x✝¹ ≥ ↑8 then none else some (x✝ <<< x✝¹ &&& (x✝² <<< x✝¹ &&& x✝³))) ⊑
            if x✝¹ ≥ ↑8 then none else some ((x✝² &&& x✝) <<< x✝¹ &&& x✝³)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹) = true then none
            else if (!8#8 >ᵤ x✝¹) = true then none else some (x✝ <<< x✝¹ &&& (x✝² <<< x✝¹ &&& x✝³))) ⊑
            if (!8#8 >ᵤ x✝¹) = true then none else some ((x✝² &&& x✝) <<< x✝¹ &&& x✝³)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:192:8: warning: declaration uses 'sorry'
[bv] [0.022115] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ ≥ ↑8 then none else if x✝¹ ≥ ↑8 then none else some (x✝ <<< x✝¹ ||| x✝² ||| x✝³ <<< x✝¹)) ⊑
            if x✝¹ ≥ ↑8 then none else some ((x✝ ||| x✝³) <<< x✝¹ ||| x✝²)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹) = true then none
            else if (!8#8 >ᵤ x✝¹) = true then none else some (x✝ <<< x✝¹ ||| x✝² ||| x✝³ <<< x✝¹)) ⊑
            if (!8#8 >ᵤ x✝¹) = true then none else some ((x✝ ||| x✝³) <<< x✝¹ ||| x✝²)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:202:8: warning: declaration uses 'sorry'
[bv] [0.022206] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ ≥ ↑8 then none else if x✝¹ ≥ ↑8 then none else some (x✝ >>> x✝¹ ||| (x✝² >>> x✝¹ ||| x✝³))) ⊑
            if x✝¹ ≥ ↑8 then none else some ((x✝² ||| x✝) >>> x✝¹ ||| x✝³)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹) = true then none
            else if (!8#8 >ᵤ x✝¹) = true then none else some (x✝ >>> x✝¹ ||| (x✝² >>> x✝¹ ||| x✝³))) ⊑
            if (!8#8 >ᵤ x✝¹) = true then none else some ((x✝² ||| x✝) >>> x✝¹ ||| x✝³)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:212:8: warning: declaration uses 'sorry'
[bv] [0.021626] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ ≥ ↑8 then none else if x✝¹ ≥ ↑8 then none else some (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹)) ⊑
            if x✝¹ ≥ ↑8 then none else some ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹) = true then none
            else if (!8#8 >ᵤ x✝¹) = true then none else some (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹)) ⊑
            if (!8#8 >ᵤ x✝¹) = true then none else some ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:222:8: warning: declaration uses 'sorry'
[bv] [0.108430] Normalizing goal
  [Meta.synthInstance] [0.001237] ✅️ Decidable
        ((if x✝¹ ≥ ↑8 then none
          else
            if x✝¹ ≥ ↑8 then none
            else
              if x✝¹ ≥ ↑8 then none
              else
                if
                    (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0 ||
                        8 != 1 && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == -1) =
                      true then
                  none
                else some ((x✝ >>> x✝¹ ^^^ x✝²).sdiv (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹))) ⊑
          if x✝¹ ≥ ↑8 then none
          else
            if x✝¹ ≥ ↑8 then none
            else
              if
                  ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝² == 0 ||
                      8 != 1 && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && (x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝² == -1) =
                    true then
                none
              else some ((x✝ >>> x✝¹ ^^^ x✝²).sdiv ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if x✝¹ ≥ ↑8 then none
            else
              if x✝¹ ≥ ↑8 then none
              else
                if x✝¹ ≥ ↑8 then none
                else
                  if
                      (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0 ||
                          8 != 1 && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == -1) =
                        true then
                    none
                  else some ((x✝ >>> x✝¹ ^^^ x✝²).sdiv (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹))) ⊑
            if x✝¹ ≥ ↑8 then none
            else
              if x✝¹ ≥ ↑8 then none
              else
                if
                    ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝² == 0 ||
                        8 != 1 && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && (x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝² == -1) =
                      true then
                  none
                else some ((x✝ >>> x✝¹ ^^^ x✝²).sdiv ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²))
      ⊢ False
  [Meta.isDefEq] [0.001224] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg
            (fun x => x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 || x && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8)
            (Bool.true_and (x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8)
            (x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8)))
    [Meta.isDefEq.assign] [0.001222] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg
              (fun x => x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 || x && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8)
              (Bool.true_and (x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8)
              (x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8)))
      [Meta.isDefEq.assign.checkTypes] [0.001209] ✅️ (?h₁ : ((x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0 ||
                8 != 1 && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == -1) =
              true) =
            ((!(!x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 &&
                  !(x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg
                (fun x => x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 || x && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8)
                (Bool.true_and (x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8)
                (x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 &&
                  x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ ==
                    255#8))) : ((x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 ||
                true && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8) =
              true) =
            ((!(!x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 &&
                  !(x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8))) =
              true))
        [Meta.isDefEq] [0.001205] ✅️ ((x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0 ||
                  8 != 1 && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == -1) =
                true) =
              ((!(!x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 &&
                    !(x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8))) =
                true) =?= ((x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 ||
                  true && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8) =
                true) =
              ((!(!x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 &&
                    !(x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8))) =
                true)
          [Meta.isDefEq] [0.001186] ✅️ (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0 ||
                  8 != 1 && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == -1) =
                true =?= (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 ||
                  true && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8) =
                true
            [Meta.isDefEq] [0.001173] ✅️ x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0 ||
                  8 != 1 && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 &&
                    x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ ==
                      -1 =?= x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 ||
                  true && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8
              [Meta.isDefEq.delta] [0.001158] ✅️ x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0 ||
                    8 != 1 && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 &&
                      x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ ==
                        -1 =?= x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 ||
                    true && x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 e_3 : LLVM.IntW 8
      x✝³ x✝² x✝¹ x✝ : BitVec 8
      a✝ :
        ¬(if (!8#8 >ᵤ x✝¹) = true then none
            else
              if (!8#8 >ᵤ x✝¹) = true then none
              else
                if (!8#8 >ᵤ x✝¹) = true then none
                else
                  if
                      (!(!x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 0#8 &&
                            !(x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹ == 255#8))) =
                        true then
                    none
                  else
                    some
                      (if (x✝ >>> x✝¹ ^^^ x✝²).getLsbD 7 = true then
                        if (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹).getLsbD 7 = true then
                          (~~~(x✝ >>> x✝¹ ^^^ x✝²) + 1#8) / (~~~(x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹) + 1#8)
                        else ~~~((~~~(x✝ >>> x✝¹ ^^^ x✝²) + 1#8) / (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹)) + 1#8
                      else
                        if (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹).getLsbD 7 = true then
                          ~~~((x✝ >>> x✝¹ ^^^ x✝²) / (~~~(x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹) + 1#8)) + 1#8
                        else (x✝ >>> x✝¹ ^^^ x✝²) / (x✝ >>> x✝¹ ^^^ x✝² ^^^ x✝³ >>> x✝¹))) ⊑
            if (!8#8 >ᵤ x✝¹) = true then none
            else
              if (!8#8 >ᵤ x✝¹) = true then none
              else
                if
                    (!(!(x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝² == 0#8 &&
                          !(x✝ >>> x✝¹ ^^^ x✝² == BitVec.intMin 8 && (x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝² == 255#8))) =
                      true then
                  none
                else
                  some
                    (if (x✝ >>> x✝¹ ^^^ x✝²).getLsbD 7 = true then
                      if ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²).getLsbD 7 = true then
                        (~~~(x✝ >>> x✝¹ ^^^ x✝²) + 1#8) / (~~~((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²) + 1#8)
                      else ~~~((~~~(x✝ >>> x✝¹ ^^^ x✝²) + 1#8) / ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²)) + 1#8
                    else
                      if ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²).getLsbD 7 = true then
                        ~~~((x✝ >>> x✝¹ ^^^ x✝²) / (~~~((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²) + 1#8)) + 1#8
                      else (x✝ >>> x✝¹ ^^^ x✝²) / ((x✝ ^^^ x✝³) >>> x✝¹ ^^^ x✝²))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:233:8: warning: declaration uses 'sorry'
[bv] [0.048359] Normalizing goal
  [Meta.synthInstance] [0.001187] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& (x✝² ^^^ -1#32))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& (x✝² ^^^ -1#32))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001536] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32) (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001534] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
              (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001522] ✅️ (?h₁ : ((x✝ == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝ ==
                    4294967295#32))) : ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001518] ✅️ ((x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true) =?= ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001500] ✅️ (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
                true =?= (x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true
            [Meta.isDefEq] [0.001487] ✅️ x✝ == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
              [Meta.isDefEq.delta] [0.001472] ✅️ x✝ == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
                [Meta.isDefEq] [0.001192] ✅️ 32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝ == -1 =?= true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
                  [Meta.isDefEq.delta] [0.001180] ✅️ 32 != 1 && 42#32 == BitVec.intMin 32 &&
                        x✝ == -1 =?= true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    (x✝¹ ^^^ 4294967295#32) &&&
                  (x✝² ^^^ 4294967295#32))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                  ((x✝¹ ||| x✝²) ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 72.728810ms, solving context: 1.000000ms
LeanSAT proved the goal after 76.847469ms: rewriting 15.311120ms, bitblasting 0.000000ms, SAT solving 55.170920ms, LRAT trimming 0.000000ms, LRAT checking 4.048360ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:255:8: warning: declaration uses 'sorry'
[bv] [0.045350] Normalizing goal
  [Meta.synthInstance] [0.001174] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32 ||| x✝² ^^^ -1#32)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32 ||| x✝² ^^^ -1#32)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001293] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32) (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001291] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
              (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001281] ✅️ (?h₁ : ((x✝ == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝ ==
                    4294967295#32))) : ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001277] ✅️ ((x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true) =?= ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001259] ✅️ (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
                true =?= (x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true
            [Meta.isDefEq] [0.001246] ✅️ x✝ == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
              [Meta.isDefEq.delta] [0.001231] ✅️ x✝ == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                    x✝¹ ^^^ 4294967295#32 |||
                  x✝² ^^^ 4294967295#32)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                  x✝¹ &&& x✝² ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 71.347680ms, solving context: 1.000000ms
LeanSAT proved the goal after 76.220799ms: rewriting 13.924200ms, bitblasting 0.000000ms, SAT solving 55.516469ms, LRAT trimming 0.000000ms, LRAT checking 4.024410ms
Bitwuzla proved the goal after 73.953950ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.474280ms: rewriting 16.587850ms, bitblasting 0.000000ms, SAT solving 55.003750ms, LRAT trimming 0.000000ms, LRAT checking 4.886670ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:289:8: warning: declaration uses 'sorry'
[bv] [0.052368] Normalizing goal
  [Meta.synthInstance] [0.001113] ✅️ Decidable
        ((if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              some (((x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& x✝² ||| (42#32).sdiv x✝¹ &&& ((x✝ ||| x✝²) ^^^ -1#32))) ⊑
          if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
          else some (((42#32).sdiv x✝¹ ^^^ x✝²) &&& (x✝ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                some
                  (((x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& x✝² ||| (42#32).sdiv x✝¹ &&& ((x✝ ||| x✝²) ^^^ -1#32))) ⊑
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else some (((42#32).sdiv x✝¹ ^^^ x✝²) &&& (x✝ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001284] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝¹ == 0#32 || x && x✝¹ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#32)
            (42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001281] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝¹ == 0#32 || x && x✝¹ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#32)
              (42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001270] ✅️ (?h₁ : ((x✝¹ == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) =
              true) =
            ((!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝¹ == 0#32 || x && x✝¹ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝¹ ==
                    4294967295#32))) : ((x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32) =
              true) =
            ((!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001267] ✅️ ((x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true) =
              ((!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) =
                true) =?= ((x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32) = true) =
              ((!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001249] ✅️ (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) =
                true =?= (x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32) = true
            [Meta.isDefEq] [0.001235] ✅️ x✝¹ == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝¹ == -1 =?= x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32
              [Meta.isDefEq.delta] [0.001219] ✅️ x✝¹ == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝¹ == -1 =?= x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32
  [Meta.isDefEq] [0.001033] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HOr.hOr (((x✝ ||| x) ^^^ 4294967295#32) &&& x✝²))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                (Eq.trans
                  (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                    (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝¹)))))
            (congrArg (fun x => x &&& ((x✝ ||| x✝²) ^^^ 4294967295#32))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                (Eq.trans
                  (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                    (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝¹))))))
    [Meta.isDefEq.assign] [0.001027] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HOr.hOr (((x✝ ||| x) ^^^ 4294967295#32) &&& x✝²))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹)))))
              (congrArg (fun x => x &&& ((x✝ ||| x✝²) ^^^ 4294967295#32))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                some
                  (((x✝ ||| if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32) &&&
                      x✝² |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                      ((x✝ ||| x✝²) ^^^ 4294967295#32))) ⊑
            if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
            else
              some
                (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^ x✝²) &&&
                  (x✝ ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:301:8: warning: declaration uses 'sorry'
[bv] [0.050965] Normalizing goal
  [Meta.synthInstance] [0.001040] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝² ^^^ (42#32).sdiv x✝) &&& (x✝¹ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else
                some
                  ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝² ^^^ (42#32).sdiv x✝) &&& (x✝¹ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001076] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HOr.hOr (x &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32)))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => ((x✝¹ ||| x) ^^^ 4294967295#32) &&& x✝²)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001073] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HOr.hOr (x &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32)))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => ((x✝¹ ||| x) ^^^ 4294967295#32) &&& x✝²)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
      [Meta.isDefEq.assign.checkTypes] [0.001010] ✅️ (?h₃ : ¬(!(!x✝ == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²) =
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                  ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32) &&&
                    x✝²)) := (fun a =>
            congrArg some
              (congr
                (congrArg (fun x => HOr.hOr (x &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32)))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))
                (congrArg (fun x => ((x✝¹ ||| x) ^^^ 4294967295#32) &&& x✝²)
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a =>
                        Eq.refl
                          (42#32 /
                            x✝)))))) : ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
            some
                ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                  ((x✝¹ ||| (42#32).sdiv x✝) ^^^ 4294967295#32) &&& x✝²) =
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                  ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32) &&&
                    x✝²))
        [Meta.isDefEq] [0.001003] ✅️ ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²) =
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32) &&&
                      x✝²) =?= ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some
                  ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((x✝¹ ||| (42#32).sdiv x✝) ^^^ 4294967295#32) &&& x✝²) =
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32) &&&
                      x✝²)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32) &&&
                      x✝²)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝² ^^^ if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                  (x✝¹ ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 73.997170ms, solving context: 1.000000ms
LeanSAT proved the goal after 280.496929ms: rewriting 16.908050ms, bitblasting 0.000000ms, SAT solving 255.468079ms, LRAT trimming 0.000000ms, LRAT checking 5.055850ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:325:8: warning: declaration uses 'sorry'
[bv] [0.051228] Normalizing goal
  [Meta.synthInstance] [0.001046] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝² ^^^ (42#32).sdiv x✝) &&& (x✝¹ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else
                some
                  ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝² ^^^ (42#32).sdiv x✝) &&& (x✝¹ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001091] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HOr.hOr (x &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32)))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => ((x✝¹ ||| x) ^^^ 4294967295#32) &&& x✝²)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001089] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HOr.hOr (x &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32)))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => ((x✝¹ ||| x) ^^^ 4294967295#32) &&& x✝²)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
      [Meta.isDefEq.assign.checkTypes] [0.001030] ✅️ (?h₃ : ¬(!(!x✝ == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²) =
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                  ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32) &&&
                    x✝²)) := (fun a =>
            congrArg some
              (congr
                (congrArg (fun x => HOr.hOr (x &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32)))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))
                (congrArg (fun x => ((x✝¹ ||| x) ^^^ 4294967295#32) &&& x✝²)
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a =>
                        Eq.refl
                          (42#32 /
                            x✝)))))) : ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
            some
                ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                  ((x✝¹ ||| (42#32).sdiv x✝) ^^^ 4294967295#32) &&& x✝²) =
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                  ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32) &&&
                    x✝²))
        [Meta.isDefEq] [0.001022] ✅️ ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²) =
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32) &&&
                      x✝²) =?= ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some
                  ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((x✝¹ ||| (42#32).sdiv x✝) ^^^ 4294967295#32) &&& x✝²) =
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32) &&&
                      x✝²)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32) &&&
                      x✝²)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝² ^^^ if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                  (x✝¹ ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:337:8: warning: declaration uses 'sorry'
[bv] [0.080789] Normalizing goal
  [Meta.synthInstance] [0.001110] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                else
                  some
                    ((42#32).sdiv x✝ &&& (((42#32).sdiv x✝¹ ||| x✝²) ^^^ -1#32) |||
                      (((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else some ((x✝² ^^^ (42#32).sdiv x✝) &&& ((42#32).sdiv x✝¹ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
                else
                  if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                  else
                    some
                      ((42#32).sdiv x✝ &&& (((42#32).sdiv x✝¹ ||| x✝²) ^^^ -1#32) |||
                        (((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else some ((x✝² ^^^ (42#32).sdiv x✝) &&& ((42#32).sdiv x✝¹ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001126] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg HOr.hOr
              (congr
                (congrArg HAnd.hAnd
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))
                (congrArg (fun x => (x ||| x✝²) ^^^ 4294967295#32)
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹)))))))
            (congrArg (fun x => (x ^^^ 4294967295#32) &&& x✝²)
              (congr
                (congrArg HOr.hOr
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹)))))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))))
    [Meta.isDefEq.assign] [0.001123] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg HOr.hOr
                (congr
                  (congrArg HAnd.hAnd
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝)))))
                  (congrArg (fun x => (x ||| x✝²) ^^^ 4294967295#32)
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹)))))))
              (congrArg (fun x => (x ^^^ 4294967295#32) &&& x✝²)
                (congr
                  (congrArg HOr.hOr
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹)))))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))))
      [Meta.isDefEq.assign.checkTypes] [0.001032] ✅️ (?h₃ : ¬(!(!x✝ == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some
                ((42#32).sdiv x✝ &&& (((42#32).sdiv x✝¹ ||| x✝²) ^^^ -1#32) |||
                  (((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²) =
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ||| x✝²) ^^^
                      4294967295#32) |||
                  (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                        if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32) &&&
                    x✝²)) := (fun a =>
            congrArg some
              (congr
                (congrArg HOr.hOr
                  (congr
                    (congrArg HAnd.hAnd
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                            (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝)))))
                    (congrArg (fun x => (x ||| x✝²) ^^^ 4294967295#32)
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                            (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝¹)))))))
                (congrArg (fun x => (x ^^^ 4294967295#32) &&& x✝²)
                  (congr
                    (congrArg HOr.hOr
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                            (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝¹)))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a =>
                          Eq.refl
                            (42#32 /
                              x✝))))))) : ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some
                ((42#32).sdiv x✝ &&& (((42#32).sdiv x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                  (((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝) ^^^ 4294967295#32) &&& x✝²) =
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ||| x✝²) ^^^
                      4294967295#32) |||
                  (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                        if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32) &&&
                    x✝²))
        [Meta.isDefEq] [0.001027] ✅️ ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some
                  ((42#32).sdiv x✝ &&& (((42#32).sdiv x✝¹ ||| x✝²) ^^^ -1#32) |||
                    (((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32) &&& x✝²) =
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                          x✝²) ^^^
                        4294967295#32) |||
                    (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                          if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32) &&&
                      x✝²) =?= ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some
                  ((42#32).sdiv x✝ &&& (((42#32).sdiv x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    (((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝) ^^^ 4294967295#32) &&& x✝²) =
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                          x✝²) ^^^
                        4294967295#32) |||
                    (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                          if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32) &&&
                      x✝²)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
                else
                  if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
                  else
                    some
                      ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                          (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                              x✝²) ^^^
                            4294967295#32) |||
                        (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                              if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                            4294967295#32) &&&
                          x✝²)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                some
                  ((x✝² ^^^ if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                      4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 74.053249ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.624700ms: rewriting 16.619290ms, bitblasting 0.000000ms, SAT solving 55.196140ms, LRAT trimming 0.000000ms, LRAT checking 4.818820ms
Bitwuzla proved the goal after 74.128330ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.634240ms: rewriting 16.501020ms, bitblasting 0.000000ms, SAT solving 55.348850ms, LRAT trimming 0.000000ms, LRAT checking 4.808160ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:375:8: warning: declaration uses 'sorry'
[bv] [0.080870] Normalizing goal
  [Meta.synthInstance] [0.001102] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                else
                  some
                    ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& x✝² |||
                      (42#32).sdiv x✝¹ &&& ((x✝² ||| (42#32).sdiv x✝) ^^^ -1#32))) ⊑
          if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝¹ ^^^ x✝²) &&& ((42#32).sdiv x✝ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
                else
                  if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                  else
                    some
                      ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& x✝² |||
                        (42#32).sdiv x✝¹ &&& ((x✝² ||| (42#32).sdiv x✝) ^^^ -1#32))) ⊑
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝¹ ^^^ x✝²) &&& ((42#32).sdiv x✝ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001125] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HOr.hOr ((x ^^^ 4294967295#32) &&& x✝²))
              (congr
                (congrArg HOr.hOr
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹))))))
            (congr
              (congrArg HAnd.hAnd
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹)))))
              (congrArg (fun x => (x✝² ||| x) ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))))
    [Meta.isDefEq.assign] [0.001122] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HOr.hOr ((x ^^^ 4294967295#32) &&& x✝²))
                (congr
                  (congrArg HOr.hOr
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝)))))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹))))))
              (congr
                (congrArg HAnd.hAnd
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹)))))
                (congrArg (fun x => (x✝² ||| x) ^^^ 4294967295#32)
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))))
      [Meta.isDefEq.assign.checkTypes] [0.001049] ✅️ (?h₃ : ¬(!(!x✝ == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some
                ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& x✝² |||
                  (42#32).sdiv x✝¹ &&& ((x✝² ||| (42#32).sdiv x✝) ^^^ -1#32)) =
              some
                ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                        if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                      4294967295#32) &&&
                    x✝² |||
                  (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                    ((x✝² ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32))) := (fun a =>
            congrArg some
              (congr
                (congrArg (fun x => HOr.hOr ((x ^^^ 4294967295#32) &&& x✝²))
                  (congr
                    (congrArg HOr.hOr
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                            (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝)))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹))))))
                (congr
                  (congrArg HAnd.hAnd
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹)))))
                  (congrArg (fun x => (x✝² ||| x) ^^^ 4294967295#32)
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a =>
                          Eq.refl
                            (42#32 /
                              x✝))))))) : ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some
                ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ 4294967295#32) &&& x✝² |||
                  (42#32).sdiv x✝¹ &&& ((x✝² ||| (42#32).sdiv x✝) ^^^ 4294967295#32)) =
              some
                ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                        if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                      4294967295#32) &&&
                    x✝² |||
                  (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                    ((x✝² ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32)))
        [Meta.isDefEq] [0.001046] ✅️ ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some
                  ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& x✝² |||
                    (42#32).sdiv x✝¹ &&& ((x✝² ||| (42#32).sdiv x✝) ^^^ -1#32)) =
                some
                  ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32) &&&
                      x✝² |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                      ((x✝² ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32)) =?= ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                  true →
              some
                  ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ 4294967295#32) &&& x✝² |||
                    (42#32).sdiv x✝¹ &&& ((x✝² ||| (42#32).sdiv x✝) ^^^ 4294967295#32)) =
                some
                  ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32) &&&
                      x✝² |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                      ((x✝² ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32))
          [Meta.isDefEq] [0.001011] ✅️ some
                  ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& x✝² |||
                    (42#32).sdiv x✝¹ &&& ((x✝² ||| (42#32).sdiv x✝) ^^^ -1#32)) =
                some
                  ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32) &&&
                      x✝² |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                      ((x✝² ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32)) =?= some
                  ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ 4294967295#32) &&& x✝² |||
                    (42#32).sdiv x✝¹ &&& ((x✝² ||| (42#32).sdiv x✝) ^^^ 4294967295#32)) =
                some
                  ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32) &&&
                      x✝² |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                      ((x✝² ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
                else
                  if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
                  else
                    some
                      ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                              if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                            4294967295#32) &&&
                          x✝² |||
                        (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                          ((x✝² ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                            4294967295#32))) ⊑
            if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^ x✝²) &&&
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:389:8: warning: declaration uses 'sorry'
[bv] [0.110500] Normalizing goal
  [Meta.synthInstance] [0.001186] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
              else
                if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
                else
                  if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                  else
                    if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
                    else
                      some
                        ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& (42#32).sdiv x✝² |||
                          (42#32).sdiv x✝¹ &&& (((42#32).sdiv x✝ ||| (42#32).sdiv x✝²) ^^^ -1#32))) ⊑
          if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
          else
            if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝¹ ^^^ (42#32).sdiv x✝²) &&& ((42#32).sdiv x✝ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
                else
                  if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
                  else
                    if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                    else
                      if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
                      else
                        some
                          ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& (42#32).sdiv x✝² |||
                            (42#32).sdiv x✝¹ &&& (((42#32).sdiv x✝ ||| (42#32).sdiv x✝²) ^^^ -1#32))) ⊑
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
              else
                if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                else some (((42#32).sdiv x✝¹ ^^^ (42#32).sdiv x✝²) &&& ((42#32).sdiv x✝ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001179] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg HOr.hOr
              (congr
                (congrArg (fun x => HAnd.hAnd (x ^^^ 4294967295#32))
                  (congr
                    (congrArg HOr.hOr
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                            (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝)))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹))))))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                      (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                      fun a => Eq.refl (42#32 / x✝²))))))
            (congr
              (congrArg HAnd.hAnd
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹)))))
              (congrArg (fun x => x ^^^ 4294967295#32)
                (congr
                  (congrArg HOr.hOr
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝)))))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                        (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                        fun a => Eq.refl (42#32 / x✝²))))))))
    [Meta.isDefEq.assign] [0.001176] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg HOr.hOr
                (congr
                  (congrArg (fun x => HAnd.hAnd (x ^^^ 4294967295#32))
                    (congr
                      (congrArg HOr.hOr
                        (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                          (Eq.trans
                            (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                              (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                              (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                                (eq_false' fun h => Bool.noConfusion h)))
                            (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                              (fun a =>
                                Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                  (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                              fun a => Eq.refl (42#32 / x✝)))))
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                            (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝¹))))))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                        (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                        fun a => Eq.refl (42#32 / x✝²))))))
              (congr
                (congrArg HAnd.hAnd
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹)))))
                (congrArg (fun x => x ^^^ 4294967295#32)
                  (congr
                    (congrArg HOr.hOr
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                            (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝)))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                          (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                          fun a => Eq.refl (42#32 / x✝²))))))))
      [Meta.isDefEq.assign.checkTypes] [0.001071] ✅️ (?h₃ : ¬(!(!x✝² == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
                true →
            some
                ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& (42#32).sdiv x✝² |||
                  (42#32).sdiv x✝¹ &&& (((42#32).sdiv x✝ ||| (42#32).sdiv x✝²) ^^^ -1#32)) =
              some
                (((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                        if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                      4294967295#32) &&&
                    if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) |||
                  (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                    (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                        if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                      4294967295#32))) := (fun a =>
            congrArg some
              (congr
                (congrArg HOr.hOr
                  (congr
                    (congrArg (fun x => HAnd.hAnd (x ^^^ 4294967295#32))
                      (congr
                        (congrArg HOr.hOr
                          (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                            (Eq.trans
                              (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                                (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                                (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                                  (eq_false' fun h => Bool.noConfusion h)))
                              (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                                (fun a =>
                                  Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                    (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                                fun a => Eq.refl (42#32 / x✝)))))
                        (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                          (Eq.trans
                            (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                              (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                              (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                                (eq_false' fun h => Bool.noConfusion h)))
                            (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                              (fun a =>
                                Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                                  (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                              fun a => Eq.refl (42#32 / x✝¹))))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                          (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                          fun a => Eq.refl (42#32 / x✝²))))))
                (congr
                  (congrArg HAnd.hAnd
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹)))))
                  (congrArg (fun x => x ^^^ 4294967295#32)
                    (congr
                      (congrArg HOr.hOr
                        (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                          (Eq.trans
                            (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                              (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                              (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                                (eq_false' fun h => Bool.noConfusion h)))
                            (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                              (fun a =>
                                Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                  (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                              fun a => Eq.refl (42#32 / x✝)))))
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                            (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                            fun a =>
                            Eq.refl
                              (42#32 /
                                x✝²)))))))) : ¬(!(!x✝² == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
                true →
            some
                ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ 4294967295#32) &&& (42#32).sdiv x✝² |||
                  (42#32).sdiv x✝¹ &&& (((42#32).sdiv x✝ ||| (42#32).sdiv x✝²) ^^^ 4294967295#32)) =
              some
                (((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                        if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                      4294967295#32) &&&
                    if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) |||
                  (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                    (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                        if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                      4294967295#32)))
        [Meta.isDefEq] [0.001067] ✅️ ¬(!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true →
              some
                  ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& (42#32).sdiv x✝² |||
                    (42#32).sdiv x✝¹ &&& (((42#32).sdiv x✝ ||| (42#32).sdiv x✝²) ^^^ -1#32)) =
                some
                  (((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32) &&&
                      if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                      (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                        4294967295#32)) =?= ¬(!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
                  true →
              some
                  ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ 4294967295#32) &&& (42#32).sdiv x✝² |||
                    (42#32).sdiv x✝¹ &&& (((42#32).sdiv x✝ ||| (42#32).sdiv x✝²) ^^^ 4294967295#32)) =
                some
                  (((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32) &&&
                      if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                      (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                        4294967295#32))
          [Meta.isDefEq] [0.001032] ✅️ some
                  ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ -1#32) &&& (42#32).sdiv x✝² |||
                    (42#32).sdiv x✝¹ &&& (((42#32).sdiv x✝ ||| (42#32).sdiv x✝²) ^^^ -1#32)) =
                some
                  (((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32) &&&
                      if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                      (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                        4294967295#32)) =?= some
                  ((((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹) ^^^ 4294967295#32) &&& (42#32).sdiv x✝² |||
                    (42#32).sdiv x✝¹ &&& (((42#32).sdiv x✝ ||| (42#32).sdiv x✝²) ^^^ 4294967295#32)) =
                some
                  (((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32) &&&
                      if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                      (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                        4294967295#32))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
                else
                  if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
                  else
                    if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
                    else
                      if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
                      else
                        some
                          (((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                                  if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32
                                  else 42#32 / x✝¹) ^^^
                                4294967295#32) &&&
                              if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) |||
                            (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                              (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                                  if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32
                                  else 42#32 / x✝²) ^^^
                                4294967295#32))) ⊑
            if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
            else
              if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
              else
                if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
                else
                  some
                    (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) &&&
                      ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 75.187160ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.631469ms: rewriting 17.853580ms, bitblasting 0.000000ms, SAT solving 55.473859ms, LRAT trimming 0.000000ms, LRAT checking 2.329060ms
Bitwuzla proved the goal after 75.199470ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.129360ms: rewriting 17.649890ms, bitblasting 0.000000ms, SAT solving 55.450460ms, LRAT trimming 0.000000ms, LRAT checking 2.054220ms
Bitwuzla proved the goal after 73.902699ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.134360ms: rewriting 16.422720ms, bitblasting 0.000000ms, SAT solving 55.249600ms, LRAT trimming 0.000000ms, LRAT checking 4.617930ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:443:8: warning: declaration uses 'sorry'
[bv] [0.052361] Normalizing goal
  [Meta.synthInstance] [0.001113] ✅️ Decidable
        ((if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else some ((x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| x✝²) &&& ((42#32).sdiv x✝¹ ||| x✝ &&& x✝² ^^^ -1#32))) ⊑
          if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
          else some (((42#32).sdiv x✝¹ ^^^ x✝²) &&& x✝ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else some ((x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| x✝²) &&& ((42#32).sdiv x✝¹ ||| x✝ &&& x✝² ^^^ -1#32))) ⊑
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else some (((42#32).sdiv x✝¹ ^^^ x✝²) &&& x✝ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001285] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝¹ == 0#32 || x && x✝¹ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#32)
            (42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001282] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝¹ == 0#32 || x && x✝¹ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#32)
              (42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001272] ✅️ (?h₁ : ((x✝¹ == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) =
              true) =
            ((!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝¹ == 0#32 || x && x✝¹ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝¹ == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝¹ ==
                    4294967295#32))) : ((x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32) =
              true) =
            ((!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001268] ✅️ ((x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true) =
              ((!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) =
                true) =?= ((x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32) = true) =
              ((!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001251] ✅️ (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) =
                true =?= (x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32) = true
            [Meta.isDefEq] [0.001237] ✅️ x✝¹ == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝¹ == -1 =?= x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32
              [Meta.isDefEq.delta] [0.001221] ✅️ x✝¹ == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝¹ == -1 =?= x✝¹ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32
  [Meta.isDefEq] [0.001040] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HAnd.hAnd (x✝ &&& x ^^^ 4294967295#32 ||| x✝²))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                (Eq.trans
                  (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                    (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝¹)))))
            (congrArg (fun x => x ||| x✝ &&& x✝² ^^^ 4294967295#32)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                (Eq.trans
                  (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                    (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝¹))))))
    [Meta.isDefEq.assign] [0.001035] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HAnd.hAnd (x✝ &&& x ^^^ 4294967295#32 ||| x✝²))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹)))))
              (congrArg (fun x => x ||| x✝ &&& x✝² ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                some
                  (((x✝ &&& if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32 |||
                      x✝²) &&&
                    ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                      x✝ &&& x✝² ^^^ 4294967295#32))) ⊑
            if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
            else
              some
                (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^ x✝²) &&&
                    x✝ ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:455:8: warning: declaration uses 'sorry'
[bv] [0.051037] Normalizing goal
  [Meta.synthInstance] [0.001040] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& (x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝² ^^^ (42#32).sdiv x✝) &&& x✝¹ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& (x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝² ^^^ (42#32).sdiv x✝) &&& x✝¹ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001094] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HAnd.hAnd (x ||| x✝¹ &&& x✝² ^^^ 4294967295#32))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => x✝¹ &&& x ^^^ 4294967295#32 ||| x✝²)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001091] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HAnd.hAnd (x ||| x✝¹ &&& x✝² ^^^ 4294967295#32))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => x✝¹ &&& x ^^^ 4294967295#32 ||| x✝²)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
      [Meta.isDefEq.assign.checkTypes] [0.001019] ✅️ (?h₃ : ¬(!(!x✝ == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& (x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²)) =
              some
                (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                    x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                  ((x✝¹ &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32 |||
                    x✝²))) := (fun a =>
            congrArg some
              (congr
                (congrArg (fun x => HAnd.hAnd (x ||| x✝¹ &&& x✝² ^^^ 4294967295#32))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))
                (congrArg (fun x => x✝¹ &&& x ^^^ 4294967295#32 ||| x✝²)
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a =>
                        Eq.refl
                          (42#32 /
                            x✝)))))) : ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
            some
                (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                  (x✝¹ &&& (42#32).sdiv x✝ ^^^ 4294967295#32 ||| x✝²)) =
              some
                (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                    x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                  ((x✝¹ &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32 |||
                    x✝²)))
        [Meta.isDefEq] [0.001012] ✅️ ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& (x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²)) =
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    ((x✝¹ &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32 |||
                      x✝²)) =?= ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some
                  (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    (x✝¹ &&& (42#32).sdiv x✝ ^^^ 4294967295#32 ||| x✝²)) =
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    ((x✝¹ &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32 |||
                      x✝²))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    ((x✝¹ &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32 |||
                      x✝²))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝² ^^^ if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&& x✝¹ ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 74.017779ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.180610ms: rewriting 16.399730ms, bitblasting 0.000000ms, SAT solving 55.384860ms, LRAT trimming 0.000000ms, LRAT checking 4.563900ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:479:8: warning: declaration uses 'sorry'
[bv] [0.050962] Normalizing goal
  [Meta.synthInstance] [0.001029] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& (x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝² ^^^ (42#32).sdiv x✝) &&& x✝¹ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& (x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝² ^^^ (42#32).sdiv x✝) &&& x✝¹ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001051] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HAnd.hAnd (x ||| x✝¹ &&& x✝² ^^^ 4294967295#32))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => x✝¹ &&& x ^^^ 4294967295#32 ||| x✝²)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001047] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HAnd.hAnd (x ||| x✝¹ &&& x✝² ^^^ 4294967295#32))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => x✝¹ &&& x ^^^ 4294967295#32 ||| x✝²)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    ((x✝¹ &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32 |||
                      x✝²))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝² ^^^ if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&& x✝¹ ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:491:8: warning: declaration uses 'sorry'
[bv] [0.081138] Normalizing goal
  [Meta.synthInstance] [0.001150] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                else
                  some
                    (((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹ &&& x✝² ^^^ -1#32) &&&
                      ((42#32).sdiv x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else some ((x✝² ^^^ (42#32).sdiv x✝) &&& (42#32).sdiv x✝¹ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
                else
                  if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                  else
                    some
                      (((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹ &&& x✝² ^^^ -1#32) &&&
                        ((42#32).sdiv x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else some ((x✝² ^^^ (42#32).sdiv x✝) &&& (42#32).sdiv x✝¹ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001085] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg HAnd.hAnd
              (congr
                (congrArg HOr.hOr
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))
                (congrArg (fun x => x &&& x✝² ^^^ 4294967295#32)
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹)))))))
            (congrArg (fun x => x ^^^ 4294967295#32 ||| x✝²)
              (congr
                (congrArg HAnd.hAnd
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹)))))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))))
    [Meta.isDefEq.assign] [0.001083] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg HAnd.hAnd
                (congr
                  (congrArg HOr.hOr
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝)))))
                  (congrArg (fun x => x &&& x✝² ^^^ 4294967295#32)
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹)))))))
              (congrArg (fun x => x ^^^ 4294967295#32 ||| x✝²)
                (congr
                  (congrArg HAnd.hAnd
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹)))))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))))
      [Meta.isDefEq.assign.checkTypes] [0.001007] ✅️ (?h₃ : ¬(!(!x✝ == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some
                (((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹ &&& x✝² ^^^ -1#32) &&&
                  ((42#32).sdiv x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²)) =
              some
                (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&& x✝² ^^^
                      4294967295#32) &&&
                  (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                        if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32 |||
                    x✝²))) := (fun a =>
            congrArg some
              (congr
                (congrArg HAnd.hAnd
                  (congr
                    (congrArg HOr.hOr
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                            (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝)))))
                    (congrArg (fun x => x &&& x✝² ^^^ 4294967295#32)
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                            (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝¹)))))))
                (congrArg (fun x => x ^^^ 4294967295#32 ||| x✝²)
                  (congr
                    (congrArg HAnd.hAnd
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                            (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝¹)))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a =>
                          Eq.refl
                            (42#32 /
                              x✝))))))) : ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some
                (((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                  ((42#32).sdiv x✝¹ &&& (42#32).sdiv x✝ ^^^ 4294967295#32 ||| x✝²)) =
              some
                (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                    (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&& x✝² ^^^
                      4294967295#32) &&&
                  (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                        if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32 |||
                    x✝²)))
        [Meta.isDefEq] [0.001002] ✅️ ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some
                  (((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹ &&& x✝² ^^^ -1#32) &&&
                    ((42#32).sdiv x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32 ||| x✝²)) =
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&& x✝² ^^^
                        4294967295#32) &&&
                    (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                          if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32 |||
                      x✝²)) =?= ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
              some
                  (((42#32).sdiv x✝ ||| (42#32).sdiv x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    ((42#32).sdiv x✝¹ &&& (42#32).sdiv x✝ ^^^ 4294967295#32 ||| x✝²)) =
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&& x✝² ^^^
                        4294967295#32) &&&
                    (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                          if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                        4294967295#32 |||
                      x✝²))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
                else
                  if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
                  else
                    some
                      (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                          (if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                              x✝² ^^^
                            4294967295#32) &&&
                        (((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) &&&
                              if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                            4294967295#32 |||
                          x✝²))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                some
                  (((x✝² ^^^ if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                    4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 74.402440ms, solving context: 1.000000ms
LeanSAT proved the goal after 129.146370ms: rewriting 16.245990ms, bitblasting 0.000000ms, SAT solving 105.496130ms, LRAT trimming 0.000000ms, LRAT checking 4.595120ms
Bitwuzla proved the goal after 74.030250ms, solving context: 1.000000ms
LeanSAT proved the goal after 129.031239ms: rewriting 16.258560ms, bitblasting 0.000000ms, SAT solving 105.520580ms, LRAT trimming 0.000000ms, LRAT checking 4.477149ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:529:8: warning: declaration uses 'sorry'
[bv] [0.080518] Normalizing goal
  [Meta.synthInstance] [0.001114] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                else
                  some
                    (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| x✝²) &&&
                      ((42#32).sdiv x✝¹ ||| x✝² &&& (42#32).sdiv x✝ ^^^ -1#32))) ⊑
          if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝¹ ^^^ x✝²) &&& (42#32).sdiv x✝ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
                else
                  if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                  else
                    some
                      (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| x✝²) &&&
                        ((42#32).sdiv x✝¹ ||| x✝² &&& (42#32).sdiv x✝ ^^^ -1#32))) ⊑
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝¹ ^^^ x✝²) &&& (42#32).sdiv x✝ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001096] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HAnd.hAnd (x ^^^ 4294967295#32 ||| x✝²))
              (congr
                (congrArg HAnd.hAnd
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹))))))
            (congr
              (congrArg HOr.hOr
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹)))))
              (congrArg (fun x => x✝² &&& x ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))))
    [Meta.isDefEq.assign] [0.001093] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HAnd.hAnd (x ^^^ 4294967295#32 ||| x✝²))
                (congr
                  (congrArg HAnd.hAnd
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝)))))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹))))))
              (congr
                (congrArg HOr.hOr
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹)))))
                (congrArg (fun x => x✝² &&& x ^^^ 4294967295#32)
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))))
      [Meta.isDefEq.assign.checkTypes] [0.001002] ✅️ (?h₃ : ¬(!(!x✝ == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some
                (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| x✝²) &&&
                  ((42#32).sdiv x✝¹ ||| x✝² &&& (42#32).sdiv x✝ ^^^ -1#32)) =
              some
                ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                        if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                      4294967295#32 |||
                    x✝²) &&&
                  ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                    (x✝² &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32))) := (fun a =>
            congrArg some
              (congr
                (congrArg (fun x => HAnd.hAnd (x ^^^ 4294967295#32 ||| x✝²))
                  (congr
                    (congrArg HAnd.hAnd
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                            (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝)))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹))))))
                (congr
                  (congrArg HOr.hOr
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹)))))
                  (congrArg (fun x => x✝² &&& x ^^^ 4294967295#32)
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a =>
                          Eq.refl
                            (42#32 /
                              x✝))))))) : ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some
                (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ 4294967295#32 ||| x✝²) &&&
                  ((42#32).sdiv x✝¹ ||| x✝² &&& (42#32).sdiv x✝ ^^^ 4294967295#32)) =
              some
                ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                        if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                      4294967295#32 |||
                    x✝²) &&&
                  ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                    (x✝² &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32)))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
                else
                  if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
                  else
                    some
                      ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                              if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                            4294967295#32 |||
                          x✝²) &&&
                        ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                          (x✝² &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                            4294967295#32))) ⊑
            if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^ x✝²) &&&
                      if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                    4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:543:8: warning: declaration uses 'sorry'
[bv] [0.110848] Normalizing goal
  [Meta.synthInstance] [0.001178] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
              else
                if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
                else
                  if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                  else
                    if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
                    else
                      some
                        (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| (42#32).sdiv x✝²) &&&
                          ((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝ &&& (42#32).sdiv x✝² ^^^ -1#32))) ⊑
          if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
          else
            if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝¹ ^^^ (42#32).sdiv x✝²) &&& (42#32).sdiv x✝ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
              else
                if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
                else
                  if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
                  else
                    if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                    else
                      if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
                      else
                        some
                          (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| (42#32).sdiv x✝²) &&&
                            ((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝ &&& (42#32).sdiv x✝² ^^^ -1#32))) ⊑
            if (x✝¹ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝¹ == -1) = true then none
            else
              if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
              else
                if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
                else some (((42#32).sdiv x✝¹ ^^^ (42#32).sdiv x✝²) &&& (42#32).sdiv x✝ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001147] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg HAnd.hAnd
              (congr
                (congrArg (fun x => HOr.hOr (x ^^^ 4294967295#32))
                  (congr
                    (congrArg HAnd.hAnd
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                            (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝)))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹))))))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                      (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                      fun a => Eq.refl (42#32 / x✝²))))))
            (congr
              (congrArg HOr.hOr
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                      (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝¹)))))
              (congrArg (fun x => x ^^^ 4294967295#32)
                (congr
                  (congrArg HAnd.hAnd
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                          (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝)))))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                        (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                        fun a => Eq.refl (42#32 / x✝²))))))))
    [Meta.isDefEq.assign] [0.001144] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg HAnd.hAnd
                (congr
                  (congrArg (fun x => HOr.hOr (x ^^^ 4294967295#32))
                    (congr
                      (congrArg HAnd.hAnd
                        (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                          (Eq.trans
                            (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                              (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                              (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                                (eq_false' fun h => Bool.noConfusion h)))
                            (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                              (fun a =>
                                Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                  (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                              fun a => Eq.refl (42#32 / x✝)))))
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                            (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝¹))))))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                        (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                        fun a => Eq.refl (42#32 / x✝²))))))
              (congr
                (congrArg HOr.hOr
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                        (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝¹)))))
                (congrArg (fun x => x ^^^ 4294967295#32)
                  (congr
                    (congrArg HAnd.hAnd
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                            (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                            fun a => Eq.refl (42#32 / x✝)))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                          (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                          fun a => Eq.refl (42#32 / x✝²))))))))
      [Meta.isDefEq.assign.checkTypes] [0.001043] ✅️ (?h₃ : ¬(!(!x✝² == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
                true →
            some
                (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| (42#32).sdiv x✝²) &&&
                  ((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝ &&& (42#32).sdiv x✝² ^^^ -1#32)) =
              some
                ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                        if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                      4294967295#32 |||
                    if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) &&&
                  ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                        if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                      4294967295#32))) := (fun a =>
            congrArg some
              (congr
                (congrArg HAnd.hAnd
                  (congr
                    (congrArg (fun x => HOr.hOr (x ^^^ 4294967295#32))
                      (congr
                        (congrArg HAnd.hAnd
                          (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                            (Eq.trans
                              (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                                (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                                (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                                  (eq_false' fun h => Bool.noConfusion h)))
                              (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                                (fun a =>
                                  Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                    (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                                fun a => Eq.refl (42#32 / x✝)))))
                        (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                          (Eq.trans
                            (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                              (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                              (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                                (eq_false' fun h => Bool.noConfusion h)))
                            (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                              (fun a =>
                                Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                                  (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                              fun a => Eq.refl (42#32 / x✝¹))))))
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                          (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                          fun a => Eq.refl (42#32 / x✝²))))))
                (congr
                  (congrArg HOr.hOr
                    (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝¹)
                      (Eq.trans
                        (ite_cond_eq_false (if x✝¹.msb = true then -42#32 / -x✝¹ else -(-42#32 / x✝¹))
                          (if x✝¹.msb = true then -(42#32 / -x✝¹) else 42#32 / x✝¹)
                          (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                            (eq_false' fun h => Bool.noConfusion h)))
                        (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝¹))
                          (fun a =>
                            Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝¹))
                              (BitVec.neg_eq_not_add (42#32 / (~~~x✝¹ + 1#32))))
                          fun a => Eq.refl (42#32 / x✝¹)))))
                  (congrArg (fun x => x ^^^ 4294967295#32)
                    (congr
                      (congrArg HAnd.hAnd
                        (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                          (Eq.trans
                            (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                              (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                              (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                                (eq_false' fun h => Bool.noConfusion h)))
                            (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                              (fun a =>
                                Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                                  (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                              fun a => Eq.refl (42#32 / x✝)))))
                      (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                        (Eq.trans
                          (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                            (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                            (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                              (eq_false' fun h => Bool.noConfusion h)))
                          (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                            (fun a =>
                              Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                                (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                            fun a =>
                            Eq.refl
                              (42#32 /
                                x✝²)))))))) : ¬(!(!x✝² == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
                true →
            some
                (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ 4294967295#32 ||| (42#32).sdiv x✝²) &&&
                  ((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝ &&& (42#32).sdiv x✝² ^^^ 4294967295#32)) =
              some
                ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                        if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                      4294967295#32 |||
                    if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) &&&
                  ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                        if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                      4294967295#32)))
        [Meta.isDefEq] [0.001038] ✅️ ¬(!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true →
              some
                  (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ -1#32 ||| (42#32).sdiv x✝²) &&&
                    ((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝ &&& (42#32).sdiv x✝² ^^^ -1#32)) =
                some
                  ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32 |||
                      if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) &&&
                    ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                      ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                          if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                        4294967295#32)) =?= ¬(!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
                  true →
              some
                  (((42#32).sdiv x✝ &&& (42#32).sdiv x✝¹ ^^^ 4294967295#32 ||| (42#32).sdiv x✝²) &&&
                    ((42#32).sdiv x✝¹ ||| (42#32).sdiv x✝ &&& (42#32).sdiv x✝² ^^^ 4294967295#32)) =
                some
                  ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                          if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                        4294967295#32 |||
                      if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) &&&
                    ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                      ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                          if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^
                        4294967295#32))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
              else
                if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
                else
                  if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
                  else
                    if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
                    else
                      if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
                      else
                        some
                          ((((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                                  if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32
                                  else 42#32 / x✝¹) ^^^
                                4294967295#32 |||
                              if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) &&&
                            ((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) |||
                              ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                                  if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32
                                  else 42#32 / x✝²) ^^^
                                4294967295#32))) ⊑
            if (!(!x✝¹ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝¹ == 4294967295#32))) = true then none
            else
              if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
              else
                if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
                else
                  some
                    ((((if x✝¹.getLsbD 31 = true then ~~~(42#32 / (~~~x✝¹ + 1#32)) + 1#32 else 42#32 / x✝¹) ^^^
                          if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) &&&
                        if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 75.108109ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.058670ms: rewriting 17.244330ms, bitblasting 0.000000ms, SAT solving 55.645060ms, LRAT trimming 0.000000ms, LRAT checking 2.239060ms
Bitwuzla proved the goal after 75.364160ms, solving context: 0.000000ms
LeanSAT proved the goal after 76.939700ms: rewriting 17.190890ms, bitblasting 0.000000ms, SAT solving 55.772029ms, LRAT trimming 0.000000ms, LRAT checking 2.058031ms
Bitwuzla proved the goal after 72.601920ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.468890ms: rewriting 14.710160ms, bitblasting 0.000000ms, SAT solving 55.661480ms, LRAT trimming 0.000000ms, LRAT checking 4.339110ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:597:8: warning: declaration uses 'sorry'
[bv] [0.049477] Normalizing goal
  [Meta.synthInstance] [0.001024] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝² &&& (42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝² &&& (42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ||| x✝¹) ^^^
                      4294967295#32)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                (((x✝² &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ||| x✝¹) ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 72.702489ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.217830ms: rewriting 14.706430ms, bitblasting 0.000000ms, SAT solving 55.975090ms, LRAT trimming 0.000000ms, LRAT checking 3.795170ms
Bitwuzla proved the goal after 72.935850ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.126209ms: rewriting 14.703529ms, bitblasting 0.000000ms, SAT solving 55.679079ms, LRAT trimming 0.000000ms, LRAT checking 4.124850ms
Bitwuzla proved the goal after 72.715640ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.240229ms: rewriting 14.921880ms, bitblasting 0.000000ms, SAT solving 55.669989ms, LRAT trimming 0.000000ms, LRAT checking 4.027460ms
Bitwuzla proved the goal after 72.804580ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.500519ms: rewriting 14.764910ms, bitblasting 0.000000ms, SAT solving 55.826889ms, LRAT trimming 0.000000ms, LRAT checking 4.266590ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:653:8: warning: declaration uses 'sorry'
[bv] [0.049529] Normalizing goal
  [Meta.synthInstance] [0.001025] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((42#32).sdiv x✝ ||| x✝²) ^^^ -1#32)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝¹ &&& (42#32).sdiv x✝ ||| x✝²) ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((42#32).sdiv x✝ ||| x✝²) ^^^ -1#32)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝¹ &&& (42#32).sdiv x✝ ||| x✝²) ^^^ -1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ||| x✝²) ^^^
                      4294967295#32)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                (((x✝¹ &&& if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ||| x✝²) ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 72.810749ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.265620ms: rewriting 14.736270ms, bitblasting 0.000000ms, SAT solving 55.944100ms, LRAT trimming 0.000000ms, LRAT checking 3.962520ms
Bitwuzla proved the goal after 73.147580ms, solving context: 0.000000ms
LeanSAT proved the goal after 74.646179ms: rewriting 15.094660ms, bitblasting 0.000000ms, SAT solving 55.832609ms, LRAT trimming 0.000000ms, LRAT checking 1.924850ms
Bitwuzla proved the goal after 73.448560ms, solving context: 0.000000ms
LeanSAT proved the goal after 74.752090ms: rewriting 15.015570ms, bitblasting 0.000000ms, SAT solving 55.950430ms, LRAT trimming 0.000000ms, LRAT checking 1.955440ms
Bitwuzla proved the goal after 73.562790ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.744200ms: rewriting 15.581010ms, bitblasting 0.000000ms, SAT solving 55.857080ms, LRAT trimming 0.000000ms, LRAT checking 3.892000ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:711:8: warning: declaration uses 'sorry'
[bv] [0.050348] Normalizing goal
  [Meta.synthInstance] [0.001027] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((42#32).sdiv x✝ &&& x✝¹ ^^^ -1#32))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝² ||| (42#32).sdiv x✝) &&& x✝¹ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((42#32).sdiv x✝ &&& x✝¹ ^^^ -1#32))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝² ||| (42#32).sdiv x✝) &&& x✝¹ ^^^ -1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&& x✝¹ ^^^
                      4294967295#32))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝² ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&& x✝¹ ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 73.865270ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.645030ms: rewriting 15.567160ms, bitblasting 0.000000ms, SAT solving 56.091300ms, LRAT trimming 0.000000ms, LRAT checking 3.520260ms
Bitwuzla proved the goal after 73.534580ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.789400ms: rewriting 15.571480ms, bitblasting 0.000000ms, SAT solving 55.916780ms, LRAT trimming 0.000000ms, LRAT checking 3.914530ms
Bitwuzla proved the goal after 73.657859ms, solving context: 1.000000ms
LeanSAT proved the goal after 78.014260ms: rewriting 15.829470ms, bitblasting 0.000000ms, SAT solving 55.977460ms, LRAT trimming 0.000000ms, LRAT checking 3.800800ms
Bitwuzla proved the goal after 73.575940ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.723780ms: rewriting 15.427150ms, bitblasting 0.000000ms, SAT solving 55.948270ms, LRAT trimming 0.000000ms, LRAT checking 3.946120ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:767:8: warning: declaration uses 'sorry'
[bv] [0.050409] Normalizing goal
  [Meta.synthInstance] [0.001013] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((42#32).sdiv x✝ &&& x✝² ^^^ -1#32))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝¹ ||| (42#32).sdiv x✝) &&& x✝² ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((42#32).sdiv x✝ &&& x✝² ^^^ -1#32))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝¹ ||| (42#32).sdiv x✝) &&& x✝² ^^^ -1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&& x✝² ^^^
                      4294967295#32))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝¹ ||| if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&& x✝² ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 73.705970ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.611339ms: rewriting 15.366900ms, bitblasting 0.000000ms, SAT solving 56.110459ms, LRAT trimming 0.000000ms, LRAT checking 3.750340ms
Bitwuzla proved the goal after 73.660670ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.558190ms: rewriting 15.059180ms, bitblasting 0.000000ms, SAT solving 56.128150ms, LRAT trimming 0.000000ms, LRAT checking 4.003280ms
Bitwuzla proved the goal after 74.475670ms, solving context: 0.000000ms
LeanSAT proved the goal after 75.593959ms: rewriting 15.694880ms, bitblasting 0.000000ms, SAT solving 56.165089ms, LRAT trimming 0.000000ms, LRAT checking 1.978450ms
Bitwuzla proved the goal after 73.141480ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.905810ms: rewriting 14.777440ms, bitblasting 0.000000ms, SAT solving 56.145090ms, LRAT trimming 0.000000ms, LRAT checking 4.366550ms
Bitwuzla proved the goal after 73.355649ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.775940ms: rewriting 14.931470ms, bitblasting 0.000000ms, SAT solving 55.843900ms, LRAT trimming 0.000000ms, LRAT checking 4.379030ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:837:8: warning: declaration uses 'sorry'
[bv] [0.049360] Normalizing goal
  [Meta.synthInstance] [0.001028] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| (x✝¹ ^^^ x✝² ||| (42#32).sdiv x✝) ^^^ -1#32)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝¹ ||| x✝²) &&& (x✝¹ ^^^ x✝² ||| (42#32).sdiv x✝) ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else
                some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| (x✝¹ ^^^ x✝² ||| (42#32).sdiv x✝) ^^^ -1#32)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝¹ ||| x✝²) &&& (x✝¹ ^^^ x✝² ||| (42#32).sdiv x✝) ^^^ -1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    (x✝¹ ^^^ x✝² |||
                        if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝¹ ||| x✝²) &&&
                    (x✝¹ ^^^ x✝² |||
                      if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 73.209809ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.476810ms: rewriting 14.860700ms, bitblasting 0.000000ms, SAT solving 56.253550ms, LRAT trimming 0.000000ms, LRAT checking 3.724060ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:862:8: warning: declaration uses 'sorry'
[bv] [0.049270] Normalizing goal
  [Meta.synthInstance] [0.001028] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((42#32).sdiv x✝ ||| x✝¹ ^^^ x✝²) ^^^ -1#32)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝¹ ||| x✝²) &&& ((42#32).sdiv x✝ ||| x✝¹ ^^^ x✝²) ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else
                some ((42#32).sdiv x✝ &&& ((x✝¹ ||| x✝²) ^^^ -1#32) ||| ((42#32).sdiv x✝ ||| x✝¹ ^^^ x✝²) ^^^ -1#32)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝¹ ||| x✝²) &&& ((42#32).sdiv x✝ ||| x✝¹ ^^^ x✝²) ^^^ -1#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ||| x✝²) ^^^ 4294967295#32) |||
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                        x✝¹ ^^^ x✝²) ^^^
                      4294967295#32)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝¹ ||| x✝²) &&&
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ ^^^ x✝²) ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 73.275879ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.739710ms: rewriting 14.925060ms, bitblasting 0.000000ms, SAT solving 55.703230ms, LRAT trimming 0.000000ms, LRAT checking 4.456400ms
Bitwuzla proved the goal after 74.713680ms, solving context: 0.000000ms
LeanSAT proved the goal after 78.112680ms: rewriting 15.405090ms, bitblasting 0.000000ms, SAT solving 56.424060ms, LRAT trimming 0.000000ms, LRAT checking 3.932330ms
Bitwuzla proved the goal after 74.014270ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.999749ms: rewriting 15.238960ms, bitblasting 0.000000ms, SAT solving 56.381759ms, LRAT trimming 0.000000ms, LRAT checking 4.013420ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:911:8: warning: declaration uses 'sorry'
[bv] [0.054410] Normalizing goal
  [Meta.synthInstance] [0.001023] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((x✝¹ ^^^ x✝²) &&& (42#32).sdiv x✝ ^^^ -1#32))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝¹ ^^^ x✝²) &&& (42#32).sdiv x✝ ^^^ ((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else
                some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((x✝¹ ^^^ x✝²) &&& (42#32).sdiv x✝ ^^^ -1#32))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some ((x✝¹ ^^^ x✝²) &&& (42#32).sdiv x✝ ^^^ ((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32))
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    (((x✝¹ ^^^ x✝²) &&&
                        if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((x✝¹ ^^^ x✝²) &&&
                      if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 74.123470ms, solving context: 0.000000ms
LeanSAT proved the goal after 77.408949ms: rewriting 15.560490ms, bitblasting 0.000000ms, SAT solving 55.840229ms, LRAT trimming 0.000000ms, LRAT checking 3.640290ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:936:8: warning: declaration uses 'sorry'
[bv] [0.054030] Normalizing goal
  [Meta.synthInstance] [0.001110] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((42#32).sdiv x✝ &&& (x✝¹ ^^^ x✝²) ^^^ -1#32))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& (x✝¹ ^^^ x✝²) ^^^ ((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else
                some (((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32) &&& ((42#32).sdiv x✝ &&& (x✝¹ ^^^ x✝²) ^^^ -1#32))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some ((42#32).sdiv x✝ &&& (x✝¹ ^^^ x✝²) ^^^ ((42#32).sdiv x✝ ||| x✝¹ &&& x✝² ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001179] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32) (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001176] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
              (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001166] ✅️ (?h₁ : ((x✝ == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝ ==
                    4294967295#32))) : ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001163] ✅️ ((x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true) =?= ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001146] ✅️ (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
                true =?= (x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true
            [Meta.isDefEq] [0.001133] ✅️ x✝ == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
              [Meta.isDefEq.delta] [0.001119] ✅️ x✝ == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32) &&&
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                        (x✝¹ ^^^ x✝²) ^^^
                      4294967295#32))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      (x✝¹ ^^^ x✝²) ^^^
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      x✝¹ &&& x✝² ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 74.106650ms, solving context: 0.000000ms
LeanSAT proved the goal after 78.504320ms: rewriting 15.310980ms, bitblasting 0.000000ms, SAT solving 56.684110ms, LRAT trimming 0.000000ms, LRAT checking 4.137990ms
Bitwuzla proved the goal after 74.249980ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.839210ms: rewriting 15.516720ms, bitblasting 0.000000ms, SAT solving 56.540060ms, LRAT trimming 0.000000ms, LRAT checking 4.833910ms
Bitwuzla proved the goal after 74.271750ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.466329ms: rewriting 15.427060ms, bitblasting 0.000000ms, SAT solving 56.556749ms, LRAT trimming 0.000000ms, LRAT checking 4.535410ms
Bitwuzla proved the goal after 74.145760ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.456140ms: rewriting 15.513620ms, bitblasting 0.000000ms, SAT solving 56.614630ms, LRAT trimming 0.000000ms, LRAT checking 4.453060ms
Bitwuzla proved the goal after 74.461990ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.145190ms: rewriting 15.488370ms, bitblasting 0.000000ms, SAT solving 56.613200ms, LRAT trimming 0.000000ms, LRAT checking 4.157160ms
Bitwuzla proved the goal after 74.737720ms, solving context: 1.000000ms
LeanSAT proved the goal after 78.877120ms: rewriting 15.118710ms, bitblasting 0.000000ms, SAT solving 56.734570ms, LRAT trimming 0.000000ms, LRAT checking 4.386560ms
Bitwuzla proved the goal after 74.410760ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.598889ms: rewriting 15.509750ms, bitblasting 0.000000ms, SAT solving 56.685140ms, LRAT trimming 0.000000ms, LRAT checking 4.535020ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1033:8: warning: declaration uses 'sorry'
[bv] [0.050887] Normalizing goal
  [Meta.synthInstance] [0.001094] ✅️ Decidable
        ((if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
          else
            if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
            else some ((x✝ ^^^ -1#32) &&& x✝¹ &&& (42#32).sdiv x✝² ||| ((42#32).sdiv x✝² ||| (x✝¹ ||| x✝)) ^^^ -1#32)) ⊑
          if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
          else some (((42#32).sdiv x✝² ^^^ x✝¹ ||| x✝) ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
            else
              if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
              else
                some ((x✝ ^^^ -1#32) &&& x✝¹ &&& (42#32).sdiv x✝² ||| ((42#32).sdiv x✝² ||| (x✝¹ ||| x✝)) ^^^ -1#32)) ⊑
            if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
            else some (((42#32).sdiv x✝² ^^^ x✝¹ ||| x✝) ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001292] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝² == 0#32 || x && x✝² == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝² == 0#32)
            (42#32 == BitVec.intMin 32 && x✝² == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001289] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝² == 0#32 || x && x✝² == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝² == 0#32)
              (42#32 == BitVec.intMin 32 && x✝² == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001279] ✅️ (?h₁ : ((x✝² == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) =
              true) =
            ((!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝² == 0#32 || x && x✝² == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝² == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝² ==
                    4294967295#32))) : ((x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32) =
              true) =
            ((!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001276] ✅️ ((x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true) =
              ((!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
                true) =?= ((x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32) = true) =
              ((!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001259] ✅️ (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) =
                true =?= (x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32) = true
            [Meta.isDefEq] [0.001246] ✅️ x✝² == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝² == -1 =?= x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32
              [Meta.isDefEq.delta] [0.001215] ✅️ x✝² == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝² == -1 =?= x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32
  [Meta.isDefEq] [0.001032] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HOr.hOr ((x✝ ^^^ 4294967295#32) &&& x✝¹ &&& x))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                (Eq.trans
                  (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                    (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                    fun a => Eq.refl (42#32 / x✝²)))))
            (congrArg (fun x => (x ||| (x✝¹ ||| x✝)) ^^^ 4294967295#32)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                (Eq.trans
                  (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                    (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                    fun a => Eq.refl (42#32 / x✝²))))))
    [Meta.isDefEq.assign] [0.001028] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HOr.hOr ((x✝ ^^^ 4294967295#32) &&& x✝¹ &&& x))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                      (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                      fun a => Eq.refl (42#32 / x✝²)))))
              (congrArg (fun x => (x ||| (x✝¹ ||| x✝)) ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                      (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                      fun a => Eq.refl (42#32 / x✝²))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
            else
              if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
              else
                some
                  (((x✝ ^^^ 4294967295#32) &&& x✝¹ &&&
                      if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) |||
                    ((if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) |||
                        (x✝¹ ||| x✝)) ^^^
                      4294967295#32)) ⊑
            if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
            else
              some
                (((if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^ x✝¹ |||
                    x✝) ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1045:8: warning: declaration uses 'sorry'
[bv] [0.050227] Normalizing goal
  [Meta.synthInstance] [0.001019] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& x✝² ||| ((42#32).sdiv x✝ ||| x✝¹ ||| x✝²) ^^^ -1#32)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝² ^^^ (42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some ((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& x✝² ||| ((42#32).sdiv x✝ ||| x✝¹ ||| x✝²) ^^^ -1#32)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝² ^^^ (42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001078] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HOr.hOr (x &&& (x✝¹ ^^^ 4294967295#32) &&& x✝²))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => (x ||| x✝¹ ||| x✝²) ^^^ 4294967295#32)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001075] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HOr.hOr (x &&& (x✝¹ ^^^ 4294967295#32) &&& x✝²))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => (x ||| x✝¹ ||| x✝²) ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
      [Meta.isDefEq.assign.checkTypes] [0.001001] ✅️ (?h₃ : ¬(!(!x✝ == 0#32 &&
                    !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true →
            some ((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& x✝² ||| ((42#32).sdiv x✝ ||| x✝¹ ||| x✝²) ^^^ -1#32) =
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      (x✝¹ ^^^ 4294967295#32) &&&
                    x✝² |||
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ||| x✝¹ |||
                      x✝²) ^^^
                    4294967295#32)) := (fun a =>
            congrArg some
              (congr
                (congrArg (fun x => HOr.hOr (x &&& (x✝¹ ^^^ 4294967295#32) &&& x✝²))
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a => Eq.refl (42#32 / x✝)))))
                (congrArg (fun x => (x ||| x✝¹ ||| x✝²) ^^^ 4294967295#32)
                  (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                    (Eq.trans
                      (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                        (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                        (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                          (eq_false' fun h => Bool.noConfusion h)))
                      (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                        (fun a =>
                          Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                            (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                        fun a =>
                        Eq.refl
                          (42#32 /
                            x✝)))))) : ¬(!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true →
            some
                ((42#32).sdiv x✝ &&& (x✝¹ ^^^ 4294967295#32) &&& x✝² |||
                  ((42#32).sdiv x✝ ||| x✝¹ ||| x✝²) ^^^ 4294967295#32) =
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      (x✝¹ ^^^ 4294967295#32) &&&
                    x✝² |||
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ||| x✝¹ |||
                      x✝²) ^^^
                    4294967295#32))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                        (x✝¹ ^^^ 4294967295#32) &&&
                      x✝² |||
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ||| x✝¹ |||
                        x✝²) ^^^
                      4294967295#32)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                (((x✝² ^^^ if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ||| x✝¹) ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1057:8: warning: declaration uses 'sorry'
[bv] [0.051278] Normalizing goal
  [Meta.synthInstance] [0.001127] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& ((x✝¹ ^^^ -1#32) &&& x✝²) ||| (x✝² ||| x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some (((42#32).sdiv x✝ ^^^ x✝² ||| x✝¹) ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else
                some ((42#32).sdiv x✝ &&& ((x✝¹ ^^^ -1#32) &&& x✝²) ||| (x✝² ||| x✝¹ ||| (42#32).sdiv x✝) ^^^ -1#32)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ^^^ x✝² ||| x✝¹) ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001203] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32) (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001200] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
              (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001189] ✅️ (?h₁ : ((x✝ == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝ ==
                    4294967295#32))) : ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001186] ✅️ ((x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true) =?= ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001169] ✅️ (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
                true =?= (x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true
            [Meta.isDefEq] [0.001156] ✅️ x✝ == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
              [Meta.isDefEq.delta] [0.001140] ✅️ x✝ == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
  [Meta.isDefEq] [0.001025] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HOr.hOr (x &&& ((x✝¹ ^^^ 4294967295#32) &&& x✝²)))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => (x✝² ||| x✝¹ ||| x) ^^^ 4294967295#32)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001021] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HOr.hOr (x &&& ((x✝¹ ^^^ 4294967295#32) &&& x✝²)))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => (x✝² ||| x✝¹ ||| x) ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                      ((x✝¹ ^^^ 4294967295#32) &&& x✝²) |||
                    (x✝² ||| x✝¹ |||
                        if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^ x✝² ||| x✝¹) ^^^
                  4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 74.136780ms, solving context: 1.000000ms
LeanSAT proved the goal after 78.520560ms: rewriting 15.318880ms, bitblasting 0.000000ms, SAT solving 56.016450ms, LRAT trimming 0.000000ms, LRAT checking 4.449250ms
Bitwuzla proved the goal after 74.730770ms, solving context: 1.000000ms
LeanSAT proved the goal after 78.395569ms: rewriting 15.143470ms, bitblasting 0.000000ms, SAT solving 56.030819ms, LRAT trimming 0.000000ms, LRAT checking 4.435640ms
Bitwuzla proved the goal after 74.119460ms, solving context: 1.000000ms
LeanSAT proved the goal after 78.385660ms: rewriting 15.350970ms, bitblasting 0.000000ms, SAT solving 55.988720ms, LRAT trimming 0.000000ms, LRAT checking 4.264040ms
Bitwuzla proved the goal after 74.265680ms, solving context: 1.000000ms
LeanSAT proved the goal after 77.872850ms: rewriting 15.367020ms, bitblasting 0.000000ms, SAT solving 55.982550ms, LRAT trimming 0.000000ms, LRAT checking 3.890440ms
Bitwuzla proved the goal after 73.962660ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.028400ms: rewriting 15.144490ms, bitblasting 0.000000ms, SAT solving 56.749060ms, LRAT trimming 0.000000ms, LRAT checking 4.413650ms
Bitwuzla proved the goal after 74.211120ms, solving context: 1.000000ms
LeanSAT proved the goal after 78.532239ms: rewriting 15.339700ms, bitblasting 0.000000ms, SAT solving 56.262669ms, LRAT trimming 0.000000ms, LRAT checking 4.247170ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1141:8: warning: declaration uses 'sorry'
[bv] [0.050932] Normalizing goal
  [Meta.synthInstance] [0.001091] ✅️ Decidable
        ((if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
          else
            if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
            else some ((x✝ ^^^ -1#32 ||| x✝¹ ||| (42#32).sdiv x✝²) &&& ((42#32).sdiv x✝² &&& (x✝¹ &&& x✝) ^^^ -1#32))) ⊑
          if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
          else some ((42#32).sdiv x✝² ^^^ x✝¹ ||| x✝ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
            else
              if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
              else
                some ((x✝ ^^^ -1#32 ||| x✝¹ ||| (42#32).sdiv x✝²) &&& ((42#32).sdiv x✝² &&& (x✝¹ &&& x✝) ^^^ -1#32))) ⊑
            if (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true then none
            else some ((42#32).sdiv x✝² ^^^ x✝¹ ||| x✝ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001294] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝² == 0#32 || x && x✝² == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝² == 0#32)
            (42#32 == BitVec.intMin 32 && x✝² == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001291] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝² == 0#32 || x && x✝² == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝² == 0#32)
              (42#32 == BitVec.intMin 32 && x✝² == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001281] ✅️ (?h₁ : ((x✝² == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) =
              true) =
            ((!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝² == 0#32 || x && x✝² == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝² == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝² ==
                    4294967295#32))) : ((x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32) =
              true) =
            ((!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001278] ✅️ ((x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) = true) =
              ((!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) =
                true) =?= ((x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32) = true) =
              ((!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001260] ✅️ (x✝² == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝² == -1) =
                true =?= (x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32) = true
            [Meta.isDefEq] [0.001246] ✅️ x✝² == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝² == -1 =?= x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32
              [Meta.isDefEq.delta] [0.001229] ✅️ x✝² == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝² == -1 =?= x✝² == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝² == 4294967295#32
  [Meta.isDefEq] [0.001021] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HAnd.hAnd (x✝ ^^^ 4294967295#32 ||| x✝¹ ||| x))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                (Eq.trans
                  (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                    (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                    fun a => Eq.refl (42#32 / x✝²)))))
            (congrArg (fun x => x &&& (x✝¹ &&& x✝) ^^^ 4294967295#32)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                (Eq.trans
                  (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                    (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                    fun a => Eq.refl (42#32 / x✝²))))))
    [Meta.isDefEq.assign] [0.001017] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HAnd.hAnd (x✝ ^^^ 4294967295#32 ||| x✝¹ ||| x))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                      (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                      fun a => Eq.refl (42#32 / x✝²)))))
              (congrArg (fun x => x &&& (x✝¹ &&& x✝) ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝²)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝².msb = true then -42#32 / -x✝² else -(-42#32 / x✝²))
                      (if x✝².msb = true then -(42#32 / -x✝²) else 42#32 / x✝²)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝²))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝²))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝² + 1#32))))
                      fun a => Eq.refl (42#32 / x✝²))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
            else
              if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
              else
                some
                  ((x✝ ^^^ 4294967295#32 ||| x✝¹ |||
                      if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) &&&
                    ((if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) &&&
                        (x✝¹ &&& x✝) ^^^
                      4294967295#32))) ⊑
            if (!(!x✝² == 0#32 && !(42#32 == BitVec.intMin 32 && x✝² == 4294967295#32))) = true then none
            else
              some
                ((if x✝².getLsbD 31 = true then ~~~(42#32 / (~~~x✝² + 1#32)) + 1#32 else 42#32 / x✝²) ^^^ x✝¹ |||
                  x✝ ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1153:8: warning: declaration uses 'sorry'
[bv] [0.050028] Normalizing goal
  [Meta.synthInstance] [0.001029] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32 ||| x✝²) &&& ((42#32).sdiv x✝ &&& x✝¹ &&& x✝² ^^^ -1#32))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some (x✝² ^^^ (42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32 ||| x✝²) &&& ((42#32).sdiv x✝ &&& x✝¹ &&& x✝² ^^^ -1#32))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (x✝² ^^^ (42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001060] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HAnd.hAnd (x ||| x✝¹ ^^^ 4294967295#32 ||| x✝²))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => x &&& x✝¹ &&& x✝² ^^^ 4294967295#32)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001056] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HAnd.hAnd (x ||| x✝¹ ^^^ 4294967295#32 ||| x✝²))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => x &&& x✝¹ &&& x✝² ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                        x✝¹ ^^^ 4294967295#32 |||
                      x✝²) &&&
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&& x✝¹ &&&
                        x✝² ^^^
                      4294967295#32))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝² ^^^ if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                  x✝¹ ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1165:8: warning: declaration uses 'sorry'
[bv] [0.050893] Normalizing goal
  [Meta.synthInstance] [0.001143] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| (x✝¹ ^^^ -1#32 ||| x✝²)) &&& (x✝² &&& x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((42#32).sdiv x✝ ^^^ x✝² ||| x✝¹ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else
                some (((42#32).sdiv x✝ ||| (x✝¹ ^^^ -1#32 ||| x✝²)) &&& (x✝² &&& x✝¹ &&& (42#32).sdiv x✝ ^^^ -1#32))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ ^^^ x✝² ||| x✝¹ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001216] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32) (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001214] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
              (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001203] ✅️ (?h₁ : ((x✝ == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝ ==
                    4294967295#32))) : ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001200] ✅️ ((x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true) =?= ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001183] ✅️ (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
                true =?= (x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true
            [Meta.isDefEq] [0.001170] ✅️ x✝ == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
              [Meta.isDefEq.delta] [0.001155] ✅️ x✝ == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
  [Meta.isDefEq] [0.001038] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HAnd.hAnd (x ||| (x✝¹ ^^^ 4294967295#32 ||| x✝²)))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => x✝² &&& x✝¹ &&& x ^^^ 4294967295#32)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001034] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HAnd.hAnd (x ||| (x✝¹ ^^^ 4294967295#32 ||| x✝²)))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => x✝² &&& x✝¹ &&& x ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                      (x✝¹ ^^^ 4294967295#32 ||| x✝²)) &&&
                    ((x✝² &&& x✝¹ &&&
                        if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^ x✝² |||
                  x✝¹ ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 75.105959ms, solving context: 1.000000ms
LeanSAT proved the goal after 80.102170ms: rewriting 15.988990ms, bitblasting 0.000000ms, SAT solving 57.029460ms, LRAT trimming 0.000000ms, LRAT checking 4.341940ms
Bitwuzla proved the goal after 75.727229ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.312620ms: rewriting 15.734760ms, bitblasting 0.000000ms, SAT solving 57.192870ms, LRAT trimming 0.000000ms, LRAT checking 3.957830ms
Bitwuzla proved the goal after 75.190450ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.935810ms: rewriting 16.154890ms, bitblasting 0.000000ms, SAT solving 57.153120ms, LRAT trimming 0.000000ms, LRAT checking 4.063770ms
Bitwuzla proved the goal after 75.145599ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.807700ms: rewriting 15.882090ms, bitblasting 0.000000ms, SAT solving 57.117940ms, LRAT trimming 0.000000ms, LRAT checking 4.180620ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1221:8: warning: declaration uses 'sorry'
[bv] [0.050414] Normalizing goal
  [Meta.synthInstance] [0.001024] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& x✝² ||| ((42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((x✝² ||| (42#32).sdiv x✝ ^^^ -1#32) &&& (x✝¹ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some ((42#32).sdiv x✝ &&& (x✝¹ ^^^ -1#32) &&& x✝² ||| ((42#32).sdiv x✝ ||| x✝¹) ^^^ -1#32)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((x✝² ||| (42#32).sdiv x✝ ^^^ -1#32) &&& (x✝¹ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001035] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HOr.hOr (x &&& (x✝¹ ^^^ 4294967295#32) &&& x✝²))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => (x ||| x✝¹) ^^^ 4294967295#32)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001030] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HOr.hOr (x &&& (x✝¹ ^^^ 4294967295#32) &&& x✝²))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => (x ||| x✝¹) ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                        (x✝¹ ^^^ 4294967295#32) &&&
                      x✝² |||
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ||| x✝¹) ^^^
                      4294967295#32)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((x✝² |||
                    (if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32) &&&
                  (x✝¹ ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1234:8: warning: declaration uses 'sorry'
[bv] [0.047502] Normalizing goal
  [Meta.synthInstance] [0.001160] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((42#32).sdiv x✝ &&& ((x✝¹ ^^^ -1#32) &&& x✝²) ||| (x✝² ||| x✝¹) ^^^ -1#32)) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some (((42#32).sdiv x✝ ||| x✝² ^^^ -1#32) &&& (x✝¹ ^^^ -1#32)))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& ((x✝¹ ^^^ -1#32) &&& x✝²) ||| (x✝² ||| x✝¹) ^^^ -1#32)) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| x✝² ^^^ -1#32) &&& (x✝¹ ^^^ -1#32))
      ⊢ False
  [Meta.isDefEq] [0.001294] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32) (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001292] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
              (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001281] ✅️ (?h₁ : ((x✝ == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝ ==
                    4294967295#32))) : ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001278] ✅️ ((x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true) =?= ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001261] ✅️ (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
                true =?= (x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true
            [Meta.isDefEq] [0.001247] ✅️ x✝ == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
              [Meta.isDefEq.delta] [0.001233] ✅️ x✝ == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
  [Meta.isDefEq] [0.001019] ✅️ ?h₃ =?= fun a =>
        congrArg (fun x => some (x &&& ((x✝¹ ^^^ 4294967295#32) &&& x✝²) ||| (x✝² ||| x✝¹) ^^^ 4294967295#32))
          (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
            (Eq.trans
              (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                  (eq_false' fun h => Bool.noConfusion h)))
              (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                (fun a =>
                  Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                    (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                fun a => Eq.refl (42#32 / x✝))))
    [Meta.isDefEq.assign] [0.001015] ✅️ ?h₃ := fun a =>
          congrArg (fun x => some (x &&& ((x✝¹ ^^^ 4294967295#32) &&& x✝²) ||| (x✝² ||| x✝¹) ^^^ 4294967295#32))
            (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
              (Eq.trans
                (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                  (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                  (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                    (eq_false' fun h => Bool.noConfusion h)))
                (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                  (fun a =>
                    Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                      (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                  fun a => Eq.refl (42#32 / x✝))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    ((x✝¹ ^^^ 4294967295#32) &&& x✝²) |||
                  (x✝² ||| x✝¹) ^^^ 4294967295#32)) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                    x✝² ^^^ 4294967295#32) &&&
                  (x✝¹ ^^^ 4294967295#32))
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 75.397750ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.884020ms: rewriting 15.810350ms, bitblasting 0.000000ms, SAT solving 57.297440ms, LRAT trimming 0.000000ms, LRAT checking 4.205150ms
Bitwuzla proved the goal after 74.999650ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.245239ms: rewriting 15.701690ms, bitblasting 0.000000ms, SAT solving 57.089539ms, LRAT trimming 0.000000ms, LRAT checking 4.048250ms
Bitwuzla proved the goal after 74.952410ms, solving context: 1.000000ms
LeanSAT proved the goal after 78.812639ms: rewriting 15.888850ms, bitblasting 0.000000ms, SAT solving 56.417519ms, LRAT trimming 0.000000ms, LRAT checking 4.043530ms
Bitwuzla proved the goal after 75.152080ms, solving context: 1.000000ms
LeanSAT proved the goal after 79.790000ms: rewriting 15.995150ms, bitblasting 0.000000ms, SAT solving 57.227200ms, LRAT trimming 0.000000ms, LRAT checking 4.036500ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1291:8: warning: declaration uses 'sorry'
[bv] [0.050200] Normalizing goal
  [Meta.synthInstance] [0.001018] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32 ||| x✝²) &&& ((42#32).sdiv x✝ &&& x✝¹ ^^^ -1#32))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some (x✝² &&& ((42#32).sdiv x✝ ^^^ -1#32) ||| x✝¹ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else
              if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
              else some (((42#32).sdiv x✝ ||| x✝¹ ^^^ -1#32 ||| x✝²) &&& ((42#32).sdiv x✝ &&& x✝¹ ^^^ -1#32))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (x✝² &&& ((42#32).sdiv x✝ ^^^ -1#32) ||| x✝¹ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001047] ✅️ ?h₃ =?= fun a =>
        congrArg some
          (congr
            (congrArg (fun x => HAnd.hAnd (x ||| x✝¹ ^^^ 4294967295#32 ||| x✝²))
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝)))))
            (congrArg (fun x => x &&& x✝¹ ^^^ 4294967295#32)
              (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                (Eq.trans
                  (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                    (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                    (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                      (eq_false' fun h => Bool.noConfusion h)))
                  (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                    (fun a =>
                      Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                        (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                    fun a => Eq.refl (42#32 / x✝))))))
    [Meta.isDefEq.assign] [0.001043] ✅️ ?h₃ := fun a =>
          congrArg some
            (congr
              (congrArg (fun x => HAnd.hAnd (x ||| x✝¹ ^^^ 4294967295#32 ||| x✝²))
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝)))))
              (congrArg (fun x => x &&& x✝¹ ^^^ 4294967295#32)
                (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
                  (Eq.trans
                    (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                      (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                      (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                        (eq_false' fun h => Bool.noConfusion h)))
                    (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                      (fun a =>
                        Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                          (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                      fun a => Eq.refl (42#32 / x✝))))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
              else
                some
                  (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                        x✝¹ ^^^ 4294967295#32 |||
                      x✝²) &&&
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&& x✝¹ ^^^
                      4294967295#32))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                (x✝² &&&
                    ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) ^^^
                      4294967295#32) |||
                  x✝¹ ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1304:8: warning: declaration uses 'sorry'
[bv] [0.047678] Normalizing goal
  [Meta.synthInstance] [0.001153] ✅️ Decidable
        ((if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some (((42#32).sdiv x✝ ||| (x✝¹ ^^^ -1#32 ||| x✝²)) &&& (x✝² &&& x✝¹ ^^^ -1#32))) ⊑
          if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
          else some ((42#32).sdiv x✝ &&& (x✝² ^^^ -1#32) ||| x✝¹ ^^^ -1#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some (((42#32).sdiv x✝ ||| (x✝¹ ^^^ -1#32 ||| x✝²)) &&& (x✝² &&& x✝¹ ^^^ -1#32))) ⊑
            if (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true then none
            else some ((42#32).sdiv x✝ &&& (x✝² ^^^ -1#32) ||| x✝¹ ^^^ -1#32)
      ⊢ False
  [Meta.isDefEq] [0.001281] ✅️ ?h₁ =?= congrArg (fun x => x = true)
        (Eq.trans
          (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
          (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32) (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
    [Meta.isDefEq.assign] [0.001278] ✅️ ?h₁ := congrArg (fun x => x = true)
          (Eq.trans
            (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
            (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
              (42#32 == BitVec.intMin 32 && x✝ == 4294967295#32)))
      [Meta.isDefEq.assign.checkTypes] [0.001268] ✅️ (?h₁ : ((x✝ == 0 ||
                32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
              true)) := (congrArg (fun x => x = true)
            (Eq.trans
              (congrArg (fun x => x✝ == 0#32 || x && x✝ == 4294967295#32) (Bool.true_and (42#32 == BitVec.intMin 32)))
              (Std.Tactic.BVDecide.Normalize.Bool.or_elim (x✝ == 0#32)
                (42#32 == BitVec.intMin 32 &&
                  x✝ ==
                    4294967295#32))) : ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) =
              true) =
            ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true))
        [Meta.isDefEq] [0.001265] ✅️ ((x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) =
                true) =?= ((x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true) =
              ((!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true)
          [Meta.isDefEq] [0.001248] ✅️ (x✝ == 0 || 32 != 1 && 42#32 == BitVec.intMin 32 && x✝ == -1) =
                true =?= (x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32) = true
            [Meta.isDefEq] [0.001234] ✅️ x✝ == 0 ||
                  32 != 1 && 42#32 == BitVec.intMin 32 &&
                    x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
              [Meta.isDefEq.delta] [0.001218] ✅️ x✝ == 0 ||
                    32 != 1 && 42#32 == BitVec.intMin 32 &&
                      x✝ == -1 =?= x✝ == 0#32 || true && 42#32 == BitVec.intMin 32 && x✝ == 4294967295#32
  [Meta.isDefEq] [0.001011] ✅️ ?h₃ =?= fun a =>
        congrArg (fun x => some ((x ||| (x✝¹ ^^^ 4294967295#32 ||| x✝²)) &&& (x✝² &&& x✝¹ ^^^ 4294967295#32)))
          (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
            (Eq.trans
              (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                  (eq_false' fun h => Bool.noConfusion h)))
              (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                (fun a =>
                  Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                    (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                fun a => Eq.refl (42#32 / x✝))))
    [Meta.isDefEq.assign] [0.001005] ✅️ ?h₃ := fun a =>
          congrArg (fun x => some ((x ||| (x✝¹ ^^^ 4294967295#32 ||| x✝²)) &&& (x✝² &&& x✝¹ ^^^ 4294967295#32)))
            (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv (42#32) x✝)
              (Eq.trans
                (ite_cond_eq_false (if x✝.msb = true then -42#32 / -x✝ else -(-42#32 / x✝))
                  (if x✝.msb = true then -(42#32 / -x✝) else 42#32 / x✝)
                  (Eq.trans (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last 42#32))
                    (eq_false' fun h => Bool.noConfusion h)))
                (ite_congr (congrArg (fun x => x = true) (BitVec.msb_eq_getLsbD_last x✝))
                  (fun a =>
                    Eq.trans (congrArg (fun x => -(42#32 / x)) (BitVec.neg_eq_not_add x✝))
                      (BitVec.neg_eq_not_add (42#32 / (~~~x✝ + 1#32))))
                  fun a => Eq.refl (42#32 / x✝))))
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e e_1 e_2 : LLVM.IntW 32
      x✝² x✝¹ x✝ : BitVec 32
      a✝ :
        ¬(if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                (((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) |||
                    (x✝¹ ^^^ 4294967295#32 ||| x✝²)) &&&
                  (x✝² &&& x✝¹ ^^^ 4294967295#32))) ⊑
            if (!(!x✝ == 0#32 && !(42#32 == BitVec.intMin 32 && x✝ == 4294967295#32))) = true then none
            else
              some
                ((if x✝.getLsbD 31 = true then ~~~(42#32 / (~~~x✝ + 1#32)) + 1#32 else 42#32 / x✝) &&&
                    (x✝² ^^^ 4294967295#32) |||
                  x✝¹ ^^^ 4294967295#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 71.973980ms, solving context: 0.000000ms
LeanSAT proved the goal after 73.861409ms: rewriting 12.746989ms, bitblasting 0.000000ms, SAT solving 57.565709ms, LRAT trimming 0.000000ms, LRAT checking 1.979820ms
Bitwuzla proved the goal after 73.815900ms, solving context: 5.000000ms
LeanSAT proved the goal after 229.935419ms: rewriting 14.332430ms, bitblasting 14.760370ms, SAT solving 107.600670ms, LRAT trimming 3.559570ms, LRAT checking 59.893070ms
Bitwuzla proved the goal after 70.613330ms, solving context: 0.000000ms
LeanSAT proved the goal after 72.063780ms: rewriting 11.320500ms, bitblasting 0.000000ms, SAT solving 57.942140ms, LRAT trimming 0.000000ms, LRAT checking 1.696210ms
Bitwuzla proved the goal after 69.705200ms, solving context: 0.000000ms
LeanSAT proved the goal after 71.658369ms: rewriting 10.576330ms, bitblasting 0.000000ms, SAT solving 58.182930ms, LRAT trimming 0.000000ms, LRAT checking 1.701060ms
Bitwuzla proved the goal after 68.700590ms, solving context: 0.000000ms
LeanSAT proved the goal after 69.909149ms: rewriting 9.420400ms, bitblasting 0.000000ms, SAT solving 57.792720ms, LRAT trimming 0.000000ms, LRAT checking 1.641609ms
Bitwuzla proved the goal after 67.804570ms, solving context: 0.000000ms
LeanSAT proved the goal after 69.270270ms: rewriting 8.694680ms, bitblasting 0.000000ms, SAT solving 57.853309ms, LRAT trimming 0.000000ms, LRAT checking 1.640601ms
Bitwuzla proved the goal after 67.835070ms, solving context: 0.000000ms
LeanSAT proved the goal after 69.236580ms: rewriting 8.715960ms, bitblasting 0.000000ms, SAT solving 57.922580ms, LRAT trimming 0.000000ms, LRAT checking 1.486340ms
Bitwuzla proved the goal after 89.407360ms, solving context: 0.000000ms
LeanSAT proved the goal after 93.646469ms: rewriting 23.664690ms, bitblasting 0.000000ms, SAT solving 57.642259ms, LRAT trimming 0.000000ms, LRAT checking 4.641200ms
Bitwuzla proved the goal after 69.616610ms, solving context: 0.000000ms
LeanSAT proved the goal after 78.408399ms: rewriting 10.700630ms, bitblasting 0.000000ms, SAT solving 56.575109ms, LRAT trimming 3.049830ms, LRAT checking 6.300150ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1411:8: warning: declaration uses 'sorry'
[bv] [0.028881] Normalizing goal
  [Meta.synthInstance] [0.001123] ✅️ Decidable
        ((if True ∧ x✝.msb = (112#32).msb ∧ (x✝ + 112#32).msb ≠ x✝.msb then none else some (x✝ + 112#32 ||| 15#32)) ⊑
          if True ∧ (x✝ ||| 15#32).msb = (112#32).msb ∧ ((x✝ ||| 15#32) + 112#32).msb ≠ (x✝ ||| 15#32).msb then none
          else some ((x✝ ||| 15#32) + 112#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if True ∧ x✝.msb = (112#32).msb ∧ (x✝ + 112#32).msb ≠ x✝.msb then none else some (x✝ + 112#32 ||| 15#32)) ⊑
            if True ∧ (x✝ ||| 15#32).msb = (112#32).msb ∧ ((x✝ ||| 15#32) + 112#32).msb ≠ (x✝ ||| 15#32).msb then none
            else some ((x✝ ||| 15#32) + 112#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if (!x✝.getLsbD 31 && !(x✝ + 112#32).getLsbD 31 == x✝.getLsbD 31) = true then none
            else some (x✝ + 112#32 ||| 15#32)) ⊑
            if
                (!(x✝ ||| 15#32).getLsbD 31 && !((x✝ ||| 15#32) + 112#32).getLsbD 31 == (x✝ ||| 15#32).getLsbD 31) =
                  true then
              none
            else some ((x✝ ||| 15#32) + 112#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1422:8: warning: declaration uses 'sorry'
[bv] [0.044212] Normalizing goal
  [Meta.synthInstance] [0.001317] ✅️ Decidable
        ((if True ∧ x✝.msb = (112#32).msb ∧ (x✝ + 112#32).msb ≠ x✝.msb then none
          else if True ∧ (x✝ + 112#32 < x✝ ∨ x✝ + 112#32 < 112#32) then none else some (x✝ + 112#32 ||| 15#32)) ⊑
          if True ∧ (x✝ ||| 15#32).msb = (112#32).msb ∧ ((x✝ ||| 15#32) + 112#32).msb ≠ (x✝ ||| 15#32).msb then none
          else
            if True ∧ ((x✝ ||| 15#32) + 112#32 < x✝ ||| 15#32 ∨ (x✝ ||| 15#32) + 112#32 < 112#32) then none
            else some ((x✝ ||| 15#32) + 112#32))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if True ∧ x✝.msb = (112#32).msb ∧ (x✝ + 112#32).msb ≠ x✝.msb then none
            else if True ∧ (x✝ + 112#32 < x✝ ∨ x✝ + 112#32 < 112#32) then none else some (x✝ + 112#32 ||| 15#32)) ⊑
            if True ∧ (x✝ ||| 15#32).msb = (112#32).msb ∧ ((x✝ ||| 15#32) + 112#32).msb ≠ (x✝ ||| 15#32).msb then none
            else
              if True ∧ ((x✝ ||| 15#32) + 112#32 < x✝ ||| 15#32 ∨ (x✝ ||| 15#32) + 112#32 < 112#32) then none
              else some ((x✝ ||| 15#32) + 112#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 32
      x✝ : BitVec 32
      a✝ :
        ¬(if (!x✝.getLsbD 31 && !(x✝ + 112#32).getLsbD 31 == x✝.getLsbD 31) = true then none
            else
              if (!((!x✝ >ᵤ x✝ + 112#32) && !112#32 >ᵤ x✝ + 112#32)) = true then none
              else some (x✝ + 112#32 ||| 15#32)) ⊑
            if
                (!(x✝ ||| 15#32).getLsbD 31 && !((x✝ ||| 15#32) + 112#32).getLsbD 31 == (x✝ ||| 15#32).getLsbD 31) =
                  true then
              none
            else
              if (!((!x✝ ||| 15#32 >ᵤ (x✝ ||| 15#32) + 112#32) && !112#32 >ᵤ (x✝ ||| 15#32) + 112#32)) = true then none
              else some ((x✝ ||| 15#32) + 112#32)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 71.065389ms, solving context: 0.000000ms
LeanSAT proved the goal after 73.152770ms: rewriting 11.495050ms, bitblasting 0.000000ms, SAT solving 57.859980ms, LRAT trimming 0.000000ms, LRAT checking 1.826370ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1443:8: warning: declaration uses 'sorry'
[bv] [0.029478] Normalizing goal
  [Meta.synthInstance] [0.001116] ✅️ Decidable
        ((if True ∧ x✝.msb = (48#8).msb ∧ (x✝ + 48#8).msb ≠ x✝.msb then none else some (x✝ + 48#8 &&& 246#8)) ⊑
          if True ∧ (x✝ &&& 246#8).msb = (48#8).msb ∧ ((x✝ &&& 246#8) + 48#8).msb ≠ (x✝ &&& 246#8).msb then none
          else some ((x✝ &&& 246#8) + 48#8))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if True ∧ x✝.msb = (48#8).msb ∧ (x✝ + 48#8).msb ≠ x✝.msb then none else some (x✝ + 48#8 &&& 246#8)) ⊑
            if True ∧ (x✝ &&& 246#8).msb = (48#8).msb ∧ ((x✝ &&& 246#8) + 48#8).msb ≠ (x✝ &&& 246#8).msb then none
            else some ((x✝ &&& 246#8) + 48#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!x✝.getLsbD 7 && !(x✝ + 48#8).getLsbD 7 == x✝.getLsbD 7) = true then none
            else some (x✝ + 48#8 &&& 246#8)) ⊑
            if (!(x✝ &&& 246#8).getLsbD 7 && !((x✝ &&& 246#8) + 48#8).getLsbD 7 == (x✝ &&& 246#8).getLsbD 7) = true then
              none
            else some ((x✝ &&& 246#8) + 48#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1454:8: warning: declaration uses 'sorry'
[bv] [0.044883] Normalizing goal
  [Meta.synthInstance] [0.001304] ✅️ Decidable
        ((if True ∧ x✝.msb = (48#8).msb ∧ (x✝ + 48#8).msb ≠ x✝.msb then none
          else if True ∧ (x✝ + 48#8 < x✝ ∨ x✝ + 48#8 < 48#8) then none else some (x✝ + 48#8 &&& 246#8)) ⊑
          if True ∧ (x✝ &&& 246#8).msb = (48#8).msb ∧ ((x✝ &&& 246#8) + 48#8).msb ≠ (x✝ &&& 246#8).msb then none
          else
            if True ∧ ((x✝ &&& 246#8) + 48#8 < x✝ &&& 246#8 ∨ (x✝ &&& 246#8) + 48#8 < 48#8) then none
            else some ((x✝ &&& 246#8) + 48#8))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if True ∧ x✝.msb = (48#8).msb ∧ (x✝ + 48#8).msb ≠ x✝.msb then none
            else if True ∧ (x✝ + 48#8 < x✝ ∨ x✝ + 48#8 < 48#8) then none else some (x✝ + 48#8 &&& 246#8)) ⊑
            if True ∧ (x✝ &&& 246#8).msb = (48#8).msb ∧ ((x✝ &&& 246#8) + 48#8).msb ≠ (x✝ &&& 246#8).msb then none
            else
              if True ∧ ((x✝ &&& 246#8) + 48#8 < x✝ &&& 246#8 ∨ (x✝ &&& 246#8) + 48#8 < 48#8) then none
              else some ((x✝ &&& 246#8) + 48#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!x✝.getLsbD 7 && !(x✝ + 48#8).getLsbD 7 == x✝.getLsbD 7) = true then none
            else if (!((!x✝ >ᵤ x✝ + 48#8) && !48#8 >ᵤ x✝ + 48#8)) = true then none else some (x✝ + 48#8 &&& 246#8)) ⊑
            if (!(x✝ &&& 246#8).getLsbD 7 && !((x✝ &&& 246#8) + 48#8).getLsbD 7 == (x✝ &&& 246#8).getLsbD 7) = true then
              none
            else
              if (!((!x✝ &&& 246#8 >ᵤ (x✝ &&& 246#8) + 48#8) && !48#8 >ᵤ (x✝ &&& 246#8) + 48#8)) = true then none
              else some ((x✝ &&& 246#8) + 48#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 69.529080ms, solving context: 0.000000ms
LeanSAT proved the goal after 72.277720ms: rewriting 10.533570ms, bitblasting 0.000000ms, SAT solving 57.928780ms, LRAT trimming 0.000000ms, LRAT checking 1.794460ms
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1475:8: warning: declaration uses 'sorry'
[bv] [0.028682] Normalizing goal
  [Meta.synthInstance] [0.001155] ✅️ Decidable
        ((if True ∧ x✝.msb = (96#8).msb ∧ (x✝ + 96#8).msb ≠ x✝.msb then none else some (x✝ + 96#8 ^^^ 31#8)) ⊑
          if True ∧ (x✝ ^^^ 31#8).msb = (96#8).msb ∧ ((x✝ ^^^ 31#8) + 96#8).msb ≠ (x✝ ^^^ 31#8).msb then none
          else some ((x✝ ^^^ 31#8) + 96#8))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if True ∧ x✝.msb = (96#8).msb ∧ (x✝ + 96#8).msb ≠ x✝.msb then none else some (x✝ + 96#8 ^^^ 31#8)) ⊑
            if True ∧ (x✝ ^^^ 31#8).msb = (96#8).msb ∧ ((x✝ ^^^ 31#8) + 96#8).msb ≠ (x✝ ^^^ 31#8).msb then none
            else some ((x✝ ^^^ 31#8) + 96#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!x✝.getLsbD 7 && !(x✝ + 96#8).getLsbD 7 == x✝.getLsbD 7) = true then none
            else some (x✝ + 96#8 ^^^ 31#8)) ⊑
            if (!(x✝ ^^^ 31#8).getLsbD 7 && !((x✝ ^^^ 31#8) + 96#8).getLsbD 7 == (x✝ ^^^ 31#8).getLsbD 7) = true then
              none
            else some ((x✝ ^^^ 31#8) + 96#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gandhxorhor_proof.lean:1486:8: warning: declaration uses 'sorry'
[bv] [0.043863] Normalizing goal
  [Meta.synthInstance] [0.001355] ✅️ Decidable
        ((if True ∧ x✝.msb = (96#8).msb ∧ (x✝ + 96#8).msb ≠ x✝.msb then none
          else if True ∧ (x✝ + 96#8 < x✝ ∨ x✝ + 96#8 < 96#8) then none else some (x✝ + 96#8 ^^^ 31#8)) ⊑
          if True ∧ (x✝ ^^^ 31#8).msb = (96#8).msb ∧ ((x✝ ^^^ 31#8) + 96#8).msb ≠ (x✝ ^^^ 31#8).msb then none
          else
            if True ∧ ((x✝ ^^^ 31#8) + 96#8 < x✝ ^^^ 31#8 ∨ (x✝ ^^^ 31#8) + 96#8 < 96#8) then none
            else some ((x✝ ^^^ 31#8) + 96#8))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if True ∧ x✝.msb = (96#8).msb ∧ (x✝ + 96#8).msb ≠ x✝.msb then none
            else if True ∧ (x✝ + 96#8 < x✝ ∨ x✝ + 96#8 < 96#8) then none else some (x✝ + 96#8 ^^^ 31#8)) ⊑
            if True ∧ (x✝ ^^^ 31#8).msb = (96#8).msb ∧ ((x✝ ^^^ 31#8) + 96#8).msb ≠ (x✝ ^^^ 31#8).msb then none
            else
              if True ∧ ((x✝ ^^^ 31#8) + 96#8 < x✝ ^^^ 31#8 ∨ (x✝ ^^^ 31#8) + 96#8 < 96#8) then none
              else some ((x✝ ^^^ 31#8) + 96#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 8
      x✝ : BitVec 8
      a✝ :
        ¬(if (!x✝.getLsbD 7 && !(x✝ + 96#8).getLsbD 7 == x✝.getLsbD 7) = true then none
            else if (!((!x✝ >ᵤ x✝ + 96#8) && !96#8 >ᵤ x✝ + 96#8)) = true then none else some (x✝ + 96#8 ^^^ 31#8)) ⊑
            if (!(x✝ ^^^ 31#8).getLsbD 7 && !((x✝ ^^^ 31#8) + 96#8).getLsbD 7 == (x✝ ^^^ 31#8).getLsbD 7) = true then
              none
            else
              if (!((!x✝ ^^^ 31#8 >ᵤ (x✝ ^^^ 31#8) + 96#8) && !96#8 >ᵤ (x✝ ^^^ 31#8) + 96#8)) = true then none
              else some ((x✝ ^^^ 31#8) + 96#8)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla proved the goal after 92.440090ms, solving context: 0.000000ms
LeanSAT proved the goal after 97.152080ms: rewriting 26.249740ms, bitblasting 0.000000ms, SAT solving 57.698140ms, LRAT trimming 0.000000ms, LRAT checking 6.199590ms
