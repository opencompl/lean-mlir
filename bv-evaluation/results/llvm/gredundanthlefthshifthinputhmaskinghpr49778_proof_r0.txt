⚠ [676/892] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:24:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:29:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:31:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:36:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:38:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:56:8: declaration uses 'sorry'
⚠ [878/892] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [881/892] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:340:4: declaration uses 'sorry'
⚠ [887/892] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:55:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:128:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:163:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:197:6: declaration uses 'sorry'
⚠ [888/892] Replayed SSA.Experimental.Bits.AutoStructs.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/AutoStructs/FiniteStateMachine.lean:111:8: declaration uses 'sorry'
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthlefthshifthinputhmaskinghpr49778_proof.lean:21:4: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
/home/tobiascgrosser/Projects/lean-mlir/SSA/Projects/InstCombine/tests/proofs/gredundanthlefthshifthinputhmaskinghpr49778_proof.lean:11:8: error: (kernel) declaration has metavariables 'src_thm'
[bv] [0.060085] Normalizing goal
  [Meta.synthInstance] [0.002134] ✅️ Decidable
        ((if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
          else
            if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
            else
              some
                ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                  BitVec.zeroExtend 32 x✝)) ⊑
          if True ∧ ((-1#32) <<< BitVec.zeroExtend 32 x✝).sshiftRight (BitVec.zeroExtend 32 x✝).toNat = -1#32 then none
          else
            if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
            else
              if
                  True ∧
                    ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                            BitVec.zeroExtend 32 x✝).sshiftRight
                        (BitVec.zeroExtend 32 x✝).toNat =
                      ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝ then
                none
              else
                if
                    True ∧
                      (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                            BitVec.zeroExtend 32 x✝ >>>
                          BitVec.zeroExtend 32 x✝ =
                        ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝ then
                  none
                else
                  if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
                  else
                    some
                      ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                        BitVec.zeroExtend 32 x✝))
    [Meta.check] [0.001078] ✅️ BitVec.Refinement.instDecidableRelOptionOfDecidableEq
          (if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
          else
            if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
            else
              some
                ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                  BitVec.zeroExtend 32 x✝))
          (if True ∧ ((-1#32) <<< BitVec.zeroExtend 32 x✝).sshiftRight (BitVec.zeroExtend 32 x✝).toNat = -1#32 then none
          else
            if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
            else
              if
                  True ∧
                    ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                            BitVec.zeroExtend 32 x✝).sshiftRight
                        (BitVec.zeroExtend 32 x✝).toNat =
                      ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝ then
                none
              else
                if
                    True ∧
                      (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                            BitVec.zeroExtend 32 x✝ >>>
                          BitVec.zeroExtend 32 x✝ =
                        ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝ then
                  none
                else
                  if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
                  else
                    some
                      ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                        BitVec.zeroExtend 32 x✝))
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      e : LLVM.IntW 1
      x✝ : BitVec 1
      a✝ :
        ¬(if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
            else
              if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
              else
                some
                  ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝)) ⊑
            if True ∧ ((-1#32) <<< BitVec.zeroExtend 32 x✝).sshiftRight (BitVec.zeroExtend 32 x✝).toNat = -1#32 then
              none
            else
              if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
              else
                if
                    True ∧
                      ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                              BitVec.zeroExtend 32 x✝).sshiftRight
                          (BitVec.zeroExtend 32 x✝).toNat =
                        ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝ then
                  none
                else
                  if
                      True ∧
                        (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                              BitVec.zeroExtend 32 x✝ >>>
                            BitVec.zeroExtend 32 x✝ =
                          ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝ then
                    none
                  else
                    if BitVec.zeroExtend 32 x✝ ≥ ↑32 then none
                    else
                      some
                        ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                          BitVec.zeroExtend 32 x✝)
      ⊢ False
  [Meta.isDefEq] [0.002070] ✅️ ?h₃ =?= fun a =>
        Eq.refl
          (some
            (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
              BitVec.zeroExtend 32 x✝))
    [Meta.isDefEq.assign] [0.002064] ✅️ ?h₃ := fun a =>
          Eq.refl
            (some
              (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                BitVec.zeroExtend 32 x✝))
      [Meta.isDefEq.assign.checkTypes] [0.002017] ✅️ (?h₃ : ¬(!32#32 >ᵤ BitVec.zeroExtend 32 x✝) = true →
            some
                ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                  BitVec.zeroExtend 32 x✝) =
              some
                (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                  BitVec.zeroExtend 32
                    x✝)) := (fun a =>
            Eq.refl
              (some
                (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                  BitVec.zeroExtend 32
                    x✝)) : ¬(!32#32 >ᵤ BitVec.zeroExtend 32 x✝) = true →
            some
                (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                  BitVec.zeroExtend 32 x✝) =
              some
                (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                  BitVec.zeroExtend 32 x✝))
        [Meta.isDefEq] [0.002011] ✅️ ¬(!32#32 >ᵤ BitVec.zeroExtend 32 x✝) = true →
              some
                  ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝) =
                some
                  (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32
                      x✝) =?= ¬(!32#32 >ᵤ BitVec.zeroExtend 32 x✝) = true →
              some
                  (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝) =
                some
                  (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝)
          [Meta.isDefEq] [0.001955] ✅️ some
                  ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝) =
                some
                  (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32
                      x✝) =?= some
                  (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝) =
                some
                  (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝)
            [Meta.isDefEq] [0.001897] ✅️ some
                  ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32
                      x✝) =?= some
                  (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝)
              [Meta.isDefEq] [0.001862] ✅️ (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                      BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32
                      x✝ =?= ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                      BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝
                [Meta.isDefEq] [0.001829] ✅️ BitVec.instHShiftLeft.1
                      (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝)
                      (BitVec.zeroExtend 32
                        x✝) =?= BitVec.instHShiftLeft.1
                      ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝)
                      (BitVec.zeroExtend 32 x✝)
                  [Meta.isDefEq] [0.001735] ✅️ (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                          BitVec.zeroExtend 32 x✝) <<<
                        (BitVec.zeroExtend 32
                            x✝).toNat =?= ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                          BitVec.zeroExtend 32 x✝) <<<
                        (BitVec.zeroExtend 32 x✝).toNat
                    [Meta.isDefEq] [0.001705] ✅️ BitVec.instHShiftLeftNat.1
                          (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝)
                          (BitVec.zeroExtend 32
                              x✝).toNat =?= BitVec.instHShiftLeftNat.1
                          ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝)
                          (BitVec.zeroExtend 32 x✝).toNat
                      [Meta.isDefEq] [0.001643] ✅️ (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                                BitVec.zeroExtend 32 x✝).shiftLeft
                            (BitVec.zeroExtend 32
                                x✝).toNat =?= ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                                BitVec.zeroExtend 32 x✝).shiftLeft
                            (BitVec.zeroExtend 32 x✝).toNat
                        [Meta.isDefEq.delta] [0.001625] ✅️ (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                                  BitVec.zeroExtend 32 x✝).shiftLeft
                              (BitVec.zeroExtend 32
                                  x✝).toNat =?= ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                                  BitVec.zeroExtend 32 x✝).shiftLeft
                              (BitVec.zeroExtend 32 x✝).toNat
                          [Meta.isDefEq] [0.001568] ✅️ ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                                BitVec.zeroExtend 32
                                  x✝ =?= (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                                BitVec.zeroExtend 32 x✝
                            [Meta.isDefEq] [0.001539] ✅️ instHAndOfAndOp.1
                                  ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32)
                                  (BitVec.zeroExtend 32
                                    x✝) =?= instHAndOfAndOp.1
                                  (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32)
                                  (BitVec.zeroExtend 32 x✝)
                              [Meta.isDefEq] [0.001449] ✅️ AndOp.and ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32)
                                    (BitVec.zeroExtend 32
                                      x✝) =?= AndOp.and (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32)
                                    (BitVec.zeroExtend 32 x✝)
                                [Meta.isDefEq] [0.001410] ✅️ BitVec.instAndOp.1
                                      ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32)
                                      (BitVec.zeroExtend 32
                                        x✝) =?= BitVec.instAndOp.1
                                      (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32)
                                      (BitVec.zeroExtend 32 x✝)
                                  [Meta.isDefEq] [0.001342] ✅️ ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32).and
                                        (BitVec.zeroExtend 32
                                          x✝) =?= (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32).and
                                        (BitVec.zeroExtend 32 x✝)
                                    [Meta.isDefEq.delta] [0.001323] ✅️ ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^
                                              -1#32).and
                                          (BitVec.zeroExtend 32
                                            x✝) =?= (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32).and
                                          (BitVec.zeroExtend 32 x✝)
                                      [Meta.isDefEq] [0.001280] ✅️ (-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^
                                            -1#32 =?= 4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32
                                        [Meta.isDefEq] [0.001239] ✅️ instHXorOfXor.1
                                              ((-1#32) <<< BitVec.zeroExtend 32 x✝)
                                              (-1#32) =?= instHXorOfXor.1 (4294967295#32 <<< BitVec.zeroExtend 32 x✝)
                                              4294967295#32
                                          [Meta.isDefEq] [0.001146] ✅️ Xor.xor ((-1#32) <<< BitVec.zeroExtend 32 x✝)
                                                (-1#32) =?= Xor.xor (4294967295#32 <<< BitVec.zeroExtend 32 x✝)
                                                4294967295#32
                                            [Meta.isDefEq] [0.001102] ✅️ BitVec.instXor.1
                                                  ((-1#32) <<< BitVec.zeroExtend 32 x✝)
                                                  (-1#32) =?= BitVec.instXor.1
                                                  (4294967295#32 <<< BitVec.zeroExtend 32 x✝) 4294967295#32
                                              [Meta.isDefEq] [0.001014] ✅️ ((-1#32) <<< BitVec.zeroExtend 32 x✝).xor
                                                    (-1#32) =?= (4294967295#32 <<< BitVec.zeroExtend 32 x✝).xor
                                                    4294967295#32
  [Meta.isDefEq] [0.001391] ✅️ ?h₁ =?= Eq.trans
        (congrArg (And True)
          (Std.Tactic.BVDecide.Normalize.BitVec.eq_to_beq
            (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                BitVec.zeroExtend 32 x✝ >>>
              BitVec.zeroExtend 32 x✝)
            ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝)))
        (true_and
          ((((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                  BitVec.zeroExtend 32 x✝ >>>
                BitVec.zeroExtend 32 x✝ ==
              (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
            true))
    [Meta.isDefEq.assign] [0.001387] ✅️ ?h₁ := Eq.trans
          (congrArg (And True)
            (Std.Tactic.BVDecide.Normalize.BitVec.eq_to_beq
              (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                  BitVec.zeroExtend 32 x✝ >>>
                BitVec.zeroExtend 32 x✝)
              ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝)))
          (true_and
            ((((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝ >>>
                  BitVec.zeroExtend 32 x✝ ==
                (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
              true))
      [Meta.isDefEq.assign.checkTypes] [0.001373] ✅️ (?h₁ : (True ∧
              (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝ >>>
                  BitVec.zeroExtend 32 x✝ =
                ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) =
            ((((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝ >>>
                  BitVec.zeroExtend 32 x✝ ==
                (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
              true)) := (Eq.trans
            (congrArg (And True)
              (Std.Tactic.BVDecide.Normalize.BitVec.eq_to_beq
                (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝ >>>
                  BitVec.zeroExtend 32 x✝)
                ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝)))
            (true_and
              ((((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝ ==
                  (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
                true)) : (True ∧
              ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝ >>>
                  BitVec.zeroExtend 32 x✝ =
                (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
            ((((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝ >>>
                  BitVec.zeroExtend 32 x✝ ==
                (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
              true))
        [Meta.isDefEq] [0.001368] ✅️ (True ∧
                (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝ =
                  ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) =
              ((((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝ ==
                  (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
                true) =?= (True ∧
                ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝ =
                  (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
              ((((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝ ==
                  (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
                true)
          [Meta.isDefEq] [0.001335] ✅️ True ∧
                (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝ =
                  ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                    BitVec.zeroExtend 32
                      x✝ =?= True ∧
                ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝ =
                  (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝
            [Meta.isDefEq] [0.001320] ✅️ (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                        BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝ =
                  ((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                    BitVec.zeroExtend 32
                      x✝ =?= ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                        BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝ =
                  (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝
              [Meta.isDefEq] [0.001286] ✅️ (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                        BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32
                      x✝ =?= ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                        BitVec.zeroExtend 32 x✝) <<<
                      BitVec.zeroExtend 32 x✝ >>>
                    BitVec.zeroExtend 32 x✝
                [Meta.isDefEq] [0.001255] ✅️ BitVec.instHShiftRight.1
                      ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                        BitVec.zeroExtend 32 x✝)
                      (BitVec.zeroExtend 32
                        x✝) =?= BitVec.instHShiftRight.1
                      (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                        BitVec.zeroExtend 32 x✝)
                      (BitVec.zeroExtend 32 x✝)
                  [Meta.isDefEq] [0.001158] ✅️ (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                            BitVec.zeroExtend 32 x✝) <<<
                          BitVec.zeroExtend 32 x✝ >>>
                        (BitVec.zeroExtend 32
                            x✝).toNat =?= ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                            BitVec.zeroExtend 32 x✝) <<<
                          BitVec.zeroExtend 32 x✝ >>>
                        (BitVec.zeroExtend 32 x✝).toNat
                    [Meta.isDefEq] [0.001121] ✅️ BitVec.instHShiftRightNat.1
                          ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&& BitVec.zeroExtend 32 x✝) <<<
                            BitVec.zeroExtend 32 x✝)
                          (BitVec.zeroExtend 32
                              x✝).toNat =?= BitVec.instHShiftRightNat.1
                          (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                              BitVec.zeroExtend 32 x✝) <<<
                            BitVec.zeroExtend 32 x✝)
                          (BitVec.zeroExtend 32 x✝).toNat
                      [Meta.isDefEq] [0.001057] ✅️ ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                                  BitVec.zeroExtend 32 x✝) <<<
                                BitVec.zeroExtend 32 x✝).ushiftRight
                            (BitVec.zeroExtend 32
                                x✝).toNat =?= (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                                  BitVec.zeroExtend 32 x✝) <<<
                                BitVec.zeroExtend 32 x✝).ushiftRight
                            (BitVec.zeroExtend 32 x✝).toNat
                        [Meta.isDefEq.delta] [0.001039] ✅️ ((((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                                    BitVec.zeroExtend 32 x✝) <<<
                                  BitVec.zeroExtend 32 x✝).ushiftRight
                              (BitVec.zeroExtend 32
                                  x✝).toNat =?= (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                                    BitVec.zeroExtend 32 x✝) <<<
                                  BitVec.zeroExtend 32 x✝).ushiftRight
                              (BitVec.zeroExtend 32 x✝).toNat
                          [Meta.isDefEq] [0.001003] ✅️ (((-1#32) <<< BitVec.zeroExtend 32 x✝ ^^^ -1#32) &&&
                                  BitVec.zeroExtend 32 x✝) <<<
                                BitVec.zeroExtend 32
                                  x✝ =?= ((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&&
                                  BitVec.zeroExtend 32 x✝) <<<
                                BitVec.zeroExtend 32 x✝
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      e : LLVM.IntW 1
      x✝ : BitVec 1
      a✝ :
        ¬(if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝) = true then none
            else
              if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝) = true then none
              else
                some
                  (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                    BitVec.zeroExtend 32 x✝)) ⊑
            if
                ((4294967295#32 <<< BitVec.zeroExtend 32 x✝).sshiftRight (BitVec.zeroExtend 32 x✝).toNat ==
                    4294967295#32) =
                  true then
              none
            else
              if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝) = true then none
              else
                if
                    ((((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                              BitVec.zeroExtend 32 x✝).sshiftRight
                          (BitVec.zeroExtend 32 x✝).toNat ==
                        (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
                      true then
                  none
                else
                  if
                      (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                              BitVec.zeroExtend 32 x✝ >>>
                            BitVec.zeroExtend 32 x✝ ==
                          (4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) =
                        true then
                    none
                  else
                    if (!32#32 >ᵤ BitVec.zeroExtend 32 x✝) = true then none
                    else
                      some
                        (((4294967295#32 <<< BitVec.zeroExtend 32 x✝ ^^^ 4294967295#32) &&& BitVec.zeroExtend 32 x✝) <<<
                          BitVec.zeroExtend 32 x✝)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
