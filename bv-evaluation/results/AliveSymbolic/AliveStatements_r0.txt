⚠ [880/2570] Replayed SSA.Experimental.Bits.Fast.FiniteStateMachine
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:107:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/Fast/FiniteStateMachine.lean:825:8: declaration uses 'sorry'
⚠ [883/2570] Replayed SSA.Experimental.Bits.Fast.Tactic
warning: ././././SSA/Experimental/Bits/Fast/Tactic.lean:349:4: declaration uses 'sorry'
⚠ [899/2570] Replayed SSA.Experimental.Bits.AutoStructs.ForLean
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:27:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:30:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:32:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:34:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:37:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:39:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:41:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:53:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:52:2: Apply builder was used for a theorem with conclusion A ↔ B.
You probably want to use the simp builder or create an alias that applies the theorem in one direction.
Use `set_option aesop.warn.applyIff false` to disable this warning.
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:57:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:60:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:71:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:70:2: Apply builder was used for a theorem with conclusion A ↔ B.
You probably want to use the simp builder or create an alias that applies the theorem in one direction.
Use `set_option aesop.warn.applyIff false` to disable this warning.
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:76:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:80:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:85:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/ForLean.lean:99:37: declaration uses 'sorry'
⚠ [905/2570] Replayed SSA.Experimental.Bits.AutoStructs.Basic
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:461:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Basic.lean:1070:4: declaration uses 'sorry'
⚠ [2562/2570] Replayed SSA.Experimental.Bits.AutoStructs.Constructions
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:28:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:30:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:41:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:53:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:79:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:166:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:183:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:210:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:262:8: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:274:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:302:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:305:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:318:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/Constructions.lean:321:4: declaration uses 'sorry'
⚠ [2564/2570] Replayed SSA.Experimental.Bits.AutoStructs.FormulaToAuto
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:381:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:409:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:446:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:551:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:659:4: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:702:6: declaration uses 'sorry'
warning: ././././SSA/Experimental/Bits/AutoStructs/FormulaToAuto.lean:750:6: declaration uses 'sorry'
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 7.535350 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹ ^^^ x✝¹) + 1#w + x✝²
    is not definitionally equal to the right-hand side
      x✝² - (x✝ ||| ~~~x✝¹)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ ^^^ x✝¹) + 1#w + x✝² = x✝² - (x✝ ||| ~~~x✝¹) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 194.631629 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.440960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 141.353080 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 208.408539 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹ ^^^ x✝¹) + 1#w + x✝²
    is not definitionally equal to the right-hand side
      x✝² - (x✝ ||| ~~~x✝¹)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ ^^^ x✝¹) + 1#w + x✝² = x✝² - (x✝ ||| ~~~x✝¹) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 17.070910 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.297320 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝².toNat + (2 ^ w - (x✝ ||| ~~~x✝¹).toNat)) % ↑(2 ^ w)
     b := ↑(((x✝ &&& x✝¹ ^^^ x✝¹).toNat + 1 % 2 ^ w) % 2 ^ w + x✝².toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 172.750359 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 120.767830 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 16.571819 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 75.300479 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ &&& x✝¹ ^^^ x✝¹) + 1#w + x✝² == x✝² + -(x✝ ||| ~~~x✝¹))]
    Consider the following assignment:
    BitVec.ofBool ((x✝ &&& x✝¹ ^^^ x✝¹) + 1#w + x✝² == x✝² + -(x✝ ||| ~~~x✝¹)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 1069.622387 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.629490 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ + x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    x✝¹ x✝ : BitVec 1
    ⊢ x✝ + x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 179.532741 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.446659 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 70.794379 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 123.950940 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ + x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    x✝¹ x✝ : BitVec 1
    ⊢ x✝ + x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.247500 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.678120 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ c ≤ 1
      0 ≤ b ≤ 1
      0 ≤ b + c - 2*d ≤ 1
      0 ≤ a ≤ 1
      a - b - c + 2*d ≥ 1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑x✝.toNat
     c := ↑x✝¹.toNat
     d := ↑(x✝.toNat + x✝¹.toNat) / 2 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 89.816109 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).add (AutoStructs.Term.var 1))
            ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 62.377630 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize PASS, TIME_ELAPSED 2.858170 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 2.743490 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 377.482048 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 0.830280 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      some (x✝ + x✝)
    is not definitionally equal to the right-hand side
      none
    case some.isTrue
    w : ℕ
    x✝ : BitVec w
    h✝ : 1#w ≥ ↑w
    ⊢ some (x✝ + x✝) ⊑ none MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.374820 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (x✝ + x✝) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.254080 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 20.336200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 115.894599 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      some (x✝ * 2)
    is not definitionally equal to the right-hand side
      none
    case some.isTrue
    w : ℕ
    x✝ : BitVec w
    h✝ : 1#w ≥ ↑w
    ⊢ some (x✝ * 2) ⊑ none MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.343740 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.682830 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 0
      a - c ≤ -1
    where
     a := ↑1 % ↑(2 ^ w)
     b := ↑(↑w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 26.931350 ms, MSGSTART 
    Unsupported syntax some (x✝ + x✝) ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app (Lean.Expr.const `BitVec []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196893))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app (Lean.Expr.const `BitVec []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196893))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.app
                      (Lean.Expr.const `HAdd.hAdd [Lean.Level.zero, Lean.Level.zero, Lean.Level.zero])
                      (Lean.Expr.app (Lean.Expr.const `BitVec []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196893))))
                    (Lean.Expr.app (Lean.Expr.const `BitVec []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196893))))
                  (Lean.Expr.app (Lean.Expr.const `BitVec []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196893))))
                (Lean.Expr.app
                  (Lean.Expr.app
                    (Lean.Expr.const `instHAdd [Lean.Level.zero])
                    (Lean.Expr.app (Lean.Expr.const `BitVec []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196893))))
                  (Lean.Expr.app (Lean.Expr.const `BitVec.instAdd []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196893)))))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 198799)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 198799)))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app (Lean.Expr.const `BitVec []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 196893)))) MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 16.853820 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 9.718750 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 68.383509 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (BitVec.ofNat w w >ᵤ 1#w)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ 1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto FAIL, TIME_ELAPSED 479.958739 ms, MSGSTART 
    internal exception #4 MSGEND
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 8.870430 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ + x✝
    is not definitionally equal to the right-hand side
      x✝ <<< 1#w
    case some.isFalse
    w : ℕ
    x✝ : BitVec w
    h✝ : ¬1#w ≥ ↑w
    ⊢ x✝ + x✝ = x✝ <<< 1#w MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 231.318469 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.212300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 132.676539 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 143.645060 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ * 2
    is not definitionally equal to the right-hand side
      x✝ <<< 1#w
    case some.isFalse
    w : ℕ
    x✝ : BitVec w
    h✝ : ¬1#w ≥ ↑w
    ⊢ x✝ * 2 = x✝ <<< 1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.472430 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.112130 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑1 % ↑(2 ^ w)
     c := ↑2 ^ w
     d := ↑(x✝.toNat * 2 ^ (1 % 2 ^ w)) % ↑(2 ^ w)
     e := ↑(x✝.toNat + x✝.toNat) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 151.268759 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).add (AutoStructs.Term.var 0))
            (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 123.519090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 15.864799 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 74.469512 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ * 2#w == x✝ <<< 1#w),
     BitVec.ofBool (BitVec.ofNat w w >ᵤ 1#w)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ 1#w) = 0x1#1
    BitVec.ofBool (x✝ * 2#w == x✝ <<< 1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto FAIL, TIME_ELAPSED 1335.628733 ms, MSGSTART 
    internal exception #4 MSGEND
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/AliveStatements.lean:27:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 5.111950 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      0#w - x✝ + x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ - x✝
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ 0#w - x✝ + x✝¹ = x✝¹ - x✝ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 207.794719 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.856430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 147.979980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring PASS, TIME_ELAPSED 182.669819 ms, 
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.081990 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.691660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝¹.toNat + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑((0 % 2 ^ w + (2 ^ w - x✝.toNat)) % 2 ^ w + x✝¹.toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 169.518029 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 139.069200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.697680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.601522 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (-x✝ + x✝¹ == x✝¹ + -x✝)]
    Consider the following assignment:
    BitVec.ofBool (-x✝ + x✝¹ == x✝¹ + -x✝) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 273.094486 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 14.254650 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      0#w - x✝ + (0#w - x✝¹)
    is not definitionally equal to the right-hand side
      0#w - (x✝ + x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ 0#w - x✝ + (0#w - x✝¹) = 0#w - (x✝ + x✝¹) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 367.196588 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.642360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 310.671469 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 248.284529 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      0#w * 2 + (-x✝ - x✝¹)
    is not definitionally equal to the right-hand side
      0#w + (-x✝ - x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ 0#w * 2 + (-x✝ - x✝¹) = 0#w + (-x✝ - x✝¹) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.901140 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.206660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - (x✝.toNat + x✝¹.toNat) % 2 ^ w)) % ↑(2 ^ w)
     b := ↑((0 % 2 ^ w + (2 ^ w - x✝.toNat)) % 2 ^ w + (0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 332.971638 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 291.924649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 14.634860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.562798 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (-x✝ + -x✝¹ == -(x✝ + x✝¹))]
    Consider the following assignment:
    BitVec.ofBool (-x✝ + -x✝¹ == -(x✝ + x✝¹)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 432.334550 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 6.801460 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ + (0#w - x✝¹)
    is not definitionally equal to the right-hand side
      x✝ - x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ + (0#w - x✝¹) = x✝ - x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 134.941899 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.200010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 141.954679 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 190.465140 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ + (0#w - x✝¹)
    is not definitionally equal to the right-hand side
      x✝ - x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ + (0#w - x✝¹) = x✝ - x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.104410 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.612820 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 165.304919 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 134.054829 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize PASS, TIME_ELAPSED 4.789530 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 4.701170 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 266.329799 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 5.584890 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) + x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ - 1#w - x✝
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) + x✝¹ = x✝¹ - 1#w - x✝ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 226.661089 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.630070 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 133.070119 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 242.477019 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) + x✝¹
    is not definitionally equal to the right-hand side
      -1#w + (x✝¹ - x✝)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) + x✝¹ = -1#w + (x✝¹ - x✝) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 15.056390 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.445450 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝¹.toNat + (2 ^ w - 1 % 2 ^ w)) % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑((x✝ ^^^ -1#w).toNat + x✝¹.toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 153.896169 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 117.052620 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 14.318170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.100688 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ -1#w) + x✝¹ == x✝¹ + -1#w + -x✝)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ^^^ -1#w) + x✝¹ == x✝¹ + -1#w + -x✝) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 1118.228077 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.080460 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹) + (x✝ ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹) + (x✝ ^^^ x✝¹) = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 99.065340 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.435400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 56.603749 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 148.962340 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹) + (x✝ ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹) + (x✝ ^^^ x✝¹) = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.972020 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.737810 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑((x✝ &&& x✝¹).toNat + (x✝ ^^^ x✝¹).toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.635729 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 55.090310 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.638360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.274802 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ &&& x✝¹) + (x✝ ^^^ x✝¹) == x✝ ||| x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ &&& x✝¹) + (x✝ ^^^ x✝¹) == x✝ ||| x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 61.097718 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 5.506270 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹) + (x✝ ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ + x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹) + (x✝ ||| x✝¹) = x✝ + x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 78.427479 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.737420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 53.418600 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 156.839929 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹) + (x✝ ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ + x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹) + (x✝ ||| x✝¹) = x✝ + x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.948460 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.055380 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat + x✝¹.toNat) % ↑(2 ^ w)
     b := ↑((x✝ &&& x✝¹).toNat + (x✝ ||| x✝¹).toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 62.589970 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 52.568810 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.279860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.210450 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ &&& x✝¹) + (x✝ ||| x✝¹) == x✝ + x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ &&& x✝¹) + (x✝ ||| x✝¹) == x✝ + x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 58.541889 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 4.619240 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - (0#w - x✝¹)
    is not definitionally equal to the right-hand side
      x✝ + x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - (0#w - x✝¹) = x✝ + x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 143.011079 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 12.853020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 112.004740 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 180.952379 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - 0#w + x✝¹
    is not definitionally equal to the right-hand side
      x✝ + x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - 0#w + x✝¹ = x✝ + x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.493200 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.603990 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat + x✝¹.toNat) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - (0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 120.817189 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 110.408180 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.496960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.566819 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ + - -x✝¹ == x✝ + x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ + - -x✝¹ == x✝ + x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 117.591500 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 4.833940 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹
    is not definitionally equal to the right-hand side
      x✝ + -x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - x✝¹ = x✝ + -x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 95.466360 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.673010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 76.693779 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 136.293470 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.331870 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.979360 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat + (2 ^ w - x✝¹.toNat) % 2 ^ w) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 100.226099 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 69.201680 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize PASS, TIME_ELAPSED 2.887600 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 2.785190 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 201.213919 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.401490 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    x✝¹ x✝ : BitVec 1
    ⊢ x✝ - x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 186.644260 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 11.398179 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 46.561120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 137.223029 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    x✝¹ x✝ : BitVec 1
    ⊢ x✝ - x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.922290 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.111790 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ d ≤ 1
      0 ≤ b ≤ 1
      -2 ≤ b - 2*c - d ≤ -1
      0 ≤ a ≤ 1
      a - b + 2*c + d ≥ 3
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑x✝.toNat
     c := ↑(x✝.toNat + (2 ^ 1 - x✝¹.toNat)) / 2
     d := ↑x✝¹.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.765570 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).sub (AutoStructs.Term.var 1))
            ((AutoStructs.Term.var 0).xor (AutoStructs.Term.var 1))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 40.768880 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 13.509560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 74.844120 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 366.835547 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 8.015820 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      -1#w - x✝
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w
    case some
    w : ℕ
    x✝ : BitVec w
    ⊢ -1#w - x✝ = x✝ ^^^ -1#w MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 128.109120 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.876670 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 62.252579 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 198.531120 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      -1#w - x✝
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w
    case some
    w : ℕ
    x✝ : BitVec w
    ⊢ -1#w - x✝ = x✝ ^^^ -1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.756339 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.992500 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ -1#w).toNat
     b := ↑((2 ^ w - 1 % 2 ^ w) % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 73.726420 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 48.490340 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.552150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.649280 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (-1#w + -x✝ == x✝ ^^^ -1#w)]
    Consider the following assignment:
    BitVec.ofBool (-1#w + -x✝ == x✝ ^^^ -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 316.970528 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 12.148300 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - (x✝¹ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      x✝¹ + (x✝ + 1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - (x✝¹ ^^^ -1#w) = x✝¹ + (x✝ + 1#w) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 203.832359 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.931030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 93.021339 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 230.990459 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - (x✝¹ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      x✝ + 1#w + x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - (x✝¹ ^^^ -1#w) = x✝ + 1#w + x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.306540 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.220970 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝¹.toNat + (x✝.toNat + 1 % 2 ^ w) % 2 ^ w) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - (x✝¹ ^^^ -1#w).toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 108.920410 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 72.885749 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 13.411540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.559712 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ + -(x✝¹ ^^^ -1#w) == x✝¹ + (x✝ + 1#w))]
    Consider the following assignment:
    BitVec.ofBool (x✝ + -(x✝¹ ^^^ -1#w) == x✝¹ + (x✝ + 1#w)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 845.945864 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 8.193390 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - (x✝¹ + x✝²)
    is not definitionally equal to the right-hand side
      x✝ - x✝² - x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ - (x✝¹ + x✝²) = x✝ - x✝² - x✝¹ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 184.990668 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.368281 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 99.026289 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 145.384130 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.662400 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.829410 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝.toNat + (2 ^ w - x✝².toNat)) % 2 ^ w + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - (x✝¹.toNat + x✝².toNat) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 137.422949 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 89.984450 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 14.346940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.918128 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ + -(x✝¹ + x✝²) == x✝ + -x✝² + -x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ + -(x✝¹ + x✝²) == x✝ + -x✝² + -x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 231.692211 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 7.965000 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - (x✝ + x✝¹)
    is not definitionally equal to the right-hand side
      0#w - x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - (x✝ + x✝¹) = 0#w - x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 145.752150 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.247589 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 110.204420 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 173.776529 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      -x✝¹
    is not definitionally equal to the right-hand side
      -x✝¹ + 0#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ -x✝¹ = -x✝¹ + 0#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.528280 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.524030 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     b := ↑(x✝.toNat + (2 ^ w - (x✝.toNat + x✝¹.toNat) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 119.775990 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 109.145859 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.370630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.830558 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ + -(x✝ + x✝¹) == -x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ + -(x✝ + x✝¹) == -x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 117.352601 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 9.512170 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹ - x✝
    is not definitionally equal to the right-hand side
      0#w - x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - x✝¹ - x✝ = 0#w - x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 137.657789 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.541450 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 102.141670 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 174.432580 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      -x✝¹
    is not definitionally equal to the right-hand side
      -x✝¹ + 0#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ -x✝¹ = -x✝¹ + 0#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.828320 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.404550 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % ↑(2 ^ w)
     b := ↑((x✝.toNat + (2 ^ w - x✝¹.toNat)) % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 110.597489 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 100.320820 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.981650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.342090 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ + -x✝¹ + -x✝ == -x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ + -x✝¹ + -x✝ == -x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 108.129149 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.793620 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) - (x✝ ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) - (x✝ ^^^ x✝¹) = x✝ &&& x✝¹ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 163.870580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.863989 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 70.702400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 160.557309 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) - (x✝ ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) - (x✝ ^^^ x✝¹) = x✝ &&& x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.101820 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 5.748250 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹).toNat
     b := ↑((x✝ ||| x✝¹).toNat + (2 ^ w - (x✝ ^^^ x✝¹).toNat)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 85.998530 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 58.084270 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 13.262380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.604138 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ||| x✝¹) + -(x✝ ^^^ x✝¹) == x✝ &&& x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ||| x✝¹) + -(x✝ ^^^ x✝¹) == x✝ &&& x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 719.584948 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.621750 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) &&& x✝²
    is not definitionally equal to the right-hand side
      x✝ &&& x✝² ^^^ x✝¹ &&& x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ x✝¹) &&& x✝² = x✝ &&& x✝² ^^^ x✝¹ &&& x✝² MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 205.367279 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.496310 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 79.035680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 110.571519 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) &&& x✝²
    is not definitionally equal to the right-hand side
      x✝ &&& x✝² ^^^ x✝¹ &&& x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ x✝¹) &&& x✝² = x✝ &&& x✝² ^^^ x✝¹ &&& x✝² MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.983640 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.134660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝² ^^^ x✝¹ &&& x✝²).toNat
     b := ↑((x✝ ^^^ x✝¹) &&& x✝²).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 94.880040 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 64.296880 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.176930 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.387970 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ x✝¹) &&& x✝² == x✝ &&& x✝² ^^^ x✝¹ &&& x✝²)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ^^^ x✝¹) &&& x✝² == x✝ &&& x✝² ^^^ x✝¹ &&& x✝²) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 381.549257 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.827240 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& x✝²
    is not definitionally equal to the right-hand side
      (x✝ ||| x✝¹ &&& x✝²) &&& x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& x✝² = (x✝ ||| x✝¹ &&& x✝²) &&& x✝² MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 204.682999 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.327340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 78.088439 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 111.545600 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& x✝²
    is not definitionally equal to the right-hand side
      (x✝ ||| x✝¹ &&& x✝²) &&& x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& x✝² = (x✝ ||| x✝¹ &&& x✝²) &&& x✝² MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.089420 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.197000 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ||| x✝¹ &&& x✝²) &&& x✝²).toNat
     b := ↑((x✝ ||| x✝¹) &&& x✝²).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 94.594960 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 63.834469 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.155070 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.588899 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ||| x✝¹) &&& x✝² == (x✝ ||| x✝¹ &&& x✝²) &&& x✝²)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ||| x✝¹) &&& x✝² == (x✝ ||| x✝¹ &&& x✝²) &&& x✝²) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 381.680529 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 12.349110 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ &&& x✝¹ == 0#w) &&& BitVec.ofBool (x✝ &&& x✝² == 0#w)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == 0#w)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ &&& x✝¹ == 0#w) &&& BitVec.ofBool (x✝ &&& x✝² == 0#w) =
        BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == 0#w) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 239.096071 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 39.986278 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 131.675079 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 248.356929 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ &&& x✝¹ == 0#w) &&& BitVec.ofBool (x✝ &&& x✝² == 0#w)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == 0#w)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ &&& x✝¹ == 0#w) &&& BitVec.ofBool (x✝ &&& x✝² == 0#w) =
        BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == 0#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 62.605220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.849710 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == 0#w)).toNat
     b := ↑(BitVec.ofBool (x✝ &&& x✝¹ == 0#w) &&& BitVec.ofBool (x✝ &&& x✝² == 0#w)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 123.288219 ms, MSGSTART 
    Equality (x✝ &&& x✝¹ == 0#w && x✝ &&& x✝² == 0#w) = (x✝ &&& (x✝¹ ||| x✝²) == 0#w) has a strange type MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 112.086420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 28.932130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 98.592919 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ &&& x✝¹ == 0#w),
     BitVec.ofBool (x✝ &&& x✝² == 0#w),
     BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == 0#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ == 0#w) = 0x1#1
    BitVec.ofBool (x✝ &&& x✝² == 0#w) = 0x1#1
    BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == 0#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 656.014038 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 13.464460 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ &&& x✝¹ == x✝¹) &&& BitVec.ofBool (x✝ &&& x✝² == x✝²)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ &&& x✝¹ == x✝¹) &&& BitVec.ofBool (x✝ &&& x✝² == x✝²) =
        BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 229.995389 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 40.610770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 124.263749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 239.591309 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ &&& x✝¹ == x✝¹) &&& BitVec.ofBool (x✝ &&& x✝² == x✝²)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ &&& x✝¹ == x✝¹) &&& BitVec.ofBool (x✝ &&& x✝² == x✝²) =
        BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 61.979470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.776430 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)).toNat
     b := ↑(BitVec.ofBool (x✝ &&& x✝¹ == x✝¹) &&& BitVec.ofBool (x✝ &&& x✝² == x✝²)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 115.454219 ms, MSGSTART 
    Equality (x✝ &&& x✝¹ == x✝¹ && x✝ &&& x✝² == x✝²) = (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²) has a strange type MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 104.091760 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 28.647260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 98.484639 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ &&& x✝¹ == x✝¹),
     BitVec.ofBool (x✝ &&& x✝² == x✝²),
     BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ == x✝¹) = 0x1#1
    BitVec.ofBool (x✝ &&& x✝² == x✝²) = 0x1#1
    BitVec.ofBool (x✝ &&& (x✝¹ ||| x✝²) == x✝¹ ||| x✝²) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 608.312448 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 12.374860 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ &&& x✝¹ == x✝) &&& BitVec.ofBool (x✝ &&& x✝² == x✝)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ &&& (x✝¹ &&& x✝²) == x✝)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ &&& x✝¹ == x✝) &&& BitVec.ofBool (x✝ &&& x✝² == x✝) =
        BitVec.ofBool (x✝ &&& (x✝¹ &&& x✝²) == x✝) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 229.607498 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 35.020961 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 118.790289 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 232.680039 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ &&& x✝¹ == x✝) &&& BitVec.ofBool (x✝ &&& x✝² == x✝)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ &&& (x✝¹ &&& x✝²) == x✝)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ &&& x✝¹ == x✝) &&& BitVec.ofBool (x✝ &&& x✝² == x✝) =
        BitVec.ofBool (x✝ &&& (x✝¹ &&& x✝²) == x✝) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 60.069260 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.429820 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ &&& (x✝¹ &&& x✝²) == x✝)).toNat
     b := ↑(BitVec.ofBool (x✝ &&& x✝¹ == x✝) &&& BitVec.ofBool (x✝ &&& x✝² == x✝)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 114.147229 ms, MSGSTART 
    Equality (x✝ &&& x✝¹ == x✝ && x✝ &&& x✝² == x✝) = (x✝ &&& (x✝¹ &&& x✝²) == x✝) has a strange type MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 103.307860 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 28.103470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 97.653872 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ &&& x✝² == x✝),
     BitVec.ofBool (x✝ &&& x✝¹ == x✝),
     BitVec.ofBool (x✝ &&& (x✝¹ &&& x✝²) == x✝)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ == x✝) = 0x1#1
    BitVec.ofBool (x✝ &&& x✝² == x✝) = 0x1#1
    BitVec.ofBool (x✝ &&& (x✝¹ &&& x✝²) == x✝) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 585.072795 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 12.586610 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ >ₛ x✝¹) &&& BitVec.ofBool (x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ >ₛ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ >ₛ x✝¹) &&& BitVec.ofBool (x✝ != x✝¹) = BitVec.ofBool (x✝ >ₛ x✝¹) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 189.929428 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.972211 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 72.490490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 144.276120 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ >ₛ x✝¹) &&& BitVec.ofBool (x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ >ₛ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ >ₛ x✝¹) &&& BitVec.ofBool (x✝ != x✝¹) = BitVec.ofBool (x✝ >ₛ x✝¹) MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 151.168389 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.937860 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ >ₛ x✝¹)).toNat
     b := ↑(BitVec.ofBool (x✝ >ₛ x✝¹) &&& BitVec.ofBool (x✝ != x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 80.849420 ms, MSGSTART 
    Unsupported syntax (x✝ >ₛ x✝¹) = true → ¬x✝ = x✝¹ === Lean.Expr.forallE
      (Lean.Name.mkNum `a._@.Init.Data.Bool._hyg 1363)
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.app (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)]) (Lean.Expr.const `Bool []))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `BitVec.slt []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1954061)))
              (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1957270)))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1957271))))
        (Lean.Expr.const `Bool.true []))
      (Lean.Expr.app
        (Lean.Expr.const `Not [])
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `Eq [Lean.Level.succ (Lean.Level.zero)])
              (Lean.Expr.app (Lean.Expr.const `BitVec []) (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1954061))))
            (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1957271)))
          (Lean.Expr.fvar (Lean.Name.mkNum `_uniq 1957270))))
      (Lean.BinderInfo.default) MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 70.231539 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 26.131790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 93.131178 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ == x✝¹),
     BitVec.ofBool (x✝.getLsbD (w - 1)),
     BitVec.ofBool (x✝¹.getLsbD (w - 1)),
     BitVec.ofBool (x✝ >ᵤ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝¹.getLsbD (w - 1)) = 0x1#1
    BitVec.ofBool (x✝.getLsbD (w - 1)) = 0x1#1
    BitVec.ofBool (x✝ >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool (x✝ == x✝¹) = 0x1#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 345.515870 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 12.458609 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ == 0#w) &&& BitVec.ofBool (x✝¹ == 0#w)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ||| x✝¹ == 0#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ == 0#w) &&& BitVec.ofBool (x✝¹ == 0#w) = BitVec.ofBool (x✝ ||| x✝¹ == 0#w) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 201.478311 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.175549 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 91.764029 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 241.819309 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ == 0#w) &&& BitVec.ofBool (x✝¹ == 0#w)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ||| x✝¹ == 0#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ == 0#w) &&& BitVec.ofBool (x✝¹ == 0#w) = BitVec.ofBool (x✝ ||| x✝¹ == 0#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 57.786940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.412990 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ ||| x✝¹ == 0#w)).toNat
     b := ↑(BitVec.ofBool (x✝ == 0#w) &&& BitVec.ofBool (x✝¹ == 0#w)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 90.004849 ms, MSGSTART 
    Equality (x✝ == 0#w && x✝¹ == 0#w) = (x✝ ||| x✝¹ == 0#w) has a strange type MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 79.318480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 26.089640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 95.425609 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ ||| x✝¹ == 0#w),
     BitVec.ofBool (x✝ == 0#w),
     BitVec.ofBool (x✝¹ == 0#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ == 0#w) = 0x1#1
    BitVec.ofBool (x✝¹ == 0#w) = 0x1#1
    BitVec.ofBool (x✝ ||| x✝¹ == 0#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 511.302738 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 1.750770 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ == x✝¹) &&& BitVec.ofBool (x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      0#1
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ == x✝¹) &&& BitVec.ofBool (x✝ != x✝¹) = 0#1 MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 111.207840 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.717020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 67.396979 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 142.815600 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ == x✝¹) &&& BitVec.ofBool (x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      0#1
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ == x✝¹) &&& BitVec.ofBool (x✝ != x✝¹) = 0#1 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 36.969000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.469810 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 75.711269 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 65.772250 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 19.720380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 90.948549 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 71.152660 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.578440 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      (x✝ ||| x✝¹) ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) = (x✝ ||| x✝¹) ^^^ -1#w MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 187.959390 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.553080 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 94.147049 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.547009 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      (x✝ ||| x✝¹) ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) = (x✝ ||| x✝¹) ^^^ -1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.474090 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.734920 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ||| x✝¹) ^^^ -1#w).toNat
     b := ↑((x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 105.023210 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 73.308020 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.790070 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.798919 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) == (x✝ ||| x✝¹) ^^^ -1#w)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) == (x✝ ||| x✝¹) ^^^ -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 358.884339 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.578010 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w) = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 242.612759 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.732360 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 95.509160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 167.324539 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w) = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.391120 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.711490 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑((x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 103.870799 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 73.084710 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.095600 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.008491 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w) == x✝ ^^^ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ||| x✝¹) &&& (x✝ &&& x✝¹ ^^^ -1#w) == x✝ ^^^ x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 422.566437 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.578510 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹) = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 243.278540 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.737069 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 95.537369 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 167.161330 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹) = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.323459 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.818470 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑((x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 103.646610 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 73.151330 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.094660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.252128 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹) == x✝ ^^^ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ &&& x✝¹ ^^^ -1#w) &&& (x✝ ||| x✝¹) == x✝ ^^^ x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 422.753020 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.771490 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) &&& x✝
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ x✝¹) &&& x✝ = x✝ &&& (x✝¹ ^^^ -1#w) MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 225.563430 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.219919 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 84.879289 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 161.012120 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) &&& x✝
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ x✝¹) &&& x✝ = x✝ &&& (x✝¹ ^^^ -1#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.273130 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.290250 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& (x✝¹ ^^^ -1#w)).toNat
     b := ↑((x✝ ^^^ x✝¹) &&& x✝).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 93.441959 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 64.100000 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.097510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.216142 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ x✝¹) &&& x✝ == x✝ &&& (x✝¹ ^^^ -1#w))]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ^^^ x✝¹) &&& x✝ == x✝ &&& (x✝¹ ^^^ -1#w)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 387.919588 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.755810 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w ||| x✝¹) &&& x✝
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w ||| x✝¹) &&& x✝ = x✝ &&& x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 233.255838 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.615531 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 83.830419 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 166.833700 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w ||| x✝¹) &&& x✝
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w ||| x✝¹) &&& x✝ = x✝ &&& x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.927010 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.572210 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹).toNat
     b := ↑((x✝ ^^^ -1#w ||| x✝¹) &&& x✝).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 94.575869 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 64.830850 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.554050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.684798 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ -1#w ||| x✝¹) &&& x✝ == x✝ &&& x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ^^^ -1#w ||| x✝¹) &&& x✝ == x✝ &&& x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 396.127760 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.824370 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝)
    is not definitionally equal to the right-hand side
      (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝) = (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w) MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 275.133249 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.566000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 109.944469 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 163.567110 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝)
    is not definitionally equal to the right-hand side
      (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w)
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝) = (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.176390 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.578110 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w)).toNat
     b := ↑((x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 123.709119 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 87.788300 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.280830 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.563789 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝) == (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w))]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ^^^ x✝¹) &&& (x✝¹ ^^^ x✝² ^^^ x✝) == (x✝ ^^^ x✝¹) &&& (x✝² ^^^ -1#w)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 465.623319 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.795530 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹) = x✝ &&& x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 252.327629 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.526170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 94.406890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 167.381729 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹) = x✝ &&& x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.368120 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.694690 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹).toNat
     b := ↑((x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 103.532859 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 73.017150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.072770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.348929 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹) == x✝ &&& x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ||| x✝¹) &&& (x✝ ^^^ -1#w ^^^ x✝¹) == x✝ &&& x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 429.524609 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 6.876230 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ >ᵤ x✝¹) ||| BitVec.ofBool (x✝ == x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ≥ᵤ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ >ᵤ x✝¹) ||| BitVec.ofBool (x✝ == x✝¹) = BitVec.ofBool (x✝ ≥ᵤ x✝¹) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 180.780479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.146180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 67.194120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 138.487759 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ >ᵤ x✝¹) ||| BitVec.ofBool (x✝ == x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ≥ᵤ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ >ᵤ x✝¹) ||| BitVec.ofBool (x✝ == x✝¹) = BitVec.ofBool (x✝ ≥ᵤ x✝¹) MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 47.935920 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.913240 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ ≥ᵤ x✝¹)).toNat
     b := ↑(BitVec.ofBool (x✝ >ᵤ x✝¹) ||| BitVec.ofBool (x✝ == x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 70.353710 ms, MSGSTART 
    Equality ((x✝ >ᵤ x✝¹) || x✝ == x✝¹) = (x✝ ≥ᵤ x✝¹) has a strange type MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 60.297639 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 21.936660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 91.385250 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝¹ >ᵤ x✝),
     BitVec.ofBool (x✝ == x✝¹),
     BitVec.ofBool (x✝ >ᵤ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool (x✝ == x✝¹) = 0x1#1
    BitVec.ofBool (x✝¹ >ᵤ x✝) = 0x1#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 231.820599 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.062760 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ ≥ᵤ x✝¹) ||| BitVec.ofBool (x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      1#1
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ ≥ᵤ x✝¹) ||| BitVec.ofBool (x✝ != x✝¹) = 1#1 MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 231.774420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 17.511129 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 67.493299 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 148.164310 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ ≥ᵤ x✝¹) ||| BitVec.ofBool (x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      1#1
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ ≥ᵤ x✝¹) ||| BitVec.ofBool (x✝ != x✝¹) = 1#1 MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 41.337050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.473790 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 94.219649 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 64.541810 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 19.665190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 86.568872 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ == x✝¹),
     BitVec.ofBool (x✝¹ >ᵤ x✝)]
    Consider the following assignment:
    BitVec.ofBool (x✝¹ >ᵤ x✝) = 0x1#1
    BitVec.ofBool (x✝ == x✝¹) = 0x1#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 207.117467 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 6.880200 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ + -1#w ≥ᵤ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹) = BitVec.ofBool (x✝ + -1#w ≥ᵤ x✝¹) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 240.981598 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.332811 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 133.111160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 279.629078 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ - 1#w ≥ᵤ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹) = BitVec.ofBool (x✝ - 1#w ≥ᵤ x✝¹) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 46.672300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.661810 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ + -1#w ≥ᵤ x✝¹)).toNat
     b := ↑(BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 129.416800 ms, MSGSTART 
    Equality (x✝ == 0#w || x✝ >ᵤ x✝¹) = (x✝ + -1#w ≥ᵤ x✝¹) has a strange type MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 118.171089 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 24.587800 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 94.242192 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ == 0#w),
     BitVec.ofBool (x✝ >ᵤ x✝¹),
     BitVec.ofBool (x✝¹ >ᵤ x✝ + -1#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ == 0#w) = 0x1#1
    BitVec.ofBool (x✝ >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool (x✝¹ >ᵤ x✝ + -1#w) = 0x1#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 814.124454 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 6.870120 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ + -1#w ≥ᵤ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹) = BitVec.ofBool (x✝ + -1#w ≥ᵤ x✝¹) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 240.155298 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.430880 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 133.937559 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 283.084949 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ - 1#w ≥ᵤ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹) = BitVec.ofBool (x✝ - 1#w ≥ᵤ x✝¹) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 47.446960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.686770 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ + -1#w ≥ᵤ x✝¹)).toNat
     b := ↑(BitVec.ofBool (x✝ == 0#w) ||| BitVec.ofBool (x✝ >ᵤ x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 131.228269 ms, MSGSTART 
    Equality (x✝ == 0#w || x✝ >ᵤ x✝¹) = (x✝ + -1#w ≥ᵤ x✝¹) has a strange type MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 119.360580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 24.634589 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 94.742141 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ == 0#w),
     BitVec.ofBool (x✝¹ >ᵤ x✝ + -1#w),
     BitVec.ofBool (x✝ >ᵤ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ == 0#w) = 0x1#1
    BitVec.ofBool (x✝ >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool (x✝¹ >ᵤ x✝ + -1#w) = 0x1#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 713.473306 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 13.083560 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ != 0#w) ||| BitVec.ofBool (x✝¹ != 0#w)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ||| x✝¹ != 0#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ != 0#w) ||| BitVec.ofBool (x✝¹ != 0#w) = BitVec.ofBool (x✝ ||| x✝¹ != 0#w) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 204.162339 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.477310 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 89.517480 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 245.379188 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝ != 0#w) ||| BitVec.ofBool (x✝¹ != 0#w)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ||| x✝¹ != 0#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝ != 0#w) ||| BitVec.ofBool (x✝¹ != 0#w) = BitVec.ofBool (x✝ ||| x✝¹ != 0#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 73.770540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.235600 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ ||| x✝¹ != 0#w)).toNat
     b := ↑(BitVec.ofBool (x✝ != 0#w) ||| BitVec.ofBool (x✝¹ != 0#w)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 87.378110 ms, MSGSTART 
    Equality (x✝ != 0#w || x✝¹ != 0#w) = (x✝ ||| x✝¹ != 0#w) has a strange type MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 76.847239 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 26.765300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 96.855900 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ == 0#w),
     BitVec.ofBool (x✝¹ == 0#w),
     BitVec.ofBool (x✝ ||| x✝¹ == 0#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ == 0#w) = 0x1#1
    BitVec.ofBool (x✝¹ == 0#w) = 0x1#1
    BitVec.ofBool (x✝ ||| x✝¹ == 0#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 637.476257 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.886650 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ^^^ x✝¹ ||| x✝²
    is not definitionally equal to the right-hand side
      (x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ x✝¹ ||| x✝² = (x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝² MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 230.741729 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 23.145160 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 89.931510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 120.734499 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ^^^ x✝¹ ||| x✝²
    is not definitionally equal to the right-hand side
      (x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ x✝¹ ||| x✝² = (x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝² MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.206250 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.682880 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝²).toNat
     b := ↑(x✝ ^^^ x✝¹ ||| x✝²).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 104.962050 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 73.006139 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.767510 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.350370 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ ^^^ x✝¹ ||| x✝² == (x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝²)]
    Consider the following assignment:
    BitVec.ofBool (x✝ ^^^ x✝¹ ||| x✝² == (x✝ ||| x✝²) ^^^ x✝¹ &&& ~~~x✝²) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 422.614898 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.769350 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) &&& x✝¹ ||| x✝
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) &&& x✝¹ ||| x✝ = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 235.463229 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.625430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 84.289600 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.983249 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) &&& x✝¹ ||| x✝
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) &&& x✝¹ ||| x✝ = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.104170 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.700870 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑((x✝ ^^^ -1#w) &&& x✝¹ ||| x✝).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 95.592080 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 65.520399 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.403630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.227889 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ -1#w) &&& x✝¹ ||| x✝ == x✝ ||| x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ^^^ -1#w) &&& x✝¹ ||| x✝ == x✝ ||| x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 399.999629 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.858670 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ||| x✝ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ||| x✝ ^^^ -1#w = x✝ ^^^ -1#w ||| x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 236.973499 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.766680 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 85.093650 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 169.321949 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ||| x✝ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ||| x✝ ^^^ -1#w = x✝ ^^^ -1#w ||| x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.159640 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.664650 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ -1#w ||| x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ||| x✝ ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 96.443080 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 65.292299 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.479020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.263289 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& x✝¹ ||| x✝ ^^^ -1#w == x✝ ^^^ -1#w ||| x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ ||| x✝ ^^^ -1#w == x✝ ^^^ -1#w ||| x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 400.432660 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.760930 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 206.849529 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.217580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 84.975239 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 167.897889 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.118380 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.650420 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑(x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 95.837510 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 65.548400 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.365060 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.691129 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹ == x✝ ^^^ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& (x✝¹ ^^^ -1#w) ||| x✝ ^^^ x✝¹ == x✝ ^^^ x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 379.059839 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.764790 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 285.583949 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 28.794050 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 104.377229 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.518439 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.688890 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.821980 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑(x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 113.360900 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 81.286029 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.456960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.238273 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹ == x✝ ^^^ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& (x✝¹ ^^^ -1#w) ||| (x✝ ^^^ -1#w) &&& x✝¹ == x✝ ^^^ x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 470.968785 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.780470 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹ ||| x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝ = x✝ ^^^ x✝¹ ||| x✝² MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 214.372830 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.045649 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 76.257910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 111.368840 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹ ||| x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝ = x✝ ^^^ x✝¹ ||| x✝² MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.106980 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.180730 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹ ||| x✝²).toNat
     b := ↑(x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 95.371809 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 64.273630 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.212440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.996548 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝ == x✝ ^^^ x✝¹ ||| x✝²)]
    Consider the following assignment:
    BitVec.ofBool (x✝ ^^^ x✝¹ ||| x✝¹ ^^^ x✝² ^^^ x✝ == x✝ ^^^ x✝¹ ||| x✝²) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 390.479551 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.739070 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& x✝² ||| x✝
    is not definitionally equal to the right-hand side
      x✝ ||| x✝² &&& x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& x✝² ||| x✝ = x✝ ||| x✝² &&& x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 207.041071 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.934439 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 78.405428 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 109.877570 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) &&& x✝² ||| x✝
    is not definitionally equal to the right-hand side
      x✝ ||| x✝² &&& x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) &&& x✝² ||| x✝ = x✝ ||| x✝² &&& x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.982940 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.117920 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝² &&& x✝¹).toNat
     b := ↑((x✝ ||| x✝¹) &&& x✝² ||| x✝).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 94.364430 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 63.579379 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.714200 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.787050 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ||| x✝¹) &&& x✝² ||| x✝ == x✝ ||| x✝² &&& x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ||| x✝¹) &&& x✝² ||| x✝ == x✝ ||| x✝² &&& x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 381.779168 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.801130 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w = x✝ &&& x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 187.854729 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.467790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 94.501949 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 167.771360 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w = x✝ &&& x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.315099 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.811190 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 105.077080 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 73.318150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.629810 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.737248 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w == x✝ &&& x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w == x✝ &&& x✝¹ ^^^ -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 357.184670 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.787280 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝ ^^^ x✝¹ = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 164.433208 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.964372 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 49.882409 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 109.555440 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝ ^^^ x✝¹ = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.325950 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.906700 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑(x✝ ||| x✝ ^^^ x✝¹).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 65.763620 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 40.453839 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 9.257980 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.264150 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ ||| x✝ ^^^ x✝¹ == x✝ ||| x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ ||| x✝ ^^^ x✝¹ == x✝ ||| x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 315.608819 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.857750 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹ = x✝ ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 279.584629 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.841000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 91.909799 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 163.228410 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹ = x✝ ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.838119 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.490310 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 104.099950 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 72.442190 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.097140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.114550 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹ == x✝ ||| x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ ||| x✝ ^^^ -1#w ^^^ x✝¹ == x✝ ||| x✝¹ ^^^ -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 442.781067 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.810399 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹ = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 180.155661 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.518289 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 63.723999 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.373430 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹ = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.301920 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.311270 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 76.154509 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 49.330240 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.784460 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 71.774289 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹ == x✝ ||| x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ ||| x✝ ^^^ x✝¹ == x✝ ||| x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 348.276641 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.870490 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w = x✝ ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 262.270048 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 30.942440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 94.296350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 162.562829 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w = x✝ ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.707420 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.466690 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 103.070890 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 72.049969 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.048280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.264121 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w == x✝ ||| x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ ||| (x✝ ||| x✝¹) ^^^ -1#w == x✝ ||| x✝¹ ^^^ -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 424.568637 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.864770 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w = x✝ ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 263.296701 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.298829 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 91.348168 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 163.070800 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w = x✝ ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.739640 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.499090 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 103.116569 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 71.883580 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.014280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.236408 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w == x✝ ||| x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ ||| x✝ ^^^ x✝¹ ^^^ -1#w == x✝ ||| x✝¹ ^^^ -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 436.262279 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.791170 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹ = x✝ ^^^ -1#w ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 215.844449 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.098560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 84.314949 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 169.558250 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹ = x✝ ^^^ -1#w ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.253470 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.680530 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ -1#w ^^^ x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 97.981159 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 65.388130 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.343030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.694720 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹ == x✝ ^^^ -1#w ^^^ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ ||| x✝ ^^^ -1#w ^^^ x✝¹ == x✝ ^^^ -1#w ^^^ x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 375.085988 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.899940 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝¹ ||| x✝²
    is not definitionally equal to the right-hand side
      x✝ ||| x✝² ||| x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝¹ ||| x✝² = x✝ ||| x✝² ||| x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 193.507488 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 10.964261 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 108.246110 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 104.370969 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ||| x✝¹ ||| x✝²
    is not definitionally equal to the right-hand side
      x✝ ||| x✝² ||| x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ||| x✝¹ ||| x✝² = x✝ ||| x✝² ||| x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.183640 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.740830 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝² ||| x✝¹).toNat
     b := ↑(x✝ ||| x✝¹ ||| x✝²).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 84.450950 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 54.718820 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 9.396570 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 70.738039 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ ||| x✝¹ ||| x✝² == x✝ ||| x✝² ||| x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ ||| x✝¹ ||| x✝² == x✝ ||| x✝² ||| x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 355.476999 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.800810 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w = x✝ ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 201.355709 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.689330 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 94.442420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.206889 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w = x✝ ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.455010 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.729310 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹ ^^^ -1#w).toNat
     b := ↑((x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 105.630170 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 73.720649 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.796300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.248919 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w == x✝ ||| x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ^^^ -1#w) &&& x✝¹ ^^^ -1#w == x✝ ||| x✝¹ ^^^ -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 371.851810 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.582340 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w = x✝ &&& (x✝¹ ^^^ -1#w) MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 201.496969 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.657560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 94.003969 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.849180 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w = x✝ &&& (x✝¹ ^^^ -1#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.411230 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.807280 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& (x✝¹ ^^^ -1#w)).toNat
     b := ↑((x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 106.005179 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 73.346760 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.716950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.379852 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w == x✝ &&& (x✝¹ ^^^ -1#w))]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ^^^ -1#w ||| x✝¹) ^^^ -1#w == x✝ &&& (x✝¹ ^^^ -1#w)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 371.643336 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.806390 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ -1#w = x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 187.350109 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.713380 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 94.068750 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 168.183329 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ -1#w = x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.410560 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.724610 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ &&& x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 105.086990 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 73.348099 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.726280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.314880 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& x✝¹ ^^^ -1#w == x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ ^^^ -1#w == x✝ ^^^ -1#w ||| x✝¹ ^^^ -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 358.102749 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.596280 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) ^^^ -1#w
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) ^^^ -1#w = (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 188.986509 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.692030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 94.899170 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 169.108339 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) ^^^ -1#w
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) ^^^ -1#w = (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.476680 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.740050 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)).toNat
     b := ↑((x✝ ||| x✝¹) ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 106.305869 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 74.092580 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.758230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.469699 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ||| x✝¹) ^^^ -1#w == (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w))]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ||| x✝¹) ^^^ -1#w == (x✝ ^^^ -1#w) &&& (x✝¹ ^^^ -1#w)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 358.971819 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 6.581190 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝.sshiftRight' x✝¹
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ (x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w = x✝.sshiftRight' x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 169.279350 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.639809 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 111.655230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 158.139209 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝.sshiftRight' x✝¹
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ (x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w = x✝.sshiftRight' x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.563260 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.105660 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝.sshiftRight' x✝¹).toNat
     e := ↑((x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 132.935320 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one.neg)
            (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 93.119079 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 15.396240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 77.109172 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹),
     BitVec.ofBool ((x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w == x✝.sshiftRight' x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool ((x✝ ^^^ -1#w).sshiftRight' x✝¹ ^^^ -1#w == x✝.sshiftRight' x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 137.771207 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 12.595470 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝¹ >ₛ x✝) ^^^ -1#1
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ≥ₛ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝¹ >ₛ x✝) ^^^ -1#1 = BitVec.ofBool (x✝ ≥ₛ x✝¹) MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 196.170129 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.724000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 89.666670 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 161.378319 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝¹ >ₛ x✝) ^^^ -1#1
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ≥ₛ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝¹ >ₛ x✝) ^^^ -1#1 = BitVec.ofBool (x✝ ≥ₛ x✝¹) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 41.299270 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.929930 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ ≥ₛ x✝¹)).toNat
     b := ↑(BitVec.ofBool (x✝¹ >ₛ x✝) ^^^ -1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 125.222060 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).xor AutoStructs.Term.one)
            (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 74.437999 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 25.717440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 99.664579 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 361.764579 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 14.023600 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      x✝¹ + (-1#w - x✝)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - x✝¹ ^^^ -1#w = x✝¹ + (-1#w - x✝) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 243.639420 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 41.911759 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 100.671120 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 228.460119 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ - x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      -x✝ + (x✝¹ - 1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ - x✝¹ ^^^ -1#w = -x✝ + (x✝¹ - 1#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.136580 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.094540 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝¹.toNat + ((2 ^ w - 1 % 2 ^ w) % 2 ^ w + (2 ^ w - x✝.toNat)) % 2 ^ w) % ↑(2 ^ w)
     b := ↑(x✝ - x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 106.106519 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 71.129730 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 14.082350 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 75.837969 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ + -x✝¹ ^^^ -1#w == x✝¹ + (-1#w + -x✝))]
    Consider the following assignment:
    BitVec.ofBool (x✝ + -x✝¹ ^^^ -1#w == x✝¹ + (-1#w + -x✝)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 1094.247076 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 14.017520 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ + x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      -1#w - x✝¹ - x✝
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ + x✝¹ ^^^ -1#w = -1#w - x✝¹ - x✝ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 244.894530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 32.388789 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 110.528539 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 221.848090 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ + x✝¹ ^^^ -1#w
    is not definitionally equal to the right-hand side
      -x✝ + (-x✝¹ - 1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ + x✝¹ ^^^ -1#w = -x✝ + (-x✝¹ - 1#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.131129 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.982910 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(((2 ^ w - 1 % 2 ^ w) % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑(x✝ + x✝¹ ^^^ -1#w).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 124.404070 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 89.410470 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 13.758580 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 75.617008 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ + x✝¹ ^^^ -1#w == -1#w + -x✝¹ + -x✝)]
    Consider the following assignment:
    BitVec.ofBool (x✝ + x✝¹ ^^^ -1#w == -1#w + -x✝¹ + -x✝) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 1029.674177 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.576840 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) ^^^ x✝¹ = x✝ &&& (x✝¹ ^^^ -1#w) MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 229.670109 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.247500 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 84.211440 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 169.219919 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹) ^^^ x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (x✝¹ ^^^ -1#w)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹) ^^^ x✝¹ = x✝ &&& (x✝¹ ^^^ -1#w) MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.122220 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.574710 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& (x✝¹ ^^^ -1#w)).toNat
     b := ↑((x✝ ||| x✝¹) ^^^ x✝¹).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 94.952960 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 65.530869 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.197630 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.215970 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ||| x✝¹) ^^^ x✝¹ == x✝ &&& (x✝¹ ^^^ -1#w))]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ||| x✝¹) ^^^ x✝¹ == x✝ &&& (x✝¹ ^^^ -1#w)) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 401.205030 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.588470 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#w) &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ x✝¹ = (x✝ ^^^ -1#w) &&& x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 227.930759 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.452730 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 82.706180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 161.845359 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ x✝¹
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#w) &&& x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ x✝¹ = (x✝ ^^^ -1#w) &&& x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.322760 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.282930 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ^^^ -1#w) &&& x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ^^^ x✝¹).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 93.149790 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 63.750069 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.990140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.041740 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& x✝¹ ^^^ x✝¹ == (x✝ ^^^ -1#w) &&& x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ ^^^ x✝¹ == (x✝ ^^^ -1#w) &&& x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 389.634159 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.785800 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹) = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 182.280249 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 20.552740 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 63.919569 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.294530 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹) = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.289950 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.319900 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 75.896830 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 49.230849 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.499890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.453341 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹) == x✝ ^^^ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ ^^^ (x✝ ||| x✝¹) == x✝ ^^^ x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 348.490658 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.745070 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹) = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 290.480729 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.168489 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 101.472140 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 162.049719 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹) = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.060300 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.551100 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑((x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 112.310420 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 80.514030 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.282660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.203638 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹) == x✝ ^^^ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ ||| x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w ||| x✝¹) == x✝ ^^^ x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 472.372149 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.808390 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 287.588569 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.818700 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 102.138069 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 161.873070 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹
    is not definitionally equal to the right-hand side
      x✝ ^^^ x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹ = x✝ ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.998780 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.490530 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ^^^ x✝¹).toNat
     b := ↑(x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 111.855479 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 80.052880 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.990600 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 74.057040 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹ == x✝ ^^^ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) &&& x✝¹ == x✝ ^^^ x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 465.556788 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.741450 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²)
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²) = (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 288.309679 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 29.285660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 111.693809 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 169.787430 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²)
    is not definitionally equal to the right-hand side
      (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²) = (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.985380 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.927860 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑((x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹).toNat
     b := ↑(x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 125.907539 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 88.830300 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.317950 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 74.443580 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²) == (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ ^^^ x✝¹ ^^^ (x✝ ||| x✝²) == (x✝ ^^^ -1#w) &&& x✝² ^^^ x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 483.522887 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.769620 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹) = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 181.689670 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.405689 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 62.396870 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 116.206890 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹)
    is not definitionally equal to the right-hand side
      x✝ ||| x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹) = x✝ ||| x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.292300 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.353650 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ ||| x✝¹).toNat
     b := ↑(x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 76.067699 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 49.329260 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.458190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 72.722250 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹) == x✝ ||| x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& x✝¹ ^^^ (x✝ ^^^ x✝¹) == x✝ ||| x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 349.320090 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.876590 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) = x✝ &&& x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 292.291298 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 31.470581 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 103.871310 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 163.674499 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w)
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹ ^^^ -1#w
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) = x✝ &&& x✝¹ ^^^ -1#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.159170 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.568710 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝ &&& x✝¹ ^^^ -1#w).toNat
     b := ↑(x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w)).toNat
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic PASS, TIME_ELAPSED 112.960220 ms, 
  TACBENCH simp FAIL, TIME_ELAPSED 80.668810 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.098150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 74.283210 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       (x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) == x✝ &&& x✝¹ ^^^ -1#w)]
    Consider the following assignment:
    BitVec.ofBool (x✝ &&& (x✝¹ ^^^ -1#w) ^^^ (x✝ ^^^ -1#w) == x✝ &&& x✝¹ ^^^ -1#w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 470.723547 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 6.898550 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝¹ ≥ᵤ x✝) ^^^ BitVec.ofBool (x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ≥ᵤ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝¹ ≥ᵤ x✝) ^^^ BitVec.ofBool (x✝ != x✝¹) = BitVec.ofBool (x✝ ≥ᵤ x✝¹) MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 185.519311 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 21.740779 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 67.026489 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 138.467989 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      BitVec.ofBool (x✝¹ ≥ᵤ x✝) ^^^ BitVec.ofBool (x✝ != x✝¹)
    is not definitionally equal to the right-hand side
      BitVec.ofBool (x✝ ≥ᵤ x✝¹)
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ BitVec.ofBool (x✝¹ ≥ᵤ x✝) ^^^ BitVec.ofBool (x✝ != x✝¹) = BitVec.ofBool (x✝ ≥ᵤ x✝¹) MSGEND
  TACBENCH bv_of_bool PASS, TIME_ELAPSED 66.704130 ms, 
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.883420 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(BitVec.ofBool (x✝ ≥ᵤ x✝¹)).toNat
     b := ↑(BitVec.ofBool (x✝¹ ≥ᵤ x✝) ^^^ BitVec.ofBool (x✝ != x✝¹)).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 71.002699 ms, MSGSTART 
    Equality ((x✝¹ ≥ᵤ x✝) ^^ x✝ != x✝¹) = (x✝ ≥ᵤ x✝¹) has a strange type MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 60.707720 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 22.975230 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 94.374480 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ >ᵤ x✝¹),
     BitVec.ofBool (x✝¹ >ᵤ x✝),
     BitVec.ofBool (x✝ == x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (x✝ >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool (x✝ == x✝¹) = 0x1#1
    BitVec.ofBool (x✝¹ >ᵤ x✝) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 273.828759 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 23.094749 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ * -1#w
    is not definitionally equal to the right-hand side
      0#w - x✝
    case some
    w : ℕ
    x✝ : BitVec w
    ⊢ x✝ * -1#w = 0#w - x✝ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.465870 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 38.838560 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 131.649879 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 213.258659 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      -(x✝ * 1#w)
    is not definitionally equal to the right-hand side
      -x✝ + 0#w
    case some
    w : ℕ
    x✝ : BitVec w
    ⊢ -(x✝ * 1#w) = -x✝ + 0#w MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.054890 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.931820 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑(x✝.toNat * ((2 ^ w - 1 % 2 ^ w) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 140.113870 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 129.472199 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.618000 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.447230 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (x✝ * -1#w == -x✝)]
    Consider the following assignment:
    BitVec.ofBool (x✝ * -1#w == -x✝) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 87.392279 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 4.581260 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ + x✝¹) * x✝²
    is not definitionally equal to the right-hand side
      x✝ * x✝² + x✝¹ * x✝²
    case some.some.some
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    ⊢ (x✝ + x✝¹) * x✝² = x✝ * x✝² + x✝¹ * x✝² MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 164.634849 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 27.503471 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 213.595159 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.259109 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.967230 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.787380 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat * x✝².toNat % 2 ^ w + x✝¹.toNat * x✝².toNat % 2 ^ w) % ↑(2 ^ w)
     b := ↑((x✝.toNat + x✝¹.toNat) % 2 ^ w * x✝².toNat) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 234.603389 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).add (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 192.740940 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 11.372090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 73.555288 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ + x✝¹) * x✝² == x✝ * x✝² + x✝¹ * x✝²)]
    Consider the following assignment:
    BitVec.ofBool ((x✝ + x✝¹) * x✝² == x✝ * x✝² + x✝¹ * x✝²) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 311.132320 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 8.914230 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (0#w - x✝) * (0#w - x✝¹)
    is not definitionally equal to the right-hand side
      x✝ * x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ (0#w - x✝) * (0#w - x✝¹) = x✝ * x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 226.586879 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 26.979240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 194.688119 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 199.399049 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      -(0#w * x✝) - 0#w * x✝¹ + 0#w ^ 2 + x✝ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ * x✝¹
    case some.some
    w : ℕ
    x✝¹ x✝ : BitVec w
    ⊢ -(0#w * x✝) - 0#w * x✝¹ + 0#w ^ 2 + x✝ * x✝¹ = x✝ * x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.982020 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.320980 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(x✝.toNat * x✝¹.toNat) % ↑(2 ^ w)
     b := ↑((0 % 2 ^ w + (2 ^ w - x✝.toNat)) % 2 ^ w * ((0 % 2 ^ w + (2 ^ w - x✝¹.toNat)) % 2 ^ w)) % ↑(2 ^ w)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 204.190819 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 193.522149 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 12.061400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 74.690670 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (-x✝ * -x✝¹ == x✝ * x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (-x✝ * -x✝¹ == x✝ * x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 200.345419 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.176310 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ / x✝¹ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ - x✝ % x✝¹
    case some.some.isFalse
    x✝¹ x✝ : BitVec 5
    h✝ : ¬x✝¹ = 0
    ⊢ x✝ / x✝¹ * x✝¹ = x✝ - x✝ % x✝¹ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 217.820269 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.597490 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 234.188169 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 156.572849 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ / x✝¹ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ - x✝ % x✝¹
    case some.some.isFalse
    x✝¹ x✝ : BitVec 5
    h✝ : ¬x✝¹ = 0
    ⊢ x✝ / x✝¹ * x✝¹ = x✝ - x✝ % x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.843220 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 14.621370 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ f ≤ 31
      0 ≤ e ≤ 32
      c ≥ 0
      0 ≤ c - 32*d ≤ 31
      0 ≤ a ≤ 31
      a - 32*b - c + 32*d - e ≥ -31
      -32 ≤ a - 32*b - e ≤ -1
    where
     a := ↑x✝.toNat
     b := ↑(x✝.toNat + (2 ^ 5 - x✝.toNat % x✝¹.toNat)) / 32
     c := ↑(x✝.toNat / x✝¹.toNat) * ↑x✝¹.toNat
     d := ↑(x✝.toNat / x✝¹.toNat * x✝¹.toNat) / 32
     e := ↑x✝.toNat % ↑x✝¹.toNat
     f := ↑x✝¹.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 257.848869 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).sub (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 226.347759 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 23.503670 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 193.108829 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1471.762164 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.226960 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝.sdiv x✝¹ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ - x✝.srem x✝¹
    case some.some.isFalse
    x✝¹ x✝ : BitVec 5
    h✝ : ¬(x✝¹ == 0 || 5 != 1 && x✝ == BitVec.intMin 5 && x✝¹ == -1) = true
    ⊢ x✝.sdiv x✝¹ * x✝¹ = x✝ - x✝.srem x✝¹ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 245.492729 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 22.712190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 188.465519 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 143.968159 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝.sdiv x✝¹ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ - x✝.srem x✝¹
    case some.some.isFalse
    x✝¹ x✝ : BitVec 5
    h✝ : ¬(x✝¹ == 0 || 5 != 1 && x✝ == BitVec.intMin 5 && x✝¹ == -1) = true
    ⊢ x✝.sdiv x✝¹ * x✝¹ = x✝ - x✝.srem x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.499090 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 23.136120 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ e ≤ 31
      c ≥ 0
      0 ≤ c - 32*d ≤ 31
      0 ≤ a ≤ 31
      a - 32*b - c + 32*d - e ≥ -31
      -32 ≤ a - 32*b - e ≤ -1
    where
     a := ↑x✝.toNat
     b := ↑(x✝.toNat + (2 ^ 5 - (x✝.srem x✝¹).toNat)) / 32
     c := ↑(match Decidable.decide (2 ^ (5 - 1) ≤ x✝.toNat), Decidable.decide (2 ^ (5 - 1) ≤ x✝¹.toNat) with
        | false, false => (x✝.udiv x✝¹).toNat
        | false, true => (2 ^ 5 - (x✝.udiv (-x✝¹)).toNat) % 2 ^ 5
        | true, false => (2 ^ 5 - ((-x✝).udiv x✝¹).toNat) % 2 ^ 5
        | true, true => ((-x✝).udiv (-x✝¹)).toNat) *
      ↑x✝¹.toNat
     d := ↑((match Decidable.decide (2 ^ (5 - 1) ≤ x✝.toNat), Decidable.decide (2 ^ (5 - 1) ≤ x✝¹.toNat) with
          | false, false => (x✝.udiv x✝¹).toNat
          | false, true => (2 ^ 5 - (x✝.udiv (-x✝¹)).toNat) % 2 ^ 5
          | true, false => (2 ^ 5 - ((-x✝).udiv x✝¹).toNat) % 2 ^ 5
          | true, true => ((-x✝).udiv (-x✝¹)).toNat) *
          x✝¹.toNat) /
      32
     e := ↑(x✝.srem x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 206.992320 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).sub (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 173.415689 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 79.848629 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 495.222568 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1623.514274 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 9.962510 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝.sdiv x✝¹ * (0#5 - x✝¹)
    is not definitionally equal to the right-hand side
      x✝.srem x✝¹ - x✝
    case some.some.isFalse
    x✝¹ x✝ : BitVec 5
    h✝ : ¬(x✝¹ == 0 || 5 != 1 && x✝ == BitVec.intMin 5 && x✝¹ == -1) = true
    ⊢ x✝.sdiv x✝¹ * (0#5 - x✝¹) = x✝.srem x✝¹ - x✝ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 329.469238 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 25.267641 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 148.147779 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 198.102159 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝.sdiv x✝¹ * 0#5 - x✝.sdiv x✝¹ * x✝¹
    is not definitionally equal to the right-hand side
      x✝.srem x✝¹ - x✝
    case some.some.isFalse
    x✝¹ x✝ : BitVec 5
    h✝ : ¬(x✝¹ == 0 || 5 != 1 && x✝ == BitVec.intMin 5 && x✝¹ == -1) = true
    ⊢ x✝.sdiv x✝¹ * 0#5 - x✝.sdiv x✝¹ * x✝¹ = x✝.srem x✝¹ - x✝ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.155990 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 25.781010 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ e ≤ 31
      c ≥ 0
      0 ≤ c - 32*d ≤ 31
      0 ≤ a ≤ 31
      a - 32*b - c + 32*d - e ≥ -31
      -32 ≤ a - 32*b - e ≤ -1
    where
     a := ↑(x✝.srem x✝¹).toNat
     b := ↑((x✝.srem x✝¹).toNat + (2 ^ 5 - x✝.toNat)) / 32
     c := ↑(match Decidable.decide (2 ^ (5 - 1) ≤ x✝.toNat), Decidable.decide (2 ^ (5 - 1) ≤ x✝¹.toNat) with
        | false, false => (x✝.udiv x✝¹).toNat
        | false, true => (2 ^ 5 - (x✝.udiv (-x✝¹)).toNat) % 2 ^ 5
        | true, false => (2 ^ 5 - ((-x✝).udiv x✝¹).toNat) % 2 ^ 5
        | true, true => ((-x✝).udiv (-x✝¹)).toNat) *
      ↑((0 % 2 ^ 5 + (2 ^ 5 - x✝¹.toNat)) % 2 ^ 5)
     d := ↑((match Decidable.decide (2 ^ (5 - 1) ≤ x✝.toNat), Decidable.decide (2 ^ (5 - 1) ≤ x✝¹.toNat) with
          | false, false => (x✝.udiv x✝¹).toNat
          | false, true => (2 ^ 5 - (x✝.udiv (-x✝¹)).toNat) % 2 ^ 5
          | true, false => (2 ^ 5 - ((-x✝).udiv x✝¹).toNat) % 2 ^ 5
          | true, true => ((-x✝).udiv (-x✝¹)).toNat) *
          ((0 % 2 ^ 5 + (2 ^ 5 - x✝¹.toNat)) % 2 ^ 5)) /
      32
     e := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 164.056919 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0).neg
            ((AutoStructs.Term.var 1).sub (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 124.622640 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 79.836520 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 554.542987 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1489.819864 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 6.224780 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ / x✝¹ * (0#5 - x✝¹)
    is not definitionally equal to the right-hand side
      x✝ % x✝¹ - x✝
    case some.some.isFalse
    x✝¹ x✝ : BitVec 5
    h✝ : ¬x✝¹ = 0
    ⊢ x✝ / x✝¹ * (0#5 - x✝¹) = x✝ % x✝¹ - x✝ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 344.803540 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.451779 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 232.969039 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 197.607669 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ / x✝¹ * 0#5 - x✝ / x✝¹ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ % x✝¹ - x✝
    case some.some.isFalse
    x✝¹ x✝ : BitVec 5
    h✝ : ¬x✝¹ = 0
    ⊢ x✝ / x✝¹ * 0#5 - x✝ / x✝¹ * x✝¹ = x✝ % x✝¹ - x✝ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.645490 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 17.452990 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ f ≤ 31
      0 ≤ e ≤ 31
      c ≥ 0
      0 ≤ c - 32*d ≤ 31
      a ≥ 0
      a - 32*b - c + 32*d - e ≥ -31
      -32 ≤ a - 32*b - e ≤ -1
    where
     a := ↑x✝.toNat % ↑x✝¹.toNat
     b := ↑(x✝.toNat % x✝¹.toNat + (2 ^ 5 - x✝.toNat)) / 32
     c := ↑(x✝.toNat / x✝¹.toNat) * ↑((0 % 2 ^ 5 + (2 ^ 5 - x✝¹.toNat)) % 2 ^ 5)
     d := ↑(x✝.toNat / x✝¹.toNat * ((0 % 2 ^ 5 + (2 ^ 5 - x✝¹.toNat)) % 2 ^ 5)) / 32
     e := ↑x✝.toNat
     f := ↑x✝¹.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 255.516079 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0).neg
            ((AutoStructs.Term.var 1).sub (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 219.048359 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 28.474740 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 192.193919 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 1293.254415 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.321500 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    x✝¹ x✝ : BitVec 1
    ⊢ x✝ * x✝¹ = x✝ &&& x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 183.015039 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.463411 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 166.866089 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 121.121670 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ * x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& x✝¹
    case some.some
    x✝¹ x✝ : BitVec 1
    ⊢ x✝ * x✝¹ = x✝ &&& x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.880249 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.316140 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      0 ≤ b - 2*c ≤ 1
      0 ≤ a ≤ 1
      a - b + 2*c ≥ 1
    where
     a := ↑(x✝ &&& x✝¹).toNat
     b := ↑x✝.toNat * ↑x✝¹.toNat
     c := ↑(x✝.toNat * x✝¹.toNat) / 2 MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 183.785440 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 156.189869 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize PASS, TIME_ELAPSED 2.750160 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 2.518740 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 461.780217 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.278780 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      1#w <<< x✝ * x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ <<< x✝
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝ ≥ ↑w
    ⊢ 1#w <<< x✝ * x✝¹ = x✝¹ <<< x✝ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 135.380499 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.966870 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 83.612070 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 144.315219 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      1#w <<< x✝ * x✝¹
    is not definitionally equal to the right-hand side
      x✝¹ <<< x✝
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝ ≥ ↑w
    ⊢ 1#w <<< x✝ * x✝¹ = x✝¹ <<< x✝ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.406560 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.668470 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝.toNat
     c := ↑2 ^ w
     d := ↑(x✝¹.toNat * 2 ^ x✝.toNat) % ↑(2 ^ w)
     e := ↑(1 % 2 ^ w * 2 ^ x✝.toNat % 2 ^ w * x✝¹.toNat) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 92.082870 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 82.397279 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 15.341570 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 78.991419 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝),
     BitVec.ofBool (1#w <<< x✝ * x✝¹ == x✝¹ <<< x✝)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝) = 0x1#1
    BitVec.ofBool (1#w <<< x✝ * x✝¹ == x✝¹ <<< x✝) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 88.352301 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 11.503720 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ - x✝.srem x✝¹).sdiv x✝¹
    is not definitionally equal to the right-hand side
      x✝.sdiv x✝¹
    case some.some.isFalse.isFalse
    x✝¹ x✝ : BitVec 9
    h✝¹ : ¬(x✝¹ == 0 || 9 != 1 && x✝ == BitVec.intMin 9 && x✝¹ == -1) = true
    h✝ : ¬(x✝¹ == 0 || 9 != 1 && x✝ - x✝.srem x✝¹ == BitVec.intMin 9 && x✝¹ == -1) = true
    ⊢ (x✝ - x✝.srem x✝¹).sdiv x✝¹ = x✝.sdiv x✝¹ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 373.026639 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 19.563030 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 57.477709 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 141.208660 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ - x✝.srem x✝¹).sdiv x✝¹
    is not definitionally equal to the right-hand side
      x✝.sdiv x✝¹
    case some.some.isFalse.isFalse
    x✝¹ x✝ : BitVec 9
    h✝¹ : ¬(x✝¹ == 0 || 9 != 1 && x✝ == BitVec.intMin 9 && x✝¹ == -1) = true
    h✝ : ¬(x✝¹ == 0 || 9 != 1 && x✝ - x✝.srem x✝¹ == BitVec.intMin 9 && x✝¹ == -1) = true
    ⊢ (x✝ - x✝.srem x✝¹).sdiv x✝¹ = x✝.sdiv x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.560870 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 25.824040 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      a ≥ 0
      a - b ≥ 1
    where
     a := ↑(match Decidable.decide (2 ^ (9 - 1) ≤ x✝.toNat), Decidable.decide (2 ^ (9 - 1) ≤ x✝¹.toNat) with
      | false, false => (x✝.udiv x✝¹).toNat
      | false, true => (2 ^ 9 - (x✝.udiv (-x✝¹)).toNat) % 2 ^ 9
      | true, false => (2 ^ 9 - ((-x✝).udiv x✝¹).toNat) % 2 ^ 9
      | true, true => ((-x✝).udiv (-x✝¹)).toNat)
     b := ↑(match Decidable.decide (2 ^ (9 - 1) ≤ (x✝.toNat + (2 ^ 9 - (x✝.srem x✝¹).toNat)) % 2 ^ 9),
        Decidable.decide (2 ^ (9 - 1) ≤ x✝¹.toNat) with
      | false, false => ((x✝ - x✝.srem x✝¹).udiv x✝¹).toNat
      | false, true => (2 ^ 9 - ((x✝ - x✝.srem x✝¹).udiv (-x✝¹)).toNat) % 2 ^ 9
      | true, false => (2 ^ 9 - ((-(x✝ - x✝.srem x✝¹)).udiv x✝¹).toNat) % 2 ^ 9
      | true, true => ((-(x✝ - x✝.srem x✝¹)).udiv (-x✝¹)).toNat) MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 86.844649 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 48.898170 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 155.790300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 8403.838485 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 9351.720852 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/AliveStatements.lean:700:95: error: (deterministic) timeout at `whnf`, maximum number of heartbeats (200000) has been reached
Use `set_option maxHeartbeats <num>` to set the limit.
Additional diagnostic information may be available using the `set_option diagnostics true` command.
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 3.641349 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ - x✝ % x✝¹) / x✝¹
    is not definitionally equal to the right-hand side
      x✝ / x✝¹
    case some.some.isFalse
    x✝¹ x✝ : BitVec 9
    h✝ : ¬x✝¹ = 0
    ⊢ (x✝ - x✝ % x✝¹) / x✝¹ = x✝ / x✝¹ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 181.320150 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 11.533430 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 72.147749 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 149.059750 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ - x✝ % x✝¹) / x✝¹
    is not definitionally equal to the right-hand side
      x✝ / x✝¹
    case some.some.isFalse
    x✝¹ x✝ : BitVec 9
    h✝ : ¬x✝¹ = 0
    ⊢ (x✝ - x✝ % x✝¹) / x✝¹ = x✝ / x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.264110 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 10.281810 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      1 ≤ c ≤ 511
      a - b ≥ 1
    where
     a := ↑x✝.toNat / ↑x✝¹.toNat
     b := ↑((x✝.toNat + (2 ^ 9 - x✝.toNat % x✝¹.toNat)) % 2 ^ 9) / ↑x✝¹.toNat
     c := ↑x✝¹.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 94.445139 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1)) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 68.184470 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 24.012910 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 1844.144912 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 2590.743180 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 8.624650 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝.sdiv (-1#w)
    is not definitionally equal to the right-hand side
      0#w - x✝
    case some.isFalse
    w : ℕ
    x✝ : BitVec w
    h✝ : ¬(-1#w == 0 || w != 1 && x✝ == BitVec.intMin w && -1#w == -1) = true
    ⊢ x✝.sdiv (-1#w) = 0#w - x✝ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.346760 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 18.702090 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 65.913660 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 186.566689 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝.sdiv (-1#w)
    is not definitionally equal to the right-hand side
      0#w - x✝
    case some.isFalse
    w : ℕ
    x✝ : BitVec w
    h✝ : ¬(-1#w == 0 || w != 1 && x✝ == BitVec.intMin w && -1#w == -1) = true
    ⊢ x✝.sdiv (-1#w) = 0#w - x✝ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.257150 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 20.212000 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      b ≥ 0
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(0 % 2 ^ w + (2 ^ w - x✝.toNat)) % ↑(2 ^ w)
     b := ↑(match Decidable.decide (2 ^ (w - 1) ≤ x✝.toNat),
        Decidable.decide (2 ^ (w - 1) ≤ (2 ^ w - 1 % 2 ^ w) % 2 ^ w) with
      | false, false => (x✝.udiv (-1#w)).toNat
      | false, true => (2 ^ w - (x✝.udiv (- -1#w)).toNat) % 2 ^ w
      | true, false => (2 ^ w - ((-x✝).udiv (-1#w)).toNat) % 2 ^ w
      | true, true => ((-x✝).udiv (- -1#w)).toNat)
     c := ↑2 ^ w MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 87.613369 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0) (AutoStructs.Term.var 1).neg) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 60.553770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 41.834530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 112.308599 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (-1#w == 0#w),
     BitVec.ofBool
       ((if x✝.getLsbD (w - 1) = true then if (-1#w).getLsbD (w - 1) = true then -x✝ / - -1#w else -(-x✝ / -1#w)
         else if (-1#w).getLsbD (w - 1) = true then -(x✝ / - -1#w) else x✝ / -1#w) ==
         -x✝),
     BitVec.ofBool (w != 1),
     BitVec.ofBool (x✝ == BitVec.intMin w)]
    Consider the following assignment:
    BitVec.ofBool
      ((if x✝.getLsbD (w - 1) = true then if (-1#w).getLsbD (w - 1) = true then -x✝ / - -1#w else -(-x✝ / -1#w)
        else if (-1#w).getLsbD (w - 1) = true then -(x✝ / - -1#w) else x✝ / -1#w) ==
        -x✝) = 0x0#1
    BitVec.ofBool (-1#w == 0#w) = 0x0#1
    BitVec.ofBool (w != 1) = 0x0#1
    BitVec.ofBool (x✝ == BitVec.intMin w) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 86.734520 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 0.737220 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      some (1#1 ^^^ -1#1)
    is not definitionally equal to the right-hand side
      none
    case none.some.h_1
    c✝ : BitVec 1
    ⊢ some (1#1 ^^^ -1#1) ⊑ none MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.389640 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (1#1 ^^^ -1#1) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 10.869010 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 50.155550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 153.910719 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      some (1#1 ^^^ -1#1)
    is not definitionally equal to the right-hand side
      none
    case none.some.h_1
    c✝ : BitVec 1
    ⊢ some (1#1 ^^^ -1#1) ⊑ none MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.039430 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.208720 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 57.956590 ms, MSGSTART 
    Unsupported syntax some 0#1 ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 0)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 0)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 48.371770 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 3.383400 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 3.261830 ms, MSGSTART 
    None of the hypotheses are in the supported BitVec fragment.
    There are two potential fixes for this:
    1. If you are using custom BitVec constructs simplify them to built-in ones.
    2. If your problem is using only built-in ones it might currently be out of reach.
       Consider expressing it in terms of different operations that are better supported. MSGEND
  TACBENCH bv_auto FAIL, TIME_ELAPSED 303.992228 ms, MSGSTART 
    internal exception #4 MSGEND
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.479220 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      1#1 ^^^ -1#1
    is not definitionally equal to the right-hand side
      (1#1 ^^^ -1#1) &&& x✝
    case some.some.h_1
    x✝ c✝ : BitVec 1
    ⊢ 1#1 ^^^ -1#1 = (1#1 ^^^ -1#1) &&& x✝ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 118.667420 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 15.362300 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 74.921509 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 160.165930 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      1#1 ^^^ -1#1
    is not definitionally equal to the right-hand side
      (1#1 ^^^ -1#1) &&& x✝
    case some.some.h_1
    x✝ c✝ : BitVec 1
    ⊢ 1#1 ^^^ -1#1 = (1#1 ^^^ -1#1) &&& x✝ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.690630 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.065870 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑((1#1 ^^^ -1#1) &&& x✝).toNat
     b := ↑(1#1 ^^^ -1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 83.838849 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 73.673580 ms, 
  TACBENCH bv_normalize PASS, TIME_ELAPSED 4.177500 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 3.746930 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 78.728920 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 1.355040 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝
    is not definitionally equal to the right-hand side
      (0#1 ^^^ -1#1) &&& x✝
    case some.some.h_2
    x✝ c✝ : BitVec 1
    ⊢ x✝ = (0#1 ^^^ -1#1) &&& x✝ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 202.725630 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 13.280690 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 85.249649 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 155.024730 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝
    is not definitionally equal to the right-hand side
      (0#1 ^^^ -1#1) &&& x✝
    case some.some.h_2
    x✝ c✝ : BitVec 1
    ⊢ x✝ = (0#1 ^^^ -1#1) &&& x✝ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.781670 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.083229 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑((0#1 ^^^ -1#1) &&& x✝).toNat
     b := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 103.064590 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            (AutoStructs.Term.one.and (AutoStructs.Term.var 0))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 80.123890 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize PASS, TIME_ELAPSED 4.049510 ms, 
  TACBENCH bv_decide PASS, TIME_ELAPSED 3.707550 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 341.755878 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/AliveStatements.lean:723:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 0.714590 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      some (0#1 ^^^ -1#1)
    is not definitionally equal to the right-hand side
      none
    case none.some.h_2
    c✝ : BitVec 1
    ⊢ some (0#1 ^^^ -1#1) ⊑ none MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 0.408540 ms, MSGSTART 
    applyExtTheorem only applies to equations, not
      some (0#1 ^^^ -1#1) ⊑ none MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 10.678180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 58.417470 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 150.946679 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      some (0#1 ^^^ -1#1)
    is not definitionally equal to the right-hand side
      none
    case none.some.h_2
    c✝ : BitVec 1
    ⊢ some (0#1 ^^^ -1#1) ⊑ none MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 10.247310 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.270150 ms, MSGSTART 
    omega could not prove the goal:
    No usable constraints found. You may need to unfold definitions so `omega` can see linear arithmetic facts about `Nat` and `Int`, which may also involve multiplication, division, and modular remainder by constants. MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 66.651940 ms, MSGSTART 
    Unsupported syntax some 1#1 ⊑ none === Lean.Expr.app
      (Lean.Expr.app
        (Lean.Expr.app
          (Lean.Expr.const `BitVec.Refinement [Lean.Level.zero])
          (Lean.Expr.app
            (Lean.Expr.const `BitVec [])
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
        (Lean.Expr.app
          (Lean.Expr.app
            (Lean.Expr.const `Option.some [Lean.Level.zero])
            (Lean.Expr.app
              (Lean.Expr.const `BitVec [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1))))))
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.const `BitVec.ofNat [])
              (Lean.Expr.app
                (Lean.Expr.app
                  (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                  (Lean.Expr.lit (Lean.Literal.natVal 1)))
                (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))
            (Lean.Expr.app
              (Lean.Expr.app
                (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
                (Lean.Expr.lit (Lean.Literal.natVal 1)))
              (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))))
      (Lean.Expr.app
        (Lean.Expr.const `Option.none [Lean.Level.zero])
        (Lean.Expr.app
          (Lean.Expr.const `BitVec [])
          (Lean.Expr.app
            (Lean.Expr.app
              (Lean.Expr.app (Lean.Expr.const `OfNat.ofNat [Lean.Level.zero]) (Lean.Expr.const `Nat []))
              (Lean.Expr.lit (Lean.Literal.natVal 1)))
            (Lean.Expr.app (Lean.Expr.const `instOfNatNat []) (Lean.Expr.lit (Lean.Literal.natVal 1)))))) MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 56.964940 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 3.445780 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 3.303830 ms, MSGSTART 
    None of the hypotheses are in the supported BitVec fragment.
    There are two potential fixes for this:
    1. If you are using custom BitVec constructs simplify them to built-in ones.
    2. If your problem is using only built-in ones it might currently be out of reach.
       Consider expressing it in terms of different operations that are better supported. MSGEND
  TACBENCH bv_auto FAIL, TIME_ELAPSED 320.276308 ms, MSGSTART 
    internal exception #4 MSGEND
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 1.174910 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝
    is not definitionally equal to the right-hand side
      1#1 ^^^ -1#1 ||| x✝
    case some.some.h_1
    x✝ c✝ : BitVec 1
    ⊢ x✝ = 1#1 ^^^ -1#1 ||| x✝ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 137.553060 ms, 
  TACBENCH bv_ac PASS, TIME_ELAPSED 13.636010 ms, 
  TACBENCH bv_distrib PASS, TIME_ELAPSED 75.278680 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 158.871279 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝
    is not definitionally equal to the right-hand side
      1#1 ^^^ -1#1 ||| x✝
    case some.some.h_1
    x✝ c✝ : BitVec 1
    ⊢ x✝ = 1#1 ^^^ -1#1 ||| x✝ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.759880 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 2.993840 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(1#1 ^^^ -1#1 ||| x✝).toNat
     b := ↑x✝.toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 83.682040 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 73.808729 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.276070 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 81.872130 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 79.823600 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.890150 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      0#1 ^^^ -1#1
    is not definitionally equal to the right-hand side
      0#1 ^^^ -1#1 ||| x✝
    case some.some.h_2
    x✝ c✝ : BitVec 1
    ⊢ 0#1 ^^^ -1#1 = 0#1 ^^^ -1#1 ||| x✝ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 193.709530 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.560189 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 86.155190 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 157.178419 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      0#1 ^^^ -1#1
    is not definitionally equal to the right-hand side
      0#1 ^^^ -1#1 ||| x✝
    case some.some.h_2
    x✝ c✝ : BitVec 1
    ⊢ 0#1 ^^^ -1#1 = 0#1 ^^^ -1#1 ||| x✝ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.925700 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 3.139540 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      0 ≤ b ≤ 1
      0 ≤ a ≤ 1
      a - b ≥ 1
    where
     a := ↑(0#1 ^^^ -1#1 ||| x✝).toNat
     b := ↑(0#1 ^^^ -1#1).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 103.550830 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq AutoStructs.Term.one
            (AutoStructs.Term.one.or (AutoStructs.Term.var 0))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 80.162020 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 10.568550 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide PASS, TIME_ELAPSED 81.757259 ms, 
  TACBENCH bv_auto PASS, TIME_ELAPSED 335.303829 ms, 
TACEND
/home/luisacicolini/lean-mlir/SSA/Projects/InstCombine/AliveStatements.lean:732:8: warning: declaration uses 'sorry'
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.003640 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ <<< x✝¹ >>> x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (-1#w) >>> x✝¹
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ x✝ <<< x✝¹ >>> x✝¹ = x✝ &&& (-1#w) >>> x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 392.665118 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.980110 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 115.585619 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 161.573890 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ <<< x✝¹ >>> x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (-1#w) >>> x✝¹
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ x✝ <<< x✝¹ >>> x✝¹ = x✝ &&& (-1#w) >>> x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.645010 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.651270 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝ &&& (-1#w) >>> x✝¹).toNat
     e := ↑(x✝ <<< x✝¹ >>> x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 143.949919 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 108.485250 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 16.828180 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 86.329829 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹),
     BitVec.ofBool (x✝ <<< x✝¹ >>> x✝¹ == x✝ &&& (-1#w) >>> x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool (x✝ <<< x✝¹ >>> x✝¹ == x✝ &&& (-1#w) >>> x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 572.182158 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.412370 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ >>> x✝¹ <<< x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (-1#w) <<< x✝¹
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ x✝ >>> x✝¹ <<< x✝¹ = x✝ &&& (-1#w) <<< x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 240.552349 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.246960 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 171.324240 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 162.597889 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ >>> x✝¹ <<< x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (-1#w) <<< x✝¹
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ x✝ >>> x✝¹ <<< x✝¹ = x✝ &&& (-1#w) <<< x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.676630 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 6.822400 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝ &&& (-1#w) <<< x✝¹).toNat
     e := ↑((x✝ >>> x✝¹).toNat * 2 ^ x✝¹.toNat) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 198.980249 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq ((AutoStructs.Term.var 0).and (AutoStructs.Term.var 1))
            ((AutoStructs.Term.var 0).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 156.121589 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 16.850530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 86.438840 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹),
     BitVec.ofBool (x✝ >>> x✝¹ <<< x✝¹ == x✝ &&& (-1#w) <<< x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool (x✝ >>> x✝¹ <<< x✝¹ == x✝ &&& (-1#w) <<< x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 170.823789 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.382250 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²
    is not definitionally equal to the right-hand side
      x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝²
    case some.some.some.some.isFalse
    w : ℕ
    x✝³ x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬x✝² ≥ ↑w
    ⊢ (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝² = x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝² MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 499.025748 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.375340 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 481.900528 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 117.648889 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝²
    is not definitionally equal to the right-hand side
      x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝²
    case some.some.some.some.isFalse
    w : ℕ
    x✝³ x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬x✝² ≥ ↑w
    ⊢ (x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝² = x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝² MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 13.988670 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.350390 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝².toNat
     c := ↑2 ^ w
     d := ↑(x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝²).toNat
     e := ↑((x✝ ^^^ x✝¹ >>> x✝² &&& x✝³).toNat * 2 ^ x✝².toNat) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 220.281639 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).xor (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 177.595479 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 19.058280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 88.534710 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝²),
     BitVec.ofBool ((x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝² == x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝²)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝²) = 0x1#1
    BitVec.ofBool ((x✝ ^^^ x✝¹ >>> x✝² &&& x✝³) <<< x✝² == x✝¹ &&& x✝³ <<< x✝² ^^^ x✝ <<< x✝²) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 1055.244786 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.459090 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹
    case some.some.some.some.isFalse
    w : ℕ
    x✝³ x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹ = x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹ MSGEND
  TACBENCH bv_bitwise FAIL, TIME_ELAPSED 496.517028 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ac FAIL, TIME_ELAPSED 24.488220 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 472.838588 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 118.205560 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹
    case some.some.some.some.isFalse
    w : ℕ
    x✝³ x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ (x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹ = x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 14.065800 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 7.349030 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹).toNat
     e := ↑((x✝ >>> x✝¹ &&& x✝² ||| x✝³).toNat * 2 ^ x✝¹.toNat) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 220.098569 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            (((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2)).or (AutoStructs.Term.var 3))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 177.452159 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 18.985130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 88.733560 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹ == x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹),
     BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool ((x✝ >>> x✝¹ &&& x✝² ||| x✝³) <<< x✝¹ == x✝ &&& x✝² <<< x✝¹ ||| x✝³ <<< x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 1043.897566 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.115050 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) >>> x✝²
    is not definitionally equal to the right-hand side
      x✝ >>> x✝² ^^^ x✝¹ >>> x✝²
    case some.some.some.isFalse
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬x✝² ≥ ↑w
    ⊢ (x✝ ^^^ x✝¹) >>> x✝² = x✝ >>> x✝² ^^^ x✝¹ >>> x✝² MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 212.198089 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 14.646700 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 115.593151 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 107.322429 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ ^^^ x✝¹) >>> x✝²
    is not definitionally equal to the right-hand side
      x✝ >>> x✝² ^^^ x✝¹ >>> x✝²
    case some.some.some.isFalse
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬x✝² ≥ ↑w
    ⊢ (x✝ ^^^ x✝¹) >>> x✝² = x✝ >>> x✝² ^^^ x✝¹ >>> x✝² MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.001570 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.346950 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝².toNat
     c := ↑2 ^ w
     d := ↑(x✝ >>> x✝² ^^^ x✝¹ >>> x✝²).toNat
     e := ↑((x✝ ^^^ x✝¹) >>> x✝²).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 141.272509 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).xor (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 106.904280 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 15.935270 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 85.422779 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool
       ((x✝ ^^^ x✝¹) >>> x✝² == x✝ >>> x✝² ^^^ x✝¹ >>> x✝²),
     BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝²)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝²) = 0x1#1
    BitVec.ofBool ((x✝ ^^^ x✝¹) >>> x✝² == x✝ >>> x✝² ^^^ x✝¹ >>> x✝²) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 388.883249 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 4.658040 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ + x✝¹) <<< x✝²
    is not definitionally equal to the right-hand side
      x✝ <<< x✝² + x✝¹ <<< x✝²
    case some.some.some.isFalse
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬x✝² ≥ ↑w
    ⊢ (x✝ + x✝¹) <<< x✝² = x✝ <<< x✝² + x✝¹ <<< x✝² MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 189.287919 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 16.729310 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib PASS, TIME_ELAPSED 151.615019 ms, 
  TACBENCH bv_ring FAIL, TIME_ELAPSED 147.473910 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      (x✝ + x✝¹) <<< x✝²
    is not definitionally equal to the right-hand side
      x✝ <<< x✝² + x✝¹ <<< x✝²
    case some.some.some.isFalse
    w : ℕ
    x✝² x✝¹ x✝ : BitVec w
    h✝ : ¬x✝² ≥ ↑w
    ⊢ (x✝ + x✝¹) <<< x✝² = x✝ <<< x✝² + x✝¹ <<< x✝² MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 11.854100 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 8.606930 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝².toNat
     c := ↑2 ^ w
     d := ↑(x✝.toNat * 2 ^ x✝².toNat % 2 ^ w + x✝¹.toNat * 2 ^ x✝².toNat % 2 ^ w) % ↑(2 ^ w)
     e := ↑((x✝.toNat + x✝¹.toNat) % 2 ^ w * 2 ^ x✝².toNat) % ↑(2 ^ w) MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 160.082989 ms, MSGSTART 
    no goals to be solved MSGEND
  TACBENCH simp PASS, TIME_ELAPSED 148.905999 ms, 
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 17.134790 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 86.734450 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝²),
     BitVec.ofBool ((x✝ + x✝¹) <<< x✝² == x✝ <<< x✝² + x✝¹ <<< x✝²)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝²) = 0x1#1
    BitVec.ofBool ((x✝ + x✝¹) <<< x✝² == x✝ <<< x✝² + x✝¹ <<< x✝²) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 154.572349 ms, 
TACEND
TACSTART
  TACBENCH rfl FAIL, TIME_ELAPSED 2.006430 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ <<< x✝¹ >>> x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (-1#w) >>> x✝¹
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ x✝ <<< x✝¹ >>> x✝¹ = x✝ &&& (-1#w) >>> x✝¹ MSGEND
  TACBENCH bv_bitwise PASS, TIME_ELAPSED 394.155588 ms, 
  TACBENCH bv_ac FAIL, TIME_ELAPSED 13.987530 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_distrib FAIL, TIME_ELAPSED 116.445130 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_ring FAIL, TIME_ELAPSED 162.274509 ms, MSGSTART 
    tactic 'rfl' failed, the left-hand side
      x✝ <<< x✝¹ >>> x✝¹
    is not definitionally equal to the right-hand side
      x✝ &&& (-1#w) >>> x✝¹
    case some.some.isFalse
    w : ℕ
    x✝¹ x✝ : BitVec w
    h✝ : ¬x✝¹ ≥ ↑w
    ⊢ x✝ <<< x✝¹ >>> x✝¹ = x✝ &&& (-1#w) >>> x✝¹ MSGEND
  TACBENCH bv_of_bool FAIL, TIME_ELAPSED 12.773610 ms, MSGSTART 
    simp made no progress MSGEND
  TACBENCH bv_omega FAIL, TIME_ELAPSED 4.704110 ms, MSGSTART 
    omega could not prove the goal:
    a possible counterexample may satisfy the constraints
      e ≥ 0
      d ≥ 0
      d - e ≥ 1
      c - d ≥ 1
      c - e ≥ 1
      b ≥ 0
      b - c ≤ -1
      a ≥ 0
      a - b ≥ 1
      a - c ≤ -1
    where
     a := ↑(↑w).toNat
     b := ↑x✝¹.toNat
     c := ↑2 ^ w
     d := ↑(x✝ &&& (-1#w) >>> x✝¹).toNat
     e := ↑(x✝ <<< x✝¹ >>> x✝¹).toNat MSGEND
  TACBENCH bv_automata_classic FAIL, TIME_ELAPSED 145.132579 ms, MSGSTART 
    tactic 'native_decide' evaluated that the proposition
      formulaIsUniversal
          (AutoStructs.Formula.atom AutoStructs.Relation.eq (AutoStructs.Term.var 0)
            ((AutoStructs.Term.var 1).and (AutoStructs.Term.var 2))) =
        true
    is false MSGEND
  TACBENCH simp FAIL, TIME_ELAPSED 108.603870 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_normalize FAIL, TIME_ELAPSED 16.849830 ms, MSGSTART 
    internal exception #4 MSGEND
  TACBENCH bv_decide FAIL, TIME_ELAPSED 86.375120 ms, MSGSTART 
    The prover found a potentially spurious counterexample:
    - It abstracted the following unsupported expressions as opaque variables: [BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹),
     BitVec.ofBool (x✝ <<< x✝¹ >>> x✝¹ == x✝ &&& (-1#w) >>> x✝¹)]
    Consider the following assignment:
    BitVec.ofBool (BitVec.ofNat w w >ᵤ x✝¹) = 0x1#1
    BitVec.ofBool (x✝ <<< x✝¹ >>> x✝¹ == x✝ &&& (-1#w) >>> x✝¹) = 0x0#1
     MSGEND
  TACBENCH bv_auto PASS, TIME_ELAPSED 565.456757 ms, 
TACEND
