SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:16:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:21:2: error: no goals to be solved
Bitwuzla provided a counter example after 70.996756ms, solving context: 1.000000ms
LeanSAT provided a counter example after 86.342755ms: rewriting 26.209961 SAT solving 59.570995ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:26:24: error: unsolved goals
case h
x y : BitVec 4
h : AdditionNoOverflows? x y
a✝ : (x ||| y >ᵤ x + y) = true
⊢ False
Bitwuzla provided a counter example after 70.737007ms, solving context: 0.000000ms
LeanSAT provided a counter example after 77.347632ms: rewriting 17.066175 SAT solving 59.699348ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:31:26: error: unsolved goals
case h
x y : BitVec 4
h : ¬AdditionNoOverflows? x y
a✝ : (!x ||| y >ᵤ x + y) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:38:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:43:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:48:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:53:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:58:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:63:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:68:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:73:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:78:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:83:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:88:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:93:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:98:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:103:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:108:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:113:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:118:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:123:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:128:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:133:2: error: no goals to be solved
Bitwuzla provided a counter example after 97.388020ms, solving context: 0.000000ms
LeanSAT provided a counter example after 100.256701ms: rewriting 37.764113 SAT solving 61.702827ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:136:55: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ :
  (!((!x.getLsbD 3 == y.getLsbD 3) == (y >ᵤ x)) ==
        ((!(x + 2#4 ^ (w - 1)).getLsbD 3 == (2#4 ^ (w - 1) + y).getLsbD 3) ==
          (2#4 ^ (w - 1) + y >ᵤ x + 2#4 ^ (w - 1)))) =
    true
⊢ False
Bitwuzla provided a counter example after 102.814229ms, solving context: 2.000000ms
LeanSAT provided a counter example after 106.423899ms: rewriting 43.918197 SAT solving 61.511206ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:141:55: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ :
  (!(y >ᵤ x) ==
        !(!(x + (~~~(2#4 ^ (w - 1)) + 1#4)).getLsbD 3 == (~~~(2#4 ^ (w - 1)) + 1#4 + y).getLsbD 3) ==
            (~~~(2#4 ^ (w - 1)) + 1#4 + y >ᵤ x + (~~~(2#4 ^ (w - 1)) + 1#4))) =
    true
⊢ False
Bitwuzla provided a counter example after 86.663480ms, solving context: 0.000000ms
LeanSAT provided a counter example after 89.502948ms: rewriting 27.135417 SAT solving 61.596056ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:146:61: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ : (!(!(!x.getLsbD 3 == y.getLsbD 3) == (y >ᵤ x)) == (y + 2#4 ^ (w - 1) >ᵤ 2#4 ^ (w - 1) + x)) = true
⊢ False
Bitwuzla provided a counter example after 88.691679ms, solving context: 0.000000ms
LeanSAT provided a counter example after 96.089868ms: rewriting 33.494305 SAT solving 61.801866ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:151:57: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ : (!((!y.getLsbD 3 == x.getLsbD 3) == (x >ᵤ y)) == !x + 2#4 ^ (w - 1) >ᵤ 2#4 ^ (w - 1) + y) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:158:2: error: no goals to be solved
Bitwuzla provided a counter example after 83.886902ms, solving context: 0.000000ms
LeanSAT provided a counter example after 85.728456ms: rewriting 23.435305 SAT solving 61.800301ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:161:54: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ : (!(!(x == y && !BitVec.carry w x (~~~y + 1#4) false) && !(BitVec.carry w x (~~~y + 1#4) false && !x == y))) = true
⊢ False
Bitwuzla provided a counter example after 81.482724ms, solving context: 0.000000ms
LeanSAT provided a counter example after 87.761902ms: rewriting 25.235990 SAT solving 61.914397ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:166:50: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ : (!(!(!x == y && !BitVec.carry w x (~~~y) false) && !(BitVec.carry w x (~~~y) false && x == y))) = true
⊢ False
Bitwuzla provided a counter example after 91.704603ms, solving context: 0.000000ms
LeanSAT provided a counter example after 93.581295ms: rewriting 31.595764 SAT solving 61.520454ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:171:90: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ :
  (!((!x.getLsbD 3 == y.getLsbD 3) == (y >ᵤ x)) ==
        BitVec.carry w (x + 2#4 ^ (w - 1)) (~~~(2#4 ^ (w - 1) + y) + 1#4) false) =
    true
⊢ False
Bitwuzla provided a counter example after 87.523524ms, solving context: 0.000000ms
LeanSAT provided a counter example after 89.636000ms: rewriting 27.142190 SAT solving 61.981986ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:179:100: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ :
  (!((!x.getLsbD 3 == y.getLsbD 3) == (y >ᵤ x)) ==
        BitVec.carry w x (~~~y + 1#4) false ^^^ x.getMsbD (w - 1) ^^^ y.getMsbD (w - 1)) =
    true
⊢ False
Bitwuzla provided a counter example after 92.632293ms, solving context: 0.000000ms
LeanSAT provided a counter example after 94.370835ms: rewriting 31.538996 SAT solving 62.277663ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:184:87: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ :
  (!((!y.getLsbD 3 == x.getLsbD 3) == (x >ᵤ y)) ==
        BitVec.carry w (y + 2#4 ^ (w - 1)) (~~~(2#4 ^ (w - 1) + x) + 1#4) false) =
    true
⊢ False
Bitwuzla provided a counter example after 87.138738ms, solving context: 0.000000ms
LeanSAT provided a counter example after 90.552861ms: rewriting 29.109542 SAT solving 60.808190ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:189:101: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ :
  (!((!y.getLsbD 3 == x.getLsbD 3) == (x >ᵤ y)) ==
        BitVec.carry w y (~~~x + 1#4) false ^^^ x.getMsbD (w - 1) ^^^ y.getMsbD (w - 1)) =
    true
⊢ False
Bitwuzla provided a counter example after 77.059618ms, solving context: 0.000000ms
LeanSAT provided a counter example after 77.853395ms: rewriting 15.238897 SAT solving 62.131076ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:194:57: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ : (!(y >ᵤ x) == !BitVec.carry w x (~~~y + 1#4) false) = true
⊢ False
Bitwuzla provided a counter example after 77.364222ms, solving context: 1.000000ms
LeanSAT provided a counter example after 90.922259ms: rewriting 28.091962 SAT solving 62.236597ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:199:55: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ : (!(!x >ᵤ y) == BitVec.carry w y (~~~x + 1#4) false) = true
⊢ False
Bitwuzla provided a counter example after 81.384768ms, solving context: 1.000000ms
LeanSAT provided a counter example after 82.736621ms: rewriting 19.990595 SAT solving 62.284727ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:204:48: error: unsolved goals
case h
x : BitVec 4
w : ℕ
a✝ : (!(!(x == 0#4 && !BitVec.carry w (~~~x) (1#4) false) && !(BitVec.carry w (~~~x) (1#4) false && !x == 0#4))) = true
⊢ False
Bitwuzla provided a counter example after 81.985485ms, solving context: 0.000000ms
LeanSAT provided a counter example after 84.207104ms: rewriting 21.742059 SAT solving 62.016107ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:209:45: error: unsolved goals
case h
x : BitVec 4
w : ℕ
a✝ : (!(!(!x == 0#4 && !BitVec.carry w x (15#4) false) && !(BitVec.carry w x (15#4) false && x == 0#4))) = true
⊢ False
Bitwuzla provided a counter example after 78.413961ms, solving context: 0.000000ms
LeanSAT provided a counter example after 81.613441ms: rewriting 19.944577 SAT solving 61.197425ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:214:45: error: unsolved goals
case h
x : BitVec 4
w : ℕ
a✝ : (!(!x.getLsbD 3 == (0#4 >ᵤ x)) == BitVec.carry w x x false) = true
⊢ False
Bitwuzla provided a counter example after 104.177882ms, solving context: 1.000000ms
LeanSAT provided a counter example after 107.447372ms: rewriting 45.086030 SAT solving 61.915219ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:219:76: error: unsolved goals
case h
x : BitVec 4
w : ℕ
a✝ :
  (!(x.getLsbD 3 == !x == 0#4) == BitVec.carry w (2#4 ^ (w - 1)) (~~~(2#4 ^ (w - 1)) + 1#4 + (~~~x + 1#4)) false) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:226:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.002180] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (y >ᵤ ~~~x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (y >ᵤ ~~~x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:231:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.004629] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (x >ᵤ x + y) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (x >ᵤ x + y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:236:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.006591] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#4) ↔ (y ≥ᵤ ~~~x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#4) ↔ (!~~~x >ᵤ y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:241:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.007768] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#4) ↔ (x ≥ᵤ y + 1#4 + x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#4) ↔ (!y + 1#4 + x >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:246:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.006244] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#4) ↔ (y >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#4) ↔ (y >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:251:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.015215] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#4) ↔ (x - y >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#4) ↔ (x + (~~~y + 1#4) >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:256:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.003319] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (y ≥ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (!x >ᵤ y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:261:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.016941] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#4) ≥ᵤ x) = true)
      ⊢ False
  [Meta.appBuilder] [0.002116] ✅️ f: Eq.mp, xs: [congrArg
         (fun x_1 => ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ x_1 = true))
         (Eq.trans
           (congrArg (fun x_1 => x + x_1 ≥ᵤ x)
             (Eq.trans
               (Eq.trans (congrArg (fun x => x - 1#4) (BitVec.neg_eq_not_add y)) (BitVec.sub_toAdd (~~~y + 1#4) 1#4))
               (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.add_const_right' (~~~y) 1#4 15#4)
                 (BitVec.zero_add (~~~y)))))
           (BitVec.ule_eq_not_ult x (x + ~~~y))),
       a✝]
    [Meta.isDefEq] [0.001977] ✅️ ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
            (x + (-y - 1#4) ≥ᵤ x) =
              true) =?= ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#4) ≥ᵤ x) = true)
      [Meta.isDefEq] [0.001965] ✅️ ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
              (x + (-y - 1#4) ≥ᵤ x) =
                true) =?= ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#4) ≥ᵤ x) = true)
        [Meta.isDefEq.delta] [0.001948] ✅️ ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
                (x + (-y - 1#4) ≥ᵤ x) =
                  true) =?= ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#4) ≥ᵤ x) = true)
          [Meta.isDefEq] [0.001943] ✅️ HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
                (x + (-y - 1#4) ≥ᵤ x) =
                  true =?= HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#4) ≥ᵤ x) = true
            [Meta.isDefEq] [0.001928] ✅️ (x + (-y - 1#4) ≥ᵤ x) = true =?= (x + (-y - 1#4) ≥ᵤ x) = true
              [Meta.isDefEq] [0.001906] ✅️ x + (-y - 1#4) ≥ᵤ x =?= x + (-y - 1#4) ≥ᵤ x
                [Meta.isDefEq.delta] [0.001894] ✅️ x + (-y - 1#4) ≥ᵤ x =?= x + (-y - 1#4) ≥ᵤ x
                  [Meta.isDefEq] [0.001884] ✅️ x + (-y - 1#4) =?= x + (-y - 1#4)
                    [Meta.isDefEq] [0.001745] ✅️ instHAdd.1 x (-y - 1#4) =?= instHAdd.1 x (-y - 1#4)
                      [Meta.isDefEq] [0.001710] ✅️ Add.add x (-y - 1#4) =?= Add.add x (-y - 1#4)
                        [Meta.isDefEq] [0.001089] ✅️ Distrib.toAdd.1 x (-y - 1#4) =?= Distrib.toAdd.1 x (-y - 1#4)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (!x >ᵤ x + ~~~y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:272:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.010304] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y ↔
            ¬HackersDelight.Ch2Basics.first32Bits (x * y) = 0#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y ↔
            (!HackersDelight.Ch2Basics.first32Bits (x * y) == 0#32) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:277:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.010969] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y ↔
            ¬HackersDelight.Ch2Basics.first32Bits (x * y) = HackersDelight.Ch2Basics.last32Bits (x * y) >>> 31)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y ↔
            (!HackersDelight.Ch2Basics.first32Bits (x * y) == HackersDelight.Ch2Basics.last32Bits (x * y) >>> 31) =
              true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla provided a counter example after 78.007906ms, solving context: 0.000000ms
LeanSAT provided a counter example after 74.549160ms: rewriting 10.346484 SAT solving 62.867025ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:280:62: error: unsolved goals
case h
x y z : BitVec 4
h : y.toNat ≠ 0
a✝¹ : ¬UnsignedMultiplicationOverflows? x y
a✝ : (!x * y / z == x) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:287:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.012268] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y z : BitVec 4
      h : y.toNat ≠ 0
      a✝¹ : y < 0 ∧ x.toInt = -2 ^ 31 ∨ x * y / z ≠ x
      a✝ : ¬HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y z : BitVec 4
      h : y.toNat ≠ 0
      a✝¹ : ¬HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y
      a✝ : (0#4 >ᵤ y) = true ∧ x.toInt = -2147483648 ∨ (!x * y / z == x) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:299:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.003988] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(32 ≤ HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ↔
            ¬HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(32 ≤ HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ↔
            ¬HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:304:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.003886] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ≤ 30 ↔
            HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ≤ 30 ↔
            HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:311:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.009628] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 4
      a✝ : ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x y ↔ y = 0#4 ∨ x.toInt = -2147483648 ∧ y = 15#4)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 4
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x y ↔
            (y == 0#4) = true ∨ x.toInt = -2147483648 ∧ (y == 15#4) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:316:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.012948] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.setWidth 64 y) ↔
            ¬y = 0#32 ∧ x < BitVec.setWidth 64 y <<< 32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.zeroExtend 64 y) ↔
            (!y == 0#32 && BitVec.zeroExtend 64 y <<< 32 >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:321:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.012714] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y✝ : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.setWidth 64 y) ↔
            ¬y = 0#32 ∧ x >>> 32 < BitVec.setWidth 64 y)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y✝ : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.zeroExtend 64 y) ↔
            (!y == 0#32 && BitVec.zeroExtend 64 y >ᵤ x >>> 32) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla provided a counter example after 76.144181ms, solving context: 1.000000ms
LeanSAT provided a counter example after 84.022357ms: rewriting 20.401279 SAT solving 63.098964ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:342:60: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!signedMaxBitVec x y == y + signedDifferenceOrZero x y) = true
⊢ False
Bitwuzla provided a counter example after 82.355822ms, solving context: 0.000000ms
LeanSAT provided a counter example after 83.070942ms: rewriting 20.227912 SAT solving 62.294755ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:347:60: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!signedMinBitVec x y == x + (~~~signedDifferenceOrZero x y + 1#4)) = true
⊢ False
Bitwuzla provided a counter example after 76.576051ms, solving context: 0.000000ms
LeanSAT provided a counter example after 84.000095ms: rewriting 21.111739 SAT solving 62.297931ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:352:64: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!unsignedMaxBitVec x y == y + unsignedDifferenceOrZero x y) = true
⊢ False
Bitwuzla provided a counter example after 81.951980ms, solving context: 0.000000ms
LeanSAT provided a counter example after 85.151017ms: rewriting 21.488200 SAT solving 63.062275ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:357:64: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!unsignedMinBitVec x y == x + (~~~unsignedDifferenceOrZero x y + 1#4)) = true
⊢ False
Bitwuzla provided a counter example after 85.287474ms, solving context: 1.000000ms
LeanSAT provided a counter example after 94.725555ms: rewriting 30.060937 SAT solving 63.999462ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:365:61: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!signedDifferenceOrZero x y == x + (~~~y + 1#4) &&& leBitmask x y) = true
⊢ False
Bitwuzla provided a counter example after 76.849482ms, solving context: 0.000000ms
LeanSAT provided a counter example after 82.162767ms: rewriting 18.111257 SAT solving 63.512583ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:370:65: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!signedMaxBitVec x y == (x ^^^ y) &&& leBitmask x y ^^^ y) = true
⊢ False
Bitwuzla provided a counter example after 76.694559ms, solving context: 0.000000ms
LeanSAT provided a counter example after 82.506858ms: rewriting 18.228609 SAT solving 63.704997ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:375:65: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!signedMinBitVec x y == (x ^^^ y) &&& leBitmask y x ^^^ y) = true
⊢ False
Bitwuzla provided a counter example after 86.698525ms, solving context: 0.000000ms
LeanSAT provided a counter example after 88.964873ms: rewriting 24.755856 SAT solving 63.560343ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:383:73: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!unsignedDifferenceOrZero x y == x + (~~~y + 1#4) &&& ~~~carryBitmask x y) = true
⊢ False
Bitwuzla provided a counter example after 93.363654ms, solving context: 1.000000ms
LeanSAT provided a counter example after 95.846740ms: rewriting 31.119004 SAT solving 63.882040ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:388:66: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!unsignedMaxBitVec x y == x + (~~~(x + (~~~y + 1#4) &&& carryBitmask x y) + 1#4)) = true
⊢ False
Bitwuzla provided a counter example after 92.080293ms, solving context: 0.000000ms
LeanSAT provided a counter example after 94.998510ms: rewriting 30.110822 SAT solving 64.199810ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:393:66: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!unsignedMinBitVec x y == y + (~~~y + 1#4 + x &&& carryBitmask x y)) = true
⊢ False
Bitwuzla provided a counter example after 93.072766ms, solving context: 1.000000ms
LeanSAT provided a counter example after 97.297960ms: rewriting 30.315939 SAT solving 64.447498ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:401:87: error: unsolved goals
case h
x y d : BitVec 32
h : (d == x + (~~~y + 1#32)) = true
a✝ : (!signedDifferenceOrZero x y == d &&& (~~~d ^^^ ((x ^^^ y) &&& (d ^^^ x)) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 96.157696ms, solving context: 2.000000ms
LeanSAT provided a counter example after 105.744839ms: rewriting 38.866485 SAT solving 64.508683ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:406:97: error: unsolved goals
case h
x y d : BitVec 32
h : (d == x + (~~~y + 1#32)) = true
a✝ : (!unsignedDifferenceOrZero x y == d &&& ~~~((~~~x &&& y ||| ~~~(x ^^^ y) &&& d) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 88.602499ms, solving context: 1.000000ms
LeanSAT provided a counter example after 94.278250ms: rewriting 28.488339 SAT solving 63.809844ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:411:69: error: unsolved goals
case h
x y : BitVec 32
a✝ : (!signedDifferenceOrZero x y == x + (~~~y + 1#32) &&& ~~~((x + (~~~y + 1#32)) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 95.426898ms, solving context: 1.000000ms
LeanSAT provided a counter example after 101.033779ms: rewriting 33.977920 SAT solving 64.518782ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:416:64: error: unsolved goals
case h
x y : BitVec 32
a✝ : (!signedMaxBitVec x y == x + (~~~(x + (~~~y + 1#32) &&& (x + (~~~y + 1#32)) >>> 31) + 1#32)) = true
⊢ False
Bitwuzla provided a counter example after 93.180949ms, solving context: 1.000000ms
LeanSAT provided a counter example after 99.345864ms: rewriting 32.317066 SAT solving 64.746992ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:421:64: error: unsolved goals
case h
x y : BitVec 32
a✝ : (!signedMinBitVec x y == y + (~~~y + 1#32 + x &&& (~~~y + 1#32 + x) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 99.576389ms, solving context: 1.000000ms
LeanSAT provided a counter example after 104.085916ms: rewriting 37.563384 SAT solving 64.852180ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:426:85: error: unsolved goals
case h
x y : BitVec 32
a✝ :
  (!(!(!(!y.getLsbD 31 == x.getLsbD 31) == (x >ᵤ y) &&
            (!(signedDifferenceOrZero x y).getLsbD 31 && !(~~~signedDifferenceOrZero x y + 1#32).getLsbD 31)) &&
        !(!(!(signedDifferenceOrZero x y).getLsbD 31 && !(~~~signedDifferenceOrZero x y + 1#32).getLsbD 31) &&
            (!y.getLsbD 31 == x.getLsbD 31) == (x >ᵤ y)))) =
    true
⊢ False
Bitwuzla provided a counter example after 89.312590ms, solving context: 1.000000ms
LeanSAT provided a counter example after 93.284877ms: rewriting 27.349531 SAT solving 64.364211ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:431:89: error: unsolved goals
case h
x y : BitVec 32
a✝ :
  (!(!((x >ᵤ y) &&
            (!(unsignedDifferenceOrZero x y).getLsbD 31 && !(~~~unsignedDifferenceOrZero x y + 1#32).getLsbD 31)) &&
        !(!(!(unsignedDifferenceOrZero x y).getLsbD 31 && !(~~~unsignedDifferenceOrZero x y + 1#32).getLsbD 31) &&
            !x >ᵤ y))) =
    true
⊢ False
Bitwuzla provided a counter example after 90.861754ms, solving context: 0.000000ms
LeanSAT provided a counter example after 97.793362ms: rewriting 32.066740 SAT solving 64.565340ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:436:116: error: unsolved goals
case h
x y : BitVec 32
w : ℕ
a✝ :
  (!(!(BitVec.carry w x y false &&
            (!(unsignedDifferenceOrZero x (~~~y)).getLsbD 31 &&
              !(~~~unsignedDifferenceOrZero x (~~~y) + 1#32).getLsbD 31)) &&
        !(!(!(unsignedDifferenceOrZero x (~~~y)).getLsbD 31 &&
                !(~~~unsignedDifferenceOrZero x (~~~y) + 1#32).getLsbD 31) &&
            !BitVec.carry w x y false))) =
    true
⊢ False
Bitwuzla provided a counter example after 101.816596ms, solving context: 1.000000ms
LeanSAT provided a counter example after 111.328317ms: rewriting 40.427299 SAT solving 64.515908ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:443:77: error: unsolved goals
case h
x y : BitVec 4
a✝ :
  (!(if (x + (~~~y + 1#4)).getLsbD 3 = true then ~~~(x + (~~~y + 1#4)) + 1#4 else x + (~~~y + 1#4)) ==
        signedDifferenceOrZero x y + signedDifferenceOrZero y x) =
    true
⊢ False
Bitwuzla provided a counter example after 102.175613ms, solving context: 1.000000ms
LeanSAT provided a counter example after 108.716176ms: rewriting 38.279657 SAT solving 64.262288ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:448:81: error: unsolved goals
case h
x y : BitVec 4
a✝ :
  (!(if (x + (~~~y + 1#4)).getLsbD 3 = true then ~~~(x + (~~~y + 1#4)) + 1#4 else x + (~~~y + 1#4)) ==
        unsignedDifferenceOrZero x y + unsignedDifferenceOrZero y x) =
    true
⊢ False
Bitwuzla provided a counter example after 74.931751ms, solving context: 0.000000ms
LeanSAT provided a counter example after 84.755501ms: rewriting 20.455751 SAT solving 63.768066ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:453:47: error: unsolved goals
case h
x y : BitVec 4
w : ℕ
a✝ : (!BitVec.carry w x y false == (x >ᵤ ~~~y)) = true
⊢ False
Bitwuzla provided a counter example after 74.525816ms, solving context: 1.000000ms
LeanSAT provided a counter example after 82.266244ms: rewriting 17.315355 SAT solving 64.528079ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:458:75: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!signedDifferenceOrZero (~~~x) (~~~y) == signedDifferenceOrZero x y) = true
⊢ False
Bitwuzla provided a counter example after 75.119547ms, solving context: 0.000000ms
LeanSAT provided a counter example after 74.634391ms: rewriting 9.935528 SAT solving 64.273156ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:463:79: error: unsolved goals
case h
x y : BitVec 4
a✝ : (!unsignedDifferenceOrZero (~~~x) (~~~y) == unsignedDifferenceOrZero x y) = true
⊢ False
