SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:16:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:21:2: error: no goals to be solved
Bitwuzla provided a counter example after 67.815801ms, solving context: 1.000000ms
LeanSAT provided a counter example after 78.006682ms: rewriting 22.530720 SAT solving 54.721610ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:26:24: error: unsolved goals
case h
x y : BitVec 8
h : AdditionNoOverflows? x y
a✝ : (x ||| y >ᵤ x + y) = true
⊢ False
Bitwuzla provided a counter example after 67.649427ms, solving context: 1.000000ms
LeanSAT provided a counter example after 74.419544ms: rewriting 19.724463 SAT solving 53.929866ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:31:26: error: unsolved goals
case h
x y : BitVec 8
h : ¬AdditionNoOverflows? x y
a✝ : (!x ||| y >ᵤ x + y) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:38:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:43:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:48:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:53:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:58:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:63:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:68:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:73:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:78:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:83:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:88:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:93:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:98:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:103:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:108:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:113:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:118:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:123:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:128:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:133:2: error: no goals to be solved
Bitwuzla provided a counter example after 96.626920ms, solving context: 1.000000ms
LeanSAT provided a counter example after 105.907535ms: rewriting 49.271926 SAT solving 55.490972ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:136:55: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!x.getLsbD 7 == y.getLsbD 7) == (y >ᵤ x)) ==
        ((!(x + 2#8 ^ (w - 1)).getLsbD 7 == (2#8 ^ (w - 1) + y).getLsbD 7) ==
          (2#8 ^ (w - 1) + y >ᵤ x + 2#8 ^ (w - 1)))) =
    true
⊢ False
Bitwuzla provided a counter example after 101.167892ms, solving context: 1.000000ms
LeanSAT provided a counter example after 105.950669ms: rewriting 48.827706 SAT solving 55.749440ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:141:55: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!(y >ᵤ x) ==
        !(!(x + (~~~(2#8 ^ (w - 1)) + 1#8)).getLsbD 7 == (~~~(2#8 ^ (w - 1)) + 1#8 + y).getLsbD 7) ==
            (~~~(2#8 ^ (w - 1)) + 1#8 + y >ᵤ x + (~~~(2#8 ^ (w - 1)) + 1#8))) =
    true
⊢ False
Bitwuzla provided a counter example after 84.750169ms, solving context: 1.000000ms
LeanSAT provided a counter example after 96.659795ms: rewriting 40.098432 SAT solving 55.433132ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:146:61: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(!(!x.getLsbD 7 == y.getLsbD 7) == (y >ᵤ x)) == (y + 2#8 ^ (w - 1) >ᵤ 2#8 ^ (w - 1) + x)) = true
⊢ False
Bitwuzla provided a counter example after 86.157595ms, solving context: 2.000000ms
LeanSAT provided a counter example after 98.026925ms: rewriting 39.789399 SAT solving 57.116869ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:151:57: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!((!y.getLsbD 7 == x.getLsbD 7) == (x >ᵤ y)) == !x + 2#8 ^ (w - 1) >ᵤ 2#8 ^ (w - 1) + y) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:158:2: error: no goals to be solved
Bitwuzla provided a counter example after 82.319392ms, solving context: 1.000000ms
LeanSAT provided a counter example after 92.801313ms: rewriting 34.952822 SAT solving 57.327758ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:161:54: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(!(x == y && !BitVec.carry w x (~~~y + 1#8) false) && !(BitVec.carry w x (~~~y + 1#8) false && !x == y))) = true
⊢ False
Bitwuzla provided a counter example after 85.572261ms, solving context: 0.000000ms
LeanSAT provided a counter example after 87.460193ms: rewriting 32.128102 SAT solving 54.761084ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:166:50: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(!(!x == y && !BitVec.carry w x (~~~y) false) && !(BitVec.carry w x (~~~y) false && x == y))) = true
⊢ False
Bitwuzla provided a counter example after 87.202037ms, solving context: 0.000000ms
LeanSAT provided a counter example after 96.857637ms: rewriting 41.713280 SAT solving 54.570064ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:171:90: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!x.getLsbD 7 == y.getLsbD 7) == (y >ᵤ x)) ==
        BitVec.carry w (x + 2#8 ^ (w - 1)) (~~~(2#8 ^ (w - 1) + y) + 1#8) false) =
    true
⊢ False
Bitwuzla provided a counter example after 84.989381ms, solving context: 0.000000ms
LeanSAT provided a counter example after 90.985767ms: rewriting 36.181230 SAT solving 54.189285ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:179:100: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!x.getLsbD 7 == y.getLsbD 7) == (y >ᵤ x)) ==
        BitVec.carry w x (~~~y + 1#8) false ^^^ x.getMsbD (w - 1) ^^^ y.getMsbD (w - 1)) =
    true
⊢ False
Bitwuzla provided a counter example after 89.464636ms, solving context: 0.000000ms
LeanSAT provided a counter example after 94.691688ms: rewriting 39.369958 SAT solving 54.669188ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:184:87: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!y.getLsbD 7 == x.getLsbD 7) == (x >ᵤ y)) ==
        BitVec.carry w (y + 2#8 ^ (w - 1)) (~~~(2#8 ^ (w - 1) + x) + 1#8) false) =
    true
⊢ False
Bitwuzla provided a counter example after 83.901717ms, solving context: 0.000000ms
LeanSAT provided a counter example after 89.365288ms: rewriting 31.881787 SAT solving 56.855427ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:189:101: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!y.getLsbD 7 == x.getLsbD 7) == (x >ᵤ y)) ==
        BitVec.carry w y (~~~x + 1#8) false ^^^ x.getMsbD (w - 1) ^^^ y.getMsbD (w - 1)) =
    true
⊢ False
Bitwuzla provided a counter example after 71.661077ms, solving context: 0.000000ms
LeanSAT provided a counter example after 77.539962ms: rewriting 20.912156 SAT solving 55.919310ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:194:57: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(y >ᵤ x) == !BitVec.carry w x (~~~y + 1#8) false) = true
⊢ False
Bitwuzla provided a counter example after 72.094345ms, solving context: 0.000000ms
LeanSAT provided a counter example after 75.841848ms: rewriting 20.096045 SAT solving 55.173051ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:199:55: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(!x >ᵤ y) == BitVec.carry w y (~~~x + 1#8) false) = true
⊢ False
Bitwuzla provided a counter example after 75.035575ms, solving context: 0.000000ms
LeanSAT provided a counter example after 85.323160ms: rewriting 29.153478 SAT solving 55.631477ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:204:48: error: unsolved goals
case h
x : BitVec 8
w : ℕ
a✝ : (!(!(x == 0#8 && !BitVec.carry w (~~~x) (1#8) false) && !(BitVec.carry w (~~~x) (1#8) false && !x == 0#8))) = true
⊢ False
Bitwuzla provided a counter example after 83.852735ms, solving context: 0.000000ms
LeanSAT provided a counter example after 87.841513ms: rewriting 31.337158 SAT solving 55.983701ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:209:45: error: unsolved goals
case h
x : BitVec 8
w : ℕ
a✝ : (!(!(!x == 0#8 && !BitVec.carry w x (255#8) false) && !(BitVec.carry w x (255#8) false && x == 0#8))) = true
⊢ False
Bitwuzla provided a counter example after 73.730340ms, solving context: 0.000000ms
LeanSAT provided a counter example after 83.205003ms: rewriting 26.342143 SAT solving 56.331779ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:214:45: error: unsolved goals
case h
x : BitVec 8
w : ℕ
a✝ : (!(!x.getLsbD 7 == (0#8 >ᵤ x)) == BitVec.carry w x x false) = true
⊢ False
Bitwuzla provided a counter example after 100.819284ms, solving context: 0.000000ms
LeanSAT provided a counter example after 104.475314ms: rewriting 49.319014 SAT solving 54.688597ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:219:76: error: unsolved goals
case h
x : BitVec 8
w : ℕ
a✝ :
  (!(x.getLsbD 7 == !x == 0#8) == BitVec.carry w (2#8 ^ (w - 1)) (~~~(2#8 ^ (w - 1)) + 1#8 + (~~~x + 1#8)) false) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:226:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.002403] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (y >ᵤ ~~~x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (y >ᵤ ~~~x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:231:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.005054] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (x >ᵤ x + y) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (x >ᵤ x + y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:236:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.007207] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#8) ↔ (y ≥ᵤ ~~~x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#8) ↔ (!~~~x >ᵤ y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:241:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.008540] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#8) ↔ (x ≥ᵤ y + 1#8 + x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#8) ↔ (!y + 1#8 + x >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:246:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.006902] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#8) ↔ (y >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#8) ↔ (y >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:251:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.016874] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#8) ↔ (x - y >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#8) ↔ (x + (~~~y + 1#8) >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:256:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.003735] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (y ≥ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (!x >ᵤ y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:261:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.018712] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true)
      ⊢ False
  [Meta.appBuilder] [0.002297] ✅️ f: Eq.mp, xs: [congrArg
         (fun x_1 => ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ x_1 = true))
         (Eq.trans
           (congrArg (fun x_1 => x + x_1 ≥ᵤ x)
             (Eq.trans
               (Eq.trans (congrArg (fun x => x - 1#8) (BitVec.neg_eq_not_add y)) (BitVec.sub_toAdd (~~~y + 1#8) 1#8))
               (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.add_const_right' (~~~y) 1#8 255#8)
                 (BitVec.zero_add (~~~y)))))
           (BitVec.ule_eq_not_ult x (x + ~~~y))),
       a✝]
    [Meta.isDefEq] [0.002161] ✅️ ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
            (x + (-y - 1#8) ≥ᵤ x) =
              true) =?= ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true)
      [Meta.isDefEq] [0.002150] ✅️ ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
              (x + (-y - 1#8) ≥ᵤ x) =
                true) =?= ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true)
        [Meta.isDefEq.delta] [0.002133] ✅️ ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
                (x + (-y - 1#8) ≥ᵤ x) =
                  true) =?= ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true)
          [Meta.isDefEq] [0.002128] ✅️ HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
                (x + (-y - 1#8) ≥ᵤ x) =
                  true =?= HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true
            [Meta.isDefEq] [0.002112] ✅️ (x + (-y - 1#8) ≥ᵤ x) = true =?= (x + (-y - 1#8) ≥ᵤ x) = true
              [Meta.isDefEq] [0.002090] ✅️ x + (-y - 1#8) ≥ᵤ x =?= x + (-y - 1#8) ≥ᵤ x
                [Meta.isDefEq.delta] [0.002077] ✅️ x + (-y - 1#8) ≥ᵤ x =?= x + (-y - 1#8) ≥ᵤ x
                  [Meta.isDefEq] [0.002066] ✅️ x + (-y - 1#8) =?= x + (-y - 1#8)
                    [Meta.isDefEq] [0.001916] ✅️ instHAdd.1 x (-y - 1#8) =?= instHAdd.1 x (-y - 1#8)
                      [Meta.isDefEq] [0.001877] ✅️ Add.add x (-y - 1#8) =?= Add.add x (-y - 1#8)
                        [Meta.isDefEq] [0.001190] ✅️ Distrib.toAdd.1 x (-y - 1#8) =?= Distrib.toAdd.1 x (-y - 1#8)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (!x >ᵤ x + ~~~y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:272:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.011264] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y ↔
            ¬HackersDelight.Ch2Basics.first32Bits (x * y) = 0#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y ↔
            (!HackersDelight.Ch2Basics.first32Bits (x * y) == 0#32) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:277:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.012126] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y ↔
            ¬HackersDelight.Ch2Basics.first32Bits (x * y) = HackersDelight.Ch2Basics.last32Bits (x * y) >>> 31)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y ↔
            (!HackersDelight.Ch2Basics.first32Bits (x * y) == HackersDelight.Ch2Basics.last32Bits (x * y) >>> 31) =
              true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla provided a counter example after 80.320529ms, solving context: 2.000000ms
LeanSAT provided a counter example after 77.995922ms: rewriting 18.565407 SAT solving 55.342250ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:280:62: error: unsolved goals
case h
x y z : BitVec 8
h : y.toNat ≠ 0
a✝¹ : ¬UnsignedMultiplicationOverflows? x y
a✝ : (!x * y / z == x) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:287:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.013425] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y z : BitVec 8
      h : y.toNat ≠ 0
      a✝¹ : y < 0 ∧ x.toInt = -2 ^ 31 ∨ x * y / z ≠ x
      a✝ : ¬HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y
      ⊢ False
  [Meta.appBuilder] [0.001050] ✅️ f: Eq.mp, xs: [congr
         (congrArg (fun x_1 => Or (x_1 ∧ x.toInt = -2147483648)) (Std.Tactic.BVDecide.Normalize.BitVec.lt_ult y 0#8))
         (Std.Tactic.BVDecide.Normalize.BitVec.ne_to_beq (x * y / z) x),
       a✝¹]
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y z : BitVec 8
      h : y.toNat ≠ 0
      a✝¹ : ¬HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y
      a✝ : (0#8 >ᵤ y) = true ∧ x.toInt = -2147483648 ∨ (!x * y / z == x) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:299:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.004411] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(32 ≤ HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ↔
            ¬HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(32 ≤ HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ↔
            ¬HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:304:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.004163] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ≤ 30 ↔
            HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ≤ 30 ↔
            HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:311:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.010614] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x y ↔ y = 0#8 ∨ x.toInt = -2147483648 ∧ y = 255#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x y ↔
            (y == 0#8) = true ∨ x.toInt = -2147483648 ∧ (y == 255#8) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:316:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.014932] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.setWidth 64 y) ↔
            ¬y = 0#32 ∧ x < BitVec.setWidth 64 y <<< 32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.zeroExtend 64 y) ↔
            (!y == 0#32 && BitVec.zeroExtend 64 y <<< 32 >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:321:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.014214] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y✝ : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.setWidth 64 y) ↔
            ¬y = 0#32 ∧ x >>> 32 < BitVec.setWidth 64 y)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y✝ : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.zeroExtend 64 y) ↔
            (!y == 0#32 && BitVec.zeroExtend 64 y >ᵤ x >>> 32) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla provided a counter example after 70.949514ms, solving context: 1.000000ms
LeanSAT provided a counter example after 78.750756ms: rewriting 23.279393 SAT solving 54.826467ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:342:60: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedMaxBitVec x y == y + signedDifferenceOrZero x y) = true
⊢ False
Bitwuzla provided a counter example after 78.252587ms, solving context: 1.000000ms
LeanSAT provided a counter example after 95.213595ms: rewriting 37.200975 SAT solving 57.169951ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:347:60: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedMinBitVec x y == x + (~~~signedDifferenceOrZero x y + 1#8)) = true
⊢ False
Bitwuzla provided a counter example after 70.384137ms, solving context: 0.000000ms
LeanSAT provided a counter example after 75.053459ms: rewriting 19.507775 SAT solving 54.850172ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:352:64: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedMaxBitVec x y == y + unsignedDifferenceOrZero x y) = true
⊢ False
Bitwuzla provided a counter example after 77.460192ms, solving context: 0.000000ms
LeanSAT provided a counter example after 85.121099ms: rewriting 27.664969 SAT solving 56.423001ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:357:64: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedMinBitVec x y == x + (~~~unsignedDifferenceOrZero x y + 1#8)) = true
⊢ False
Bitwuzla provided a counter example after 79.739511ms, solving context: 1.000000ms
LeanSAT provided a counter example after 90.050511ms: rewriting 32.875883 SAT solving 56.336878ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:365:61: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedDifferenceOrZero x y == x + (~~~y + 1#8) &&& leBitmask x y) = true
⊢ False
Bitwuzla provided a counter example after 70.576640ms, solving context: 1.000000ms
LeanSAT provided a counter example after 85.380438ms: rewriting 27.029870 SAT solving 57.660726ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:370:65: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedMaxBitVec x y == (x ^^^ y) &&& leBitmask x y ^^^ y) = true
⊢ False
Bitwuzla provided a counter example after 70.437058ms, solving context: 0.000000ms
LeanSAT provided a counter example after 84.108237ms: rewriting 27.072029 SAT solving 56.310728ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:375:65: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedMinBitVec x y == (x ^^^ y) &&& leBitmask y x ^^^ y) = true
⊢ False
Bitwuzla provided a counter example after 81.871826ms, solving context: 1.000000ms
LeanSAT provided a counter example after 96.517173ms: rewriting 38.103156 SAT solving 57.477249ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:383:73: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedDifferenceOrZero x y == x + (~~~y + 1#8) &&& ~~~carryBitmask x y) = true
⊢ False
Bitwuzla provided a counter example after 89.359617ms, solving context: 0.000000ms
LeanSAT provided a counter example after 92.932210ms: rewriting 36.246664 SAT solving 55.608713ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:388:66: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedMaxBitVec x y == x + (~~~(x + (~~~y + 1#8) &&& carryBitmask x y) + 1#8)) = true
⊢ False
Bitwuzla provided a counter example after 87.038898ms, solving context: 1.000000ms
LeanSAT provided a counter example after 90.289483ms: rewriting 33.128410 SAT solving 56.170403ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:393:66: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedMinBitVec x y == y + (~~~y + 1#8 + x &&& carryBitmask x y)) = true
⊢ False
Bitwuzla provided a counter example after 88.841690ms, solving context: 1.000000ms
LeanSAT provided a counter example after 92.652181ms: rewriting 33.316804 SAT solving 56.685455ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:401:87: error: unsolved goals
case h
x y d : BitVec 32
h : (d == x + (~~~y + 1#32)) = true
a✝ : (!signedDifferenceOrZero x y == d &&& (~~~d ^^^ ((x ^^^ y) &&& (d ^^^ x)) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 91.683483ms, solving context: 1.000000ms
LeanSAT provided a counter example after 102.715381ms: rewriting 43.507236 SAT solving 56.715602ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:406:97: error: unsolved goals
case h
x y d : BitVec 32
h : (d == x + (~~~y + 1#32)) = true
a✝ : (!unsignedDifferenceOrZero x y == d &&& ~~~((~~~x &&& y ||| ~~~(x ^^^ y) &&& d) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 83.248054ms, solving context: 1.000000ms
LeanSAT provided a counter example after 92.814434ms: rewriting 34.158742 SAT solving 56.562301ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:411:69: error: unsolved goals
case h
x y : BitVec 32
a✝ : (!signedDifferenceOrZero x y == x + (~~~y + 1#32) &&& ~~~((x + (~~~y + 1#32)) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 88.934274ms, solving context: 1.000000ms
LeanSAT provided a counter example after 93.990707ms: rewriting 34.271406 SAT solving 57.112611ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:416:64: error: unsolved goals
case h
x y : BitVec 32
a✝ : (!signedMaxBitVec x y == x + (~~~(x + (~~~y + 1#32) &&& (x + (~~~y + 1#32)) >>> 31) + 1#32)) = true
⊢ False
Bitwuzla provided a counter example after 88.500886ms, solving context: 3.000000ms
LeanSAT provided a counter example after 95.036581ms: rewriting 34.931031 SAT solving 57.719848ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:421:64: error: unsolved goals
case h
x y : BitVec 32
a✝ : (!signedMinBitVec x y == y + (~~~y + 1#32 + x &&& (~~~y + 1#32 + x) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 95.601346ms, solving context: 1.000000ms
LeanSAT provided a counter example after 101.552788ms: rewriting 43.758098 SAT solving 55.774607ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:426:85: error: unsolved goals
case h
x y : BitVec 32
a✝ :
  (!(!(!(!y.getLsbD 31 == x.getLsbD 31) == (x >ᵤ y) &&
            (!(signedDifferenceOrZero x y).getLsbD 31 && !(~~~signedDifferenceOrZero x y + 1#32).getLsbD 31)) &&
        !(!(!(signedDifferenceOrZero x y).getLsbD 31 && !(~~~signedDifferenceOrZero x y + 1#32).getLsbD 31) &&
            (!y.getLsbD 31 == x.getLsbD 31) == (x >ᵤ y)))) =
    true
⊢ False
Bitwuzla provided a counter example after 85.797455ms, solving context: 2.000000ms
LeanSAT provided a counter example after 89.628674ms: rewriting 30.103079 SAT solving 57.772587ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:431:89: error: unsolved goals
case h
x y : BitVec 32
a✝ :
  (!(!((x >ᵤ y) &&
            (!(unsignedDifferenceOrZero x y).getLsbD 31 && !(~~~unsignedDifferenceOrZero x y + 1#32).getLsbD 31)) &&
        !(!(!(unsignedDifferenceOrZero x y).getLsbD 31 && !(~~~unsignedDifferenceOrZero x y + 1#32).getLsbD 31) &&
            !x >ᵤ y))) =
    true
⊢ False
Bitwuzla provided a counter example after 87.265486ms, solving context: 0.000000ms
LeanSAT provided a counter example after 87.939648ms: rewriting 32.249922 SAT solving 54.672135ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:436:116: error: unsolved goals
case h
x y : BitVec 32
w : ℕ
a✝ :
  (!(!(BitVec.carry w x y false &&
            (!(unsignedDifferenceOrZero x (~~~y)).getLsbD 31 &&
              !(~~~unsignedDifferenceOrZero x (~~~y) + 1#32).getLsbD 31)) &&
        !(!(!(unsignedDifferenceOrZero x (~~~y)).getLsbD 31 &&
                !(~~~unsignedDifferenceOrZero x (~~~y) + 1#32).getLsbD 31) &&
            !BitVec.carry w x y false))) =
    true
⊢ False
Bitwuzla provided a counter example after 96.160910ms, solving context: 1.000000ms
LeanSAT provided a counter example after 107.014325ms: rewriting 44.791910 SAT solving 55.090045ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:443:77: error: unsolved goals
case h
x y : BitVec 8
a✝ :
  (!(if (x + (~~~y + 1#8)).getLsbD 7 = true then ~~~(x + (~~~y + 1#8)) + 1#8 else x + (~~~y + 1#8)) ==
        signedDifferenceOrZero x y + signedDifferenceOrZero y x) =
    true
⊢ False
Bitwuzla provided a counter example after 97.378670ms, solving context: 1.000000ms
LeanSAT provided a counter example after 104.468049ms: rewriting 40.981349 SAT solving 56.151417ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:448:81: error: unsolved goals
case h
x y : BitVec 8
a✝ :
  (!(if (x + (~~~y + 1#8)).getLsbD 7 = true then ~~~(x + (~~~y + 1#8)) + 1#8 else x + (~~~y + 1#8)) ==
        unsignedDifferenceOrZero x y + unsignedDifferenceOrZero y x) =
    true
⊢ False
Bitwuzla provided a counter example after 72.473590ms, solving context: 0.000000ms
LeanSAT provided a counter example after 80.719853ms: rewriting 23.781168 SAT solving 56.372665ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:453:47: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!BitVec.carry w x y false == (x >ᵤ ~~~y)) = true
⊢ False
Bitwuzla provided a counter example after 66.402452ms, solving context: 0.000000ms
LeanSAT provided a counter example after 80.582613ms: rewriting 22.834973 SAT solving 57.259118ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:458:75: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedDifferenceOrZero (~~~x) (~~~y) == signedDifferenceOrZero x y) = true
⊢ False
Bitwuzla provided a counter example after 68.011691ms, solving context: 1.000000ms
LeanSAT provided a counter example after 81.979590ms: rewriting 24.642965 SAT solving 56.873820ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:463:79: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedDifferenceOrZero (~~~x) (~~~y) == unsignedDifferenceOrZero x y) = true
⊢ False
