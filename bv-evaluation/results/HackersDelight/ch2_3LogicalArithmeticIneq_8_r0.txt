SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:16:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:21:2: error: no goals to be solved
Bitwuzla provided a counter example after 71.193328ms, solving context: 0.000000ms
LeanSAT provided a counter example after 74.532468ms: rewriting 13.649026 SAT solving 60.068504ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:26:24: error: unsolved goals
case h
x y : BitVec 8
h : AdditionNoOverflows? x y
a✝ : (x ||| y >ᵤ x + y) = true
⊢ False
Bitwuzla provided a counter example after 70.301574ms, solving context: 0.000000ms
LeanSAT provided a counter example after 77.746593ms: rewriting 16.576010 SAT solving 60.480321ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:31:26: error: unsolved goals
case h
x y : BitVec 8
h : ¬AdditionNoOverflows? x y
a✝ : (!x ||| y >ᵤ x + y) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:38:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:43:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:48:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:53:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:58:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:63:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:68:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:73:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:78:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:83:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:88:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:93:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:98:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:103:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:108:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:113:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:118:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:123:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:128:2: error: no goals to be solved
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:133:2: error: no goals to be solved
Bitwuzla provided a counter example after 97.465887ms, solving context: 1.000000ms
LeanSAT provided a counter example after 100.684810ms: rewriting 37.746150 SAT solving 61.727825ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:136:55: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!x.getLsbD 7 == y.getLsbD 7) == (y >ᵤ x)) ==
        ((!(x + 2#8 ^ (w - 1)).getLsbD 7 == (2#8 ^ (w - 1) + y).getLsbD 7) ==
          (2#8 ^ (w - 1) + y >ᵤ x + 2#8 ^ (w - 1)))) =
    true
⊢ False
Bitwuzla provided a counter example after 102.302103ms, solving context: 1.000000ms
LeanSAT provided a counter example after 106.949702ms: rewriting 43.973260 SAT solving 61.657653ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:141:55: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!(y >ᵤ x) ==
        !(!(x + (~~~(2#8 ^ (w - 1)) + 1#8)).getLsbD 7 == (~~~(2#8 ^ (w - 1)) + 1#8 + y).getLsbD 7) ==
            (~~~(2#8 ^ (w - 1)) + 1#8 + y >ᵤ x + (~~~(2#8 ^ (w - 1)) + 1#8))) =
    true
⊢ False
Bitwuzla provided a counter example after 87.177471ms, solving context: 0.000000ms
LeanSAT provided a counter example after 90.034523ms: rewriting 27.187385 SAT solving 61.843698ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:146:61: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(!(!x.getLsbD 7 == y.getLsbD 7) == (y >ᵤ x)) == (y + 2#8 ^ (w - 1) >ᵤ 2#8 ^ (w - 1) + x)) = true
⊢ False
Bitwuzla provided a counter example after 89.177635ms, solving context: 1.000000ms
LeanSAT provided a counter example after 92.255243ms: rewriting 29.917186 SAT solving 61.341947ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:151:57: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!((!y.getLsbD 7 == x.getLsbD 7) == (x >ᵤ y)) == !x + 2#8 ^ (w - 1) >ᵤ 2#8 ^ (w - 1) + y) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:158:2: error: no goals to be solved
Bitwuzla provided a counter example after 84.625084ms, solving context: 1.000000ms
LeanSAT provided a counter example after 91.051440ms: rewriting 28.300164 SAT solving 62.182984ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:161:54: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(!(x == y && !BitVec.carry w x (~~~y + 1#8) false) && !(BitVec.carry w x (~~~y + 1#8) false && !x == y))) = true
⊢ False
Bitwuzla provided a counter example after 82.297542ms, solving context: 0.000000ms
LeanSAT provided a counter example after 87.273331ms: rewriting 24.494894 SAT solving 62.234402ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:166:50: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(!(!x == y && !BitVec.carry w x (~~~y) false) && !(BitVec.carry w x (~~~y) false && x == y))) = true
⊢ False
Bitwuzla provided a counter example after 92.026061ms, solving context: 0.000000ms
LeanSAT provided a counter example after 94.371738ms: rewriting 31.601175 SAT solving 62.162847ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:171:90: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!x.getLsbD 7 == y.getLsbD 7) == (y >ᵤ x)) ==
        BitVec.carry w (x + 2#8 ^ (w - 1)) (~~~(2#8 ^ (w - 1) + y) + 1#8) false) =
    true
⊢ False
Bitwuzla provided a counter example after 87.701880ms, solving context: 0.000000ms
LeanSAT provided a counter example after 89.887245ms: rewriting 27.288105 SAT solving 62.004940ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:179:100: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!x.getLsbD 7 == y.getLsbD 7) == (y >ᵤ x)) ==
        BitVec.carry w x (~~~y + 1#8) false ^^^ x.getMsbD (w - 1) ^^^ y.getMsbD (w - 1)) =
    true
⊢ False
Bitwuzla provided a counter example after 92.034616ms, solving context: 0.000000ms
LeanSAT provided a counter example after 96.682989ms: rewriting 34.592378 SAT solving 61.444211ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:184:87: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!y.getLsbD 7 == x.getLsbD 7) == (x >ᵤ y)) ==
        BitVec.carry w (y + 2#8 ^ (w - 1)) (~~~(2#8 ^ (w - 1) + x) + 1#8) false) =
    true
⊢ False
Bitwuzla provided a counter example after 88.320436ms, solving context: 0.000000ms
LeanSAT provided a counter example after 90.096579ms: rewriting 27.134906 SAT solving 62.296659ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:189:101: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ :
  (!((!y.getLsbD 7 == x.getLsbD 7) == (x >ᵤ y)) ==
        BitVec.carry w y (~~~x + 1#8) false ^^^ x.getMsbD (w - 1) ^^^ y.getMsbD (w - 1)) =
    true
⊢ False
Bitwuzla provided a counter example after 77.279392ms, solving context: 0.000000ms
LeanSAT provided a counter example after 78.224025ms: rewriting 15.263003 SAT solving 62.449817ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:194:57: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(y >ᵤ x) == !BitVec.carry w x (~~~y + 1#8) false) = true
⊢ False
Bitwuzla provided a counter example after 76.938148ms, solving context: 0.000000ms
LeanSAT provided a counter example after 79.383141ms: rewriting 16.328874 SAT solving 62.542301ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:199:55: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!(!x >ᵤ y) == BitVec.carry w y (~~~x + 1#8) false) = true
⊢ False
Bitwuzla provided a counter example after 81.182437ms, solving context: 0.000000ms
LeanSAT provided a counter example after 83.065542ms: rewriting 20.384427 SAT solving 62.199466ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:204:48: error: unsolved goals
case h
x : BitVec 8
w : ℕ
a✝ : (!(!(x == 0#8 && !BitVec.carry w (~~~x) (1#8) false) && !(BitVec.carry w (~~~x) (1#8) false && !x == 0#8))) = true
⊢ False
Bitwuzla provided a counter example after 82.317050ms, solving context: 0.000000ms
LeanSAT provided a counter example after 84.124880ms: rewriting 21.519038 SAT solving 62.112902ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:209:45: error: unsolved goals
case h
x : BitVec 8
w : ℕ
a✝ : (!(!(!x == 0#8 && !BitVec.carry w x (255#8) false) && !(BitVec.carry w x (255#8) false && x == 0#8))) = true
⊢ False
Bitwuzla provided a counter example after 78.698820ms, solving context: 0.000000ms
LeanSAT provided a counter example after 81.682211ms: rewriting 19.528982 SAT solving 61.663805ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:214:45: error: unsolved goals
case h
x : BitVec 8
w : ℕ
a✝ : (!(!x.getLsbD 7 == (0#8 >ᵤ x)) == BitVec.carry w x x false) = true
⊢ False
Bitwuzla provided a counter example after 103.740396ms, solving context: 1.000000ms
LeanSAT provided a counter example after 107.575050ms: rewriting 44.657512 SAT solving 62.470173ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:219:76: error: unsolved goals
case h
x : BitVec 8
w : ℕ
a✝ :
  (!(x.getLsbD 7 == !x == 0#8) == BitVec.carry w (2#8 ^ (w - 1)) (~~~(2#8 ^ (w - 1)) + 1#8 + (~~~x + 1#8)) false) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:226:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.002191] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (y >ᵤ ~~~x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (y >ᵤ ~~~x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:231:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.004643] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (x >ᵤ x + y) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x y ↔ (x >ᵤ x + y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:236:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.006580] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#8) ↔ (y ≥ᵤ ~~~x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#8) ↔ (!~~~x >ᵤ y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:241:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.007642] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#8) ↔ (x ≥ᵤ y + 1#8 + x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (y + 1#8) ↔ (!y + 1#8 + x >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:246:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.007033] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#8) ↔ (y >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#8) ↔ (y >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:251:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.015333] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#8) ↔ (x - y >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y + 1#8) ↔ (x + (~~~y + 1#8) >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:256:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.003342] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (y ≥ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (!x >ᵤ y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:261:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.017154] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true)
      ⊢ False
  [Meta.appBuilder] [0.002155] ✅️ f: Eq.mp, xs: [congrArg
         (fun x_1 => ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ x_1 = true))
         (Eq.trans
           (congrArg (fun x_1 => x + x_1 ≥ᵤ x)
             (Eq.trans
               (Eq.trans (congrArg (fun x => x - 1#8) (BitVec.neg_eq_not_add y)) (BitVec.sub_toAdd (~~~y + 1#8) 1#8))
               (Eq.trans (Std.Tactic.BVDecide.Normalize.BitVec.add_const_right' (~~~y) 1#8 255#8)
                 (BitVec.zero_add (~~~y)))))
           (BitVec.ule_eq_not_ult x (x + ~~~y))),
       a✝]
    [Meta.isDefEq] [0.002020] ✅️ ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
            (x + (-y - 1#8) ≥ᵤ x) =
              true) =?= ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true)
      [Meta.isDefEq] [0.002009] ✅️ ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
              (x + (-y - 1#8) ≥ᵤ x) =
                true) =?= ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true)
        [Meta.isDefEq.delta] [0.001993] ✅️ ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
                (x + (-y - 1#8) ≥ᵤ x) =
                  true) =?= ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true)
          [Meta.isDefEq] [0.001988] ✅️ HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔
                (x + (-y - 1#8) ≥ᵤ x) =
                  true =?= HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (x + (-y - 1#8) ≥ᵤ x) = true
            [Meta.isDefEq] [0.001972] ✅️ (x + (-y - 1#8) ≥ᵤ x) = true =?= (x + (-y - 1#8) ≥ᵤ x) = true
              [Meta.isDefEq] [0.001951] ✅️ x + (-y - 1#8) ≥ᵤ x =?= x + (-y - 1#8) ≥ᵤ x
                [Meta.isDefEq.delta] [0.001939] ✅️ x + (-y - 1#8) ≥ᵤ x =?= x + (-y - 1#8) ≥ᵤ x
                  [Meta.isDefEq] [0.001928] ✅️ x + (-y - 1#8) =?= x + (-y - 1#8)
                    [Meta.isDefEq] [0.001779] ✅️ instHAdd.1 x (-y - 1#8) =?= instHAdd.1 x (-y - 1#8)
                      [Meta.isDefEq] [0.001741] ✅️ Add.add x (-y - 1#8) =?= Add.add x (-y - 1#8)
                        [Meta.isDefEq] [0.001100] ✅️ Distrib.toAdd.1 x (-y - 1#8) =?= Distrib.toAdd.1 x (-y - 1#8)
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.AdditionNoOverflows? x (~~~y) ↔ (!x >ᵤ x + ~~~y) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:272:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.010217] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y ↔
            ¬HackersDelight.Ch2Basics.first32Bits (x * y) = 0#32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y ↔
            (!HackersDelight.Ch2Basics.first32Bits (x * y) == 0#32) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:277:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.010974] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y ↔
            ¬HackersDelight.Ch2Basics.first32Bits (x * y) = HackersDelight.Ch2Basics.last32Bits (x * y) >>> 31)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y ↔
            (!HackersDelight.Ch2Basics.first32Bits (x * y) == HackersDelight.Ch2Basics.last32Bits (x * y) >>> 31) =
              true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla provided a counter example after 74.763134ms, solving context: 1.000000ms
LeanSAT provided a counter example after 77.136643ms: rewriting 10.315786 SAT solving 63.022769ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:280:62: error: unsolved goals
case h
x y z : BitVec 8
h : y.toNat ≠ 0
a✝¹ : ¬UnsignedMultiplicationOverflows? x y
a✝ : (!x * y / z == x) = true
⊢ False
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:287:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.012197] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y z : BitVec 8
      h : y.toNat ≠ 0
      a✝¹ : y < 0 ∧ x.toInt = -2 ^ 31 ∨ x * y / z ≠ x
      a✝ : ¬HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y z : BitVec 8
      h : y.toNat ≠ 0
      a✝¹ : ¬HackersDelight.Ch2Basics.SignedMultiplicationOverflows? x y
      a✝ : (0#8 >ᵤ y) = true ∧ x.toInt = -2147483648 ∨ (!x * y / z == x) = true
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:299:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.003908] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(32 ≤ HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ↔
            ¬HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(32 ≤ HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ↔
            ¬HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:304:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.003890] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ≤ 30 ↔
            HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 64
      a✝ :
        ¬(HackersDelight.Ch2Basics.numberOfLeadingZeros x + HackersDelight.Ch2Basics.numberOfLeadingZeros y ≤ 30 ↔
            HackersDelight.Ch2Basics.UnsignedMultiplicationOverflows? x y)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:311:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.009613] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y : BitVec 8
      a✝ : ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x y ↔ y = 0#8 ∨ x.toInt = -2147483648 ∧ y = 255#8)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y : BitVec 8
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x y ↔
            (y == 0#8) = true ∨ x.toInt = -2147483648 ∧ (y == 255#8) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:316:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.012864] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.setWidth 64 y) ↔
            ¬y = 0#32 ∧ x < BitVec.setWidth 64 y <<< 32)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.zeroExtend 64 y) ↔
            (!y == 0#32 && BitVec.zeroExtend 64 y <<< 32 >ᵤ x) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:321:2: error: None of the hypotheses are in the supported BitVec fragment.
There are two potential fixes for this:
1. If you are using custom BitVec constructs simplify them to built-in ones.
2. If your problem is using only built-in ones it might currently be out of reach.
   Consider expressing it in terms of different operations that are better supported.
[bv] [0.012617] Normalizing goal
  [Meta.Tactic.bv] Running preprocessing pipeline on:
      case h
      x y✝ : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.setWidth 64 y) ↔
            ¬y = 0#32 ∧ x >>> 32 < BitVec.setWidth 64 y)
      ⊢ False
  [Meta.Tactic.bv] Rerunning pipeline on:
      case h
      x y✝ : BitVec 64
      y : BitVec 32
      a✝ :
        ¬(HackersDelight.Ch2Basics.SignedDivisionOverflows?? x (BitVec.zeroExtend 64 y) ↔
            (!y == 0#32 && BitVec.zeroExtend 64 y >ᵤ x >>> 32) = true)
      ⊢ False
  [Meta.Tactic.bv] Pipeline reached a fixpoint
Bitwuzla provided a counter example after 76.183745ms, solving context: 0.000000ms
LeanSAT provided a counter example after 77.141962ms: rewriting 14.215966 SAT solving 62.302610ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:342:60: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedMaxBitVec x y == y + signedDifferenceOrZero x y) = true
⊢ False
Bitwuzla provided a counter example after 82.020428ms, solving context: 0.000000ms
LeanSAT provided a counter example after 84.654869ms: rewriting 20.350061 SAT solving 63.558871ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:347:60: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedMinBitVec x y == x + (~~~signedDifferenceOrZero x y + 1#8)) = true
⊢ False
Bitwuzla provided a counter example after 76.414892ms, solving context: 0.000000ms
LeanSAT provided a counter example after 85.355513ms: rewriting 21.044903 SAT solving 63.684318ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:352:64: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedMaxBitVec x y == y + unsignedDifferenceOrZero x y) = true
⊢ False
Bitwuzla provided a counter example after 82.141517ms, solving context: 0.000000ms
LeanSAT provided a counter example after 84.464572ms: rewriting 20.324474 SAT solving 63.405080ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:357:64: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedMinBitVec x y == x + (~~~unsignedDifferenceOrZero x y + 1#8)) = true
⊢ False
Bitwuzla provided a counter example after 85.276313ms, solving context: 0.000000ms
LeanSAT provided a counter example after 89.013205ms: rewriting 24.918884 SAT solving 63.265126ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:365:61: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedDifferenceOrZero x y == x + (~~~y + 1#8) &&& leBitmask x y) = true
⊢ False
Bitwuzla provided a counter example after 75.904608ms, solving context: 0.000000ms
LeanSAT provided a counter example after 84.260740ms: rewriting 19.406762 SAT solving 64.138263ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:370:65: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedMaxBitVec x y == (x ^^^ y) &&& leBitmask x y ^^^ y) = true
⊢ False
Bitwuzla provided a counter example after 76.099866ms, solving context: 0.000000ms
LeanSAT provided a counter example after 84.548851ms: rewriting 19.893922 SAT solving 63.848789ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:375:65: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedMinBitVec x y == (x ^^^ y) &&& leBitmask y x ^^^ y) = true
⊢ False
Bitwuzla provided a counter example after 86.377430ms, solving context: 0.000000ms
LeanSAT provided a counter example after 89.338179ms: rewriting 24.679562 SAT solving 63.820375ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:383:73: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedDifferenceOrZero x y == x + (~~~y + 1#8) &&& ~~~carryBitmask x y) = true
⊢ False
Bitwuzla provided a counter example after 93.386580ms, solving context: 0.000000ms
LeanSAT provided a counter example after 96.506664ms: rewriting 31.222919 SAT solving 64.080634ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:388:66: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedMaxBitVec x y == x + (~~~(x + (~~~y + 1#8) &&& carryBitmask x y) + 1#8)) = true
⊢ False
Bitwuzla provided a counter example after 91.597522ms, solving context: 0.000000ms
LeanSAT provided a counter example after 95.010073ms: rewriting 30.080675 SAT solving 63.877532ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:393:66: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedMinBitVec x y == y + (~~~y + 1#8 + x &&& carryBitmask x y)) = true
⊢ False
Bitwuzla provided a counter example after 93.090459ms, solving context: 1.000000ms
LeanSAT provided a counter example after 95.995501ms: rewriting 30.164172 SAT solving 63.261711ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:401:87: error: unsolved goals
case h
x y d : BitVec 32
h : (d == x + (~~~y + 1#32)) = true
a✝ : (!signedDifferenceOrZero x y == d &&& (~~~d ^^^ ((x ^^^ y) &&& (d ^^^ x)) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 95.470610ms, solving context: 1.000000ms
LeanSAT provided a counter example after 99.901101ms: rewriting 33.320377 SAT solving 64.134186ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:406:97: error: unsolved goals
case h
x y d : BitVec 32
h : (d == x + (~~~y + 1#32)) = true
a✝ : (!unsignedDifferenceOrZero x y == d &&& ~~~((~~~x &&& y ||| ~~~(x ^^^ y) &&& d) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 88.325787ms, solving context: 1.000000ms
LeanSAT provided a counter example after 92.450059ms: rewriting 26.598022 SAT solving 63.813158ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:411:69: error: unsolved goals
case h
x y : BitVec 32
a✝ : (!signedDifferenceOrZero x y == x + (~~~y + 1#32) &&& ~~~((x + (~~~y + 1#32)) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 94.642318ms, solving context: 1.000000ms
LeanSAT provided a counter example after 102.408823ms: rewriting 35.361951 SAT solving 64.404187ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:416:64: error: unsolved goals
case h
x y : BitVec 32
a✝ : (!signedMaxBitVec x y == x + (~~~(x + (~~~y + 1#32) &&& (x + (~~~y + 1#32)) >>> 31) + 1#32)) = true
⊢ False
Bitwuzla provided a counter example after 93.218352ms, solving context: 1.000000ms
LeanSAT provided a counter example after 98.106656ms: rewriting 31.609020 SAT solving 64.236521ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:421:64: error: unsolved goals
case h
x y : BitVec 32
a✝ : (!signedMinBitVec x y == y + (~~~y + 1#32 + x &&& (~~~y + 1#32 + x) >>> 31)) = true
⊢ False
Bitwuzla provided a counter example after 99.682992ms, solving context: 1.000000ms
LeanSAT provided a counter example after 102.849987ms: rewriting 37.020401 SAT solving 64.197256ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:426:85: error: unsolved goals
case h
x y : BitVec 32
a✝ :
  (!(!(!(!y.getLsbD 31 == x.getLsbD 31) == (x >ᵤ y) &&
            (!(signedDifferenceOrZero x y).getLsbD 31 && !(~~~signedDifferenceOrZero x y + 1#32).getLsbD 31)) &&
        !(!(!(signedDifferenceOrZero x y).getLsbD 31 && !(~~~signedDifferenceOrZero x y + 1#32).getLsbD 31) &&
            (!y.getLsbD 31 == x.getLsbD 31) == (x >ᵤ y)))) =
    true
⊢ False
Bitwuzla provided a counter example after 89.529618ms, solving context: 1.000000ms
LeanSAT provided a counter example after 91.994251ms: rewriting 27.374237 SAT solving 63.040052ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:431:89: error: unsolved goals
case h
x y : BitVec 32
a✝ :
  (!(!((x >ᵤ y) &&
            (!(unsignedDifferenceOrZero x y).getLsbD 31 && !(~~~unsignedDifferenceOrZero x y + 1#32).getLsbD 31)) &&
        !(!(!(unsignedDifferenceOrZero x y).getLsbD 31 && !(~~~unsignedDifferenceOrZero x y + 1#32).getLsbD 31) &&
            !x >ᵤ y))) =
    true
⊢ False
Bitwuzla provided a counter example after 90.551198ms, solving context: 0.000000ms
LeanSAT provided a counter example after 93.058701ms: rewriting 27.967457 SAT solving 64.095174ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:436:116: error: unsolved goals
case h
x y : BitVec 32
w : ℕ
a✝ :
  (!(!(BitVec.carry w x y false &&
            (!(unsignedDifferenceOrZero x (~~~y)).getLsbD 31 &&
              !(~~~unsignedDifferenceOrZero x (~~~y) + 1#32).getLsbD 31)) &&
        !(!(!(unsignedDifferenceOrZero x (~~~y)).getLsbD 31 &&
                !(~~~unsignedDifferenceOrZero x (~~~y) + 1#32).getLsbD 31) &&
            !BitVec.carry w x y false))) =
    true
⊢ False
Bitwuzla provided a counter example after 100.897691ms, solving context: 1.000000ms
LeanSAT provided a counter example after 109.275772ms: rewriting 38.187653 SAT solving 64.458148ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:443:77: error: unsolved goals
case h
x y : BitVec 8
a✝ :
  (!(if (x + (~~~y + 1#8)).getLsbD 7 = true then ~~~(x + (~~~y + 1#8)) + 1#8 else x + (~~~y + 1#8)) ==
        signedDifferenceOrZero x y + signedDifferenceOrZero y x) =
    true
⊢ False
Bitwuzla provided a counter example after 101.469120ms, solving context: 1.000000ms
LeanSAT provided a counter example after 109.314108ms: rewriting 39.066141 SAT solving 63.509148ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:448:81: error: unsolved goals
case h
x y : BitVec 8
a✝ :
  (!(if (x + (~~~y + 1#8)).getLsbD 7 = true then ~~~(x + (~~~y + 1#8)) + 1#8 else x + (~~~y + 1#8)) ==
        unsignedDifferenceOrZero x y + unsignedDifferenceOrZero y x) =
    true
⊢ False
Bitwuzla provided a counter example after 73.948859ms, solving context: 0.000000ms
LeanSAT provided a counter example after 80.934948ms: rewriting 16.218646 SAT solving 64.106658ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:453:47: error: unsolved goals
case h
x y : BitVec 8
w : ℕ
a✝ : (!BitVec.carry w x y false == (x >ᵤ ~~~y)) = true
⊢ False
Bitwuzla provided a counter example after 74.418103ms, solving context: 0.000000ms
LeanSAT provided a counter example after 81.652726ms: rewriting 17.122121 SAT solving 64.048445ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:458:75: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!signedDifferenceOrZero (~~~x) (~~~y) == signedDifferenceOrZero x y) = true
⊢ False
Bitwuzla provided a counter example after 75.015430ms, solving context: 0.000000ms
LeanSAT provided a counter example after 81.262009ms: rewriting 16.418793 SAT solving 64.275242ms
SSA/Projects/InstCombine/HackersDelight/ch2_3LogicalArithmeticIneq.lean:463:79: error: unsolved goals
case h
x y : BitVec 8
a✝ : (!unsignedDifferenceOrZero (~~~x) (~~~y) == unsignedDifferenceOrZero x y) = true
⊢ False
