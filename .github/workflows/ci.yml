name: core library
on:
  push:
    branches:
      - "main"
  pull_request:
  merge_group:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: core library
    permissions:
      pull-requests: write
    # Exclude expensive self-hosted runner. Reserved for performance benchmarking.
    # https://docs.github.com/en/enterprise-cloud@latest/actions/writing-workflows/choosing-where-your-workflow-runs/choosing-the-runner-for-a-job#choosing-github-hosted-runners
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Install elan 🕑
        run: |
          set -o pipefail
          curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh -s -- --default-toolchain none -y
          ~/.elan/bin/lean --version
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - name: Cache `.lake` folder
        id: cache-lake
        uses: actions/cache@v4
        with:
          path: .lake
          key: ${{ runner.os }}-lake-${{ hashFiles('lake-manifest.json') }}-4

      - name: Get mathlib cache (only if no cache available)
        if: steps.cache-lake.outputs.cache-hit != 'true'
        continue-on-error: true
        run: |
          (lake -R exe cache get ; true) # download cache of mathlib docs.

      - name: Compile Library 🧐
        run: |
          lake -R build SSA --iofail

      - name: Test Core Library
        run: |
          lake -R build SSA.Tests.Tests

      - name: Test InstCombine (unit-tests)
        run: |
          lake -R build SSA.Projects.InstCombine.Tests.Tests

      - name: Compile Decide Experiment 🧐
        run: |
          lake -R build Blase.Fast.Decide

      - name: Compile Hacker's Delight Theorems 🧮
        run: |
          sed -i -E 's/WIDTH/16/' SSA/Projects/InstCombine/HackersDelight/ch2_1DeMorgan.lean
          sed -i -E 's/WIDTH/16/' SSA/Projects/InstCombine/HackersDelight/ch2_2AdditionAndLogicalOps.lean
          lake -R build SSA.Projects.InstCombine.HackersDelight.ch2_1DeMorgan # compile and check the Hacker's Delight theorems chapter 2-1
          lake -R build SSA.Projects.InstCombine.HackersDelight.ch2_2AdditionAndLogicalOps # compile and check the Hacker's Delight theorems chapter 2-2
          sed -i -E 's/16/WIDTH/' SSA/Projects/InstCombine/HackersDelight/ch2_1DeMorgan.lean
          sed -i -E 's/16/WIDTH/' SSA/Projects/InstCombine/HackersDelight/ch2_2AdditionAndLogicalOps.lean

      - name: Compile Alive Examples
        run: |
          lake -R build SSA.Projects.InstCombine.AliveAutoGenerated
          sed -i 's/set_option warn.sorry false/set_option warn.sorry true/' SSA/Projects/InstCombine/AliveStatements.lean
          lake -R build SSA.Projects.InstCombine.AliveStatements 2>&1 | tee out
          git checkout SSA/Projects/InstCombine/AliveStatements.lean
          echo `grep theorem SSA/Projects/InstCombine/AliveStatements.lean | wc -l` > all
          grep 'Alive.*sorry' out | wc -l > failed
          x=$((`cat all`  -  `cat failed`)); echo $x > diff
          echo "ALIVE_SUCCESS=$(cat diff)" >> $GITHUB_ENV
          echo "ALIVE_ALL=$(cat all)" >> $GITHUB_ENV
          echo "ALIVE_FAILED=$(cat failed)" >> $GITHUB_ENV

      - name: Compile Alive Examples (With UB)
        run: |
          lake -R build SSA.Projects.SLLVM.Evaluation.AliveAutoGeneratedCopy

      - name: Compile CIRCT Dialects (DC/Handshake)
        run: |
          lake -R build CIRCT

      - if: github.event_name == 'pull_request'
        run: |
          echo "Alive Statistics: ${{env.ALIVE_SUCCESS}} / ${{env.ALIVE_ALL}} (${{env.ALIVE_FAILED}} failed)"
          if  [ "${{env.ALIVE_SUCCESS}}" -ne "90" ] ||
              [ "${{env.ALIVE_ALL}}" -ne "93" ] ||
              [ "${{env.ALIVE_FAILED}}" -ne "3" ]; then
            echo "ERROR: Alive statistics do not match the expected values!"
            exit 1
          fi
