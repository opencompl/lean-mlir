name: Evaluation
on:
  push:
    branches:
      - "main"
  pull_request:

permissions:
  contents: write

jobs:
  eval-build:
    name: Build Lean-MLIR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Cache `.elan` folders
        id: cache-lean
        uses: actions/cache@v4
        with:
          path: |
            ~/.elan
          key: ${{ runner.os }}-elan-${{ hashFiles('lean-toolchain') }}
          restore-keys: |
            ${{ runner.os }}-elan-${{ hashFiles('lean-toolchain') }}

      - name: Install Elan & Lean
        if: steps.cache-lean.outputs.cache-hit != 'true'
        run: |
          set -o pipefail
          curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf | sh -s -- --default-toolchain none -y
          ~/.elan/bin/lean --version

      - name: Make lake available
        run: |
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - name: Cache `.lake` folders
        id: cache-lake
        uses: actions/cache@v4
        with:
          path: |
            .lake/packages
            .lake/build
            */.lake
          key: ${{ runner.os }}-lake-packages-${{ hashFiles('lake-manifest.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-lake-packages-${{ hashFiles('lake-manifest.json') }}-${{ github.sha }}
            ${{ runner.os }}-lake-packages-${{ hashFiles('lake-manifest.json') }}

      - name: Build Lean-MLIR & Mathlib
        # We build Mathlib from scratch as this reduces the build artifacts that are stored in the cache. Previous experiments
        # led to savings from avoiding a full Mathlib cache in the order of a couple hundred MBs.
        run: |
          lake -R build

  extract-goals:
    name: Extract goals
    runs-on: ubuntu-latest
    needs: eval-build
    strategy:
      matrix:
        extract_offset: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        extract_stride: [10]
    permissions:
      pull-requests: write
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Load Lean from Cache
        id: cache-lean
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.elan
          key: ${{ runner.os }}-elan-${{ hashFiles('lean-toolchain') }}

      - name: Load Lean-MLIR from Cache
        id: cache-lake
        uses: actions/cache/restore@v4
        with:
          path: |
            .lake/packages
            .lake/build
            */.lake
          key: ${{ runner.os }}-lake-packages-${{ hashFiles('lake-manifest.json') }}-${{ github.sha }}

      - name: Add Lean to PATH
        run: |
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - name: Build Lean-MLIR (should be all in cache)
        run: |
          lake -R build

      - name: Ensure InstCombine goals are up-to-date
        run: |
          bash SSA/Projects/InstCombine/scripts/test-extract-goals.sh --nfiles 9000 -j7  --stride ${{matrix.extract_stride}} --offset ${{matrix.extract_offset}}

  test-blase:
    name: Test Blase
    runs-on: ubuntu-latest
    needs: eval-build
    permissions:
      pull-requests: write
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Load Lean from Cache
        id: cache-lean
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.elan
          key: ${{ runner.os }}-elan-${{ hashFiles('lean-toolchain') }}

      - name: Load Lean-MLIR from Cache
        id: cache-lake
        uses: actions/cache/restore@v4
        with:
          path: |
            .lake/packages
            .lake/build
            */.lake
          key: ${{ runner.os }}-lake-packages-${{ hashFiles('lake-manifest.json') }}-${{ github.sha }}

      - name: Add Lean to PATH
        run: |
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - name: Build Lean-MLIR (should be all in cache)
        run: |
          lake -R build

      - name: Run Blase Test Suite
        run: |
          lake build BlaseTest

  evaluation-LLVM:
    name: Evaluate LLVM
    runs-on: ubuntu-latest
    needs: eval-build
    permissions:
      pull-requests: write
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Load Lean from Cache
        id: cache-lean
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.elan
          key: ${{ runner.os }}-elan-${{ hashFiles('lean-toolchain') }}

      - name: Load Lean-MLIR from Cache
        id: cache-lake
        uses: actions/cache/restore@v4
        with:
          path: |
            .lake/packages
            .lake/build
            */.lake
          key: ${{ runner.os }}-lake-packages-${{ hashFiles('lake-manifest.json') }}-${{ github.sha }}

      - name: Add Lean to PATH
        run: |
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - name: Build Lean-MLIR (should be all in cache)
        run: |
          lake -R build

      - name: Install Python Modules
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-matplotlib python3-pandas python3-num2words python3-psutil ripgrep

      - name: Run LLVM
        continue-on-error: true
        run: |
          cd bv-evaluation
          python3 ./compare.py instcombine -j48 \
            || (echo "LEANMLIR_STATUS=fail" >> $GITHUB_ENV; exit 1)

      - name: Collect data LLVM
        continue-on-error: true
        run: |
          cd bv-evaluation
          (python3 ./collect.py instcombine | tee llvm-stats) \
            || (echo "LEANMLIR_STATUS=fail" >> $GITHUB_ENV; exit 1)

      - uses: actions/github-script@v6
        if: env.LEANMLIR_STATUS != 'fail' && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fs.readFileSync('bv-evaluation/llvm-stats', 'utf8')
            })

      - name: Upload LLVM artifact
        uses: actions/upload-artifact@v4
        with:
          name: LLVM evaluation
          path: bv-evaluation/results

  test-tools-scaling-auto-generated-stmts:
    name: Test tools, scaling, and auto-generated statements
    runs-on: ubuntu-latest
    needs: eval-build
    permissions:
      pull-requests: write
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Load Lean from Cache
        id: cache-lean
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.elan
          key: ${{ runner.os }}-elan-${{ hashFiles('lean-toolchain') }}

      - name: Load Lean-MLIR from Cache
        id: cache-lake
        uses: actions/cache/restore@v4
        with:
          path: |
            .lake/packages
            .lake/build
            */.lake
          key: ${{ runner.os }}-lake-packages-${{ hashFiles('lake-manifest.json') }}-${{ github.sha }}

      - name: Add Lean to PATH
        run: |
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - name: Build Lean-MLIR (should be all in cache)
        run: |
          lake -R build

      - name: Compile `mlirnatural` Executable üßê
        run: |
          lake -R build mlirnatural

      - name: Compile `opt` Executable üßê
        run: |
          lake -R build opt

      - name: Compile `LLVMRiscV` Tests
        run: |
          lake -R build SSA.Projects.LLVMRiscV.Tests.Tests

#      This broke the build during a recent update
#      - name: LLVM opt round trip test
#        run: |
#          lake exec opt test/LLVMDialect/InstCombine/bb0.mlir

      - name: Compile ISL
        run: |
          lake -R build ISL

      - name: Compile Alive Scaling
        run: |
          lake -R build SSA.Projects.InstCombine.ScalingTest

      - name: Check for changes in AliveStatements
        # continue on error, because this is flaky due to parallelism?
        continue-on-error: true
        run: |
          lake build AliveExamples
          (cd SSA/Projects/InstCombine/; ./update_alive_statements.py)
          bash -c '! git diff | grep .'  # iff git diff is empty, 'grep .' fails, '!' inverts the failure, and in the forced bash

  test-core-library:
    name: Test Core Library
    runs-on: ubuntu-latest
    needs: eval-build
    permissions:
      pull-requests: write
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Load Lean from Cache
        id: cache-lean
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.elan
          key: ${{ runner.os }}-elan-${{ hashFiles('lean-toolchain') }}

      - name: Load Lean-MLIR from Cache
        id: cache-lake
        uses: actions/cache/restore@v4
        with:
          path: |
            .lake/packages
            .lake/build
            */.lake
          key: ${{ runner.os }}-lake-packages-${{ hashFiles('lake-manifest.json') }}-${{ github.sha }}

      - name: Add Lean to PATH
        run: |
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - name: Build Lean-MLIR (should be all in cache)
        run: |
          lake -R build

      - name: Test Core Library
        run: |
          lake -R build SSA.Tests.Tests

      - name: Test InstCombine (unit-tests)
        run: |
          lake -R build SSA.Projects.InstCombine.Tests.Tests

      - name: Compile Decide Experiment üßê
        run: |
          lake -R build Blase.Fast.Decide

      - name: Compile Hacker's Delight Theorems üßÆ
        run: |
          sed -i -E 's/WIDTH/16/' SSA/Projects/InstCombine/HackersDelight/ch2_1DeMorgan.lean
          sed -i -E 's/WIDTH/16/' SSA/Projects/InstCombine/HackersDelight/ch2_2AdditionAndLogicalOps.lean
          lake -R build SSA.Projects.InstCombine.HackersDelight.ch2_1DeMorgan # compile and check the Hacker's Delight theorems chapter 2-1
          lake -R build SSA.Projects.InstCombine.HackersDelight.ch2_2AdditionAndLogicalOps # compile and check the Hacker's Delight theorems chapter 2-2
          sed -i -E 's/16/WIDTH/' SSA/Projects/InstCombine/HackersDelight/ch2_1DeMorgan.lean
          sed -i -E 's/16/WIDTH/' SSA/Projects/InstCombine/HackersDelight/ch2_2AdditionAndLogicalOps.lean

      - name: Compile Alive Examples
        run: |
          lake -R build SSA.Projects.InstCombine.AliveAutoGenerated
          sed -i 's/set_option warn.sorry false/set_option warn.sorry true/' SSA/Projects/InstCombine/AliveStatements.lean
          lake -R build SSA.Projects.InstCombine.AliveStatements 2>&1 | tee out
          git checkout SSA/Projects/InstCombine/AliveStatements.lean
          echo `grep theorem SSA/Projects/InstCombine/AliveStatements.lean | wc -l` > all
          grep 'Alive.*sorry' out | wc -l > failed
          x=$((`cat all`  -  `cat failed`)); echo $x > diff
          echo "ALIVE_SUCCESS=$(cat diff)" >> $GITHUB_ENV
          echo "ALIVE_ALL=$(cat all)" >> $GITHUB_ENV
          echo "ALIVE_FAILED=$(cat failed)" >> $GITHUB_ENV

      - name: Compile Alive Examples (With UB)
        run: |
          lake -R build SSA.Projects.SLLVM.Evaluation.AliveAutoGeneratedCopy

      - name: Compile CIRCT Dialects (DC/Handshake)
        run: |
          lake -R build CIRCT

      - if: github.event_name == 'pull_request'
        run: |
          echo "Alive Statistics: ${{env.ALIVE_SUCCESS}} / ${{env.ALIVE_ALL}} (${{env.ALIVE_FAILED}} failed)"
          if  [ "${{env.ALIVE_SUCCESS}}" -ne "90" ] ||
              [ "${{env.ALIVE_ALL}}" -ne "93" ] ||
              [ "${{env.ALIVE_FAILED}}" -ne "3" ]; then
            echo "ERROR: Alive statistics do not match the expected values!"
            exit 1
          fi

  evaluation-alive-hdel:
    name: Evaluation Alive and Hacker's Delight
    runs-on: ubuntu-latest
    needs: eval-build
    permissions:
      pull-requests: write
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Load Lean from Cache
        id: cache-lean
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.elan
          key: ${{ runner.os }}-elan-${{ hashFiles('lean-toolchain') }}

      - name: Load Lean-MLIR from Cache
        id: cache-lake
        uses: actions/cache/restore@v4
        with:
          path: |
            .lake/packages
            .lake/build
            */.lake
          key: ${{ runner.os }}-lake-packages-${{ hashFiles('lake-manifest.json') }}-${{ github.sha }}

      - name: Add Lean to PATH
        run: |
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - name: Build Lean-MLIR (should be all in cache)
        run: |
          lake -R build

      - name: Install Python Modules
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-matplotlib python3-pandas python3-num2words python3-psutil ripgrep

      - name: Run Alive Symbolic
        run: |
          (cd bv-evaluation; python3 ./compare-leansat-vs-bitwuzla-alive-sym.py -j48)

      - name: Compare Alive All
        continue-on-error: true
        run: |
          (cd bv-evaluation; python3 ./collect-data-alive.py > /dev/null)

      - name: Run HDel Symbolic
        run: |
          (cd bv-evaluation; python3 ./compare-leansat-vs-bitwuzla-hdel-sym.py -j48)

      - name: Compare HDEl Symbolic
        continue-on-error: true
        run: |
          (cd bv-evaluation; python3 ./collect-data-hdel-symbolic.py > /dev/null)

      - name: Run HDel
        run: |
          (cd bv-evaluation; python3 ./compare.py hackersdelight -j48)

      - name: Collect data HDEl
        continue-on-error: true
        run: |
          (cd bv-evaluation; python3 ./collect.py hackersdelight > /dev/null)

      - name: Collect Stats
        continue-on-error: true
        run: |
          (cd bv-evaluation/tools; python3 ./collect-stats-bv-decide.py)
